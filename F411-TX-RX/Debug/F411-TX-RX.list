
F411-TX-RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006148  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b74  08006b74  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b7c  08006b7c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08006b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000048  08006bcc  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08006bcc  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a077  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b9  00000000  00000000  0003a0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab11  00000000  00000000  0003f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164db  00000000  00000000  0005a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009219f  00000000  00000000  0007098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00102b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080062c8 	.word	0x080062c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	080062c8 	.word	0x080062c8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004f0:	4b9f      	ldr	r3, [pc, #636]	; (8000770 <dwt_initialise+0x290>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80004f8:	4b9d      	ldr	r3, [pc, #628]	; (8000770 <dwt_initialise+0x290>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2200      	movs	r2, #0
 80004fe:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000500:	4b9b      	ldr	r3, [pc, #620]	; (8000770 <dwt_initialise+0x290>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2200      	movs	r2, #0
 8000506:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000508:	4b99      	ldr	r3, [pc, #612]	; (8000770 <dwt_initialise+0x290>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000510:	4b97      	ldr	r3, [pc, #604]	; (8000770 <dwt_initialise+0x290>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000518:	4b95      	ldr	r3, [pc, #596]	; (8000770 <dwt_initialise+0x290>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000520:	4b93      	ldr	r3, [pc, #588]	; (8000770 <dwt_initialise+0x290>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000528:	f000 f926 	bl	8000778 <dwt_readdevid>
 800052c:	4603      	mov	r3, r0
 800052e:	4a91      	ldr	r2, [pc, #580]	; (8000774 <dwt_initialise+0x294>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d002      	beq.n	800053a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	e115      	b.n	8000766 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f003 0302 	and.w	r3, r3, #2
 8000540:	2b00      	cmp	r3, #0
 8000542:	d101      	bne.n	8000548 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000544:	f000 fdee 	bl	8001124 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	2b00      	cmp	r3, #0
 8000550:	d004      	beq.n	800055c <dwt_initialise+0x7c>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fcad 	bl	8000ebc <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000562:	2204      	movs	r2, #4
 8000564:	2100      	movs	r1, #0
 8000566:	2024      	movs	r0, #36	; 0x24
 8000568:	f000 fbd6 	bl	8000d18 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	2b00      	cmp	r3, #0
 8000574:	d116      	bne.n	80005a4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000576:	2004      	movs	r0, #4
 8000578:	f000 fc24 	bl	8000dc4 <_dwt_otpread>
 800057c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d01f      	beq.n	80005c6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000586:	2202      	movs	r2, #2
 8000588:	2112      	movs	r1, #18
 800058a:	202d      	movs	r0, #45	; 0x2d
 800058c:	f000 fbc4 	bl	8000d18 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000590:	4b77      	ldr	r3, [pc, #476]	; (8000770 <dwt_initialise+0x290>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	8ada      	ldrh	r2, [r3, #22]
 8000596:	4b76      	ldr	r3, [pc, #472]	; (8000770 <dwt_initialise+0x290>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800059e:	b292      	uxth	r2, r2
 80005a0:	82da      	strh	r2, [r3, #22]
 80005a2:	e010      	b.n	80005c6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80005a4:	2130      	movs	r1, #48	; 0x30
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f000 fb5f 	bl	8000c6a <dwt_read32bitoffsetreg>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80005b2:	d008      	beq.n	80005c6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80005b4:	4b6e      	ldr	r3, [pc, #440]	; (8000770 <dwt_initialise+0x290>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	8ada      	ldrh	r2, [r3, #22]
 80005ba:	4b6d      	ldr	r3, [pc, #436]	; (8000770 <dwt_initialise+0x290>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005c2:	b292      	uxth	r2, r2
 80005c4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <dwt_initialise+0x104>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d011      	beq.n	80005fe <dwt_initialise+0x11e>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f003 0308 	and.w	r3, r3, #8
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00c      	beq.n	80005fe <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80005e4:	201e      	movs	r0, #30
 80005e6:	f000 fbed 	bl	8000dc4 <_dwt_otpread>
 80005ea:	4603      	mov	r3, r0
 80005ec:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005ee:	8afb      	ldrh	r3, [r7, #22]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b5e      	ldr	r3, [pc, #376]	; (8000770 <dwt_initialise+0x290>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	72da      	strb	r2, [r3, #11]
 80005fc:	e003      	b.n	8000606 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005fe:	4b5c      	ldr	r3, [pc, #368]	; (8000770 <dwt_initialise+0x290>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f003 0302 	and.w	r3, r3, #2
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10b      	bne.n	8000628 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8000610:	8afb      	ldrh	r3, [r7, #22]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800061a:	2310      	movs	r3, #16
 800061c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800061e:	8afb      	ldrh	r3, [r7, #22]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fda4 	bl	8001170 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	2b00      	cmp	r3, #0
 8000630:	d007      	beq.n	8000642 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8000632:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <dwt_initialise+0x290>)
 8000634:	681c      	ldr	r4, [r3, #0]
 8000636:	2006      	movs	r0, #6
 8000638:	f000 fbc4 	bl	8000dc4 <_dwt_otpread>
 800063c:	4603      	mov	r3, r0
 800063e:	6023      	str	r3, [r4, #0]
 8000640:	e003      	b.n	800064a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8000642:	4b4b      	ldr	r3, [pc, #300]	; (8000770 <dwt_initialise+0x290>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	2b00      	cmp	r3, #0
 8000652:	d007      	beq.n	8000664 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000654:	4b46      	ldr	r3, [pc, #280]	; (8000770 <dwt_initialise+0x290>)
 8000656:	681c      	ldr	r4, [r3, #0]
 8000658:	2007      	movs	r0, #7
 800065a:	f000 fbb3 	bl	8000dc4 <_dwt_otpread>
 800065e:	4603      	mov	r3, r0
 8000660:	6063      	str	r3, [r4, #4]
 8000662:	e003      	b.n	800066c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000664:	4b42      	ldr	r3, [pc, #264]	; (8000770 <dwt_initialise+0x290>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000676:	2008      	movs	r0, #8
 8000678:	f000 fba4 	bl	8000dc4 <_dwt_otpread>
 800067c:	4602      	mov	r2, r0
 800067e:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <dwt_initialise+0x290>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	721a      	strb	r2, [r3, #8]
 8000686:	e003      	b.n	8000690 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000688:	4b39      	ldr	r3, [pc, #228]	; (8000770 <dwt_initialise+0x290>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	2b00      	cmp	r3, #0
 8000698:	d008      	beq.n	80006ac <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800069a:	2009      	movs	r0, #9
 800069c:	f000 fb92 	bl	8000dc4 <_dwt_otpread>
 80006a0:	4602      	mov	r2, r0
 80006a2:	4b33      	ldr	r3, [pc, #204]	; (8000770 <dwt_initialise+0x290>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	725a      	strb	r2, [r3, #9]
 80006aa:	e003      	b.n	80006b4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80006ac:	4b30      	ldr	r3, [pc, #192]	; (8000770 <dwt_initialise+0x290>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d121      	bne.n	8000702 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00b      	beq.n	80006e0 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80006c8:	f000 fbc9 	bl	8000e5e <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <dwt_initialise+0x290>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	8ada      	ldrh	r2, [r3, #22]
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <dwt_initialise+0x290>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006da:	b292      	uxth	r2, r2
 80006dc:	82da      	strh	r2, [r3, #22]
 80006de:	e01e      	b.n	800071e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80006e0:	2105      	movs	r1, #5
 80006e2:	2036      	movs	r0, #54	; 0x36
 80006e4:	f000 fae8 	bl	8000cb8 <dwt_read16bitoffsetreg>
 80006e8:	4603      	mov	r3, r0
 80006ea:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006f2:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80006f4:	89fb      	ldrh	r3, [r7, #14]
 80006f6:	461a      	mov	r2, r3
 80006f8:	2105      	movs	r1, #5
 80006fa:	2036      	movs	r0, #54	; 0x36
 80006fc:	f000 fb1f 	bl	8000d3e <dwt_write16bitoffsetreg>
 8000700:	e00d      	b.n	800071e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	2b00      	cmp	r3, #0
 800070a:	d108      	bne.n	800071e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <dwt_initialise+0x290>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	8ada      	ldrh	r2, [r3, #22]
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <dwt_initialise+0x290>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800071a:	b292      	uxth	r2, r2
 800071c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800071e:	2001      	movs	r0, #1
 8000720:	f000 fbcc 	bl	8000ebc <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000724:	2200      	movs	r2, #0
 8000726:	210a      	movs	r1, #10
 8000728:	202c      	movs	r0, #44	; 0x2c
 800072a:	f000 faf5 	bl	8000d18 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <dwt_initialise+0x290>)
 8000730:	681c      	ldr	r4, [r3, #0]
 8000732:	2100      	movs	r1, #0
 8000734:	2004      	movs	r0, #4
 8000736:	f000 fa98 	bl	8000c6a <dwt_read32bitoffsetreg>
 800073a:	4603      	mov	r3, r0
 800073c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <dwt_initialise+0x290>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	691b      	ldr	r3, [r3, #16]
 8000744:	0c1b      	lsrs	r3, r3, #16
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <dwt_initialise+0x290>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f002 0203 	and.w	r2, r2, #3
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <dwt_initialise+0x290>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	2100      	movs	r1, #0
 800075a:	2008      	movs	r0, #8
 800075c:	f000 fa85 	bl	8000c6a <dwt_read32bitoffsetreg>
 8000760:	4603      	mov	r3, r0
 8000762:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000764:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000766:	4618      	mov	r0, r3
 8000768:	371c      	adds	r7, #28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	20000000 	.word	0x20000000
 8000774:	deca0130 	.word	0xdeca0130

08000778 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f000 fa73 	bl	8000c6a <dwt_read32bitoffsetreg>
 8000784:	4603      	mov	r3, r0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4ba1      	ldr	r3, [pc, #644]	; (8000a30 <dwt_configure+0x2a4>)
 80007aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ae:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80007b8:	7cfb      	ldrb	r3, [r7, #19]
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d002      	beq.n	80007c4 <dwt_configure+0x38>
 80007be:	7cfb      	ldrb	r3, [r7, #19]
 80007c0:	2b07      	cmp	r3, #7
 80007c2:	d101      	bne.n	80007c8 <dwt_configure+0x3c>
 80007c4:	2301      	movs	r3, #1
 80007c6:	e000      	b.n	80007ca <dwt_configure+0x3e>
 80007c8:	2300      	movs	r3, #0
 80007ca:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	79db      	ldrb	r3, [r3, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10b      	bne.n	80007ec <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80007d4:	4b97      	ldr	r3, [pc, #604]	; (8000a34 <dwt_configure+0x2a8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	691a      	ldr	r2, [r3, #16]
 80007da:	4b96      	ldr	r3, [pc, #600]	; (8000a34 <dwt_configure+0x2a8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007e2:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80007e4:	8abb      	ldrh	r3, [r7, #20]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	82bb      	strh	r3, [r7, #20]
 80007ea:	e007      	b.n	80007fc <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007ec:	4b91      	ldr	r3, [pc, #580]	; (8000a34 <dwt_configure+0x2a8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	4b90      	ldr	r3, [pc, #576]	; (8000a34 <dwt_configure+0x2a8>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007fa:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007fc:	4b8d      	ldr	r3, [pc, #564]	; (8000a34 <dwt_configure+0x2a8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7a12      	ldrb	r2, [r2, #8]
 8000804:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000806:	4b8b      	ldr	r3, [pc, #556]	; (8000a34 <dwt_configure+0x2a8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	691a      	ldr	r2, [r3, #16]
 800080c:	4b89      	ldr	r3, [pc, #548]	; (8000a34 <dwt_configure+0x2a8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000814:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000816:	4b87      	ldr	r3, [pc, #540]	; (8000a34 <dwt_configure+0x2a8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6919      	ldr	r1, [r3, #16]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a1b      	ldrb	r3, [r3, #8]
 8000820:	041b      	lsls	r3, r3, #16
 8000822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000826:	4b83      	ldr	r3, [pc, #524]	; (8000a34 <dwt_configure+0x2a8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	430a      	orrs	r2, r1
 800082c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800082e:	4b81      	ldr	r3, [pc, #516]	; (8000a34 <dwt_configure+0x2a8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	461a      	mov	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	2004      	movs	r0, #4
 800083a:	f000 fa9c 	bl	8000d76 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800083e:	8abb      	ldrh	r3, [r7, #20]
 8000840:	461a      	mov	r2, r3
 8000842:	f642 0104 	movw	r1, #10244	; 0x2804
 8000846:	202e      	movs	r0, #46	; 0x2e
 8000848:	f000 fa79 	bl	8000d3e <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800084c:	7cbb      	ldrb	r3, [r7, #18]
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fae5 	bl	8000e1e <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	4a78      	ldr	r2, [pc, #480]	; (8000a38 <dwt_configure+0x2ac>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	461a      	mov	r2, r3
 800085c:	4b77      	ldr	r3, [pc, #476]	; (8000a3c <dwt_configure+0x2b0>)
 800085e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000862:	461a      	mov	r2, r3
 8000864:	2107      	movs	r1, #7
 8000866:	202b      	movs	r0, #43	; 0x2b
 8000868:	f000 fa85 	bl	8000d76 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	4a72      	ldr	r2, [pc, #456]	; (8000a38 <dwt_configure+0x2ac>)
 8000870:	5cd3      	ldrb	r3, [r2, r3]
 8000872:	461a      	mov	r2, r3
 8000874:	4b72      	ldr	r3, [pc, #456]	; (8000a40 <dwt_configure+0x2b4>)
 8000876:	5c9b      	ldrb	r3, [r3, r2]
 8000878:	461a      	mov	r2, r3
 800087a:	210b      	movs	r1, #11
 800087c:	202b      	movs	r0, #43	; 0x2b
 800087e:	f000 fa4b 	bl	8000d18 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000882:	7c7b      	ldrb	r3, [r7, #17]
 8000884:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <dwt_configure+0x2b8>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	461a      	mov	r2, r3
 800088a:	210b      	movs	r1, #11
 800088c:	2028      	movs	r0, #40	; 0x28
 800088e:	f000 fa43 	bl	8000d18 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000892:	7cfb      	ldrb	r3, [r7, #19]
 8000894:	4a68      	ldr	r2, [pc, #416]	; (8000a38 <dwt_configure+0x2ac>)
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	461a      	mov	r2, r3
 800089a:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <dwt_configure+0x2bc>)
 800089c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a0:	461a      	mov	r2, r3
 80008a2:	210c      	movs	r1, #12
 80008a4:	2028      	movs	r0, #40	; 0x28
 80008a6:	f000 fa66 	bl	8000d76 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	79db      	ldrb	r3, [r3, #7]
 80008ae:	4618      	mov	r0, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	799b      	ldrb	r3, [r3, #6]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4a65      	ldr	r2, [pc, #404]	; (8000a4c <dwt_configure+0x2c0>)
 80008b8:	0043      	lsls	r3, r0, #1
 80008ba:	440b      	add	r3, r1
 80008bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c0:	461a      	mov	r2, r3
 80008c2:	2102      	movs	r1, #2
 80008c4:	2027      	movs	r0, #39	; 0x27
 80008c6:	f000 fa3a 	bl	8000d3e <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80008ca:	7cbb      	ldrb	r3, [r7, #18]
 80008cc:	4a60      	ldr	r2, [pc, #384]	; (8000a50 <dwt_configure+0x2c4>)
 80008ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d2:	461a      	mov	r2, r3
 80008d4:	2104      	movs	r1, #4
 80008d6:	2027      	movs	r0, #39	; 0x27
 80008d8:	f000 fa31 	bl	8000d3e <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	79db      	ldrb	r3, [r3, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d105      	bne.n	80008f0 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80008e4:	2264      	movs	r2, #100	; 0x64
 80008e6:	2106      	movs	r1, #6
 80008e8:	2027      	movs	r0, #39	; 0x27
 80008ea:	f000 fa28 	bl	8000d3e <dwt_write16bitoffsetreg>
 80008ee:	e018      	b.n	8000922 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d10a      	bne.n	800090e <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80008f8:	2210      	movs	r2, #16
 80008fa:	2106      	movs	r1, #6
 80008fc:	2027      	movs	r0, #39	; 0x27
 80008fe:	f000 fa1e 	bl	8000d3e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000902:	2210      	movs	r2, #16
 8000904:	2126      	movs	r1, #38	; 0x26
 8000906:	2027      	movs	r0, #39	; 0x27
 8000908:	f000 fa06 	bl	8000d18 <dwt_write8bitoffsetreg>
 800090c:	e009      	b.n	8000922 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800090e:	2220      	movs	r2, #32
 8000910:	2106      	movs	r1, #6
 8000912:	2027      	movs	r0, #39	; 0x27
 8000914:	f000 fa13 	bl	8000d3e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000918:	2228      	movs	r2, #40	; 0x28
 800091a:	2126      	movs	r1, #38	; 0x26
 800091c:	2027      	movs	r0, #39	; 0x27
 800091e:	f000 f9fb 	bl	8000d18 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000922:	7cbb      	ldrb	r3, [r7, #18]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	78d2      	ldrb	r2, [r2, #3]
 8000928:	4611      	mov	r1, r2
 800092a:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <dwt_configure+0x2c8>)
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	461a      	mov	r2, r3
 8000936:	2108      	movs	r1, #8
 8000938:	2027      	movs	r0, #39	; 0x27
 800093a:	f000 fa1c 	bl	8000d76 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	895b      	ldrh	r3, [r3, #10]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d103      	bne.n	800094e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f241 0241 	movw	r2, #4161	; 0x1041
 800094c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	895b      	ldrh	r3, [r3, #10]
 8000952:	461a      	mov	r2, r3
 8000954:	2120      	movs	r1, #32
 8000956:	2027      	movs	r0, #39	; 0x27
 8000958:	f000 f9f1 	bl	8000d3e <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <dwt_configure+0x2cc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	210c      	movs	r1, #12
 8000964:	2023      	movs	r0, #35	; 0x23
 8000966:	f000 fa06 	bl	8000d76 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800096a:	7cbb      	ldrb	r3, [r7, #18]
 800096c:	4a3a      	ldr	r2, [pc, #232]	; (8000a58 <dwt_configure+0x2cc>)
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	461a      	mov	r2, r3
 8000976:	2104      	movs	r1, #4
 8000978:	2023      	movs	r0, #35	; 0x23
 800097a:	f000 f9e0 	bl	8000d3e <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	799b      	ldrb	r3, [r3, #6]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00d      	beq.n	80009a2 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	79db      	ldrb	r3, [r3, #7]
 800098a:	461a      	mov	r2, r3
 800098c:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <dwt_configure+0x2d0>)
 800098e:	5c9b      	ldrb	r3, [r3, r2]
 8000990:	461a      	mov	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	2021      	movs	r0, #33	; 0x21
 8000996:	f000 f9bf 	bl	8000d18 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800099a:	2303      	movs	r3, #3
 800099c:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 800099e:	2301      	movs	r3, #1
 80009a0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009a8:	7cfb      	ldrb	r3, [r7, #19]
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009ae:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	049b      	lsls	r3, r3, #18
 80009b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009ba:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	051b      	lsls	r3, r3, #20
 80009c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009c4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009c6:	7dbb      	ldrb	r3, [r7, #22]
 80009c8:	045b      	lsls	r3, r3, #17
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009ce:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	059b      	lsls	r3, r3, #22
 80009d6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009da:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	2100      	movs	r1, #0
 80009ea:	201f      	movs	r0, #31
 80009ec:	f000 f9c3 	bl	8000d76 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	789a      	ldrb	r2, [r3, #2]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	0419      	lsls	r1, r3, #16
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	79db      	ldrb	r3, [r3, #7]
 8000a02:	035a      	lsls	r2, r3, #13
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <dwt_configure+0x2a8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <dwt_configure+0x2a8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	461a      	mov	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	2008      	movs	r0, #8
 8000a18:	f000 f9ad 	bl	8000d76 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000a1c:	2242      	movs	r2, #66	; 0x42
 8000a1e:	2100      	movs	r1, #0
 8000a20:	200d      	movs	r0, #13
 8000a22:	f000 f979 	bl	8000d18 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	080063bc 	.word	0x080063bc
 8000a34:	20000000 	.word	0x20000000
 8000a38:	0800633c 	.word	0x0800633c
 8000a3c:	0800635c 	.word	0x0800635c
 8000a40:	08006374 	.word	0x08006374
 8000a44:	0800637c 	.word	0x0800637c
 8000a48:	08006344 	.word	0x08006344
 8000a4c:	0800638c 	.word	0x0800638c
 8000a50:	08006398 	.word	0x08006398
 8000a54:	0800639c 	.word	0x0800639c
 8000a58:	08006380 	.word	0x08006380
 8000a5c:	08006388 	.word	0x08006388

08000a60 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a70:	88ba      	ldrh	r2, [r7, #4]
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	4413      	add	r3, r2
 8000a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a7a:	dc09      	bgt.n	8000a90 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	3b02      	subs	r3, #2
 8000a80:	461a      	mov	r2, r3
 8000a82:	88b9      	ldrh	r1, [r7, #4]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2009      	movs	r0, #9
 8000a88:	f000 f83a 	bl	8000b00 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e001      	b.n	8000a94 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	603a      	str	r2, [r7, #0]
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <dwt_writetxfctrl+0x3c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	059b      	lsls	r3, r3, #22
 8000aba:	431a      	orrs	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	03db      	lsls	r3, r3, #15
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2008      	movs	r0, #8
 8000aca:	f000 f954 	bl	8000d76 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000000 	.word	0x20000000

08000adc <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000aec:	887a      	ldrh	r2, [r7, #2]
 8000aee:	8839      	ldrh	r1, [r7, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2011      	movs	r0, #17
 8000af4:	f000 f860 	bl	8000bb8 <dwt_readfromdevice>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60ba      	str	r2, [r7, #8]
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	81fb      	strh	r3, [r7, #14]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10d      	bne.n	8000b38 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	1c59      	adds	r1, r3, #1
 8000b24:	6179      	str	r1, [r7, #20]
 8000b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	f107 0118 	add.w	r1, r7, #24
 8000b30:	440b      	add	r3, r1
 8000b32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b36:	e033      	b.n	8000ba0 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b38:	89fb      	ldrh	r3, [r7, #14]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	1c59      	adds	r1, r3, #1
 8000b40:	6179      	str	r1, [r7, #20]
 8000b42:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	f107 0118 	add.w	r1, r7, #24
 8000b4c:	440b      	add	r3, r1
 8000b4e:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b52:	89bb      	ldrh	r3, [r7, #12]
 8000b54:	2b7f      	cmp	r3, #127	; 0x7f
 8000b56:	d80a      	bhi.n	8000b6e <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	617a      	str	r2, [r7, #20]
 8000b5e:	89ba      	ldrh	r2, [r7, #12]
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	f107 0118 	add.w	r1, r7, #24
 8000b66:	440b      	add	r3, r1
 8000b68:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b6c:	e018      	b.n	8000ba0 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	1c59      	adds	r1, r3, #1
 8000b76:	6179      	str	r1, [r7, #20]
 8000b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	f107 0118 	add.w	r1, r7, #24
 8000b82:	440b      	add	r3, r1
 8000b84:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000b88:	89bb      	ldrh	r3, [r7, #12]
 8000b8a:	09db      	lsrs	r3, r3, #7
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	617a      	str	r2, [r7, #20]
 8000b94:	b2ca      	uxtb	r2, r1
 8000b96:	f107 0118 	add.w	r1, r7, #24
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	f107 0110 	add.w	r1, r7, #16
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f000 fb22 	bl	80011f4 <writetospi>
} // end dwt_writetodevice()
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60ba      	str	r2, [r7, #8]
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	81fb      	strh	r3, [r7, #14]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10a      	bne.n	8000bea <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	617a      	str	r2, [r7, #20]
 8000bda:	89fa      	ldrh	r2, [r7, #14]
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	f107 0118 	add.w	r1, r7, #24
 8000be2:	440b      	add	r3, r1
 8000be4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000be8:	e033      	b.n	8000c52 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	1c59      	adds	r1, r3, #1
 8000bf2:	6179      	str	r1, [r7, #20]
 8000bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	f107 0118 	add.w	r1, r7, #24
 8000bfe:	440b      	add	r3, r1
 8000c00:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c04:	89bb      	ldrh	r3, [r7, #12]
 8000c06:	2b7f      	cmp	r3, #127	; 0x7f
 8000c08:	d80a      	bhi.n	8000c20 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	617a      	str	r2, [r7, #20]
 8000c10:	89ba      	ldrh	r2, [r7, #12]
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	f107 0118 	add.w	r1, r7, #24
 8000c18:	440b      	add	r3, r1
 8000c1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c1e:	e018      	b.n	8000c52 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c20:	89bb      	ldrh	r3, [r7, #12]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	1c59      	adds	r1, r3, #1
 8000c28:	6179      	str	r1, [r7, #20]
 8000c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	f107 0118 	add.w	r1, r7, #24
 8000c34:	440b      	add	r3, r1
 8000c36:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	09db      	lsrs	r3, r3, #7
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	617a      	str	r2, [r7, #20]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	f107 0118 	add.w	r1, r7, #24
 8000c4c:	440b      	add	r3, r1
 8000c4e:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	b298      	uxth	r0, r3
 8000c56:	f107 0110 	add.w	r1, r7, #16
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	f000 fafd 	bl	800125c <readfromspi>
} // end dwt_readfromdevice()
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	b298      	uxth	r0, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b299      	uxth	r1, r3
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2204      	movs	r2, #4
 8000c86:	f7ff ff97 	bl	8000bb8 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	e00b      	b.n	8000ca8 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	f107 010c 	add.w	r1, r7, #12
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	440a      	add	r2, r1
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	daf0      	bge.n	8000c90 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000cae:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	b298      	uxth	r0, r3
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b299      	uxth	r1, r3
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	f7ff ff70 	bl	8000bb8 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000cd8:	7b7b      	ldrb	r3, [r7, #13]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	7b3b      	ldrb	r3, [r7, #12]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000ce8:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f107 030f 	add.w	r3, r7, #15
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f7ff ff55 	bl	8000bb8 <dwt_readfromdevice>

    return regval ;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	4613      	mov	r3, r2
 8000d24:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	2201      	movs	r2, #1
 8000d32:	f7ff fee5 	bl	8000b00 <dwt_writetodevice>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	b299      	uxth	r1, r3
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2202      	movs	r2, #2
 8000d6a:	f7ff fec9 	bl	8000b00 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e00d      	b.n	8000da4 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	b2d9      	uxtb	r1, r3
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	4413      	add	r3, r2
 8000d94:	460a      	mov	r2, r1
 8000d96:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	ddee      	ble.n	8000d88 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	b298      	uxth	r0, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	b299      	uxth	r1, r3
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	2204      	movs	r2, #4
 8000db8:	f7ff fea2 	bl	8000b00 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	202d      	movs	r0, #45	; 0x2d
 8000dd6:	f7ff ffb2 	bl	8000d3e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000dda:	2203      	movs	r2, #3
 8000ddc:	2106      	movs	r1, #6
 8000dde:	202d      	movs	r0, #45	; 0x2d
 8000de0:	f7ff ff9a 	bl	8000d18 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000de4:	2200      	movs	r2, #0
 8000de6:	2106      	movs	r1, #6
 8000de8:	202d      	movs	r0, #45	; 0x2d
 8000dea:	f7ff ff95 	bl	8000d18 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000dee:	210a      	movs	r1, #10
 8000df0:	202d      	movs	r0, #45	; 0x2d
 8000df2:	f7ff ff3a 	bl	8000c6a <dwt_read32bitoffsetreg>
 8000df6:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000df8:	68fb      	ldr	r3, [r7, #12]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e06:	2200      	movs	r2, #0
 8000e08:	2102      	movs	r1, #2
 8000e0a:	202c      	movs	r0, #44	; 0x2c
 8000e0c:	f7ff ff84 	bl	8000d18 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e10:	2202      	movs	r2, #2
 8000e12:	2102      	movs	r1, #2
 8000e14:	202c      	movs	r0, #44	; 0x2c
 8000e16:	f7ff ff7f 	bl	8000d18 <dwt_write8bitoffsetreg>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e26:	226d      	movs	r2, #109	; 0x6d
 8000e28:	f640 0106 	movw	r1, #2054	; 0x806
 8000e2c:	202e      	movs	r0, #46	; 0x2e
 8000e2e:	f7ff ff73 	bl	8000d18 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e38:	f240 6207 	movw	r2, #1543	; 0x607
 8000e3c:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e40:	202e      	movs	r0, #46	; 0x2e
 8000e42:	f7ff ff7c 	bl	8000d3e <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000e46:	e006      	b.n	8000e56 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000e48:	f241 6207 	movw	r2, #5639	; 0x1607
 8000e4c:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e50:	202e      	movs	r0, #46	; 0x2e
 8000e52:	f7ff ff74 	bl	8000d3e <dwt_write16bitoffsetreg>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000e62:	200e      	movs	r0, #14
 8000e64:	f000 f82a 	bl	8000ebc <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000e68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e6c:	2106      	movs	r1, #6
 8000e6e:	202d      	movs	r0, #45	; 0x2d
 8000e70:	f7ff ff65 	bl	8000d3e <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 f9b1 	bl	80011dc <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 f81e 	bl	8000ebc <_dwt_enableclocks>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	201a      	movs	r0, #26
 8000e90:	f7ff feeb 	bl	8000c6a <dwt_read32bitoffsetreg>
 8000e94:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	0d1b      	lsrs	r3, r3, #20
 8000e9a:	051b      	lsls	r3, r3, #20
 8000e9c:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	2100      	movs	r1, #0
 8000eae:	201a      	movs	r0, #26
 8000eb0:	f7ff ff61 	bl	8000d76 <dwt_write32bitoffsetreg>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2202      	movs	r2, #2
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2036      	movs	r0, #54	; 0x36
 8000ece:	f7ff fe73 	bl	8000bb8 <dwt_readfromdevice>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0e      	cmp	r3, #14
 8000ed6:	d876      	bhi.n	8000fc6 <_dwt_enableclocks+0x10a>
 8000ed8:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <_dwt_enableclocks+0x24>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000f2d 	.word	0x08000f2d
 8000ee4:	08000f1d 	.word	0x08000f1d
 8000ee8:	08000f43 	.word	0x08000f43
 8000eec:	08000fc7 	.word	0x08000fc7
 8000ef0:	08000fc7 	.word	0x08000fc7
 8000ef4:	08000fc7 	.word	0x08000fc7
 8000ef8:	08000fc7 	.word	0x08000fc7
 8000efc:	08000f59 	.word	0x08000f59
 8000f00:	08000f79 	.word	0x08000f79
 8000f04:	08000fc7 	.word	0x08000fc7
 8000f08:	08000fc7 	.word	0x08000fc7
 8000f0c:	08000f8f 	.word	0x08000f8f
 8000f10:	08000f9b 	.word	0x08000f9b
 8000f14:	08000fa7 	.word	0x08000fa7
 8000f18:	08000fbd 	.word	0x08000fbd
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f20:	7b7b      	ldrb	r3, [r7, #13]
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f2a:	e04d      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f2c:	7b3b      	ldrb	r3, [r7, #12]
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	f023 0303 	bic.w	r3, r3, #3
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f40:	e042      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000f42:	7b3b      	ldrb	r3, [r7, #12]
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f56:	e037      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000f58:	7b3b      	ldrb	r3, [r7, #12]
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f76:	e027      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f8c:	e01c      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f98:	e016      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	f023 0302 	bic.w	r3, r3, #2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fa4:	e010      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000fa6:	7b3b      	ldrb	r3, [r7, #12]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fba:	e005      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fc4:	e000      	b.n	8000fc8 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000fc6:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2036      	movs	r0, #54	; 0x36
 8000fd2:	f7ff fd95 	bl	8000b00 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3301      	adds	r3, #1
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2036      	movs	r0, #54	; 0x36
 8000fe2:	f7ff fd8d 	bl	8000b00 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop

08000ff0 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff ff61 	bl	8000ebc <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	2036      	movs	r0, #54	; 0x36
 8001000:	f7ff fe9d 	bl	8000d3e <dwt_write16bitoffsetreg>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001016:	2300      	movs	r3, #0
 8001018:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 800101a:	2300      	movs	r3, #0
 800101c:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <dwt_starttx+0x98>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d020      	beq.n	8001080 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	f043 0306 	orr.w	r3, r3, #6
 8001044:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	461a      	mov	r2, r3
 800104a:	2100      	movs	r1, #0
 800104c:	200d      	movs	r0, #13
 800104e:	f7ff fe63 	bl	8000d18 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001052:	2103      	movs	r1, #3
 8001054:	200f      	movs	r0, #15
 8001056:	f7ff fe2f 	bl	8000cb8 <dwt_read16bitoffsetreg>
 800105a:	4603      	mov	r3, r0
 800105c:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800105e:	893b      	ldrh	r3, [r7, #8]
 8001060:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e012      	b.n	8001094 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	2100      	movs	r1, #0
 8001072:	200d      	movs	r0, #13
 8001074:	f7ff fe50 	bl	8000d18 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e009      	b.n	8001094 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	461a      	mov	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	200d      	movs	r0, #13
 8001090:	f7ff fe42 	bl	8000d18 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001094:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 80010ae:	2103      	movs	r1, #3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fe1e 	bl	8000cf2 <dwt_read8bitoffsetreg>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d018      	beq.n	80010f2 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	461a      	mov	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	200c      	movs	r0, #12
 80010c8:	f7ff fe39 	bl	8000d3e <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <dwt_setrxtimeout+0x7c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <dwt_setrxtimeout+0x7c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e2:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	461a      	mov	r2, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	2004      	movs	r0, #4
 80010ec:	f7ff fe14 	bl	8000d18 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80010f0:	e011      	b.n	8001116 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f023 0310 	bic.w	r3, r3, #16
 80010f8:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <dwt_setrxtimeout+0x7c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <dwt_setrxtimeout+0x7c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001108:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	461a      	mov	r2, r3
 800110e:	2103      	movs	r1, #3
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fe01 	bl	8000d18 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001128:	f7ff ff62 	bl	8000ff0 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	202c      	movs	r0, #44	; 0x2c
 8001132:	f7ff fe04 	bl	8000d3e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001136:	2200      	movs	r2, #0
 8001138:	2106      	movs	r1, #6
 800113a:	202c      	movs	r0, #44	; 0x2c
 800113c:	f7ff fdec 	bl	8000d18 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001140:	f7ff fe5f 	bl	8000e02 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001144:	2200      	movs	r2, #0
 8001146:	2103      	movs	r1, #3
 8001148:	2036      	movs	r0, #54	; 0x36
 800114a:	f7ff fde5 	bl	8000d18 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 f844 	bl	80011dc <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001154:	22f0      	movs	r2, #240	; 0xf0
 8001156:	2103      	movs	r1, #3
 8001158:	2036      	movs	r0, #54	; 0x36
 800115a:	f7ff fddd 	bl	8000d18 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800115e:	4b03      	ldr	r3, [pc, #12]	; (800116c <dwt_softreset+0x48>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	755a      	strb	r2, [r3, #21]
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	b25b      	sxtb	r3, r3
 8001184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001188:	b25b      	sxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	461a      	mov	r2, r3
 8001190:	210e      	movs	r1, #14
 8001192:	202b      	movs	r0, #43	; 0x2b
 8001194:	f7ff fdc0 	bl	8000d18 <dwt_write8bitoffsetreg>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80011a6:	f000 f991 	bl	80014cc <port_GetEXT_IRQStatus>
 80011aa:	4603      	mov	r3, r0
 80011ac:	607b      	str	r3, [r7, #4]

	if(s) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80011b4:	f000 f97c 	bl	80014b0 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80011d0:	f000 f975 	bl	80014be <port_EnableEXT_IRQ>
	}
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f8c5 	bl	8001374 <Sleep>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80011f4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80011f8:	4683      	mov	fp, r0
 80011fa:	468a      	mov	sl, r1
 80011fc:	4691      	mov	r9, r2
 80011fe:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001200:	f7ff ffce 	bl	80011a0 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001204:	4d13      	ldr	r5, [pc, #76]	; (8001254 <writetospi+0x60>)
    stat = decamutexon() ;
 8001206:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001208:	4628      	mov	r0, r5
 800120a:	f004 fc2f 	bl	8005a6c <HAL_SPI_GetState>
 800120e:	2801      	cmp	r0, #1
 8001210:	4604      	mov	r4, r0
 8001212:	d1f9      	bne.n	8001208 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <writetospi+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	f001 fbc1 	bl	80029a0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800121e:	465a      	mov	r2, fp
 8001220:	4651      	mov	r1, sl
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <writetospi+0x60>)
 8001228:	f004 f9d9 	bl	80055de <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	fa1f f289 	uxth.w	r2, r9
 8001234:	4641      	mov	r1, r8
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <writetospi+0x60>)
 8001238:	f004 f9d1 	bl	80055de <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800123c:	4622      	mov	r2, r4
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <writetospi+0x64>)
 8001242:	f001 fbad 	bl	80029a0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001246:	4630      	mov	r0, r6
 8001248:	f7ff ffbb 	bl	80011c2 <decamutexoff>

    return 0;
} // end writetospi()
 800124c:	2000      	movs	r0, #0
 800124e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001252:	bf00      	nop
 8001254:	20000580 	.word	0x20000580
 8001258:	40020400 	.word	0x40020400

0800125c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800125c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001260:	4681      	mov	r9, r0
 8001262:	460c      	mov	r4, r1
 8001264:	4690      	mov	r8, r2
 8001266:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001268:	f7ff ff9a 	bl	80011a0 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800126c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80012ec <readfromspi+0x90>
    stat = decamutexon() ;
 8001270:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001272:	4650      	mov	r0, sl
 8001274:	f004 fbfa 	bl	8005a6c <HAL_SPI_GetState>
 8001278:	2801      	cmp	r0, #1
 800127a:	d1fa      	bne.n	8001272 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800127c:	481a      	ldr	r0, [pc, #104]	; (80012e8 <readfromspi+0x8c>)
 800127e:	2200      	movs	r2, #0
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	f001 fb8d 	bl	80029a0 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001286:	f1b9 0f00 	cmp.w	r9, #0
 800128a:	d00c      	beq.n	80012a6 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800128c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80012ec <readfromspi+0x90>
 8001290:	44a1      	add	r9, r4
 8001292:	2201      	movs	r2, #1
 8001294:	4621      	mov	r1, r4
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	4414      	add	r4, r2
 800129c:	4650      	mov	r0, sl
 800129e:	f004 f99e 	bl	80055de <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80012a2:	454c      	cmp	r4, r9
 80012a4:	d1f5      	bne.n	8001292 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80012a6:	f1b8 0f00 	cmp.w	r8, #0
 80012aa:	d012      	beq.n	80012d2 <readfromspi+0x76>
 80012ac:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80012ec <readfromspi+0x90>
 80012b0:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012b4:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80012b6:	f8dc 2000 	ldr.w	r2, [ip]
 80012ba:	6891      	ldr	r1, [r2, #8]
 80012bc:	0789      	lsls	r1, r1, #30
 80012be:	d5fc      	bpl.n	80012ba <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012c0:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80012c2:	6891      	ldr	r1, [r2, #8]
 80012c4:	07cb      	lsls	r3, r1, #31
 80012c6:	d5fc      	bpl.n	80012c2 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80012c8:	68d3      	ldr	r3, [r2, #12]
 80012ca:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80012ce:	4285      	cmp	r5, r0
 80012d0:	d1f1      	bne.n	80012b6 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012d2:	2201      	movs	r2, #1
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <readfromspi+0x8c>)
 80012d8:	f001 fb62 	bl	80029a0 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012dc:	4630      	mov	r0, r6
 80012de:	f7ff ff70 	bl	80011c2 <decamutexoff>

    return 0;
} // end readfromspi()
 80012e2:	2000      	movs	r0, #0
 80012e4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80012e8:	40020400 	.word	0x40020400
 80012ec:	20000580 	.word	0x20000580

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db12      	blt.n	8001364 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	490a      	ldr	r1, [pc, #40]	; (8001370 <__NVIC_DisableIRQ+0x44>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	3320      	adds	r3, #32
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001358:	f3bf 8f4f 	dsb	sy
}
 800135c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135e:	f3bf 8f6f 	isb	sy
}
 8001362:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fff3 	bl	8002368 <HAL_Delay>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <EXTI_GetITEnStatus+0x38>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80013ce:	2301      	movs	r3, #1
 80013d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d2:	2311      	movs	r3, #17
 80013d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <reset_DW1000+0x40>)
 80013e0:	f001 f95a 	bl	8002698 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <reset_DW1000+0x40>)
 80013ea:	f001 fad9 	bl	80029a0 <HAL_GPIO_WritePin>

    Sleep(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff ffc0 	bl	8001374 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f000 f809 	bl	800140c <setup_DW1000RSTnIRQ>



    Sleep(2);
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff ffba 	bl	8001374 <Sleep>
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40020000 	.word	0x40020000

0800140c <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800141a:	2301      	movs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001422:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <setup_DW1000RSTnIRQ+0x70>)
 8001430:	f001 f932 	bl	8002698 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001434:	2006      	movs	r0, #6
 8001436:	f001 f8d6 	bl	80025e6 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2105      	movs	r1, #5
 800143e:	2006      	movs	r0, #6
 8001440:	f001 f8b5 	bl	80025ae <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001444:	e015      	b.n	8001472 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001446:	2006      	movs	r0, #6
 8001448:	f001 f8db 	bl	8002602 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800144c:	2301      	movs	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001450:	2311      	movs	r3, #17
 8001452:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <setup_DW1000RSTnIRQ+0x70>)
 8001464:	f001 f918 	bl	8002698 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2101      	movs	r1, #1
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <setup_DW1000RSTnIRQ+0x70>)
 800146e:	f001 fa97 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020000 	.word	0x40020000

08001480 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <port_set_dw1000_slowrate+0x14>)
 8001486:	2220      	movs	r2, #32
 8001488:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800148a:	4802      	ldr	r0, [pc, #8]	; (8001494 <port_set_dw1000_slowrate+0x14>)
 800148c:	f004 f81e 	bl	80054cc <HAL_SPI_Init>
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000580 	.word	0x20000580

08001498 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <port_set_dw1000_fastrate+0x14>)
 800149e:	2208      	movs	r2, #8
 80014a0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <port_set_dw1000_fastrate+0x14>)
 80014a4:	f004 f812 	bl	80054cc <HAL_SPI_Init>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000580 	.word	0x20000580

080014b0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80014b4:	2017      	movs	r0, #23
 80014b6:	f7ff ff39 	bl	800132c <__NVIC_DisableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80014c2:	2017      	movs	r0, #23
 80014c4:	f7ff ff14 	bl	80012f0 <__NVIC_EnableIRQ>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80014d0:	2017      	movs	r0, #23
 80014d2:	f7ff ff5b 	bl	800138c <EXTI_GetITEnStatus>
 80014d6:	4603      	mov	r3, r0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}

080014dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014e2:	f000 fa29 	bl	8001938 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014ea:	2201      	movs	r2, #1
 80014ec:	2178      	movs	r1, #120	; 0x78
 80014ee:	485b      	ldr	r0, [pc, #364]	; (800165c <SSD1306_Init+0x180>)
 80014f0:	f001 fcb2 	bl	8002e58 <HAL_I2C_IsDeviceReady>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e0a9      	b.n	8001652 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001502:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001504:	e002      	b.n	800150c <SSD1306_Init+0x30>
		p--;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001512:	22ae      	movs	r2, #174	; 0xae
 8001514:	2100      	movs	r1, #0
 8001516:	2078      	movs	r0, #120	; 0x78
 8001518:	f000 fa6c 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	2078      	movs	r0, #120	; 0x78
 8001522:	f000 fa67 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001526:	2210      	movs	r2, #16
 8001528:	2100      	movs	r1, #0
 800152a:	2078      	movs	r0, #120	; 0x78
 800152c:	f000 fa62 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001530:	22b0      	movs	r2, #176	; 0xb0
 8001532:	2100      	movs	r1, #0
 8001534:	2078      	movs	r0, #120	; 0x78
 8001536:	f000 fa5d 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800153a:	22c8      	movs	r2, #200	; 0xc8
 800153c:	2100      	movs	r1, #0
 800153e:	2078      	movs	r0, #120	; 0x78
 8001540:	f000 fa58 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2078      	movs	r0, #120	; 0x78
 800154a:	f000 fa53 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800154e:	2210      	movs	r2, #16
 8001550:	2100      	movs	r1, #0
 8001552:	2078      	movs	r0, #120	; 0x78
 8001554:	f000 fa4e 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001558:	2240      	movs	r2, #64	; 0x40
 800155a:	2100      	movs	r1, #0
 800155c:	2078      	movs	r0, #120	; 0x78
 800155e:	f000 fa49 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001562:	2281      	movs	r2, #129	; 0x81
 8001564:	2100      	movs	r1, #0
 8001566:	2078      	movs	r0, #120	; 0x78
 8001568:	f000 fa44 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	2100      	movs	r1, #0
 8001570:	2078      	movs	r0, #120	; 0x78
 8001572:	f000 fa3f 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001576:	22a1      	movs	r2, #161	; 0xa1
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 fa3a 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001580:	22a6      	movs	r2, #166	; 0xa6
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 fa35 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800158a:	22a8      	movs	r2, #168	; 0xa8
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 fa30 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001594:	223f      	movs	r2, #63	; 0x3f
 8001596:	2100      	movs	r1, #0
 8001598:	2078      	movs	r0, #120	; 0x78
 800159a:	f000 fa2b 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800159e:	22a4      	movs	r2, #164	; 0xa4
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	; 0x78
 80015a4:	f000 fa26 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015a8:	22d3      	movs	r2, #211	; 0xd3
 80015aa:	2100      	movs	r1, #0
 80015ac:	2078      	movs	r0, #120	; 0x78
 80015ae:	f000 fa21 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	; 0x78
 80015b8:	f000 fa1c 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015bc:	22d5      	movs	r2, #213	; 0xd5
 80015be:	2100      	movs	r1, #0
 80015c0:	2078      	movs	r0, #120	; 0x78
 80015c2:	f000 fa17 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015c6:	22f0      	movs	r2, #240	; 0xf0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2078      	movs	r0, #120	; 0x78
 80015cc:	f000 fa12 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015d0:	22d9      	movs	r2, #217	; 0xd9
 80015d2:	2100      	movs	r1, #0
 80015d4:	2078      	movs	r0, #120	; 0x78
 80015d6:	f000 fa0d 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015da:	2222      	movs	r2, #34	; 0x22
 80015dc:	2100      	movs	r1, #0
 80015de:	2078      	movs	r0, #120	; 0x78
 80015e0:	f000 fa08 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015e4:	22da      	movs	r2, #218	; 0xda
 80015e6:	2100      	movs	r1, #0
 80015e8:	2078      	movs	r0, #120	; 0x78
 80015ea:	f000 fa03 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015ee:	2212      	movs	r2, #18
 80015f0:	2100      	movs	r1, #0
 80015f2:	2078      	movs	r0, #120	; 0x78
 80015f4:	f000 f9fe 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015f8:	22db      	movs	r2, #219	; 0xdb
 80015fa:	2100      	movs	r1, #0
 80015fc:	2078      	movs	r0, #120	; 0x78
 80015fe:	f000 f9f9 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001602:	2220      	movs	r2, #32
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	; 0x78
 8001608:	f000 f9f4 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800160c:	228d      	movs	r2, #141	; 0x8d
 800160e:	2100      	movs	r1, #0
 8001610:	2078      	movs	r0, #120	; 0x78
 8001612:	f000 f9ef 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001616:	2214      	movs	r2, #20
 8001618:	2100      	movs	r1, #0
 800161a:	2078      	movs	r0, #120	; 0x78
 800161c:	f000 f9ea 	bl	80019f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001620:	22af      	movs	r2, #175	; 0xaf
 8001622:	2100      	movs	r1, #0
 8001624:	2078      	movs	r0, #120	; 0x78
 8001626:	f000 f9e5 	bl	80019f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800162a:	222e      	movs	r2, #46	; 0x2e
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	; 0x78
 8001630:	f000 f9e0 	bl	80019f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f843 	bl	80016c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800163a:	f000 f813 	bl	8001664 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <SSD1306_Init+0x184>)
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SSD1306_Init+0x184>)
 8001646:	2200      	movs	r2, #0
 8001648:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <SSD1306_Init+0x184>)
 800164c:	2201      	movs	r2, #1
 800164e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000052c 	.word	0x2000052c
 8001660:	2000049c 	.word	0x2000049c

08001664 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	e01d      	b.n	80016ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	3b50      	subs	r3, #80	; 0x50
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f000 f9ba 	bl	80019f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	; 0x78
 8001686:	f000 f9b5 	bl	80019f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800168a:	2210      	movs	r2, #16
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f000 f9b0 	bl	80019f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <SSD1306_UpdateScreen+0x58>)
 800169a:	441a      	add	r2, r3
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	2140      	movs	r1, #64	; 0x40
 80016a0:	2078      	movs	r0, #120	; 0x78
 80016a2:	f000 f95f 	bl	8001964 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	3301      	adds	r3, #1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	d9de      	bls.n	8001670 <SSD1306_UpdateScreen+0xc>
	}
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000009c 	.word	0x2000009c

080016c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <SSD1306_Fill+0x14>
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <SSD1306_Fill+0x16>
 80016d4:	23ff      	movs	r3, #255	; 0xff
 80016d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016da:	4619      	mov	r1, r3
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <SSD1306_Fill+0x2c>)
 80016de:	f004 fdeb 	bl	80062b8 <memset>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000009c 	.word	0x2000009c

080016f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
 80016fa:	460b      	mov	r3, r1
 80016fc:	80bb      	strh	r3, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	70fb      	strb	r3, [r7, #3]
	if (
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b7f      	cmp	r3, #127	; 0x7f
 8001706:	d848      	bhi.n	800179a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001708:	88bb      	ldrh	r3, [r7, #4]
 800170a:	2b3f      	cmp	r3, #63	; 0x3f
 800170c:	d845      	bhi.n	800179a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <SSD1306_DrawPixel+0xb8>)
 8001710:	791b      	ldrb	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d11a      	bne.n	8001760 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800172a:	88fa      	ldrh	r2, [r7, #6]
 800172c:	88bb      	ldrh	r3, [r7, #4]
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	b298      	uxth	r0, r3
 8001732:	4603      	mov	r3, r0
 8001734:	01db      	lsls	r3, r3, #7
 8001736:	4413      	add	r3, r2
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <SSD1306_DrawPixel+0xbc>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	b25a      	sxtb	r2, r3
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	b25b      	sxtb	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b259      	sxtb	r1, r3
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	4603      	mov	r3, r0
 8001754:	01db      	lsls	r3, r3, #7
 8001756:	4413      	add	r3, r2
 8001758:	b2c9      	uxtb	r1, r1
 800175a:	4a14      	ldr	r2, [pc, #80]	; (80017ac <SSD1306_DrawPixel+0xbc>)
 800175c:	54d1      	strb	r1, [r2, r3]
 800175e:	e01d      	b.n	800179c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001760:	88fa      	ldrh	r2, [r7, #6]
 8001762:	88bb      	ldrh	r3, [r7, #4]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	b298      	uxth	r0, r3
 8001768:	4603      	mov	r3, r0
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	4413      	add	r3, r2
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <SSD1306_DrawPixel+0xbc>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	b25a      	sxtb	r2, r3
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	b25b      	sxtb	r3, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	b25b      	sxtb	r3, r3
 8001786:	4013      	ands	r3, r2
 8001788:	b259      	sxtb	r1, r3
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	4603      	mov	r3, r0
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	4413      	add	r3, r2
 8001792:	b2c9      	uxtb	r1, r1
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <SSD1306_DrawPixel+0xbc>)
 8001796:	54d1      	strb	r1, [r2, r3]
 8001798:	e000      	b.n	800179c <SSD1306_DrawPixel+0xac>
		return;
 800179a:	bf00      	nop
	}
}
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000049c 	.word	0x2000049c
 80017ac:	2000009c 	.word	0x2000009c

080017b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	80fb      	strh	r3, [r7, #6]
 80017bc:	4613      	mov	r3, r2
 80017be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SSD1306_GotoXY+0x28>)
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <SSD1306_GotoXY+0x28>)
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	8053      	strh	r3, [r2, #2]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	2000049c 	.word	0x2000049c

080017dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <SSD1306_Putc+0xfc>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
	if (
 80017f8:	2b7f      	cmp	r3, #127	; 0x7f
 80017fa:	dc07      	bgt.n	800180c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <SSD1306_Putc+0xfc>)
 80017fe:	885b      	ldrh	r3, [r3, #2]
 8001800:	461a      	mov	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001808:	2b3f      	cmp	r3, #63	; 0x3f
 800180a:	dd01      	ble.n	8001810 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800180c:	2300      	movs	r3, #0
 800180e:	e05e      	b.n	80018ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e04b      	b.n	80018ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	3b20      	subs	r3, #32
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	7849      	ldrb	r1, [r1, #1]
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4619      	mov	r1, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	440b      	add	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	e030      	b.n	800189c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <SSD1306_Putc+0xfc>)
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b298      	uxth	r0, r3
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <SSD1306_Putc+0xfc>)
 8001858:	885a      	ldrh	r2, [r3, #2]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	b29b      	uxth	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	79ba      	ldrb	r2, [r7, #6]
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff ff43 	bl	80016f0 <SSD1306_DrawPixel>
 800186a:	e014      	b.n	8001896 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <SSD1306_Putc+0xfc>)
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	b29b      	uxth	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b298      	uxth	r0, r3
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <SSD1306_Putc+0xfc>)
 800187a:	885a      	ldrh	r2, [r3, #2]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b299      	uxth	r1, r3
 8001884:	79bb      	ldrb	r3, [r7, #6]
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	f7ff ff2d 	bl	80016f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3301      	adds	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d3c8      	bcc.n	800183a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	461a      	mov	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d3ad      	bcc.n	8001816 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <SSD1306_Putc+0xfc>)
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <SSD1306_Putc+0xfc>)
 80018ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000049c 	.word	0x2000049c

080018dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	4613      	mov	r3, r2
 80018e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018ea:	e012      	b.n	8001912 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff71 	bl	80017dc <SSD1306_Putc>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d002      	beq.n	800190c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	e008      	b.n	800191e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1e8      	bne.n	80018ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	781b      	ldrb	r3, [r3, #0]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fec8 	bl	80016c0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001930:	f7ff fe98 	bl	8001664 <SSD1306_UpdateScreen>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <ssd1306_I2C_Init+0x28>)
 8001940:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001942:	e002      	b.n	800194a <ssd1306_I2C_Init+0x12>
		p--;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	607b      	str	r3, [r7, #4]
	while(p>0)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f9      	bne.n	8001944 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	0003d090 	.word	0x0003d090

08001964 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b0c7      	sub	sp, #284	; 0x11c
 8001968:	af02      	add	r7, sp, #8
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	4639      	mov	r1, r7
 8001970:	600a      	str	r2, [r1, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	4622      	mov	r2, r4
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	4602      	mov	r2, r0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	460a      	mov	r2, r1
 8001984:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	1dba      	adds	r2, r7, #6
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001996:	e010      	b.n	80019ba <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001998:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800199c:	463a      	mov	r2, r7
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	441a      	add	r2, r3
 80019a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019a6:	3301      	adds	r3, #1
 80019a8:	7811      	ldrb	r1, [r2, #0]
 80019aa:	f107 020c 	add.w	r2, r7, #12
 80019ae:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019b0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b4:	3301      	adds	r3, #1
 80019b6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019be:	b29b      	uxth	r3, r3
 80019c0:	1d3a      	adds	r2, r7, #4
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8e7      	bhi.n	8001998 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b299      	uxth	r1, r3
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f107 020c 	add.w	r2, r7, #12
 80019da:	200a      	movs	r0, #10
 80019dc:	9000      	str	r0, [sp, #0]
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <ssd1306_I2C_WriteMulti+0x8c>)
 80019e0:	f001 f93c 	bl	8002c5c <HAL_I2C_Master_Transmit>
}
 80019e4:	bf00      	nop
 80019e6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000052c 	.word	0x2000052c

080019f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	460b      	mov	r3, r1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	4613      	mov	r3, r2
 8001a04:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <ssd1306_I2C_Write+0x38>)
 8001a1e:	f001 f91d 	bl	8002c5c <HAL_I2C_Master_Transmit>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000052c 	.word	0x2000052c

08001a30 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1d39      	adds	r1, r7, #4
 8001a42:	2201      	movs	r2, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff49 	bl	80018dc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a4a:	f7ff fe0b 	bl	8001664 <SSD1306_UpdateScreen>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a21      	ldr	r2, [pc, #132]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_GPIO_Init+0xdc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <MX_GPIO_Init+0xe0>)
 8001ae4:	f000 ff5c 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2140      	movs	r1, #64	; 0x40
 8001aec:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001aee:	f000 ff57 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001af2:	2303      	movs	r3, #3
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <MX_GPIO_Init+0xe0>)
 8001b0a:	f000 fdc5 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_GPIO_Init+0xe4>)
 8001b26:	f000 fdb7 	bl	8002698 <HAL_GPIO_Init>

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400

08001b40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_I2C1_Init+0x54>)
 8001b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_I2C1_Init+0x58>)
 8001b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_I2C1_Init+0x50>)
 8001b7e:	f000 ff29 	bl	80029d4 <HAL_I2C_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b88:	f000 f8d4 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000052c 	.word	0x2000052c
 8001b94:	40005400 	.word	0x40005400
 8001b98:	00061a80 	.word	0x00061a80

08001b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_I2C_MspInit+0x94>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d134      	bne.n	8001c28 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_I2C_MspInit+0x98>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_I2C_MspInit+0x98>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_I2C_MspInit+0x98>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be0:	2312      	movs	r3, #18
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bec:	2304      	movs	r3, #4
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_I2C_MspInit+0x9c>)
 8001bf8:	f000 fd4e 	bl	8002698 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_I2C_MspInit+0x98>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_I2C_MspInit+0x98>)
 8001c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_I2C_MspInit+0x98>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	201f      	movs	r0, #31
 8001c1e:	f000 fcc6 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c22:	201f      	movs	r0, #31
 8001c24:	f000 fcdf 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400

08001c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c40:	f000 fb20 	bl	8002284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c44:	f000 f80e 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c48:	f7ff ff06 	bl	8001a58 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c4c:	f000 f878 	bl	8001d40 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c50:	f000 fa7c 	bl	800214c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c54:	f7ff ff74 	bl	8001b40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  setup_DW1000RSTnIRQ(0);
  SSD1306_Init();
 8001c58:	f7ff fc40 	bl	80014dc <SSD1306_Init>
      dw_main();
 8001c5c:	f000 f96e 	bl	8001f3c <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <main+0x24>
	...

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b094      	sub	sp, #80	; 0x50
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	2230      	movs	r2, #48	; 0x30
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fb20 	bl	80062b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <SystemClock_Config+0xc8>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <SystemClock_Config+0xc8>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <SystemClock_Config+0xc8>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <SystemClock_Config+0xcc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <SystemClock_Config+0xcc>)
 8001cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <SystemClock_Config+0xcc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001cd8:	2360      	movs	r3, #96	; 0x60
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 ffa7 	bl	8004c3c <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf4:	f000 f81e 	bl	8001d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2103      	movs	r1, #3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fa09 	bl	800512c <HAL_RCC_ClockConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d20:	f000 f808 	bl	8001d34 <Error_Handler>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3750      	adds	r7, #80	; 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>
	...

08001d40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <MX_SPI1_Init+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_SPI1_Init+0x64>)
 8001d92:	f003 fb9b 	bl	80054cc <HAL_SPI_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f7ff ffca 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000580 	.word	0x20000580
 8001da8:	40013000 	.word	0x40013000

08001dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_SPI_MspInit+0x94>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d133      	bne.n	8001e36 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_SPI_MspInit+0x98>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_SPI_MspInit+0x98>)
 8001dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_SPI_MspInit+0x98>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_SPI_MspInit+0x98>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_SPI_MspInit+0x98>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_SPI_MspInit+0x98>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e06:	23e0      	movs	r3, #224	; 0xe0
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e16:	2305      	movs	r3, #5
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <HAL_SPI_MspInit+0x9c>)
 8001e22:	f000 fc39 	bl	8002698 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2023      	movs	r0, #35	; 0x23
 8001e2c:	f000 fbbf 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e30:	2023      	movs	r0, #35	; 0x23
 8001e32:	f000 fbd8 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40013000 	.word	0x40013000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 fa1e 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <I2C1_EV_IRQHandler+0x10>)
 8001ef6:	f001 f8dd 	bl	80030b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000052c 	.word	0x2000052c

08001f04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <SPI1_IRQHandler+0x10>)
 8001f0a:	f003 fca5 	bl	8005858 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000580 	.word	0x20000580

08001f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    HAL_UART_Transmit(&huart2,buff, strlen(buff), 100);
 8001f42:	4871      	ldr	r0, [pc, #452]	; (8002108 <dw_main+0x1cc>)
 8001f44:	f7fe f948 	bl	80001d8 <strlen>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2364      	movs	r3, #100	; 0x64
 8001f4e:	496e      	ldr	r1, [pc, #440]	; (8002108 <dw_main+0x1cc>)
 8001f50:	486e      	ldr	r0, [pc, #440]	; (800210c <dw_main+0x1d0>)
 8001f52:	f003 fec4 	bl	8005cde <HAL_UART_Transmit>
    ssd1306_write(buff, Font_7x10);
 8001f56:	486c      	ldr	r0, [pc, #432]	; (8002108 <dw_main+0x1cc>)
 8001f58:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <dw_main+0x1d4>)
 8001f5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f5e:	f7ff fd67 	bl	8001a30 <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 5 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001f62:	f7ff fa31 	bl	80013c8 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001f66:	f7ff fa8b 	bl	8001480 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7fe fab8 	bl	80004e0 <dwt_initialise>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d110      	bne.n	8001f9a <dw_main+0x5e>
    {
    	HAL_UART_Transmit(&huart2,"Init failed!!!\n", 16, 100);
 8001f78:	2364      	movs	r3, #100	; 0x64
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	4965      	ldr	r1, [pc, #404]	; (8002114 <dw_main+0x1d8>)
 8001f7e:	4863      	ldr	r0, [pc, #396]	; (800210c <dw_main+0x1d0>)
 8001f80:	f003 fead 	bl	8005cde <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10); ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001f84:	210a      	movs	r1, #10
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fc12 	bl	80017b0 <SSD1306_GotoXY>
 8001f8c:	4862      	ldr	r0, [pc, #392]	; (8002118 <dw_main+0x1dc>)
 8001f8e:	4b60      	ldr	r3, [pc, #384]	; (8002110 <dw_main+0x1d4>)
 8001f90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f94:	f7ff fd4c 	bl	8001a30 <ssd1306_write>
        while (1)
 8001f98:	e7fe      	b.n	8001f98 <dw_main+0x5c>
        { };
    }
    port_set_dw1000_fastrate();
 8001f9a:	f7ff fa7d 	bl	8001498 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 6 below. */
    dwt_configure(&config);
 8001f9e:	485f      	ldr	r0, [pc, #380]	; (800211c <dw_main+0x1e0>)
 8001fa0:	f7fe fbf4 	bl	800078c <dwt_configure>

    /* Set delay to turn reception on after transmission of the frame. See NOTE 2 below. */
    dwt_setrxaftertxdelay(TX_TO_RX_DELAY_UUS);
 8001fa4:	203c      	movs	r0, #60	; 0x3c
 8001fa6:	f7fe ff6d 	bl	8000e84 <dwt_setrxaftertxdelay>

    /* Set response frame timeout. */
    dwt_setrxtimeout(RX_RESP_TO_UUS);
 8001faa:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fae:	f7ff f879 	bl	80010a4 <dwt_setrxtimeout>

    /* Loop forever sending and receiving frames periodically. */
    while (1)
    {
    	SSD1306_Clear ();
 8001fb2:	f7ff fcb8 	bl	8001926 <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff fbf9 	bl	80017b0 <SSD1306_GotoXY>
 8001fbe:	4858      	ldr	r0, [pc, #352]	; (8002120 <dw_main+0x1e4>)
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <dw_main+0x1d4>)
 8001fc2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fc6:	f7ff fd33 	bl	8001a30 <ssd1306_write>
    	SSD1306_GotoXY(0, 30);  ssd1306_write("Received :", Font_7x10);
 8001fca:	211e      	movs	r1, #30
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fbef 	bl	80017b0 <SSD1306_GotoXY>
 8001fd2:	4854      	ldr	r0, [pc, #336]	; (8002124 <dw_main+0x1e8>)
 8001fd4:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <dw_main+0x1d4>)
 8001fd6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fda:	f7ff fd29 	bl	8001a30 <ssd1306_write>
        /* Write frame data to DW1000 and prepare transmission. See NOTE 7 below. */
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4951      	ldr	r1, [pc, #324]	; (8002128 <dw_main+0x1ec>)
 8001fe2:	200e      	movs	r0, #14
 8001fe4:	f7fe fd3c 	bl	8000a60 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	200e      	movs	r0, #14
 8001fee:	f7fe fd55 	bl	8000a9c <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled immediately after the frame is sent. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7ff f808 	bl	8001008 <dwt_starttx>

        HAL_UART_Transmit(&huart2,"Transmitted : ", 14, 100);
 8001ff8:	2364      	movs	r3, #100	; 0x64
 8001ffa:	220e      	movs	r2, #14
 8001ffc:	494b      	ldr	r1, [pc, #300]	; (800212c <dw_main+0x1f0>)
 8001ffe:	4843      	ldr	r0, [pc, #268]	; (800210c <dw_main+0x1d0>)
 8002000:	f003 fe6d 	bl	8005cde <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2,tx_msg, sizeof(tx_msg), 100);
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	220e      	movs	r2, #14
 8002008:	4947      	ldr	r1, [pc, #284]	; (8002128 <dw_main+0x1ec>)
 800200a:	4840      	ldr	r0, [pc, #256]	; (800210c <dw_main+0x1d0>)
 800200c:	f003 fe67 	bl	8005cde <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2,"\n", 1, 100);
 8002010:	2364      	movs	r3, #100	; 0x64
 8002012:	2201      	movs	r2, #1
 8002014:	4946      	ldr	r1, [pc, #280]	; (8002130 <dw_main+0x1f4>)
 8002016:	483d      	ldr	r0, [pc, #244]	; (800210c <dw_main+0x1d0>)
 8002018:	f003 fe61 	bl	8005cde <HAL_UART_Transmit>

        SSD1306_GotoXY(0, 10); ssd1306_write(tx_msg, Font_7x10);
 800201c:	210a      	movs	r1, #10
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff fbc6 	bl	80017b0 <SSD1306_GotoXY>
 8002024:	4840      	ldr	r0, [pc, #256]	; (8002128 <dw_main+0x1ec>)
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <dw_main+0x1d4>)
 8002028:	e893 0006 	ldmia.w	r3, {r1, r2}
 800202c:	f7ff fd00 	bl	8001a30 <ssd1306_write>

        /* We assume that the transmission is achieved normally, now poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002030:	bf00      	nop
 8002032:	2100      	movs	r1, #0
 8002034:	200f      	movs	r0, #15
 8002036:	f7fe fe18 	bl	8000c6a <dwt_read32bitoffsetreg>
 800203a:	4603      	mov	r3, r0
 800203c:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <dw_main+0x1f8>)
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <dw_main+0x1f8>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <dw_main+0x1fc>)
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f2      	beq.n	8002032 <dw_main+0xf6>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <dw_main+0x1f8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d046      	beq.n	80020e6 <dw_main+0x1aa>
        {
            int i;

            /* Clear local RX buffer to avoid having leftovers from previous receptions. This is not necessary but is included here to aid reading
             * the RX buffer. */
            for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	e007      	b.n	800206e <dw_main+0x132>
            {
                rx_buffer[i] = 0;
 800205e:	4a37      	ldr	r2, [pc, #220]	; (800213c <dw_main+0x200>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
            for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3301      	adds	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b7e      	cmp	r3, #126	; 0x7e
 8002072:	ddf4      	ble.n	800205e <dw_main+0x122>
            }

            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002074:	2100      	movs	r1, #0
 8002076:	2010      	movs	r0, #16
 8002078:	f7fe fdf7 	bl	8000c6a <dwt_read32bitoffsetreg>
 800207c:	4603      	mov	r3, r0
 800207e:	b29b      	uxth	r3, r3
 8002080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <dw_main+0x204>)
 8002088:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <dw_main+0x204>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	2b7f      	cmp	r3, #127	; 0x7f
 8002090:	d806      	bhi.n	80020a0 <dw_main+0x164>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <dw_main+0x204>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	4619      	mov	r1, r3
 800209a:	4828      	ldr	r0, [pc, #160]	; (800213c <dw_main+0x200>)
 800209c:	f7fe fd1e 	bl	8000adc <dwt_readrxdata>
            }
            HAL_UART_Transmit(&huart2,(char*)"Received : ", 11, 100);
 80020a0:	2364      	movs	r3, #100	; 0x64
 80020a2:	220b      	movs	r2, #11
 80020a4:	4927      	ldr	r1, [pc, #156]	; (8002144 <dw_main+0x208>)
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <dw_main+0x1d0>)
 80020a8:	f003 fe19 	bl	8005cde <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2,rx_buffer, sizeof(rx_buffer), 100);
 80020ac:	2364      	movs	r3, #100	; 0x64
 80020ae:	227f      	movs	r2, #127	; 0x7f
 80020b0:	4922      	ldr	r1, [pc, #136]	; (800213c <dw_main+0x200>)
 80020b2:	4816      	ldr	r0, [pc, #88]	; (800210c <dw_main+0x1d0>)
 80020b4:	f003 fe13 	bl	8005cde <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2,(char*)"\n", 1, 100);
 80020b8:	2364      	movs	r3, #100	; 0x64
 80020ba:	2201      	movs	r2, #1
 80020bc:	491c      	ldr	r1, [pc, #112]	; (8002130 <dw_main+0x1f4>)
 80020be:	4813      	ldr	r0, [pc, #76]	; (800210c <dw_main+0x1d0>)
 80020c0:	f003 fe0d 	bl	8005cde <HAL_UART_Transmit>


            SSD1306_GotoXY(0, 40);  ssd1306_write(tx_msg, Font_7x10);
 80020c4:	2128      	movs	r1, #40	; 0x28
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fb72 	bl	80017b0 <SSD1306_GotoXY>
 80020cc:	4816      	ldr	r0, [pc, #88]	; (8002128 <dw_main+0x1ec>)
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <dw_main+0x1d4>)
 80020d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020d4:	f7ff fcac 	bl	8001a30 <ssd1306_write>

            /* At this point, received frame can be examined in global "rx_buffer". An actual application would, for example, start by checking that
             * the format and/or data of the response are the expected ones. A developer might put a breakpoint here to examine this frame. */

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 80020d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020dc:	2100      	movs	r1, #0
 80020de:	200f      	movs	r0, #15
 80020e0:	f7fe fe49 	bl	8000d76 <dwt_write32bitoffsetreg>
 80020e4:	e004      	b.n	80020f0 <dw_main+0x1b4>
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 80020e6:	4a18      	ldr	r2, [pc, #96]	; (8002148 <dw_main+0x20c>)
 80020e8:	2100      	movs	r1, #0
 80020ea:	200f      	movs	r0, #15
 80020ec:	f7fe fe43 	bl	8000d76 <dwt_write32bitoffsetreg>
        }

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 80020f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f4:	f7ff f93e 	bl	8001374 <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <dw_main+0x1ec>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	3301      	adds	r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <dw_main+0x1ec>)
 8002102:	705a      	strb	r2, [r3, #1]
    	SSD1306_Clear ();
 8002104:	e755      	b.n	8001fb2 <dw_main+0x76>
 8002106:	bf00      	nop
 8002108:	20000010 	.word	0x20000010
 800210c:	200005d8 	.word	0x200005d8
 8002110:	20000004 	.word	0x20000004
 8002114:	080062e0 	.word	0x080062e0
 8002118:	080062f0 	.word	0x080062f0
 800211c:	20000024 	.word	0x20000024
 8002120:	08006300 	.word	0x08006300
 8002124:	08006310 	.word	0x08006310
 8002128:	20000030 	.word	0x20000030
 800212c:	0800631c 	.word	0x0800631c
 8002130:	0800632c 	.word	0x0800632c
 8002134:	20000524 	.word	0x20000524
 8002138:	2427d000 	.word	0x2427d000
 800213c:	200004a4 	.word	0x200004a4
 8002140:	20000528 	.word	0x20000528
 8002144:	08006330 	.word	0x08006330
 8002148:	24279000 	.word	0x24279000

0800214c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <MX_USART2_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_USART2_UART_Init+0x4c>)
 8002184:	f003 fd5e 	bl	8005c44 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f7ff fdd1 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200005d8 	.word	0x200005d8
 800219c:	40004400 	.word	0x40004400

080021a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_UART_MspInit+0x84>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d12b      	bne.n	800221a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_UART_MspInit+0x88>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_UART_MspInit+0x88>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	6413      	str	r3, [r2, #64]	; 0x40
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_UART_MspInit+0x88>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_UART_MspInit+0x88>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_UART_MspInit+0x88>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_UART_MspInit+0x88>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021fa:	230c      	movs	r3, #12
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220a:	2307      	movs	r3, #7
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <HAL_UART_MspInit+0x8c>)
 8002216:	f000 fa3f 	bl	8002698 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800221a:	bf00      	nop
 800221c:	3728      	adds	r7, #40	; 0x28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40004400 	.word	0x40004400
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002236:	490e      	ldr	r1, [pc, #56]	; (8002270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800223c:	e002      	b.n	8002244 <LoopCopyDataInit>

0800223e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002242:	3304      	adds	r3, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002248:	d3f9      	bcc.n	800223e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800224c:	4c0b      	ldr	r4, [pc, #44]	; (800227c <LoopFillZerobss+0x26>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002250:	e001      	b.n	8002256 <LoopFillZerobss>

08002252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002254:	3204      	adds	r2, #4

08002256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002258:	d3fb      	bcc.n	8002252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800225a:	f7ff fe5d 	bl	8001f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225e:	f004 f807 	bl	8006270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff fceb 	bl	8001c3c <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002270:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002274:	08006b84 	.word	0x08006b84
  ldr r2, =_sbss
 8002278:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 800227c:	20000620 	.word	0x20000620

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>
	...

08002284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_Init+0x40>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_Init+0x40>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_Init+0x40>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f973 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b2:	200f      	movs	r0, #15
 80022b4:	f000 f808 	bl	80022c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b8:	f7ff fdc8 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x54>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x58>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f999 	bl	800261e <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f953 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <HAL_InitTick+0x5c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000000c 	.word	0x2000000c
 8002320:	20000044 	.word	0x20000044
 8002324:	20000040 	.word	0x20000040

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x20>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x24>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_IncTick+0x24>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000044 	.word	0x20000044
 800234c:	2000061c 	.word	0x2000061c

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_GetTick+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000061c 	.word	0x2000061c

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff ffee 	bl	8002350 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffde 	bl	8002350 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000044 	.word	0x20000044

080023b0 <__NVIC_SetPriorityGrouping>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	; (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_DisableIRQ>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db12      	blt.n	8002488 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	490a      	ldr	r1, [pc, #40]	; (8002494 <__NVIC_DisableIRQ+0x44>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	3320      	adds	r3, #32
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800247c:	f3bf 8f4f 	dsb	sy
}
 8002480:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002482:	f3bf 8f6f 	isb	sy
}
 8002486:	bf00      	nop
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff05 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff1a 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff8e 	bl	80024ec <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff0d 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff1d 	bl	8002450 <__NVIC_DisableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff94 	bl	8002554 <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e00c      	b.n	800266e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2205      	movs	r2, #5
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002688:	b2db      	uxtb	r3, r3
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e159      	b.n	8002968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	f040 8148 	bne.w	8002962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d005      	beq.n	80026ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d130      	bne.n	800274c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002720:	2201      	movs	r2, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0201 	and.w	r2, r3, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b03      	cmp	r3, #3
 8002756:	d017      	beq.n	8002788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d123      	bne.n	80027dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3208      	adds	r2, #8
 800279c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	220f      	movs	r2, #15
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a2 	beq.w	8002962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_GPIO_Init+0x2e8>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a56      	ldr	r2, [pc, #344]	; (8002980 <HAL_GPIO_Init+0x2e8>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b54      	ldr	r3, [pc, #336]	; (8002980 <HAL_GPIO_Init+0x2e8>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283a:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_GPIO_Init+0x2ec>)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a49      	ldr	r2, [pc, #292]	; (8002988 <HAL_GPIO_Init+0x2f0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x202>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a48      	ldr	r2, [pc, #288]	; (800298c <HAL_GPIO_Init+0x2f4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x1fe>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a47      	ldr	r2, [pc, #284]	; (8002990 <HAL_GPIO_Init+0x2f8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x1fa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a46      	ldr	r2, [pc, #280]	; (8002994 <HAL_GPIO_Init+0x2fc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x1f6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_GPIO_Init+0x300>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x1f2>
 8002886:	2304      	movs	r3, #4
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x204>
 800288a:	2307      	movs	r3, #7
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x204>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x204>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x204>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x204>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	; (8002984 <HAL_GPIO_Init+0x2ec>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ba:	4b38      	ldr	r3, [pc, #224]	; (800299c <HAL_GPIO_Init+0x304>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028de:	4a2f      	ldr	r2, [pc, #188]	; (800299c <HAL_GPIO_Init+0x304>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_GPIO_Init+0x304>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002908:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_GPIO_Init+0x304>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_GPIO_Init+0x304>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_GPIO_Init+0x304>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_GPIO_Init+0x304>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a0f      	ldr	r2, [pc, #60]	; (800299c <HAL_GPIO_Init+0x304>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f aea2 	bls.w	80026b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40013c00 	.word	0x40013c00

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029bc:	e003      	b.n	80029c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	041a      	lsls	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e12b      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff f8ce 	bl	8001b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	; 0x24
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a38:	f002 fd20 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a81      	ldr	r2, [pc, #516]	; (8002c48 <HAL_I2C_Init+0x274>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d807      	bhi.n	8002a58 <HAL_I2C_Init+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a80      	ldr	r2, [pc, #512]	; (8002c4c <HAL_I2C_Init+0x278>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e006      	b.n	8002a66 <HAL_I2C_Init+0x92>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a7d      	ldr	r2, [pc, #500]	; (8002c50 <HAL_I2C_Init+0x27c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0e7      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a78      	ldr	r2, [pc, #480]	; (8002c54 <HAL_I2C_Init+0x280>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	; (8002c48 <HAL_I2C_Init+0x274>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d802      	bhi.n	8002aa8 <HAL_I2C_Init+0xd4>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	e009      	b.n	8002abc <HAL_I2C_Init+0xe8>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_I2C_Init+0x284>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	3301      	adds	r3, #1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	495c      	ldr	r1, [pc, #368]	; (8002c48 <HAL_I2C_Init+0x274>)
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	d819      	bhi.n	8002b10 <HAL_I2C_Init+0x13c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e59      	subs	r1, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002af0:	400b      	ands	r3, r1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_I2C_Init+0x138>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e59      	subs	r1, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	e051      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e04f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_I2C_Init+0x168>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e012      	b.n	8002b62 <HAL_I2C_Init+0x18e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	0099      	lsls	r1, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Init+0x196>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e022      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <HAL_I2C_Init+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e58      	subs	r0, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	440b      	add	r3, r1
 8002b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6809      	ldr	r1, [r1, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6911      	ldr	r1, [r2, #16]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	000186a0 	.word	0x000186a0
 8002c4c:	001e847f 	.word	0x001e847f
 8002c50:	003d08ff 	.word	0x003d08ff
 8002c54:	431bde83 	.word	0x431bde83
 8002c58:	10624dd3 	.word	0x10624dd3

08002c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7ff fb6e 	bl	8002350 <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	f040 80e0 	bne.w	8002e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2319      	movs	r3, #25
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4970      	ldr	r1, [pc, #448]	; (8002e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f001 fe00 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0d3      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_I2C_Master_Transmit+0x50>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e0cc      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d007      	beq.n	8002cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0201 	orr.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2221      	movs	r2, #33	; 0x21
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2210      	movs	r2, #16
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	893a      	ldrh	r2, [r7, #8]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a50      	ldr	r2, [pc, #320]	; (8002e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d14:	8979      	ldrh	r1, [r7, #10]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f001 fc90 	bl	8004640 <I2C_MasterRequestWrite>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e08d      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d40:	e066      	b.n	8002e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f001 fe7a 	bl	8004a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d107      	bne.n	8002d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06b      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d11b      	bne.n	8002de4 <HAL_I2C_Master_Transmit+0x188>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	6a39      	ldr	r1, [r7, #32]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f001 fe6a 	bl	8004ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d107      	bne.n	8002e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e01a      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d194      	bne.n	8002d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	00100002 	.word	0x00100002
 8002e54:	ffff0000 	.word	0xffff0000

08002e58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	460b      	mov	r3, r1
 8002e66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff fa72 	bl	8002350 <HAL_GetTick>
 8002e6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	f040 8111 	bne.w	80030a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2319      	movs	r3, #25
 8002e86:	2201      	movs	r2, #1
 8002e88:	4988      	ldr	r1, [pc, #544]	; (80030ac <HAL_I2C_IsDeviceReady+0x254>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f001 fd02 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	e104      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2C_IsDeviceReady+0x50>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0fd      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d007      	beq.n	8002ece <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2224      	movs	r2, #36	; 0x24
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a70      	ldr	r2, [pc, #448]	; (80030b0 <HAL_I2C_IsDeviceReady+0x258>)
 8002ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f001 fcc0 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f28:	d103      	bne.n	8002f32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0b6      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f36:	897b      	ldrh	r3, [r7, #10]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f46:	f7ff fa03 	bl	8002350 <HAL_GetTick>
 8002f4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f7a:	e025      	b.n	8002fc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7ff f9e8 	bl	8002350 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <HAL_I2C_IsDeviceReady+0x13a>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	22a0      	movs	r2, #160	; 0xa0
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2ba0      	cmp	r3, #160	; 0xa0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_I2C_IsDeviceReady+0x188>
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <HAL_I2C_IsDeviceReady+0x188>
 8002fda:	7dbb      	ldrb	r3, [r7, #22]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0cd      	beq.n	8002f7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d129      	bne.n	800304a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2319      	movs	r3, #25
 8003022:	2201      	movs	r2, #1
 8003024:	4921      	ldr	r1, [pc, #132]	; (80030ac <HAL_I2C_IsDeviceReady+0x254>)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f001 fc34 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e036      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e02c      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003062:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	490f      	ldr	r1, [pc, #60]	; (80030ac <HAL_I2C_IsDeviceReady+0x254>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f001 fc10 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e012      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3301      	adds	r3, #1
 8003082:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	f4ff af32 	bcc.w	8002ef2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d003      	beq.n	80030ec <HAL_I2C_EV_IRQHandler+0x38>
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	f040 80c1 	bne.w	800326e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_I2C_EV_IRQHandler+0x6e>
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800310c:	d003      	beq.n	8003116 <HAL_I2C_EV_IRQHandler+0x62>
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003114:	d101      	bne.n	800311a <HAL_I2C_EV_IRQHandler+0x66>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_I2C_EV_IRQHandler+0x68>
 800311a:	2300      	movs	r3, #0
 800311c:	2b01      	cmp	r3, #1
 800311e:	f000 8132 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <HAL_I2C_EV_IRQHandler+0x92>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f001 fd64 	bl	8004c06 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fcd2 	bl	8003ae8 <I2C_Master_SB>
 8003144:	e092      	b.n	800326c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	08db      	lsrs	r3, r3, #3
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0xb2>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	0a5b      	lsrs	r3, r3, #9
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fd48 	bl	8003bf4 <I2C_Master_ADD10>
 8003164:	e082      	b.n	800326c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0xd2>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	0a5b      	lsrs	r3, r3, #9
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fd62 	bl	8003c48 <I2C_Master_ADDR>
 8003184:	e072      	b.n	800326c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d03b      	beq.n	800320a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a0:	f000 80f3 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	09db      	lsrs	r3, r3, #7
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00f      	beq.n	80031d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f94c 	bl	8003466 <I2C_MasterTransmit_TXE>
 80031ce:	e04d      	b.n	800326c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80d6 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	0a5b      	lsrs	r3, r3, #9
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80cf 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	2b21      	cmp	r3, #33	; 0x21
 80031f0:	d103      	bne.n	80031fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9d3 	bl	800359e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f8:	e0c7      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	f040 80c4 	bne.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa41 	bl	800368a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003208:	e0bf      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003218:	f000 80b7 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00f      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0x194>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <HAL_I2C_EV_IRQHandler+0x194>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d103      	bne.n	8003248 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fab6 	bl	80037b2 <I2C_MasterReceive_RXNE>
 8003246:	e011      	b.n	800326c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 809a 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	0a5b      	lsrs	r3, r3, #9
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8093 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fb55 	bl	8003914 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326a:	e08e      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
 800326c:	e08d      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e007      	b.n	8003290 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0a5b      	lsrs	r3, r3, #9
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032b8:	69b9      	ldr	r1, [r7, #24]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 ff13 	bl	80040e6 <I2C_Slave_ADDR>
 80032c0:	e066      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	0a5b      	lsrs	r3, r3, #9
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 ff4e 	bl	800417c <I2C_Slave_STOPF>
 80032e0:	e056      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032e2:	7bbb      	ldrb	r3, [r7, #14]
 80032e4:	2b21      	cmp	r3, #33	; 0x21
 80032e6:	d002      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x23a>
 80032e8:	7bbb      	ldrb	r3, [r7, #14]
 80032ea:	2b29      	cmp	r3, #41	; 0x29
 80032ec:	d125      	bne.n	800333a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	09db      	lsrs	r3, r3, #7
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00f      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x266>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	0a9b      	lsrs	r3, r3, #10
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x266>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fe29 	bl	8003f6a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003318:	e039      	b.n	800338e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d033      	beq.n	800338e <HAL_I2C_EV_IRQHandler+0x2da>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	0a5b      	lsrs	r3, r3, #9
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02d      	beq.n	800338e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fe56 	bl	8003fe4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003338:	e029      	b.n	800338e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	0a9b      	lsrs	r3, r3, #10
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fe61 	bl	8004026 <I2C_SlaveReceive_RXNE>
 8003364:	e014      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	0a5b      	lsrs	r3, r3, #9
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fe8f 	bl	80040a2 <I2C_SlaveReceive_BTF>
 8003384:	e004      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	70fb      	strb	r3, [r7, #3]
 80033f2:	4613      	mov	r3, r2
 80033f4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d150      	bne.n	800352e <I2C_MasterTransmit_TXE+0xc8>
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b21      	cmp	r3, #33	; 0x21
 8003490:	d14d      	bne.n	800352e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d01d      	beq.n	80034d4 <I2C_MasterTransmit_TXE+0x6e>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b20      	cmp	r3, #32
 800349c:	d01a      	beq.n	80034d4 <I2C_MasterTransmit_TXE+0x6e>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a4:	d016      	beq.n	80034d4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2211      	movs	r2, #17
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff62 	bl	8003396 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d2:	e060      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d107      	bne.n	800351e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff7d 	bl	8003416 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800351c:	e03b      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff35 	bl	8003396 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800352c:	e033      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b21      	cmp	r3, #33	; 0x21
 8003532:	d005      	beq.n	8003540 <I2C_MasterTransmit_TXE+0xda>
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d12d      	bne.n	8003596 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b22      	cmp	r3, #34	; 0x22
 800353e:	d12a      	bne.n	8003596 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800355a:	e01c      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d103      	bne.n	8003570 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f88e 	bl	800368a <I2C_MemoryTransmit_TXE_BTF>
}
 800356e:	e012      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003594:	e7ff      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b21      	cmp	r3, #33	; 0x21
 80035b6:	d164      	bne.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035e6:	e04c      	b.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d01d      	beq.n	800362a <I2C_MasterTransmit_BTF+0x8c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d01a      	beq.n	800362a <I2C_MasterTransmit_BTF+0x8c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035fa:	d016      	beq.n	800362a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800360a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2211      	movs	r2, #17
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff feb7 	bl	8003396 <HAL_I2C_MasterTxCpltCallback>
}
 8003628:	e02b      	b.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003638:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d107      	bne.n	8003674 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fed2 	bl	8003416 <HAL_I2C_MemTxCpltCallback>
}
 8003672:	e006      	b.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fe8a 	bl	8003396 <HAL_I2C_MasterTxCpltCallback>
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11d      	bne.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10b      	bne.n	80036c2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80036c0:	e073      	b.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	121b      	asrs	r3, r3, #8
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036dc:	e065      	b.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10b      	bne.n	80036fe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036fc:	e055      	b.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	2b02      	cmp	r3, #2
 8003704:	d151      	bne.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b22      	cmp	r3, #34	; 0x22
 800370a:	d10d      	bne.n	8003728 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003726:	e040      	b.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d112      	bne.n	800375e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800375c:	e025      	b.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d120      	bne.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b21      	cmp	r3, #33	; 0x21
 800376c:	d11d      	bne.n	80037aa <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fe36 	bl	8003416 <HAL_I2C_MemTxCpltCallback>
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b22      	cmp	r3, #34	; 0x22
 80037c4:	f040 80a2 	bne.w	800390c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d921      	bls.n	800381a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b03      	cmp	r3, #3
 8003804:	f040 8082 	bne.w	800390c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003816:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003818:	e078      	b.n	800390c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	2b02      	cmp	r3, #2
 8003820:	d074      	beq.n	800390c <I2C_MasterReceive_RXNE+0x15a>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <I2C_MasterReceive_RXNE+0x7c>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d16e      	bne.n	800390c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f001 f988 	bl	8004b44 <I2C_WaitOnSTOPRequestThroughIT>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d142      	bne.n	80038c0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003858:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d10a      	bne.n	80038aa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fdc1 	bl	800342a <HAL_I2C_MemRxCpltCallback>
}
 80038a8:	e030      	b.n	800390c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2212      	movs	r2, #18
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fd76 	bl	80033aa <HAL_I2C_MasterRxCpltCallback>
}
 80038be:	e025      	b.n	800390c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fd99 	bl	800343e <HAL_I2C_ErrorCallback>
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b04      	cmp	r3, #4
 800392a:	d11b      	bne.n	8003964 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003962:	e0bd      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d129      	bne.n	80039c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d00a      	beq.n	800399a <I2C_MasterReceive_BTF+0x86>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d007      	beq.n	800399a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039c0:	e08e      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d176      	bne.n	8003aba <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d002      	beq.n	80039d8 <I2C_MasterReceive_BTF+0xc4>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d108      	bne.n	80039ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e019      	b.n	8003a1e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d002      	beq.n	80039f6 <I2C_MasterReceive_BTF+0xe2>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d108      	bne.n	8003a08 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00a      	b.n	8003a1e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d007      	beq.n	8003a1e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d10a      	bne.n	8003aa4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fcc4 	bl	800342a <HAL_I2C_MemRxCpltCallback>
}
 8003aa2:	e01d      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2212      	movs	r2, #18
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fc79 	bl	80033aa <HAL_I2C_MasterRxCpltCallback>
}
 8003ab8:	e012      	b.n	8003ae0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d117      	bne.n	8003b2c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b14:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b16:	e067      	b.n	8003be8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]
}
 8003b2a:	e05d      	b.n	8003be8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b34:	d133      	bne.n	8003b9e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b21      	cmp	r3, #33	; 0x21
 8003b40:	d109      	bne.n	8003b56 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b52:	611a      	str	r2, [r3, #16]
 8003b54:	e008      	b.n	8003b68 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <I2C_Master_SB+0x92>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d032      	beq.n	8003be8 <I2C_Master_SB+0x100>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02d      	beq.n	8003be8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9a:	605a      	str	r2, [r3, #4]
}
 8003b9c:	e024      	b.n	8003be8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10e      	bne.n	8003bc4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	11db      	asrs	r3, r3, #7
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f003 0306 	and.w	r3, r3, #6
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f063 030f 	orn	r3, r3, #15
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
}
 8003bc2:	e011      	b.n	8003be8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10d      	bne.n	8003be8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	11db      	asrs	r3, r3, #7
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f003 0306 	and.w	r3, r3, #6
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f063 030e 	orn	r3, r3, #14
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <I2C_Master_ADD10+0x26>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00c      	beq.n	8003c3c <I2C_Master_ADD10+0x48>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3a:	605a      	str	r2, [r3, #4]
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b091      	sub	sp, #68	; 0x44
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b22      	cmp	r3, #34	; 0x22
 8003c70:	f040 8169 	bne.w	8003f46 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <I2C_Master_ADDR+0x54>
 8003c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d10b      	bne.n	8003c9c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c84:	2300      	movs	r3, #0
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	e160      	b.n	8003f5e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11d      	bne.n	8003ce0 <I2C_Master_ADDR+0x98>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cac:	d118      	bne.n	8003ce0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50
 8003cde:	e13e      	b.n	8003f5e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d113      	bne.n	8003d12 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e115      	b.n	8003f3e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 808a 	bne.w	8003e32 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d24:	d137      	bne.n	8003d96 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d34:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d44:	d113      	bne.n	8003d6e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	e0e7      	b.n	8003f3e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	e0d3      	b.n	8003f3e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d02e      	beq.n	8003dfa <I2C_Master_ADDR+0x1b2>
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d02b      	beq.n	8003dfa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	2b12      	cmp	r3, #18
 8003da6:	d102      	bne.n	8003dae <I2C_Master_ADDR+0x166>
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d125      	bne.n	8003dfa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d00e      	beq.n	8003dd2 <I2C_Master_ADDR+0x18a>
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d00b      	beq.n	8003dd2 <I2C_Master_ADDR+0x18a>
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d008      	beq.n	8003dd2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e007      	b.n	8003de2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003de0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	e0a1      	b.n	8003f3e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e085      	b.n	8003f3e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d14d      	bne.n	8003ed8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d016      	beq.n	8003e70 <I2C_Master_ADDR+0x228>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d013      	beq.n	8003e70 <I2C_Master_ADDR+0x228>
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d010      	beq.n	8003e70 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e007      	b.n	8003e80 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e7e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d117      	bne.n	8003ec0 <I2C_Master_ADDR+0x278>
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e96:	d00b      	beq.n	8003eb0 <I2C_Master_ADDR+0x268>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d008      	beq.n	8003eb0 <I2C_Master_ADDR+0x268>
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d005      	beq.n	8003eb0 <I2C_Master_ADDR+0x268>
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d002      	beq.n	8003eb0 <I2C_Master_ADDR+0x268>
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d107      	bne.n	8003ec0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ebe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	e032      	b.n	8003f3e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef6:	d117      	bne.n	8003f28 <I2C_Master_ADDR+0x2e0>
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efe:	d00b      	beq.n	8003f18 <I2C_Master_ADDR+0x2d0>
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d008      	beq.n	8003f18 <I2C_Master_ADDR+0x2d0>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d005      	beq.n	8003f18 <I2C_Master_ADDR+0x2d0>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d002      	beq.n	8003f18 <I2C_Master_ADDR+0x2d0>
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d107      	bne.n	8003f28 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f44:	e00b      	b.n	8003f5e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
}
 8003f5c:	e7ff      	b.n	8003f5e <I2C_Master_ADDR+0x316>
 8003f5e:	bf00      	nop
 8003f60:	3744      	adds	r7, #68	; 0x44
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d02b      	beq.n	8003fdc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d114      	bne.n	8003fdc <I2C_SlaveTransmit_TXE+0x72>
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b29      	cmp	r3, #41	; 0x29
 8003fb6:	d111      	bne.n	8003fdc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2221      	movs	r2, #33	; 0x21
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2228      	movs	r2, #40	; 0x28
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff f9f1 	bl	80033be <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d011      	beq.n	800401a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02c      	beq.n	800409a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d114      	bne.n	800409a <I2C_SlaveReceive_RXNE+0x74>
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b2a      	cmp	r3, #42	; 0x2a
 8004074:	d111      	bne.n	800409a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004084:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2222      	movs	r2, #34	; 0x22
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2228      	movs	r2, #40	; 0x28
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff f99c 	bl	80033d2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004100:	2b28      	cmp	r3, #40	; 0x28
 8004102:	d127      	bne.n	8004154 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	09db      	lsrs	r3, r3, #7
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	81bb      	strh	r3, [r7, #12]
 8004136:	e002      	b.n	800413e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004146:	89ba      	ldrh	r2, [r7, #12]
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff f94a 	bl	80033e6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004152:	e00e      	b.n	8004172 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800419a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d8:	d172      	bne.n	80042c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b22      	cmp	r3, #34	; 0x22
 80041de:	d002      	beq.n	80041e6 <I2C_Slave_STOPF+0x6a>
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b2a      	cmp	r3, #42	; 0x2a
 80041e4:	d135      	bne.n	8004252 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004218:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fa2b 	bl	800267a <HAL_DMA_GetState>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d049      	beq.n	80042be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	4a69      	ldr	r2, [pc, #420]	; (80043d4 <I2C_Slave_STOPF+0x258>)
 8004230:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe f9fd 	bl	8002636 <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d03d      	beq.n	80042be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004250:	e035      	b.n	80042be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004284:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f9f5 	bl	800267a <HAL_DMA_GetState>
 8004290:	4603      	mov	r3, r0
 8004292:	2b01      	cmp	r3, #1
 8004294:	d014      	beq.n	80042c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	4a4e      	ldr	r2, [pc, #312]	; (80043d4 <I2C_Slave_STOPF+0x258>)
 800429c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe f9c7 	bl	8002636 <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
 80042bc:	e000      	b.n	80042c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03e      	beq.n	8004348 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d112      	bne.n	80042fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d112      	bne.n	8004332 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f043 0204 	orr.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f843 	bl	80043dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004356:	e039      	b.n	80043cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b2a      	cmp	r3, #42	; 0x2a
 800435c:	d109      	bne.n	8004372 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2228      	movs	r2, #40	; 0x28
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff f830 	bl	80033d2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b28      	cmp	r3, #40	; 0x28
 800437c:	d111      	bne.n	80043a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <I2C_Slave_STOPF+0x25c>)
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff f831 	bl	8003402 <HAL_I2C_ListenCpltCallback>
}
 80043a0:	e014      	b.n	80043cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	2b22      	cmp	r3, #34	; 0x22
 80043a8:	d002      	beq.n	80043b0 <I2C_Slave_STOPF+0x234>
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b22      	cmp	r3, #34	; 0x22
 80043ae:	d10d      	bne.n	80043cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff f803 	bl	80033d2 <HAL_I2C_SlaveRxCpltCallback>
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	08004745 	.word	0x08004745
 80043d8:	ffff0000 	.word	0xffff0000

080043dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043f4:	7bbb      	ldrb	r3, [r7, #14]
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d002      	beq.n	8004400 <I2C_ITError+0x24>
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d10a      	bne.n	8004416 <I2C_ITError+0x3a>
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b22      	cmp	r3, #34	; 0x22
 8004404:	d107      	bne.n	8004416 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004414:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800441c:	2b28      	cmp	r3, #40	; 0x28
 800441e:	d107      	bne.n	8004430 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2228      	movs	r2, #40	; 0x28
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800442e:	e015      	b.n	800445c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d00a      	beq.n	8004456 <I2C_ITError+0x7a>
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b60      	cmp	r3, #96	; 0x60
 8004444:	d007      	beq.n	8004456 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446a:	d162      	bne.n	8004532 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d020      	beq.n	80044cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	4a6a      	ldr	r2, [pc, #424]	; (8004638 <I2C_ITError+0x25c>)
 8004490:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe f8cd 	bl	8002636 <HAL_DMA_Abort_IT>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8089 	beq.w	80045b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044c6:	4610      	mov	r0, r2
 80044c8:	4798      	blx	r3
 80044ca:	e074      	b.n	80045b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	4a59      	ldr	r2, [pc, #356]	; (8004638 <I2C_ITError+0x25c>)
 80044d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe f8ac 	bl	8002636 <HAL_DMA_Abort_IT>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d068      	beq.n	80045b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d10b      	bne.n	800450a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800452c:	4610      	mov	r0, r2
 800452e:	4798      	blx	r3
 8004530:	e041      	b.n	80045b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b60      	cmp	r3, #96	; 0x60
 800453c:	d125      	bne.n	800458a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d10b      	bne.n	8004572 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fe ff65 	bl	8003452 <HAL_I2C_AbortCpltCallback>
 8004588:	e015      	b.n	80045b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d10b      	bne.n	80045b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fe ff44 	bl	800343e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10e      	bne.n	80045e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d113      	bne.n	8004630 <I2C_ITError+0x254>
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b28      	cmp	r3, #40	; 0x28
 800460c:	d110      	bne.n	8004630 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <I2C_ITError+0x260>)
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe fee9 	bl	8003402 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08004745 	.word	0x08004745
 800463c:	ffff0000 	.word	0xffff0000

08004640 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	460b      	mov	r3, r1
 800464e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d006      	beq.n	800466a <I2C_MasterRequestWrite+0x2a>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d003      	beq.n	800466a <I2C_MasterRequestWrite+0x2a>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004668:	d108      	bne.n	800467c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e00b      	b.n	8004694 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	2b12      	cmp	r3, #18
 8004682:	d107      	bne.n	8004694 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004692:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f8f7 	bl	8004894 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d103      	bne.n	80046c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e035      	b.n	8004734 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d0:	d108      	bne.n	80046e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046e0:	611a      	str	r2, [r3, #16]
 80046e2:	e01b      	b.n	800471c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046e4:	897b      	ldrh	r3, [r7, #10]
 80046e6:	11db      	asrs	r3, r3, #7
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f063 030f 	orn	r3, r3, #15
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	490e      	ldr	r1, [pc, #56]	; (800473c <I2C_MasterRequestWrite+0xfc>)
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f91d 	bl	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e010      	b.n	8004734 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004712:	897b      	ldrh	r3, [r7, #10]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4907      	ldr	r1, [pc, #28]	; (8004740 <I2C_MasterRequestWrite+0x100>)
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f90d 	bl	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	00010008 	.word	0x00010008
 8004740:	00010002 	.word	0x00010002

08004744 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800475e:	4b4b      	ldr	r3, [pc, #300]	; (800488c <I2C_DMAAbort+0x148>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <I2C_DMAAbort+0x14c>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	0a1a      	lsrs	r2, r3, #8
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00da      	lsls	r2, r3, #3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800478a:	e00a      	b.n	80047a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3b01      	subs	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a0:	d0ea      	beq.n	8004778 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ae:	2200      	movs	r2, #0
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	2200      	movs	r2, #0
 80047c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	2200      	movs	r2, #0
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	2200      	movs	r2, #0
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b60      	cmp	r3, #96	; 0x60
 8004812:	d10e      	bne.n	8004832 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7fe fe11 	bl	8003452 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004830:	e027      	b.n	8004882 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004838:	2b28      	cmp	r3, #40	; 0x28
 800483a:	d117      	bne.n	800486c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800485a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2228      	movs	r2, #40	; 0x28
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800486a:	e007      	b.n	800487c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800487c:	6978      	ldr	r0, [r7, #20]
 800487e:	f7fe fdde 	bl	800343e <HAL_I2C_ErrorCallback>
}
 8004882:	bf00      	nop
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2000000c 	.word	0x2000000c
 8004890:	14f8b589 	.word	0x14f8b589

08004894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a4:	e025      	b.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d021      	beq.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fd fd4f 	bl	8002350 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e023      	b.n	800493a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d10d      	bne.n	8004918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	43da      	mvns	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4013      	ands	r3, r2
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	bf0c      	ite	eq
 800490e:	2301      	moveq	r3, #1
 8004910:	2300      	movne	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	e00c      	b.n	8004932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	429a      	cmp	r2, r3
 8004936:	d0b6      	beq.n	80048a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004950:	e051      	b.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	d123      	bne.n	80049aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800497a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f043 0204 	orr.w	r2, r3, #4
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e046      	b.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d021      	beq.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b2:	f7fd fccd 	bl	8002350 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d302      	bcc.n	80049c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d116      	bne.n	80049f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e020      	b.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10c      	bne.n	8004a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e00b      	b.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d18d      	bne.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a4c:	e02d      	b.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f8aa 	bl	8004ba8 <I2C_IsAcknowledgeFailed>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e02d      	b.n	8004aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d021      	beq.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fd fc73 	bl	8002350 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e007      	b.n	8004aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d1ca      	bne.n	8004a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ace:	e02d      	b.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f869 	bl	8004ba8 <I2C_IsAcknowledgeFailed>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e02d      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d021      	beq.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fd fc32 	bl	8002350 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d116      	bne.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e007      	b.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d1ca      	bne.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	0a1a      	lsrs	r2, r3, #8
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d107      	bne.n	8004b82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e008      	b.n	8004b94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b90:	d0e9      	beq.n	8004b66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	14f8b589 	.word	0x14f8b589

08004ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d11b      	bne.n	8004bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c12:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c16:	d103      	bne.n	8004c20 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c1e:	e007      	b.n	8004c30 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c28:	d102      	bne.n	8004c30 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e264      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d075      	beq.n	8004d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5a:	4ba3      	ldr	r3, [pc, #652]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4ba0      	ldr	r3, [pc, #640]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d112      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c72:	4b9d      	ldr	r3, [pc, #628]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b99      	ldr	r3, [pc, #612]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e23f      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x74>
 8004ca2:	4b91      	ldr	r3, [pc, #580]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a90      	ldr	r2, [pc, #576]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b8b      	ldr	r3, [pc, #556]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a8a      	ldr	r2, [pc, #552]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a87      	ldr	r2, [pc, #540]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cd4:	4b84      	ldr	r3, [pc, #528]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a83      	ldr	r2, [pc, #524]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b81      	ldr	r3, [pc, #516]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a80      	ldr	r2, [pc, #512]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fb2c 	bl	8002350 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fb28 	bl	8002350 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e204      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b76      	ldr	r3, [pc, #472]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fd fb18 	bl	8002350 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fd fb14 	bl	8002350 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e1f0      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	4b6c      	ldr	r3, [pc, #432]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d52:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b62      	ldr	r3, [pc, #392]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d11c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	4b5c      	ldr	r3, [pc, #368]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1c4      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4952      	ldr	r1, [pc, #328]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	e03a      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d020      	beq.n	8004dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dac:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <HAL_RCC_OscConfig+0x2b0>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd facd 	bl	8002350 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fd fac9 	bl	8002350 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1a5      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4940      	ldr	r1, [pc, #256]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	e015      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dee:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <HAL_RCC_OscConfig+0x2b0>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd faac 	bl	8002350 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dfc:	f7fd faa8 	bl	8002350 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e184      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d030      	beq.n	8004e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCC_OscConfig+0x2b4>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd fa8c 	bl	8002350 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fd fa88 	bl	8002350 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e164      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x200>
 8004e5a:	e015      	b.n	8004e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <HAL_RCC_OscConfig+0x2b4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fd fa75 	bl	8002350 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd fa71 	bl	8002350 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e14d      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80a0 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_OscConfig+0x2b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d121      	bne.n	8004f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <HAL_RCC_OscConfig+0x2b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <HAL_RCC_OscConfig+0x2b8>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ede:	f7fd fa37 	bl	8002350 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e011      	b.n	8004f0a <HAL_RCC_OscConfig+0x2ce>
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470000 	.word	0x42470000
 8004ef0:	42470e80 	.word	0x42470e80
 8004ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef8:	f7fd fa2a 	bl	8002350 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e106      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0a:	4b85      	ldr	r3, [pc, #532]	; (8005120 <HAL_RCC_OscConfig+0x4e4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d106      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2f0>
 8004f1e:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a80      	ldr	r2, [pc, #512]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	e01c      	b.n	8004f66 <HAL_RCC_OscConfig+0x32a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d10c      	bne.n	8004f4e <HAL_RCC_OscConfig+0x312>
 8004f34:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a7a      	ldr	r2, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f3a:	f043 0304 	orr.w	r3, r3, #4
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	4b78      	ldr	r3, [pc, #480]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4c:	e00b      	b.n	8004f66 <HAL_RCC_OscConfig+0x32a>
 8004f4e:	4b75      	ldr	r3, [pc, #468]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a74      	ldr	r2, [pc, #464]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b72      	ldr	r3, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a71      	ldr	r2, [pc, #452]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d015      	beq.n	8004f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6e:	f7fd f9ef 	bl	8002350 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f74:	e00a      	b.n	8004f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f76:	f7fd f9eb 	bl	8002350 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0c5      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8c:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ee      	beq.n	8004f76 <HAL_RCC_OscConfig+0x33a>
 8004f98:	e014      	b.n	8004fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9a:	f7fd f9d9 	bl	8002350 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f7fd f9d5 	bl	8002350 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0af      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb8:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ee      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	4a55      	ldr	r2, [pc, #340]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 809b 	beq.w	8005116 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe0:	4b50      	ldr	r3, [pc, #320]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d05c      	beq.n	80050a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d141      	bne.n	8005078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff4:	4b4c      	ldr	r3, [pc, #304]	; (8005128 <HAL_RCC_OscConfig+0x4ec>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fd f9a9 	bl	8002350 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7fd f9a5 	bl	8002350 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e081      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005014:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	3b01      	subs	r3, #1
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	4937      	ldr	r1, [pc, #220]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <HAL_RCC_OscConfig+0x4ec>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fd f97e 	bl	8002350 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005058:	f7fd f97a 	bl	8002350 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e056      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x41c>
 8005076:	e04e      	b.n	8005116 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <HAL_RCC_OscConfig+0x4ec>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507e:	f7fd f967 	bl	8002350 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005086:	f7fd f963 	bl	8002350 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e03f      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005098:	4b22      	ldr	r3, [pc, #136]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x44a>
 80050a4:	e037      	b.n	8005116 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e032      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d028      	beq.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d121      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d11a      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050e2:	4013      	ands	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d111      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d107      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40007000 	.word	0x40007000
 8005124:	40023800 	.word	0x40023800
 8005128:	42470060 	.word	0x42470060

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0cc      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90c      	bls.n	8005168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b65      	ldr	r3, [pc, #404]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b63      	ldr	r3, [pc, #396]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0b8      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005180:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a58      	ldr	r2, [pc, #352]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800518a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a52      	ldr	r2, [pc, #328]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	494d      	ldr	r1, [pc, #308]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d044      	beq.n	800524c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ea:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e067      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4934      	ldr	r1, [pc, #208]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800521c:	f7fd f898 	bl	8002350 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fd f894 	bl	8002350 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e04f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d20c      	bcs.n	8005274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e032      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4916      	ldr	r1, [pc, #88]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052b2:	f000 f821 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	490a      	ldr	r1, [pc, #40]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	5ccb      	ldrb	r3, [r1, r3]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fc fff8 	bl	80022c8 <HAL_InitTick>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023c00 	.word	0x40023c00
 80052e8:	40023800 	.word	0x40023800
 80052ec:	08006b5c 	.word	0x08006b5c
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	20000040 	.word	0x20000040

080052f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f8:	b5b0      	push	{r4, r5, r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052fe:	2100      	movs	r1, #0
 8005300:	6079      	str	r1, [r7, #4]
 8005302:	2100      	movs	r1, #0
 8005304:	60f9      	str	r1, [r7, #12]
 8005306:	2100      	movs	r1, #0
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800530a:	2100      	movs	r1, #0
 800530c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800530e:	4952      	ldr	r1, [pc, #328]	; (8005458 <HAL_RCC_GetSysClockFreq+0x160>)
 8005310:	6889      	ldr	r1, [r1, #8]
 8005312:	f001 010c 	and.w	r1, r1, #12
 8005316:	2908      	cmp	r1, #8
 8005318:	d00d      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0x3e>
 800531a:	2908      	cmp	r1, #8
 800531c:	f200 8094 	bhi.w	8005448 <HAL_RCC_GetSysClockFreq+0x150>
 8005320:	2900      	cmp	r1, #0
 8005322:	d002      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0x32>
 8005324:	2904      	cmp	r1, #4
 8005326:	d003      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x38>
 8005328:	e08e      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800532a:	4b4c      	ldr	r3, [pc, #304]	; (800545c <HAL_RCC_GetSysClockFreq+0x164>)
 800532c:	60bb      	str	r3, [r7, #8]
       break;
 800532e:	e08e      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005330:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <HAL_RCC_GetSysClockFreq+0x168>)
 8005332:	60bb      	str	r3, [r7, #8]
      break;
 8005334:	e08b      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005336:	4948      	ldr	r1, [pc, #288]	; (8005458 <HAL_RCC_GetSysClockFreq+0x160>)
 8005338:	6849      	ldr	r1, [r1, #4]
 800533a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800533e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005340:	4945      	ldr	r1, [pc, #276]	; (8005458 <HAL_RCC_GetSysClockFreq+0x160>)
 8005342:	6849      	ldr	r1, [r1, #4]
 8005344:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005348:	2900      	cmp	r1, #0
 800534a:	d024      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534c:	4942      	ldr	r1, [pc, #264]	; (8005458 <HAL_RCC_GetSysClockFreq+0x160>)
 800534e:	6849      	ldr	r1, [r1, #4]
 8005350:	0989      	lsrs	r1, r1, #6
 8005352:	4608      	mov	r0, r1
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	f240 14ff 	movw	r4, #511	; 0x1ff
 800535c:	f04f 0500 	mov.w	r5, #0
 8005360:	ea00 0204 	and.w	r2, r0, r4
 8005364:	ea01 0305 	and.w	r3, r1, r5
 8005368:	493d      	ldr	r1, [pc, #244]	; (8005460 <HAL_RCC_GetSysClockFreq+0x168>)
 800536a:	fb01 f003 	mul.w	r0, r1, r3
 800536e:	2100      	movs	r1, #0
 8005370:	fb01 f102 	mul.w	r1, r1, r2
 8005374:	1844      	adds	r4, r0, r1
 8005376:	493a      	ldr	r1, [pc, #232]	; (8005460 <HAL_RCC_GetSysClockFreq+0x168>)
 8005378:	fba2 0101 	umull	r0, r1, r2, r1
 800537c:	1863      	adds	r3, r4, r1
 800537e:	4619      	mov	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	f7fa ff2e 	bl	80001e8 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e04a      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_RCC_GetSysClockFreq+0x160>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	099b      	lsrs	r3, r3, #6
 800539c:	461a      	mov	r2, r3
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	ea02 0400 	and.w	r4, r2, r0
 80053ae:	ea03 0501 	and.w	r5, r3, r1
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	014b      	lsls	r3, r1, #5
 80053c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053c4:	0142      	lsls	r2, r0, #5
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	1b00      	subs	r0, r0, r4
 80053cc:	eb61 0105 	sbc.w	r1, r1, r5
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	018b      	lsls	r3, r1, #6
 80053da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053de:	0182      	lsls	r2, r0, #6
 80053e0:	1a12      	subs	r2, r2, r0
 80053e2:	eb63 0301 	sbc.w	r3, r3, r1
 80053e6:	f04f 0000 	mov.w	r0, #0
 80053ea:	f04f 0100 	mov.w	r1, #0
 80053ee:	00d9      	lsls	r1, r3, #3
 80053f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053f4:	00d0      	lsls	r0, r2, #3
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	1912      	adds	r2, r2, r4
 80053fc:	eb45 0303 	adc.w	r3, r5, r3
 8005400:	f04f 0000 	mov.w	r0, #0
 8005404:	f04f 0100 	mov.w	r1, #0
 8005408:	0299      	lsls	r1, r3, #10
 800540a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800540e:	0290      	lsls	r0, r2, #10
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	461a      	mov	r2, r3
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	f7fa fee2 	bl	80001e8 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4613      	mov	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCC_GetSysClockFreq+0x160>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	3301      	adds	r3, #1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	60bb      	str	r3, [r7, #8]
      break;
 8005446:	e002      	b.n	800544e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <HAL_RCC_GetSysClockFreq+0x164>)
 800544a:	60bb      	str	r3, [r7, #8]
      break;
 800544c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544e:	68bb      	ldr	r3, [r7, #8]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bdb0      	pop	{r4, r5, r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	00f42400 	.word	0x00f42400
 8005460:	017d7840 	.word	0x017d7840

08005464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_RCC_GetHCLKFreq+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2000000c 	.word	0x2000000c

0800547c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005480:	f7ff fff0 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0a9b      	lsrs	r3, r3, #10
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4903      	ldr	r1, [pc, #12]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40023800 	.word	0x40023800
 80054a0:	08006b6c 	.word	0x08006b6c

080054a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054a8:	f7ff ffdc 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0b5b      	lsrs	r3, r3, #13
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	08006b6c 	.word	0x08006b6c

080054cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07b      	b.n	80055d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ee:	d009      	beq.n	8005504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
 80054f6:	e005      	b.n	8005504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc fc44 	bl	8001dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	ea42 0103 	orr.w	r1, r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	f003 0104 	and.w	r1, r3, #4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f003 0210 	and.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_SPI_Transmit+0x22>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e126      	b.n	800584e <HAL_SPI_Transmit+0x270>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005608:	f7fc fea2 	bl	8002350 <HAL_GetTick>
 800560c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005622:	e10b      	b.n	800583c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x52>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005634:	e102      	b.n	800583c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2203      	movs	r2, #3
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	d10f      	bne.n	800569e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d007      	beq.n	80056bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c4:	d14b      	bne.n	800575e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0xf6>
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d13e      	bne.n	8005752 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056f8:	e02b      	b.n	8005752 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d112      	bne.n	800572e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	; 0x36
 800572c:	e011      	b.n	8005752 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572e:	f7fc fe0f 	bl	8002350 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d803      	bhi.n	8005746 <HAL_SPI_Transmit+0x168>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d102      	bne.n	800574c <HAL_SPI_Transmit+0x16e>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005750:	e074      	b.n	800583c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ce      	bne.n	80056fa <HAL_SPI_Transmit+0x11c>
 800575c:	e04c      	b.n	80057f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SPI_Transmit+0x18e>
 8005766:	8afb      	ldrh	r3, [r7, #22]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d140      	bne.n	80057ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005792:	e02c      	b.n	80057ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d113      	bne.n	80057ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057c8:	e011      	b.n	80057ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ca:	f7fc fdc1 	bl	8002350 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d803      	bhi.n	80057e2 <HAL_SPI_Transmit+0x204>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d102      	bne.n	80057e8 <HAL_SPI_Transmit+0x20a>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ec:	e026      	b.n	800583c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1cd      	bne.n	8005794 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f9df 	bl	8005bc0 <SPI_EndRxTxTransaction>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e000      	b.n	800583c <HAL_SPI_Transmit+0x25e>
  }

error:
 800583a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800584c:	7ffb      	ldrb	r3, [r7, #31]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10f      	bne.n	800589c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	099b      	lsrs	r3, r3, #6
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
    return;
 800589a:	e0d7      	b.n	8005a4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_SPI_IRQHandler+0x66>
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
    return;
 80058bc:	e0c6      	b.n	8005a4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10c      	bne.n	80058e4 <HAL_SPI_IRQHandler+0x8c>
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	099b      	lsrs	r3, r3, #6
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80b4 	beq.w	8005a4c <HAL_SPI_IRQHandler+0x1f4>
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80ad 	beq.w	8005a4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	099b      	lsrs	r3, r3, #6
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d023      	beq.n	8005946 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d011      	beq.n	800592e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	f043 0204 	orr.w	r2, r3, #4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	e00b      	b.n	8005946 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	693b      	ldr	r3, [r7, #16]
        return;
 8005944:	e082      	b.n	8005a4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d014      	beq.n	800597c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	f043 0208 	orr.w	r2, r3, #8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005994:	2300      	movs	r3, #0
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04f      	beq.n	8005a4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_SPI_IRQHandler+0x17e>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d034      	beq.n	8005a40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0203 	bic.w	r2, r2, #3
 80059e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d011      	beq.n	8005a12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <HAL_SPI_IRQHandler+0x1fc>)
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fc fe1b 	bl	8002636 <HAL_DMA_Abort_IT>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1e:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <HAL_SPI_IRQHandler+0x1fc>)
 8005a20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fc fe05 	bl	8002636 <HAL_DMA_Abort_IT>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005a3e:	e003      	b.n	8005a48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f809 	bl	8005a58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a46:	e000      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005a48:	bf00      	nop
    return;
 8005a4a:	bf00      	nop
  }
}
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	08005a89 	.word	0x08005a89

08005a58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7a:	b2db      	uxtb	r3, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7ff ffd8 	bl	8005a58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ac0:	f7fc fc46 	bl	8002350 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	4413      	add	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ad0:	f7fc fc3e 	bl	8002350 <HAL_GetTick>
 8005ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ad6:	4b39      	ldr	r3, [pc, #228]	; (8005bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	015b      	lsls	r3, r3, #5
 8005adc:	0d1b      	lsrs	r3, r3, #20
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	fb02 f303 	mul.w	r3, r2, r3
 8005ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae6:	e054      	b.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d050      	beq.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005af0:	f7fc fc2e 	bl	8002350 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d13d      	bne.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1e:	d111      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b28:	d004      	beq.n	8005b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d107      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4c:	d10f      	bne.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e017      	b.n	8005bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	bf0c      	ite	eq
 8005ba2:	2301      	moveq	r3, #1
 8005ba4:	2300      	movne	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d19b      	bne.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2000000c 	.word	0x2000000c

08005bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bcc:	4b1b      	ldr	r3, [pc, #108]	; (8005c3c <SPI_EndRxTxTransaction+0x7c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <SPI_EndRxTxTransaction+0x80>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	0d5b      	lsrs	r3, r3, #21
 8005bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bea:	d112      	bne.n	8005c12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7ff ff5a 	bl	8005ab0 <SPI_WaitFlagStateUntilTimeout>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	f043 0220 	orr.w	r2, r3, #32
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e00f      	b.n	8005c32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c28:	2b80      	cmp	r3, #128	; 0x80
 8005c2a:	d0f2      	beq.n	8005c12 <SPI_EndRxTxTransaction+0x52>
 8005c2c:	e000      	b.n	8005c30 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c2e:	bf00      	nop
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	165e9f81 	.word	0x165e9f81

08005c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e03f      	b.n	8005cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fc fa98 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2224      	movs	r2, #36	; 0x24
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f929 	bl	8005ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695a      	ldr	r2, [r3, #20]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b08a      	sub	sp, #40	; 0x28
 8005ce2:	af02      	add	r7, sp, #8
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d17c      	bne.n	8005df8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_UART_Transmit+0x2c>
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e075      	b.n	8005dfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Transmit+0x3e>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e06e      	b.n	8005dfa <HAL_UART_Transmit+0x11c>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2221      	movs	r2, #33	; 0x21
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d32:	f7fc fb0d 	bl	8002350 <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4c:	d108      	bne.n	8005d60 <HAL_UART_Transmit+0x82>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e003      	b.n	8005d68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d70:	e02a      	b.n	8005dc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f840 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e036      	b.n	8005dfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3302      	adds	r3, #2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e007      	b.n	8005dba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1cf      	bne.n	8005d72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2140      	movs	r1, #64	; 0x40
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f810 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e006      	b.n	8005dfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b090      	sub	sp, #64	; 0x40
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e12:	e050      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d04c      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e22:	f7fc fa95 	bl	8002350 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d241      	bcs.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e52:	637a      	str	r2, [r7, #52]	; 0x34
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	613b      	str	r3, [r7, #16]
   return(result);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e86:	623a      	str	r2, [r7, #32]
 8005e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e00f      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d09f      	beq.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3740      	adds	r7, #64	; 0x40
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	b09f      	sub	sp, #124	; 0x7c
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef6:	68d9      	ldr	r1, [r3, #12]
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	ea40 0301 	orr.w	r3, r0, r1
 8005f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f24:	f021 010c 	bic.w	r1, r1, #12
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	6999      	ldr	r1, [r3, #24]
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	ea40 0301 	orr.w	r3, r0, r1
 8005f48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4bc5      	ldr	r3, [pc, #788]	; (8006264 <UART_SetConfig+0x384>)
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d004      	beq.n	8005f5e <UART_SetConfig+0x7e>
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4bc3      	ldr	r3, [pc, #780]	; (8006268 <UART_SetConfig+0x388>)
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d103      	bne.n	8005f66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f5e:	f7ff faa1 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8005f62:	6778      	str	r0, [r7, #116]	; 0x74
 8005f64:	e002      	b.n	8005f6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f66:	f7ff fa89 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8005f6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f74:	f040 80b6 	bne.w	80060e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7a:	461c      	mov	r4, r3
 8005f7c:	f04f 0500 	mov.w	r5, #0
 8005f80:	4622      	mov	r2, r4
 8005f82:	462b      	mov	r3, r5
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	6439      	str	r1, [r7, #64]	; 0x40
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f90:	1912      	adds	r2, r2, r4
 8005f92:	eb45 0303 	adc.w	r3, r5, r3
 8005f96:	f04f 0000 	mov.w	r0, #0
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	00d9      	lsls	r1, r3, #3
 8005fa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa4:	00d0      	lsls	r0, r2, #3
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	1911      	adds	r1, r2, r4
 8005fac:	6639      	str	r1, [r7, #96]	; 0x60
 8005fae:	416b      	adcs	r3, r5
 8005fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005fcc:	f7fa f90c 	bl	80001e8 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4ba5      	ldr	r3, [pc, #660]	; (800626c <UART_SetConfig+0x38c>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011e      	lsls	r6, r3, #4
 8005fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe0:	461c      	mov	r4, r3
 8005fe2:	f04f 0500 	mov.w	r5, #0
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	1891      	adds	r1, r2, r2
 8005fec:	6339      	str	r1, [r7, #48]	; 0x30
 8005fee:	415b      	adcs	r3, r3
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ff6:	1912      	adds	r2, r2, r4
 8005ff8:	eb45 0303 	adc.w	r3, r5, r3
 8005ffc:	f04f 0000 	mov.w	r0, #0
 8006000:	f04f 0100 	mov.w	r1, #0
 8006004:	00d9      	lsls	r1, r3, #3
 8006006:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800600a:	00d0      	lsls	r0, r2, #3
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	1911      	adds	r1, r2, r4
 8006012:	65b9      	str	r1, [r7, #88]	; 0x58
 8006014:	416b      	adcs	r3, r5
 8006016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	461a      	mov	r2, r3
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	1891      	adds	r1, r2, r2
 8006024:	62b9      	str	r1, [r7, #40]	; 0x28
 8006026:	415b      	adcs	r3, r3
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800602a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800602e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006032:	f7fa f8d9 	bl	80001e8 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b8c      	ldr	r3, [pc, #560]	; (800626c <UART_SetConfig+0x38c>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	; 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a87      	ldr	r2, [pc, #540]	; (800626c <UART_SetConfig+0x38c>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800605c:	441e      	add	r6, r3
 800605e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006060:	4618      	mov	r0, r3
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	1894      	adds	r4, r2, r2
 800606c:	623c      	str	r4, [r7, #32]
 800606e:	415b      	adcs	r3, r3
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
 8006072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006076:	1812      	adds	r2, r2, r0
 8006078:	eb41 0303 	adc.w	r3, r1, r3
 800607c:	f04f 0400 	mov.w	r4, #0
 8006080:	f04f 0500 	mov.w	r5, #0
 8006084:	00dd      	lsls	r5, r3, #3
 8006086:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800608a:	00d4      	lsls	r4, r2, #3
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	1814      	adds	r4, r2, r0
 8006092:	653c      	str	r4, [r7, #80]	; 0x50
 8006094:	414b      	adcs	r3, r1
 8006096:	657b      	str	r3, [r7, #84]	; 0x54
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	461a      	mov	r2, r3
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	1891      	adds	r1, r2, r2
 80060a4:	61b9      	str	r1, [r7, #24]
 80060a6:	415b      	adcs	r3, r3
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060b2:	f7fa f899 	bl	80001e8 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4b6c      	ldr	r3, [pc, #432]	; (800626c <UART_SetConfig+0x38c>)
 80060bc:	fba3 1302 	umull	r1, r3, r3, r2
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	2164      	movs	r1, #100	; 0x64
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	3332      	adds	r3, #50	; 0x32
 80060ce:	4a67      	ldr	r2, [pc, #412]	; (800626c <UART_SetConfig+0x38c>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f003 0207 	and.w	r2, r3, #7
 80060da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4432      	add	r2, r6
 80060e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060e2:	e0b9      	b.n	8006258 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e6:	461c      	mov	r4, r3
 80060e8:	f04f 0500 	mov.w	r5, #0
 80060ec:	4622      	mov	r2, r4
 80060ee:	462b      	mov	r3, r5
 80060f0:	1891      	adds	r1, r2, r2
 80060f2:	6139      	str	r1, [r7, #16]
 80060f4:	415b      	adcs	r3, r3
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060fc:	1912      	adds	r2, r2, r4
 80060fe:	eb45 0303 	adc.w	r3, r5, r3
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f04f 0100 	mov.w	r1, #0
 800610a:	00d9      	lsls	r1, r3, #3
 800610c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006110:	00d0      	lsls	r0, r2, #3
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	eb12 0804 	adds.w	r8, r2, r4
 800611a:	eb43 0905 	adc.w	r9, r3, r5
 800611e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4618      	mov	r0, r3
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006136:	0082      	lsls	r2, r0, #2
 8006138:	4640      	mov	r0, r8
 800613a:	4649      	mov	r1, r9
 800613c:	f7fa f854 	bl	80001e8 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4b49      	ldr	r3, [pc, #292]	; (800626c <UART_SetConfig+0x38c>)
 8006146:	fba3 2302 	umull	r2, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	011e      	lsls	r6, r3, #4
 800614e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006150:	4618      	mov	r0, r3
 8006152:	f04f 0100 	mov.w	r1, #0
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	1894      	adds	r4, r2, r2
 800615c:	60bc      	str	r4, [r7, #8]
 800615e:	415b      	adcs	r3, r3
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006166:	1812      	adds	r2, r2, r0
 8006168:	eb41 0303 	adc.w	r3, r1, r3
 800616c:	f04f 0400 	mov.w	r4, #0
 8006170:	f04f 0500 	mov.w	r5, #0
 8006174:	00dd      	lsls	r5, r3, #3
 8006176:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800617a:	00d4      	lsls	r4, r2, #3
 800617c:	4622      	mov	r2, r4
 800617e:	462b      	mov	r3, r5
 8006180:	1814      	adds	r4, r2, r0
 8006182:	64bc      	str	r4, [r7, #72]	; 0x48
 8006184:	414b      	adcs	r3, r1
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4618      	mov	r0, r3
 800618e:	f04f 0100 	mov.w	r1, #0
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	008b      	lsls	r3, r1, #2
 800619c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061a0:	0082      	lsls	r2, r0, #2
 80061a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061a6:	f7fa f81f 	bl	80001e8 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4b2f      	ldr	r3, [pc, #188]	; (800626c <UART_SetConfig+0x38c>)
 80061b0:	fba3 1302 	umull	r1, r3, r3, r2
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	2164      	movs	r1, #100	; 0x64
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	3332      	adds	r3, #50	; 0x32
 80061c2:	4a2a      	ldr	r2, [pc, #168]	; (800626c <UART_SetConfig+0x38c>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ce:	441e      	add	r6, r3
 80061d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d2:	4618      	mov	r0, r3
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	1894      	adds	r4, r2, r2
 80061de:	603c      	str	r4, [r7, #0]
 80061e0:	415b      	adcs	r3, r3
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e8:	1812      	adds	r2, r2, r0
 80061ea:	eb41 0303 	adc.w	r3, r1, r3
 80061ee:	f04f 0400 	mov.w	r4, #0
 80061f2:	f04f 0500 	mov.w	r5, #0
 80061f6:	00dd      	lsls	r5, r3, #3
 80061f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061fc:	00d4      	lsls	r4, r2, #3
 80061fe:	4622      	mov	r2, r4
 8006200:	462b      	mov	r3, r5
 8006202:	eb12 0a00 	adds.w	sl, r2, r0
 8006206:	eb43 0b01 	adc.w	fp, r3, r1
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	f04f 0100 	mov.w	r1, #0
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	008b      	lsls	r3, r1, #2
 800621e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006222:	0082      	lsls	r2, r0, #2
 8006224:	4650      	mov	r0, sl
 8006226:	4659      	mov	r1, fp
 8006228:	f7f9 ffde 	bl	80001e8 <__aeabi_uldivmod>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4b0e      	ldr	r3, [pc, #56]	; (800626c <UART_SetConfig+0x38c>)
 8006232:	fba3 1302 	umull	r1, r3, r3, r2
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2164      	movs	r1, #100	; 0x64
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	3332      	adds	r3, #50	; 0x32
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <UART_SetConfig+0x38c>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4432      	add	r2, r6
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	377c      	adds	r7, #124	; 0x7c
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006262:	bf00      	nop
 8006264:	40011000 	.word	0x40011000
 8006268:	40011400 	.word	0x40011400
 800626c:	51eb851f 	.word	0x51eb851f

08006270 <__libc_init_array>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4d0d      	ldr	r5, [pc, #52]	; (80062a8 <__libc_init_array+0x38>)
 8006274:	4c0d      	ldr	r4, [pc, #52]	; (80062ac <__libc_init_array+0x3c>)
 8006276:	1b64      	subs	r4, r4, r5
 8006278:	10a4      	asrs	r4, r4, #2
 800627a:	2600      	movs	r6, #0
 800627c:	42a6      	cmp	r6, r4
 800627e:	d109      	bne.n	8006294 <__libc_init_array+0x24>
 8006280:	4d0b      	ldr	r5, [pc, #44]	; (80062b0 <__libc_init_array+0x40>)
 8006282:	4c0c      	ldr	r4, [pc, #48]	; (80062b4 <__libc_init_array+0x44>)
 8006284:	f000 f820 	bl	80062c8 <_init>
 8006288:	1b64      	subs	r4, r4, r5
 800628a:	10a4      	asrs	r4, r4, #2
 800628c:	2600      	movs	r6, #0
 800628e:	42a6      	cmp	r6, r4
 8006290:	d105      	bne.n	800629e <__libc_init_array+0x2e>
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	f855 3b04 	ldr.w	r3, [r5], #4
 8006298:	4798      	blx	r3
 800629a:	3601      	adds	r6, #1
 800629c:	e7ee      	b.n	800627c <__libc_init_array+0xc>
 800629e:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a2:	4798      	blx	r3
 80062a4:	3601      	adds	r6, #1
 80062a6:	e7f2      	b.n	800628e <__libc_init_array+0x1e>
 80062a8:	08006b7c 	.word	0x08006b7c
 80062ac:	08006b7c 	.word	0x08006b7c
 80062b0:	08006b7c 	.word	0x08006b7c
 80062b4:	08006b80 	.word	0x08006b80

080062b8 <memset>:
 80062b8:	4402      	add	r2, r0
 80062ba:	4603      	mov	r3, r0
 80062bc:	4293      	cmp	r3, r2
 80062be:	d100      	bne.n	80062c2 <memset+0xa>
 80062c0:	4770      	bx	lr
 80062c2:	f803 1b01 	strb.w	r1, [r3], #1
 80062c6:	e7f9      	b.n	80062bc <memset+0x4>

080062c8 <_init>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr

080062d4 <_fini>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr
