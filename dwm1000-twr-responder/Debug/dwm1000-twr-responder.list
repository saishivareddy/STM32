
dwm1000-twr-responder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08009d10  08009d10  00019d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2cc  0800a2cc  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2cc  0800a2cc  0001a2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d4  0800a2d4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2d8  0800a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800a2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000228  0800a500  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800a500  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a13  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031da  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00038e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00039cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000bce2  00000000  00000000  0003aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000408d  00000000  00000000  00046712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0004a79f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004e88  00000000  00000000  0004a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000228 	.word	0x20000228
 800015c:	00000000 	.word	0x00000000
 8000160:	08009cf8 	.word	0x08009cf8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000022c 	.word	0x2000022c
 800017c:	08009cf8 	.word	0x08009cf8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9a6 	b.w	8000efc <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83e 	bl	8000c38 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	460c      	mov	r4, r1
 8000bcc:	4605      	mov	r5, r0
 8000bce:	4621      	mov	r1, r4
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f7ff ff09 	bl	80009ec <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x20>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fc7f 	bl	8000508 <__aeabi_dmul>
 8000c0a:	f7ff ff55 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc00 	bl	8000414 <__aeabi_ui2d>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c18:	f7ff fc76 	bl	8000508 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fab8 	bl	8000198 <__aeabi_dsub>
 8000c28:	f7ff ff46 	bl	8000ab8 <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	468e      	mov	lr, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f040 8083 	bne.w	8000d50 <__udivmoddi4+0x118>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4617      	mov	r7, r2
 8000c4e:	d947      	bls.n	8000ce0 <__udivmoddi4+0xa8>
 8000c50:	fab2 f382 	clz	r3, r2
 8000c54:	b14b      	cbz	r3, 8000c6a <__udivmoddi4+0x32>
 8000c56:	f1c3 0120 	rsb	r1, r3, #32
 8000c5a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	409f      	lsls	r7, r3
 8000c64:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c7a:	fb0c f009 	mul.w	r0, ip, r9
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x66>
 8000c88:	18ba      	adds	r2, r7, r2
 8000c8a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c8e:	f080 8118 	bcs.w	8000ec2 <__udivmoddi4+0x28a>
 8000c92:	4290      	cmp	r0, r2
 8000c94:	f240 8115 	bls.w	8000ec2 <__udivmoddi4+0x28a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	443a      	add	r2, r7
 8000c9e:	1a12      	subs	r2, r2, r0
 8000ca0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000ca4:	fb08 2210 	mls	r2, r8, r0, r2
 8000ca8:	fb00 f109 	mul.w	r1, r0, r9
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb2:	42a1      	cmp	r1, r4
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbc:	f080 8103 	bcs.w	8000ec6 <__udivmoddi4+0x28e>
 8000cc0:	42a1      	cmp	r1, r4
 8000cc2:	f240 8100 	bls.w	8000ec6 <__udivmoddi4+0x28e>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	443c      	add	r4, r7
 8000cca:	1a64      	subs	r4, r4, r1
 8000ccc:	2100      	movs	r1, #0
 8000cce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd2:	b11e      	cbz	r6, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	40dc      	lsrs	r4, r3
 8000cd8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xac>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f382 	clz	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d14f      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cec:	1a8d      	subs	r5, r1, r2
 8000cee:	2101      	movs	r1, #1
 8000cf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cf4:	fa1f f882 	uxth.w	r8, r2
 8000cf8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000cfc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d00:	fb08 f00c 	mul.w	r0, r8, ip
 8000d04:	0c22      	lsrs	r2, r4, #16
 8000d06:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0xe6>
 8000d0e:	197d      	adds	r5, r7, r5
 8000d10:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0xe4>
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	f200 80e9 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	1a2d      	subs	r5, r5, r0
 8000d20:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d24:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d28:	fb08 f800 	mul.w	r8, r8, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d32:	45a0      	cmp	r8, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x10e>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x10c>
 8000d3e:	45a0      	cmp	r8, r4
 8000d40:	f200 80d9 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 0408 	sub.w	r4, r4, r8
 8000d4a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4e:	e7c0      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	f000 80b1 	beq.w	8000ebc <__udivmoddi4+0x284>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d60:	4608      	mov	r0, r1
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f183 	clz	r1, r3
 8000d6a:	2900      	cmp	r1, #0
 8000d6c:	d14b      	bne.n	8000e06 <__udivmoddi4+0x1ce>
 8000d6e:	42ab      	cmp	r3, r5
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b9 	bhi.w	8000eea <__udivmoddi4+0x2b2>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	469e      	mov	lr, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0aa      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d86:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d8a:	e7a7      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d8c:	409f      	lsls	r7, r3
 8000d8e:	f1c3 0220 	rsb	r2, r3, #32
 8000d92:	40d1      	lsrs	r1, r2
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da4:	fa24 f202 	lsr.w	r2, r4, r2
 8000da8:	409d      	lsls	r5, r3
 8000daa:	fb00 fc08 	mul.w	ip, r0, r8
 8000dae:	432a      	orrs	r2, r5
 8000db0:	0c15      	lsrs	r5, r2, #16
 8000db2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000db6:	45ac      	cmp	ip, r5
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x19a>
 8000dbe:	197d      	adds	r5, r7, r5
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	f080 808f 	bcs.w	8000ee6 <__udivmoddi4+0x2ae>
 8000dc8:	45ac      	cmp	ip, r5
 8000dca:	f240 808c 	bls.w	8000ee6 <__udivmoddi4+0x2ae>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	443d      	add	r5, r7
 8000dd2:	eba5 050c 	sub.w	r5, r5, ip
 8000dd6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000dda:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dde:	fb01 f908 	mul.w	r9, r1, r8
 8000de2:	b295      	uxth	r5, r2
 8000de4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000de8:	45a9      	cmp	r9, r5
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	197d      	adds	r5, r7, r5
 8000dee:	f101 32ff 	add.w	r2, r1, #4294967295
 8000df2:	d274      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000df4:	45a9      	cmp	r9, r5
 8000df6:	d972      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000df8:	3902      	subs	r1, #2
 8000dfa:	443d      	add	r5, r7
 8000dfc:	eba5 0509 	sub.w	r5, r5, r9
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e778      	b.n	8000cf8 <__udivmoddi4+0xc0>
 8000e06:	f1c1 0720 	rsb	r7, r1, #32
 8000e0a:	408b      	lsls	r3, r1
 8000e0c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e10:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e14:	fa25 f407 	lsr.w	r4, r5, r7
 8000e18:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e1c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e20:	fa1f f88c 	uxth.w	r8, ip
 8000e24:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e28:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2c:	fb09 fa08 	mul.w	sl, r9, r8
 8000e30:	408d      	lsls	r5, r1
 8000e32:	431d      	orrs	r5, r3
 8000e34:	0c2b      	lsrs	r3, r5, #16
 8000e36:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e40:	fa00 f301 	lsl.w	r3, r0, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0x222>
 8000e46:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4e:	d248      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d946      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e54:	f1a9 0902 	sub.w	r9, r9, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e62:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e66:	fb00 fa08 	mul.w	sl, r0, r8
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e70:	45a2      	cmp	sl, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x24e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e7c:	d22d      	bcs.n	8000eda <__udivmoddi4+0x2a2>
 8000e7e:	45a2      	cmp	sl, r4
 8000e80:	d92b      	bls.n	8000eda <__udivmoddi4+0x2a2>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	eba4 040a 	sub.w	r4, r4, sl
 8000e92:	454c      	cmp	r4, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	464d      	mov	r5, r9
 8000e98:	d319      	bcc.n	8000ece <__udivmoddi4+0x296>
 8000e9a:	d016      	beq.n	8000eca <__udivmoddi4+0x292>
 8000e9c:	b15e      	cbz	r6, 8000eb6 <__udivmoddi4+0x27e>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb64 0405 	sbc.w	r4, r4, r5
 8000ea6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e70c      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ec2:	468c      	mov	ip, r1
 8000ec4:	e6eb      	b.n	8000c9e <__udivmoddi4+0x66>
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	e6ff      	b.n	8000cca <__udivmoddi4+0x92>
 8000eca:	4543      	cmp	r3, r8
 8000ecc:	d2e6      	bcs.n	8000e9c <__udivmoddi4+0x264>
 8000ece:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ed6:	3801      	subs	r0, #1
 8000ed8:	e7e0      	b.n	8000e9c <__udivmoddi4+0x264>
 8000eda:	4628      	mov	r0, r5
 8000edc:	e7d3      	b.n	8000e86 <__udivmoddi4+0x24e>
 8000ede:	4611      	mov	r1, r2
 8000ee0:	e78c      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee2:	4681      	mov	r9, r0
 8000ee4:	e7b9      	b.n	8000e5a <__udivmoddi4+0x222>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e773      	b.n	8000dd2 <__udivmoddi4+0x19a>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e749      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eee:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef2:	443d      	add	r5, r7
 8000ef4:	e713      	b.n	8000d1e <__udivmoddi4+0xe6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	e724      	b.n	8000d46 <__udivmoddi4+0x10e>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000f10:	4b9f      	ldr	r3, [pc, #636]	; (8001190 <dwt_initialise+0x290>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000f18:	4b9d      	ldr	r3, [pc, #628]	; (8001190 <dwt_initialise+0x290>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000f20:	4b9b      	ldr	r3, [pc, #620]	; (8001190 <dwt_initialise+0x290>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000f28:	4b99      	ldr	r3, [pc, #612]	; (8001190 <dwt_initialise+0x290>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000f30:	4b97      	ldr	r3, [pc, #604]	; (8001190 <dwt_initialise+0x290>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000f38:	4b95      	ldr	r3, [pc, #596]	; (8001190 <dwt_initialise+0x290>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000f40:	4b93      	ldr	r3, [pc, #588]	; (8001190 <dwt_initialise+0x290>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000f48:	f000 f926 	bl	8001198 <dwt_readdevid>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a91      	ldr	r2, [pc, #580]	; (8001194 <dwt_initialise+0x294>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d002      	beq.n	8000f5a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e115      	b.n	8001186 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000f64:	f000 fee2 	bl	8001d2c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <dwt_initialise+0x7c>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fce9 	bl	8001954 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000f82:	2204      	movs	r2, #4
 8000f84:	2100      	movs	r1, #0
 8000f86:	2024      	movs	r0, #36	; 0x24
 8000f88:	f000 fc12 	bl	80017b0 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f000 fc60 	bl	800185c <_dwt_otpread>
 8000f9c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d01f      	beq.n	8000fe6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	2112      	movs	r1, #18
 8000faa:	202d      	movs	r0, #45	; 0x2d
 8000fac:	f000 fc00 	bl	80017b0 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000fb0:	4b77      	ldr	r3, [pc, #476]	; (8001190 <dwt_initialise+0x290>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	8ada      	ldrh	r2, [r3, #22]
 8000fb6:	4b76      	ldr	r3, [pc, #472]	; (8001190 <dwt_initialise+0x290>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	82da      	strh	r2, [r3, #22]
 8000fc2:	e010      	b.n	8000fe6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000fc4:	2130      	movs	r1, #48	; 0x30
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f000 fb9b 	bl	8001702 <dwt_read32bitoffsetreg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000fd2:	d008      	beq.n	8000fe6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000fd4:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <dwt_initialise+0x290>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	8ada      	ldrh	r2, [r3, #22]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <dwt_initialise+0x290>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d009      	beq.n	8001004 <dwt_initialise+0x104>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d011      	beq.n	800101e <dwt_initialise+0x11e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00c      	beq.n	800101e <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8001004:	201e      	movs	r0, #30
 8001006:	f000 fc29 	bl	800185c <_dwt_otpread>
 800100a:	4603      	mov	r3, r0
 800100c:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800100e:	8afb      	ldrh	r3, [r7, #22]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <dwt_initialise+0x290>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	72da      	strb	r2, [r3, #11]
 800101c:	e003      	b.n	8001026 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <dwt_initialise+0x290>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800103a:	2310      	movs	r3, #16
 800103c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800103e:	8afb      	ldrh	r3, [r7, #22]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fe98 	bl	8001d78 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001052:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <dwt_initialise+0x290>)
 8001054:	681c      	ldr	r4, [r3, #0]
 8001056:	2006      	movs	r0, #6
 8001058:	f000 fc00 	bl	800185c <_dwt_otpread>
 800105c:	4603      	mov	r3, r0
 800105e:	6023      	str	r3, [r4, #0]
 8001060:	e003      	b.n	800106a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <dwt_initialise+0x290>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <dwt_initialise+0x290>)
 8001076:	681c      	ldr	r4, [r3, #0]
 8001078:	2007      	movs	r0, #7
 800107a:	f000 fbef 	bl	800185c <_dwt_otpread>
 800107e:	4603      	mov	r3, r0
 8001080:	6063      	str	r3, [r4, #4]
 8001082:	e003      	b.n	800108c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8001084:	4b42      	ldr	r3, [pc, #264]	; (8001190 <dwt_initialise+0x290>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8001096:	2008      	movs	r0, #8
 8001098:	f000 fbe0 	bl	800185c <_dwt_otpread>
 800109c:	4602      	mov	r2, r0
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <dwt_initialise+0x290>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	721a      	strb	r2, [r3, #8]
 80010a6:	e003      	b.n	80010b0 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <dwt_initialise+0x290>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80010ba:	2009      	movs	r0, #9
 80010bc:	f000 fbce 	bl	800185c <_dwt_otpread>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <dwt_initialise+0x290>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	725a      	strb	r2, [r3, #9]
 80010ca:	e003      	b.n	80010d4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <dwt_initialise+0x290>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d121      	bne.n	8001122 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80010e8:	f000 fc05 	bl	80018f6 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <dwt_initialise+0x290>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	8ada      	ldrh	r2, [r3, #22]
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <dwt_initialise+0x290>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010fa:	b292      	uxth	r2, r2
 80010fc:	82da      	strh	r2, [r3, #22]
 80010fe:	e01e      	b.n	800113e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8001100:	2105      	movs	r1, #5
 8001102:	2036      	movs	r0, #54	; 0x36
 8001104:	f000 fb24 	bl	8001750 <dwt_read16bitoffsetreg>
 8001108:	4603      	mov	r3, r0
 800110a:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001112:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	461a      	mov	r2, r3
 8001118:	2105      	movs	r1, #5
 800111a:	2036      	movs	r0, #54	; 0x36
 800111c:	f000 fb5b 	bl	80017d6 <dwt_write16bitoffsetreg>
 8001120:	e00d      	b.n	800113e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d108      	bne.n	800113e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <dwt_initialise+0x290>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	8ada      	ldrh	r2, [r3, #22]
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <dwt_initialise+0x290>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800113a:	b292      	uxth	r2, r2
 800113c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fc08 	bl	8001954 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8001144:	2200      	movs	r2, #0
 8001146:	210a      	movs	r1, #10
 8001148:	202c      	movs	r0, #44	; 0x2c
 800114a:	f000 fb31 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <dwt_initialise+0x290>)
 8001150:	681c      	ldr	r4, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	2004      	movs	r0, #4
 8001156:	f000 fad4 	bl	8001702 <dwt_read32bitoffsetreg>
 800115a:	4603      	mov	r3, r0
 800115c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <dwt_initialise+0x290>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <dwt_initialise+0x290>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <dwt_initialise+0x290>)
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	2100      	movs	r1, #0
 800117a:	2008      	movs	r0, #8
 800117c:	f000 fac1 	bl	8001702 <dwt_read32bitoffsetreg>
 8001180:	4603      	mov	r3, r0
 8001182:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001184:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000
 8001194:	deca0130 	.word	0xdeca0130

08001198 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800119c:	2100      	movs	r1, #0
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 faaf 	bl	8001702 <dwt_read32bitoffsetreg>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	795b      	ldrb	r3, [r3, #5]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <dwt_configure+0x2a4>)
 80011ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011ce:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80011d8:	7cfb      	ldrb	r3, [r7, #19]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d002      	beq.n	80011e4 <dwt_configure+0x38>
 80011de:	7cfb      	ldrb	r3, [r7, #19]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d101      	bne.n	80011e8 <dwt_configure+0x3c>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <dwt_configure+0x3e>
 80011e8:	2300      	movs	r3, #0
 80011ea:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	79db      	ldrb	r3, [r3, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80011f4:	4b97      	ldr	r3, [pc, #604]	; (8001454 <dwt_configure+0x2a8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	4b96      	ldr	r3, [pc, #600]	; (8001454 <dwt_configure+0x2a8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001202:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8001204:	8abb      	ldrh	r3, [r7, #20]
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	82bb      	strh	r3, [r7, #20]
 800120a:	e007      	b.n	800121c <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800120c:	4b91      	ldr	r3, [pc, #580]	; (8001454 <dwt_configure+0x2a8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	4b90      	ldr	r3, [pc, #576]	; (8001454 <dwt_configure+0x2a8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800121a:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800121c:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <dwt_configure+0x2a8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	7a12      	ldrb	r2, [r2, #8]
 8001224:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8001226:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <dwt_configure+0x2a8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	4b89      	ldr	r3, [pc, #548]	; (8001454 <dwt_configure+0x2a8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001234:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001236:	4b87      	ldr	r3, [pc, #540]	; (8001454 <dwt_configure+0x2a8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6919      	ldr	r1, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7a1b      	ldrb	r3, [r3, #8]
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001246:	4b83      	ldr	r3, [pc, #524]	; (8001454 <dwt_configure+0x2a8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800124e:	4b81      	ldr	r3, [pc, #516]	; (8001454 <dwt_configure+0x2a8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	461a      	mov	r2, r3
 8001256:	2100      	movs	r1, #0
 8001258:	2004      	movs	r0, #4
 800125a:	f000 fad8 	bl	800180e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800125e:	8abb      	ldrh	r3, [r7, #20]
 8001260:	461a      	mov	r2, r3
 8001262:	f642 0104 	movw	r1, #10244	; 0x2804
 8001266:	202e      	movs	r0, #46	; 0x2e
 8001268:	f000 fab5 	bl	80017d6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800126c:	7cbb      	ldrb	r3, [r7, #18]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fb21 	bl	80018b6 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	4a78      	ldr	r2, [pc, #480]	; (8001458 <dwt_configure+0x2ac>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	461a      	mov	r2, r3
 800127c:	4b77      	ldr	r3, [pc, #476]	; (800145c <dwt_configure+0x2b0>)
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	461a      	mov	r2, r3
 8001284:	2107      	movs	r1, #7
 8001286:	202b      	movs	r0, #43	; 0x2b
 8001288:	f000 fac1 	bl	800180e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	4a72      	ldr	r2, [pc, #456]	; (8001458 <dwt_configure+0x2ac>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	461a      	mov	r2, r3
 8001294:	4b72      	ldr	r3, [pc, #456]	; (8001460 <dwt_configure+0x2b4>)
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	461a      	mov	r2, r3
 800129a:	210b      	movs	r1, #11
 800129c:	202b      	movs	r0, #43	; 0x2b
 800129e:	f000 fa87 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80012a2:	7c7b      	ldrb	r3, [r7, #17]
 80012a4:	4a6f      	ldr	r2, [pc, #444]	; (8001464 <dwt_configure+0x2b8>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	461a      	mov	r2, r3
 80012aa:	210b      	movs	r1, #11
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f000 fa7f 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80012b2:	7cfb      	ldrb	r3, [r7, #19]
 80012b4:	4a68      	ldr	r2, [pc, #416]	; (8001458 <dwt_configure+0x2ac>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <dwt_configure+0x2bc>)
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	461a      	mov	r2, r3
 80012c2:	210c      	movs	r1, #12
 80012c4:	2028      	movs	r0, #40	; 0x28
 80012c6:	f000 faa2 	bl	800180e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	79db      	ldrb	r3, [r3, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	799b      	ldrb	r3, [r3, #6]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <dwt_configure+0x2c0>)
 80012d8:	0043      	lsls	r3, r0, #1
 80012da:	440b      	add	r3, r1
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2102      	movs	r1, #2
 80012e4:	2027      	movs	r0, #39	; 0x27
 80012e6:	f000 fa76 	bl	80017d6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80012ea:	7cbb      	ldrb	r3, [r7, #18]
 80012ec:	4a60      	ldr	r2, [pc, #384]	; (8001470 <dwt_configure+0x2c4>)
 80012ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f2:	461a      	mov	r2, r3
 80012f4:	2104      	movs	r1, #4
 80012f6:	2027      	movs	r0, #39	; 0x27
 80012f8:	f000 fa6d 	bl	80017d6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	79db      	ldrb	r3, [r3, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8001304:	2264      	movs	r2, #100	; 0x64
 8001306:	2106      	movs	r1, #6
 8001308:	2027      	movs	r0, #39	; 0x27
 800130a:	f000 fa64 	bl	80017d6 <dwt_write16bitoffsetreg>
 800130e:	e018      	b.n	8001342 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d10a      	bne.n	800132e <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001318:	2210      	movs	r2, #16
 800131a:	2106      	movs	r1, #6
 800131c:	2027      	movs	r0, #39	; 0x27
 800131e:	f000 fa5a 	bl	80017d6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8001322:	2210      	movs	r2, #16
 8001324:	2126      	movs	r1, #38	; 0x26
 8001326:	2027      	movs	r0, #39	; 0x27
 8001328:	f000 fa42 	bl	80017b0 <dwt_write8bitoffsetreg>
 800132c:	e009      	b.n	8001342 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800132e:	2220      	movs	r2, #32
 8001330:	2106      	movs	r1, #6
 8001332:	2027      	movs	r0, #39	; 0x27
 8001334:	f000 fa4f 	bl	80017d6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001338:	2228      	movs	r2, #40	; 0x28
 800133a:	2126      	movs	r1, #38	; 0x26
 800133c:	2027      	movs	r0, #39	; 0x27
 800133e:	f000 fa37 	bl	80017b0 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8001342:	7cbb      	ldrb	r3, [r7, #18]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	78d2      	ldrb	r2, [r2, #3]
 8001348:	4611      	mov	r1, r2
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <dwt_configure+0x2c8>)
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	461a      	mov	r2, r3
 8001356:	2108      	movs	r1, #8
 8001358:	2027      	movs	r0, #39	; 0x27
 800135a:	f000 fa58 	bl	800180e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	895b      	ldrh	r3, [r3, #10]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d103      	bne.n	800136e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f241 0241 	movw	r2, #4161	; 0x1041
 800136c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	895b      	ldrh	r3, [r3, #10]
 8001372:	461a      	mov	r2, r3
 8001374:	2120      	movs	r1, #32
 8001376:	2027      	movs	r0, #39	; 0x27
 8001378:	f000 fa2d 	bl	80017d6 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <dwt_configure+0x2cc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	210c      	movs	r1, #12
 8001384:	2023      	movs	r0, #35	; 0x23
 8001386:	f000 fa42 	bl	800180e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800138a:	7cbb      	ldrb	r3, [r7, #18]
 800138c:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <dwt_configure+0x2cc>)
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	461a      	mov	r2, r3
 8001396:	2104      	movs	r1, #4
 8001398:	2023      	movs	r0, #35	; 0x23
 800139a:	f000 fa1c 	bl	80017d6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	799b      	ldrb	r3, [r3, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	79db      	ldrb	r3, [r3, #7]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <dwt_configure+0x2d0>)
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	2021      	movs	r0, #33	; 0x21
 80013b6:	f000 f9fb 	bl	80017b0 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80013ba:	2303      	movs	r3, #3
 80013bc:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80013be:	2301      	movs	r3, #1
 80013c0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80013ce:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	049b      	lsls	r3, r3, #18
 80013d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80013da:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	051b      	lsls	r3, r3, #20
 80013e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80013e4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80013e6:	7dbb      	ldrb	r3, [r7, #22]
 80013e8:	045b      	lsls	r3, r3, #17
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80013ee:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	791b      	ldrb	r3, [r3, #4]
 80013f4:	059b      	lsls	r3, r3, #22
 80013f6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80013fa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	795b      	ldrb	r3, [r3, #5]
 8001400:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	2100      	movs	r1, #0
 800140a:	201f      	movs	r0, #31
 800140c:	f000 f9ff 	bl	800180e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	789a      	ldrb	r2, [r3, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	785b      	ldrb	r3, [r3, #1]
 8001418:	4313      	orrs	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	0419      	lsls	r1, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	79db      	ldrb	r3, [r3, #7]
 8001422:	035a      	lsls	r2, r3, #13
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <dwt_configure+0x2a8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <dwt_configure+0x2a8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	461a      	mov	r2, r3
 8001434:	2100      	movs	r1, #0
 8001436:	2008      	movs	r0, #8
 8001438:	f000 f9e9 	bl	800180e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800143c:	2242      	movs	r2, #66	; 0x42
 800143e:	2100      	movs	r1, #0
 8001440:	200d      	movs	r0, #13
 8001442:	f000 f9b5 	bl	80017b0 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	08009dc0 	.word	0x08009dc0
 8001454:	20000000 	.word	0x20000000
 8001458:	08009d40 	.word	0x08009d40
 800145c:	08009d60 	.word	0x08009d60
 8001460:	08009d78 	.word	0x08009d78
 8001464:	08009d80 	.word	0x08009d80
 8001468:	08009d48 	.word	0x08009d48
 800146c:	08009d90 	.word	0x08009d90
 8001470:	08009d9c 	.word	0x08009d9c
 8001474:	08009da0 	.word	0x08009da0
 8001478:	08009d84 	.word	0x08009d84
 800147c:	08009d8c 	.word	0x08009d8c

08001480 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	461a      	mov	r2, r3
 800148e:	f641 0104 	movw	r1, #6148	; 0x1804
 8001492:	202e      	movs	r0, #46	; 0x2e
 8001494:	f000 f99f 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2018      	movs	r0, #24
 80014b2:	f000 f990 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	6039      	str	r1, [r7, #0]
 80014c8:	80fb      	strh	r3, [r7, #6]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 80014ce:	88ba      	ldrh	r2, [r7, #4]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4413      	add	r3, r2
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	dc09      	bgt.n	80014ee <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3b02      	subs	r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	88b9      	ldrh	r1, [r7, #4]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2009      	movs	r0, #9
 80014e6:	f000 f857 	bl	8001598 <dwt_writetodevice>
        return DWT_SUCCESS;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e001      	b.n	80014f2 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	603a      	str	r2, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	460b      	mov	r3, r1
 800150a:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <dwt_writetxfctrl+0x3c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	431a      	orrs	r2, r3
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	059b      	lsls	r3, r3, #22
 800151a:	431a      	orrs	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	03db      	lsls	r3, r3, #15
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	2008      	movs	r0, #8
 800152a:	f000 f970 	bl	800180e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000

0800153c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	8839      	ldrh	r1, [r7, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2011      	movs	r0, #17
 8001554:	f000 f87c 	bl	8001650 <dwt_readfromdevice>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2205      	movs	r2, #5
 800156c:	2100      	movs	r1, #0
 800156e:	2017      	movs	r0, #23
 8001570:	f000 f86e 	bl	8001650 <dwt_readfromdevice>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2205      	movs	r2, #5
 8001588:	2100      	movs	r1, #0
 800158a:	2015      	movs	r0, #21
 800158c:	f000 f860 	bl	8001650 <dwt_readfromdevice>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4603      	mov	r3, r0
 80015a4:	81fb      	strh	r3, [r7, #14]
 80015a6:	460b      	mov	r3, r1
 80015a8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80015ae:	89bb      	ldrh	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1c59      	adds	r1, r3, #1
 80015bc:	6179      	str	r1, [r7, #20]
 80015be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f107 0118 	add.w	r1, r7, #24
 80015c8:	440b      	add	r3, r1
 80015ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 80015ce:	e033      	b.n	8001638 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	6179      	str	r1, [r7, #20]
 80015da:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f107 0118 	add.w	r1, r7, #24
 80015e4:	440b      	add	r3, r1
 80015e6:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80015ea:	89bb      	ldrh	r3, [r7, #12]
 80015ec:	2b7f      	cmp	r3, #127	; 0x7f
 80015ee:	d80a      	bhi.n	8001606 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	617a      	str	r2, [r7, #20]
 80015f6:	89ba      	ldrh	r2, [r7, #12]
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f107 0118 	add.w	r1, r7, #24
 80015fe:	440b      	add	r3, r1
 8001600:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001604:	e018      	b.n	8001638 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	6179      	str	r1, [r7, #20]
 8001610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f107 0118 	add.w	r1, r7, #24
 800161a:	440b      	add	r3, r1
 800161c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001620:	89bb      	ldrh	r3, [r7, #12]
 8001622:	09db      	lsrs	r3, r3, #7
 8001624:	b299      	uxth	r1, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	617a      	str	r2, [r7, #20]
 800162c:	b2ca      	uxtb	r2, r1
 800162e:	f107 0118 	add.w	r1, r7, #24
 8001632:	440b      	add	r3, r1
 8001634:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	b298      	uxth	r0, r3
 800163c:	f107 0110 	add.w	r1, r7, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f000 fbda 	bl	8001dfc <writetospi>
} // end dwt_writetodevice()
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4603      	mov	r3, r0
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	460b      	mov	r3, r1
 8001660:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001666:	89bb      	ldrh	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	617a      	str	r2, [r7, #20]
 8001672:	89fa      	ldrh	r2, [r7, #14]
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f107 0118 	add.w	r1, r7, #24
 800167a:	440b      	add	r3, r1
 800167c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001680:	e033      	b.n	80016ea <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	1c59      	adds	r1, r3, #1
 800168a:	6179      	str	r1, [r7, #20]
 800168c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f107 0118 	add.w	r1, r7, #24
 8001696:	440b      	add	r3, r1
 8001698:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	2b7f      	cmp	r3, #127	; 0x7f
 80016a0:	d80a      	bhi.n	80016b8 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	617a      	str	r2, [r7, #20]
 80016a8:	89ba      	ldrh	r2, [r7, #12]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f107 0118 	add.w	r1, r7, #24
 80016b0:	440b      	add	r3, r1
 80016b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80016b6:	e018      	b.n	80016ea <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	6179      	str	r1, [r7, #20]
 80016c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f107 0118 	add.w	r1, r7, #24
 80016cc:	440b      	add	r3, r1
 80016ce:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	09db      	lsrs	r3, r3, #7
 80016d6:	b299      	uxth	r1, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	617a      	str	r2, [r7, #20]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	f107 0118 	add.w	r1, r7, #24
 80016e4:	440b      	add	r3, r1
 80016e6:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	b298      	uxth	r0, r3
 80016ee:	f107 0110 	add.w	r1, r7, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	f000 fbb5 	bl	8001e64 <readfromspi>
} // end dwt_readfromdevice()
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	b298      	uxth	r0, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b299      	uxth	r1, r3
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	f7ff ff97 	bl	8001650 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001722:	2303      	movs	r3, #3
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e00b      	b.n	8001740 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	f107 010c 	add.w	r1, r7, #12
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	440a      	add	r2, r1
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3b01      	subs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	daf0      	bge.n	8001728 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8001746:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800175a:	2300      	movs	r3, #0
 800175c:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	b298      	uxth	r0, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b299      	uxth	r1, r3
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2202      	movs	r2, #2
 800176c:	f7ff ff70 	bl	8001650 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	b29b      	uxth	r3, r3
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b29a      	uxth	r2, r3
 8001778:	7b3b      	ldrb	r3, [r7, #12]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001780:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b298      	uxth	r0, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b299      	uxth	r1, r3
 800179c:	f107 030f 	add.w	r3, r7, #15
 80017a0:	2201      	movs	r2, #1
 80017a2:	f7ff ff55 	bl	8001650 <dwt_readfromdevice>

    return regval ;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	b298      	uxth	r0, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	b299      	uxth	r1, r3
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	2201      	movs	r2, #1
 80017ca:	f7ff fee5 	bl	8001598 <dwt_writetodevice>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	4613      	mov	r3, r2
 80017e2:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	b298      	uxth	r0, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	b299      	uxth	r1, r3
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2202      	movs	r2, #2
 8001802:	f7ff fec9 	bl	8001598 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e00d      	b.n	800183c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	b2d9      	uxtb	r1, r3
 8001824:	f107 0210 	add.w	r2, r7, #16
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4413      	add	r3, r2
 800182c:	460a      	mov	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b03      	cmp	r3, #3
 8001840:	ddee      	ble.n	8001820 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b298      	uxth	r0, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	b299      	uxth	r1, r3
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2204      	movs	r2, #4
 8001850:	f7ff fea2 	bl	8001598 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	461a      	mov	r2, r3
 800186a:	2104      	movs	r1, #4
 800186c:	202d      	movs	r0, #45	; 0x2d
 800186e:	f7ff ffb2 	bl	80017d6 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8001872:	2203      	movs	r2, #3
 8001874:	2106      	movs	r1, #6
 8001876:	202d      	movs	r0, #45	; 0x2d
 8001878:	f7ff ff9a 	bl	80017b0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800187c:	2200      	movs	r2, #0
 800187e:	2106      	movs	r1, #6
 8001880:	202d      	movs	r0, #45	; 0x2d
 8001882:	f7ff ff95 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8001886:	210a      	movs	r1, #10
 8001888:	202d      	movs	r0, #45	; 0x2d
 800188a:	f7ff ff3a 	bl	8001702 <dwt_read32bitoffsetreg>
 800188e:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800189e:	2200      	movs	r2, #0
 80018a0:	2102      	movs	r1, #2
 80018a2:	202c      	movs	r0, #44	; 0x2c
 80018a4:	f7ff ff84 	bl	80017b0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80018a8:	2202      	movs	r2, #2
 80018aa:	2102      	movs	r1, #2
 80018ac:	202c      	movs	r0, #44	; 0x2c
 80018ae:	f7ff ff7f 	bl	80017b0 <dwt_write8bitoffsetreg>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80018be:	226d      	movs	r2, #109	; 0x6d
 80018c0:	f640 0106 	movw	r1, #2054	; 0x806
 80018c4:	202e      	movs	r0, #46	; 0x2e
 80018c6:	f7ff ff73 	bl	80017b0 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80018d0:	f240 6207 	movw	r2, #1543	; 0x607
 80018d4:	f641 0106 	movw	r1, #6150	; 0x1806
 80018d8:	202e      	movs	r0, #46	; 0x2e
 80018da:	f7ff ff7c 	bl	80017d6 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80018de:	e006      	b.n	80018ee <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80018e0:	f241 6207 	movw	r2, #5639	; 0x1607
 80018e4:	f641 0106 	movw	r1, #6150	; 0x1806
 80018e8:	202e      	movs	r0, #46	; 0x2e
 80018ea:	f7ff ff74 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80018fa:	200e      	movs	r0, #14
 80018fc:	f000 f82a 	bl	8001954 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001900:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001904:	2106      	movs	r1, #6
 8001906:	202d      	movs	r0, #45	; 0x2d
 8001908:	f7ff ff65 	bl	80017d6 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800190c:	2001      	movs	r0, #1
 800190e:	f000 fa69 	bl	8001de4 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f81e 	bl	8001954 <_dwt_enableclocks>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001924:	2100      	movs	r1, #0
 8001926:	201a      	movs	r0, #26
 8001928:	f7ff feeb 	bl	8001702 <dwt_read32bitoffsetreg>
 800192c:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	0d1b      	lsrs	r3, r3, #20
 8001932:	051b      	lsls	r3, r3, #20
 8001934:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	2100      	movs	r1, #0
 8001946:	201a      	movs	r0, #26
 8001948:	f7ff ff61 	bl	800180e <dwt_write32bitoffsetreg>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2202      	movs	r2, #2
 8001962:	2100      	movs	r1, #0
 8001964:	2036      	movs	r0, #54	; 0x36
 8001966:	f7ff fe73 	bl	8001650 <dwt_readfromdevice>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0e      	cmp	r3, #14
 800196e:	d876      	bhi.n	8001a5e <_dwt_enableclocks+0x10a>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <_dwt_enableclocks+0x24>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	080019c5 	.word	0x080019c5
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019db 	.word	0x080019db
 8001984:	08001a5f 	.word	0x08001a5f
 8001988:	08001a5f 	.word	0x08001a5f
 800198c:	08001a5f 	.word	0x08001a5f
 8001990:	08001a5f 	.word	0x08001a5f
 8001994:	080019f1 	.word	0x080019f1
 8001998:	08001a11 	.word	0x08001a11
 800199c:	08001a5f 	.word	0x08001a5f
 80019a0:	08001a5f 	.word	0x08001a5f
 80019a4:	08001a27 	.word	0x08001a27
 80019a8:	08001a33 	.word	0x08001a33
 80019ac:	08001a3f 	.word	0x08001a3f
 80019b0:	08001a55 	.word	0x08001a55
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80019b4:	2300      	movs	r3, #0
 80019b6:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80019b8:	7b7b      	ldrb	r3, [r7, #13]
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	737b      	strb	r3, [r7, #13]
        }
        break;
 80019c2:	e04d      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	f023 0303 	bic.w	r3, r3, #3
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	b25b      	sxtb	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	733b      	strb	r3, [r7, #12]
        }
        break;
 80019d8:	e042      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 80019da:	7b3b      	ldrb	r3, [r7, #12]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	733b      	strb	r3, [r7, #12]
        }
        break;
 80019ee:	e037      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80019f0:	7b3b      	ldrb	r3, [r7, #12]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a0e:	e027      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001a10:	7b3b      	ldrb	r3, [r7, #12]
 8001a12:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a24:	e01c      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a30:	e016      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a3c:	e010      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001a3e:	7b3b      	ldrb	r3, [r7, #12]
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001a52:	e005      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001a54:	2301      	movs	r3, #1
 8001a56:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a5c:	e000      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001a5e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2201      	movs	r2, #1
 8001a66:	2100      	movs	r1, #0
 8001a68:	2036      	movs	r0, #54	; 0x36
 8001a6a:	f7ff fd95 	bl	8001598 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	3301      	adds	r3, #1
 8001a74:	2201      	movs	r2, #1
 8001a76:	2101      	movs	r1, #1
 8001a78:	2036      	movs	r0, #54	; 0x36
 8001a7a:	f7ff fd8d 	bl	8001598 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop

08001a88 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff ff61 	bl	8001954 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001a92:	2200      	movs	r2, #0
 8001a94:	2104      	movs	r1, #4
 8001a96:	2036      	movs	r0, #54	; 0x36
 8001a98:	f7ff fe9d 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	200a      	movs	r0, #10
 8001aae:	f7ff feae 	bl	800180e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <dwt_starttx+0x98>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d020      	beq.n	8001b34 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	f043 0306 	orr.w	r3, r3, #6
 8001af8:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	461a      	mov	r2, r3
 8001afe:	2100      	movs	r1, #0
 8001b00:	200d      	movs	r0, #13
 8001b02:	f7ff fe55 	bl	80017b0 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001b06:	2103      	movs	r1, #3
 8001b08:	200f      	movs	r0, #15
 8001b0a:	f7ff fe21 	bl	8001750 <dwt_read16bitoffsetreg>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001b12:	893b      	ldrh	r3, [r7, #8]
 8001b14:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e012      	b.n	8001b48 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	2100      	movs	r1, #0
 8001b26:	200d      	movs	r0, #13
 8001b28:	f7ff fe42 	bl	80017b0 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e009      	b.n	8001b48 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	200d      	movs	r0, #13
 8001b44:	f7ff fe34 	bl	80017b0 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001b48:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001b5e:	2100      	movs	r1, #0
 8001b60:	200e      	movs	r0, #14
 8001b62:	f7ff fdce 	bl	8001702 <dwt_read32bitoffsetreg>
 8001b66:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001b68:	f000 f91e 	bl	8001da8 <decamutexon>
 8001b6c:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	200e      	movs	r0, #14
 8001b74:	f7ff fe4b 	bl	800180e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	200d      	movs	r0, #13
 8001b7e:	f7ff fe17 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <dwt_forcetrxoff+0x58>)
 8001b84:	2100      	movs	r1, #0
 8001b86:	200f      	movs	r0, #15
 8001b88:	f7ff fe41 	bl	800180e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001b8c:	f000 f814 	bl	8001bb8 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	2100      	movs	r1, #0
 8001b94:	200e      	movs	r0, #14
 8001b96:	f7ff fe3a 	bl	800180e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001b9a:	6838      	ldr	r0, [r7, #0]
 8001b9c:	f000 f915 	bl	8001dca <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <dwt_forcetrxoff+0x5c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2427fff8 	.word	0x2427fff8
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001bbe:	2103      	movs	r1, #3
 8001bc0:	200f      	movs	r0, #15
 8001bc2:	f7ff fde2 	bl	800178a <dwt_read8bitoffsetreg>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001bca:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001bd0:	4053      	eors	r3, r2
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2103      	movs	r1, #3
 8001bde:	200d      	movs	r0, #13
 8001be0:	f7ff fde6 	bl	80017b0 <dwt_write8bitoffsetreg>
    }
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001bfe:	f7ff ffdb 	bl	8001bb8 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c06:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001c12:	89fb      	ldrh	r3, [r7, #14]
 8001c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c18:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001c1a:	89fb      	ldrh	r3, [r7, #14]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	200d      	movs	r0, #13
 8001c22:	f7ff fdd8 	bl	80017d6 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01a      	beq.n	8001c66 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001c30:	2103      	movs	r1, #3
 8001c32:	200f      	movs	r0, #15
 8001c34:	f7ff fda9 	bl	800178a <dwt_read8bitoffsetreg>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00f      	beq.n	8001c66 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001c46:	f7ff ff87 	bl	8001b58 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c58:	2100      	movs	r1, #0
 8001c5a:	200d      	movs	r0, #13
 8001c5c:	f7ff fdbb 	bl	80017d6 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	e000      	b.n	8001c68 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001c66:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f7ff fd84 	bl	800178a <dwt_read8bitoffsetreg>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d018      	beq.n	8001cbe <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2100      	movs	r1, #0
 8001c92:	200c      	movs	r0, #12
 8001c94:	f7ff fd9f 	bl	80017d6 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <dwt_setrxtimeout+0x7c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <dwt_setrxtimeout+0x7c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cae:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	2004      	movs	r0, #4
 8001cb8:	f7ff fd7a 	bl	80017b0 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001cbc:	e011      	b.n	8001ce2 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	f023 0310 	bic.w	r3, r3, #16
 8001cc4:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <dwt_setrxtimeout+0x7c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <dwt_setrxtimeout+0x7c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001cd4:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2103      	movs	r1, #3
 8001cdc:	2004      	movs	r0, #4
 8001cde:	f7ff fd67 	bl	80017b0 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2124      	movs	r1, #36	; 0x24
 8001d00:	2027      	movs	r0, #39	; 0x27
 8001d02:	f7ff fd68 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8001d12:	22e0      	movs	r2, #224	; 0xe0
 8001d14:	2103      	movs	r1, #3
 8001d16:	2036      	movs	r0, #54	; 0x36
 8001d18:	f7ff fd4a 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001d1c:	22f0      	movs	r2, #240	; 0xf0
 8001d1e:	2103      	movs	r1, #3
 8001d20:	2036      	movs	r0, #54	; 0x36
 8001d22:	f7ff fd45 	bl	80017b0 <dwt_write8bitoffsetreg>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001d30:	f7ff feaa 	bl	8001a88 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	202c      	movs	r0, #44	; 0x2c
 8001d3a:	f7ff fd4c 	bl	80017d6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2106      	movs	r1, #6
 8001d42:	202c      	movs	r0, #44	; 0x2c
 8001d44:	f7ff fd34 	bl	80017b0 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001d48:	f7ff fda7 	bl	800189a <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2103      	movs	r1, #3
 8001d50:	2036      	movs	r0, #54	; 0x36
 8001d52:	f7ff fd2d 	bl	80017b0 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f000 f844 	bl	8001de4 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001d5c:	22f0      	movs	r2, #240	; 0xf0
 8001d5e:	2103      	movs	r1, #3
 8001d60:	2036      	movs	r0, #54	; 0x36
 8001d62:	f7ff fd25 	bl	80017b0 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001d66:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <dwt_softreset+0x48>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	755a      	strb	r2, [r3, #21]
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	461a      	mov	r2, r3
 8001d98:	210e      	movs	r1, #14
 8001d9a:	202b      	movs	r0, #43	; 0x2b
 8001d9c:	f7ff fd08 	bl	80017b0 <dwt_write8bitoffsetreg>
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001dae:	f000 f98d 	bl	80020cc <port_GetEXT_IRQStatus>
 8001db2:	4603      	mov	r3, r0
 8001db4:	607b      	str	r3, [r7, #4]

	if(s) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001dbc:	f000 f978 	bl	80020b0 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001dd8:	f000 f971 	bl	80020be <port_EnableEXT_IRQ>
	}
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8c3 	bl	8001f78 <Sleep>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001dfc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001e00:	4683      	mov	fp, r0
 8001e02:	468a      	mov	sl, r1
 8001e04:	4691      	mov	r9, r2
 8001e06:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001e08:	f7ff ffce 	bl	8001da8 <decamutexon>
 8001e0c:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001e0e:	4d13      	ldr	r5, [pc, #76]	; (8001e5c <writetospi+0x60>)
 8001e10:	4628      	mov	r0, r5
 8001e12:	f002 fbac 	bl	800456e <HAL_SPI_GetState>
 8001e16:	2801      	cmp	r0, #1
 8001e18:	4604      	mov	r4, r0
 8001e1a:	d1f9      	bne.n	8001e10 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2140      	movs	r1, #64	; 0x40
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <writetospi+0x64>)
 8001e22:	f001 faf3 	bl	800340c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001e26:	465a      	mov	r2, fp
 8001e28:	4651      	mov	r1, sl
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <writetospi+0x60>)
 8001e30:	f002 f951 	bl	80040d6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	4641      	mov	r1, r8
 8001e3a:	fa1f f289 	uxth.w	r2, r9
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <writetospi+0x60>)
 8001e40:	f002 f949 	bl	80040d6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001e44:	4622      	mov	r2, r4
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <writetospi+0x64>)
 8001e4a:	f001 fadf 	bl	800340c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f7ff ffbb 	bl	8001dca <decamutexoff>

    return 0;
} // end writetospi()
 8001e54:	2000      	movs	r0, #0
 8001e56:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002e0 	.word	0x200002e0
 8001e60:	40020400 	.word	0x40020400

08001e64 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001e64:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001e68:	4681      	mov	r9, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4690      	mov	r8, r2
 8001e6e:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001e70:	f7ff ff9a 	bl	8001da8 <decamutexon>
 8001e74:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001e76:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001ef4 <readfromspi+0x90>
 8001e7a:	4650      	mov	r0, sl
 8001e7c:	f002 fb77 	bl	800456e <HAL_SPI_GetState>
 8001e80:	2801      	cmp	r0, #1
 8001e82:	d1fa      	bne.n	8001e7a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001e84:	2200      	movs	r2, #0
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <readfromspi+0x8c>)
 8001e8a:	f001 fabf 	bl	800340c <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001e8e:	f1b9 0f00 	cmp.w	r9, #0
 8001e92:	d00c      	beq.n	8001eae <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001e94:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001ef4 <readfromspi+0x90>
 8001e98:	44a1      	add	r9, r4
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	4414      	add	r4, r2
 8001ea4:	4650      	mov	r0, sl
 8001ea6:	f002 f916 	bl	80040d6 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001eaa:	454c      	cmp	r4, r9
 8001eac:	d1f5      	bne.n	8001e9a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001eae:	f1b8 0f00 	cmp.w	r8, #0
 8001eb2:	d012      	beq.n	8001eda <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001ef4 <readfromspi+0x90>
 8001eba:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001ebe:	f8dc 2000 	ldr.w	r2, [ip]
 8001ec2:	6891      	ldr	r1, [r2, #8]
 8001ec4:	0789      	lsls	r1, r1, #30
 8001ec6:	d5fc      	bpl.n	8001ec2 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001ec8:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001eca:	6891      	ldr	r1, [r2, #8]
 8001ecc:	07cb      	lsls	r3, r1, #31
 8001ece:	d5fc      	bpl.n	8001eca <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001ed0:	68d3      	ldr	r3, [r2, #12]
 8001ed2:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001ed6:	4285      	cmp	r5, r0
 8001ed8:	d1f1      	bne.n	8001ebe <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001eda:	2201      	movs	r2, #1
 8001edc:	2140      	movs	r1, #64	; 0x40
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <readfromspi+0x8c>)
 8001ee0:	f001 fa94 	bl	800340c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	f7ff ff70 	bl	8001dca <decamutexoff>

    return 0;
} // end readfromspi()
 8001eea:	2000      	movs	r0, #0
 8001eec:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	200002e0 	.word	0x200002e0

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4906      	ldr	r1, [pc, #24]	; (8001f2c <__NVIC_EnableIRQ+0x34>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db12      	blt.n	8001f68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	490a      	ldr	r1, [pc, #40]	; (8001f74 <__NVIC_DisableIRQ+0x44>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	3320      	adds	r3, #32
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5c:	f3bf 8f4f 	dsb	sy
}
 8001f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f62:	f3bf 8f6f 	isb	sy
}
 8001f66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fed3 	bl	8002d2c <HAL_Delay>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <EXTI_GetITEnStatus+0x34>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001fd2:	2311      	movs	r3, #17
 8001fd4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480a      	ldr	r0, [pc, #40]	; (8002008 <reset_DW1000+0x40>)
 8001fe0:	f001 f884 	bl	80030ec <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <reset_DW1000+0x40>)
 8001fea:	f001 fa0f 	bl	800340c <HAL_GPIO_WritePin>

    Sleep(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff ffc2 	bl	8001f78 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f000 f809 	bl	800200c <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f7ff ffbc 	bl	8001f78 <Sleep>
}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40020000 	.word	0x40020000

0800200c <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800201a:	2301      	movs	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002022:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	4813      	ldr	r0, [pc, #76]	; (800207c <setup_DW1000RSTnIRQ+0x70>)
 8002030:	f001 f85c 	bl	80030ec <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8002034:	2006      	movs	r0, #6
 8002036:	f000 ffb2 	bl	8002f9e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2105      	movs	r1, #5
 800203e:	2006      	movs	r0, #6
 8002040:	f000 ff91 	bl	8002f66 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8002044:	e015      	b.n	8002072 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8002046:	2006      	movs	r0, #6
 8002048:	f000 ffb7 	bl	8002fba <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800204c:	2301      	movs	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002050:	2311      	movs	r3, #17
 8002052:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <setup_DW1000RSTnIRQ+0x70>)
 8002064:	f001 f842 	bl	80030ec <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	2101      	movs	r1, #1
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <setup_DW1000RSTnIRQ+0x70>)
 800206e:	f001 f9cd 	bl	800340c <HAL_GPIO_WritePin>
}
 8002072:	bf00      	nop
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020000 	.word	0x40020000

08002080 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <port_set_dw1000_slowrate+0x14>)
 8002086:	2220      	movs	r2, #32
 8002088:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800208a:	4802      	ldr	r0, [pc, #8]	; (8002094 <port_set_dw1000_slowrate+0x14>)
 800208c:	f001 ff9a 	bl	8003fc4 <HAL_SPI_Init>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002e0 	.word	0x200002e0

08002098 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <port_set_dw1000_fastrate+0x14>)
 800209e:	2208      	movs	r2, #8
 80020a0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <port_set_dw1000_fastrate+0x14>)
 80020a4:	f001 ff8e 	bl	8003fc4 <HAL_SPI_Init>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002e0 	.word	0x200002e0

080020b0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80020b4:	2017      	movs	r0, #23
 80020b6:	f7ff ff3b 	bl	8001f30 <__NVIC_DisableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}

080020be <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80020c2:	2017      	movs	r0, #23
 80020c4:	f7ff ff18 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80020d0:	2017      	movs	r0, #23
 80020d2:	f7ff ff5d 	bl	8001f90 <EXTI_GetITEnStatus>
 80020d6:	4603      	mov	r3, r0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}

080020dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <MX_GPIO_Init+0xe4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a32      	ldr	r2, [pc, #200]	; (80021c0 <MX_GPIO_Init+0xe4>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <MX_GPIO_Init+0xe4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	61d3      	str	r3, [r2, #28]
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <MX_GPIO_Init+0xe4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_GPIO_Init+0xe4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	2101      	movs	r1, #1
 8002156:	481b      	ldr	r0, [pc, #108]	; (80021c4 <MX_GPIO_Init+0xe8>)
 8002158:	f001 f958 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2140      	movs	r1, #64	; 0x40
 8002160:	4819      	ldr	r0, [pc, #100]	; (80021c8 <MX_GPIO_Init+0xec>)
 8002162:	f001 f953 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4811      	ldr	r0, [pc, #68]	; (80021c4 <MX_GPIO_Init+0xe8>)
 800217e:	f000 ffb5 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8002182:	2302      	movs	r3, #2
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002186:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800218a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4619      	mov	r1, r3
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <MX_GPIO_Init+0xe8>)
 8002198:	f000 ffa8 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_GPIO_Init+0xec>)
 80021b4:	f000 ff9a 	bl	80030ec <HAL_GPIO_Init>

}
 80021b8:	bf00      	nop
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400

080021cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d0:	f000 fd3d 	bl	8002c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d4:	f000 f80c 	bl	80021f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d8:	f7ff ff80 	bl	80020dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80021dc:	f000 f85c 	bl	8002298 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80021e0:	f000 fc9a 	bl	8002b18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff ff11 	bl	800200c <setup_DW1000RSTnIRQ>

  dw_main();
 80021ea:	f000 f9ed 	bl	80025c8 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <main+0x22>

080021f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b092      	sub	sp, #72	; 0x48
 80021f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	2234      	movs	r2, #52	; 0x34
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f952 	bl	80054a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002204:	463b      	mov	r3, r7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <SystemClock_Config+0x98>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <SystemClock_Config+0x98>)
 800221c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002220:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002222:	2302      	movs	r3, #2
 8002224:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002226:	2301      	movs	r3, #1
 8002228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800222a:	2310      	movs	r3, #16
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222e:	2302      	movs	r3, #2
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002232:	2300      	movs	r3, #0
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002236:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800223c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4618      	mov	r0, r3
 8002248:	f001 f8f8 	bl	800343c <HAL_RCC_OscConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002252:	f000 f81b 	bl	800228c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002256:	230f      	movs	r3, #15
 8002258:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225a:	2303      	movs	r3, #3
 800225c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800226a:	463b      	mov	r3, r7
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fc14 	bl	8003a9c <HAL_RCC_ClockConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800227a:	f000 f807 	bl	800228c <Error_Handler>
  }
}
 800227e:	bf00      	nop
 8002280:	3748      	adds	r7, #72	; 0x48
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	e7fe      	b.n	8002294 <Error_Handler+0x8>
	...

08002298 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <MX_SPI1_Init+0x64>)
 800229e:	4a18      	ldr	r2, [pc, #96]	; (8002300 <MX_SPI1_Init+0x68>)
 80022a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_SPI1_Init+0x64>)
 80022a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_SPI1_Init+0x64>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <MX_SPI1_Init+0x64>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_SPI1_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_SPI1_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_SPI1_Init+0x64>)
 80022c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_SPI1_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MX_SPI1_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_SPI1_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <MX_SPI1_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_SPI1_Init+0x64>)
 80022e4:	220a      	movs	r2, #10
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_SPI1_Init+0x64>)
 80022ea:	f001 fe6b 	bl	8003fc4 <HAL_SPI_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022f4:	f7ff ffca 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200002e0 	.word	0x200002e0
 8002300:	40013000 	.word	0x40013000

08002304 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <HAL_SPI_MspInit+0x8c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d12f      	bne.n	8002386 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_SPI_MspInit+0x90>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_SPI_MspInit+0x90>)
 800232c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002330:	6213      	str	r3, [r2, #32]
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_SPI_MspInit+0x90>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_SPI_MspInit+0x90>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <HAL_SPI_MspInit+0x90>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	61d3      	str	r3, [r2, #28]
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_SPI_MspInit+0x90>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002356:	23e0      	movs	r3, #224	; 0xe0
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002366:	2305      	movs	r3, #5
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4809      	ldr	r0, [pc, #36]	; (8002398 <HAL_SPI_MspInit+0x94>)
 8002372:	f000 febb 	bl	80030ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2023      	movs	r0, #35	; 0x23
 800237c:	f000 fdf3 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002380:	2023      	movs	r0, #35	; 0x23
 8002382:	f000 fe0c 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40013000 	.word	0x40013000
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_MspInit+0x5c>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <HAL_MspInit+0x5c>)
 80023a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ac:	6253      	str	r3, [r2, #36]	; 0x24
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_MspInit+0x5c>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_MspInit+0x5c>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_MspInit+0x5c>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_MspInit+0x5c>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_MspInit+0x5c>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <HAL_MspInit+0x5c>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6253      	str	r3, [r2, #36]	; 0x24
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_MspInit+0x5c>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023ea:	2007      	movs	r0, #7
 80023ec:	f000 fdb0 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <NMI_Handler+0x4>

08002402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <HardFault_Handler+0x4>

08002408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <MemManage_Handler+0x4>

0800240e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <UsageFault_Handler+0x4>

0800241a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002442:	f000 fc57 	bl	8002cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <SPI1_IRQHandler+0x10>)
 8002452:	f001 ff83 	bl	800435c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	200002e0 	.word	0x200002e0

08002460 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART2_IRQHandler+0x10>)
 8002466:	f002 fa41 	bl	80048ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000338 	.word	0x20000338

08002474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <_kill>:

int _kill(int pid, int sig)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800248c:	f002 ffd4 	bl	8005438 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	2216      	movs	r2, #22
 8002494:	601a      	str	r2, [r3, #0]
  return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_exit>:

void _exit (int status)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024aa:	f04f 31ff 	mov.w	r1, #4294967295
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ffe7 	bl	8002482 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b4:	e7fe      	b.n	80024b4 <_exit+0x12>

080024b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e00a      	b.n	80024de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024c8:	f3af 8000 	nop.w
 80024cc:	4601      	mov	r1, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	60ba      	str	r2, [r7, #8]
 80024d4:	b2ca      	uxtb	r2, r1
 80024d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbf0      	blt.n	80024c8 <_read+0x12>
  }

  return len;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002516:	605a      	str	r2, [r3, #4]
  return 0;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <_isatty>:

int _isatty(int file)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f002 ff5a 	bl	8005438 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20014000 	.word	0x20014000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	2000027c 	.word	0x2000027c
 80025b8:	20000398 	.word	0x20000398

080025bc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 80025c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025cc:	b094      	sub	sp, #80	; 0x50
 80025ce:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    printf(APP_NAME);
 80025d0:	4808      	ldr	r0, [pc, #32]	; (80025f4 <dw_main+0x2c>)
 80025d2:	f003 fde3 	bl	800619c <iprintf>

    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 80025d6:	f7ff fcf7 	bl	8001fc8 <reset_DW1000>
    port_set_dw1000_slowrate();
 80025da:	f7ff fd51 	bl	8002080 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe fc8e 	bl	8000f00 <dwt_initialise>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d107      	bne.n	80025fc <dw_main+0x34>
    {
        printf("INIT FAILED");
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <dw_main+0x30>)
 80025ee:	f003 fdd5 	bl	800619c <iprintf>
        while (1)
 80025f2:	e7fe      	b.n	80025f2 <dw_main+0x2a>
 80025f4:	08009d10 	.word	0x08009d10
 80025f8:	08009d24 	.word	0x08009d24
        { };
    }
    port_set_dw1000_fastrate();
 80025fc:	f7ff fd4c 	bl	8002098 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002600:	48bf      	ldr	r0, [pc, #764]	; (8002900 <dw_main+0x338>)
 8002602:	f7fe fdd3 	bl	80011ac <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002606:	f244 0034 	movw	r0, #16436	; 0x4034
 800260a:	f7fe ff39 	bl	8001480 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 800260e:	f244 0034 	movw	r0, #16436	; 0x4034
 8002612:	f7fe ff45 	bl	80014a0 <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8002616:	2008      	movs	r0, #8
 8002618:	f7ff fb6a 	bl	8001cf0 <dwt_setpreambledetecttimeout>

    /* Loop forever responding to ranging requests. */
    while (1)
    {
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(0);
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff fb27 	bl	8001c70 <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fae2 	bl	8001bec <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002628:	bf00      	nop
 800262a:	2100      	movs	r1, #0
 800262c:	200f      	movs	r0, #15
 800262e:	f7ff f868 	bl	8001702 <dwt_read32bitoffsetreg>
 8002632:	4603      	mov	r3, r0
 8002634:	4ab3      	ldr	r2, [pc, #716]	; (8002904 <dw_main+0x33c>)
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4bb2      	ldr	r3, [pc, #712]	; (8002904 <dw_main+0x33c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4bb2      	ldr	r3, [pc, #712]	; (8002908 <dw_main+0x340>)
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f2      	beq.n	800262a <dw_main+0x62>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8002644:	4baf      	ldr	r3, [pc, #700]	; (8002904 <dw_main+0x33c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 819d 	beq.w	800298c <dw_main+0x3c4>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002656:	2100      	movs	r1, #0
 8002658:	200f      	movs	r0, #15
 800265a:	f7ff f8d8 	bl	800180e <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 800265e:	2100      	movs	r1, #0
 8002660:	2010      	movs	r0, #16
 8002662:	f7ff f84e 	bl	8001702 <dwt_read32bitoffsetreg>
 8002666:	4603      	mov	r3, r0
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (frame_len <= RX_BUFFER_LEN)
 800266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002674:	d806      	bhi.n	8002684 <dw_main+0xbc>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002678:	b29b      	uxth	r3, r3
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	48a3      	ldr	r0, [pc, #652]	; (800290c <dw_main+0x344>)
 8002680:	f7fe ff5c 	bl	800153c <dwt_readrxdata>
            }
HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	2218      	movs	r2, #24
 800268a:	49a0      	ldr	r1, [pc, #640]	; (800290c <dw_main+0x344>)
 800268c:	48a0      	ldr	r0, [pc, #640]	; (8002910 <dw_main+0x348>)
 800268e:	f002 f8a9 	bl	80047e4 <HAL_UART_Transmit>
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002692:	4b9e      	ldr	r3, [pc, #632]	; (800290c <dw_main+0x344>)
 8002694:	2200      	movs	r2, #0
 8002696:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002698:	220a      	movs	r2, #10
 800269a:	499e      	ldr	r1, [pc, #632]	; (8002914 <dw_main+0x34c>)
 800269c:	489b      	ldr	r0, [pc, #620]	; (800290c <dw_main+0x344>)
 800269e:	f002 fef5 	bl	800548c <memcmp>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1b9      	bne.n	800261c <dw_main+0x54>
            {
                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 80026a8:	f000 f9c2 	bl	8002a30 <get_rx_timestamp_u64>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4999      	ldr	r1, [pc, #612]	; (8002918 <dw_main+0x350>)
 80026b2:	e9c1 2300 	strd	r2, r3, [r1]

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 80026b6:	4b98      	ldr	r3, [pc, #608]	; (8002918 <dw_main+0x350>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	4897      	ldr	r0, [pc, #604]	; (800291c <dw_main+0x354>)
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	1814      	adds	r4, r2, r0
 80026c4:	eb43 0501 	adc.w	r5, r3, r1
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	0a22      	lsrs	r2, r4, #8
 80026d2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80026d6:	0a2b      	lsrs	r3, r5, #8
 80026d8:	4613      	mov	r3, r2
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
                dwt_setdelayedtrxtime(resp_tx_time);
 80026dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80026de:	f7ff f9df 	bl	8001aa0 <dwt_setdelayedtrxtime>

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80026e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026e6:	f7ff f919 	bl	800191c <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 80026ea:	f640 40e4 	movw	r0, #3300	; 0xce4
 80026ee:	f7ff fabf 	bl	8001c70 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80026f2:	4b8b      	ldr	r3, [pc, #556]	; (8002920 <dw_main+0x358>)
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	4b8b      	ldr	r3, [pc, #556]	; (8002924 <dw_main+0x35c>)
 80026f8:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80026fa:	2200      	movs	r2, #0
 80026fc:	4989      	ldr	r1, [pc, #548]	; (8002924 <dw_main+0x35c>)
 80026fe:	200f      	movs	r0, #15
 8002700:	f7fe fedd 	bl	80014be <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002704:	2201      	movs	r2, #1
 8002706:	2100      	movs	r1, #0
 8002708:	200f      	movs	r0, #15
 800270a:	f7fe fef7 	bl	80014fc <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 800270e:	2003      	movs	r0, #3
 8002710:	f7ff f9d4 	bl	8001abc <dwt_starttx>
 8002714:	6478      	str	r0, [r7, #68]	; 0x44
                HAL_UART_Transmit(&huart2, tx_resp_msg, sizeof(tx_resp_msg), HAL_MAX_DELAY);
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	220f      	movs	r2, #15
 800271c:	4981      	ldr	r1, [pc, #516]	; (8002924 <dw_main+0x35c>)
 800271e:	487c      	ldr	r0, [pc, #496]	; (8002910 <dw_main+0x348>)
 8002720:	f002 f860 	bl	80047e4 <HAL_UART_Transmit>

                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	f000 8137 	beq.w	800299c <dw_main+0x3d4>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 800272e:	bf00      	nop
 8002730:	2100      	movs	r1, #0
 8002732:	200f      	movs	r0, #15
 8002734:	f7fe ffe5 	bl	8001702 <dwt_read32bitoffsetreg>
 8002738:	4603      	mov	r3, r0
 800273a:	4a72      	ldr	r2, [pc, #456]	; (8002904 <dw_main+0x33c>)
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b71      	ldr	r3, [pc, #452]	; (8002904 <dw_main+0x33c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b71      	ldr	r3, [pc, #452]	; (8002908 <dw_main+0x340>)
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f2      	beq.n	8002730 <dw_main+0x168>
                { };

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 800274a:	4b75      	ldr	r3, [pc, #468]	; (8002920 <dw_main+0x358>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <dw_main+0x358>)
 8002754:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002756:	4b6b      	ldr	r3, [pc, #428]	; (8002904 <dw_main+0x33c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 810c 	beq.w	800297c <dw_main+0x3b4>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002764:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8002768:	2100      	movs	r1, #0
 800276a:	200f      	movs	r0, #15
 800276c:	f7ff f84f 	bl	800180e <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002770:	2100      	movs	r1, #0
 8002772:	2010      	movs	r0, #16
 8002774:	f7fe ffc5 	bl	8001702 <dwt_read32bitoffsetreg>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (frame_len <= RX_BUF_LEN)
 8002780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002782:	2b18      	cmp	r3, #24
 8002784:	d806      	bhi.n	8002794 <dw_main+0x1cc>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8002786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002788:	b29b      	uxth	r3, r3
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	485f      	ldr	r0, [pc, #380]	; (800290c <dw_main+0x344>)
 8002790:	f7fe fed4 	bl	800153c <dwt_readrxdata>
                    }

                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002794:	4b5d      	ldr	r3, [pc, #372]	; (800290c <dw_main+0x344>)
 8002796:	2200      	movs	r2, #0
 8002798:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 800279a:	220a      	movs	r2, #10
 800279c:	4962      	ldr	r1, [pc, #392]	; (8002928 <dw_main+0x360>)
 800279e:	485b      	ldr	r0, [pc, #364]	; (800290c <dw_main+0x344>)
 80027a0:	f002 fe74 	bl	800548c <memcmp>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f47f af38 	bne.w	800261c <dw_main+0x54>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 80027ac:	f000 f908 	bl	80029c0 <get_tx_timestamp_u64>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	495d      	ldr	r1, [pc, #372]	; (800292c <dw_main+0x364>)
 80027b6:	e9c1 2300 	strd	r2, r3, [r1]
                        final_rx_ts = get_rx_timestamp_u64();
 80027ba:	f000 f939 	bl	8002a30 <get_rx_timestamp_u64>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	495b      	ldr	r1, [pc, #364]	; (8002930 <dw_main+0x368>)
 80027c4:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	4619      	mov	r1, r3
 80027ce:	4859      	ldr	r0, [pc, #356]	; (8002934 <dw_main+0x36c>)
 80027d0:	f000 f966 	bl	8002aa0 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80027d4:	f107 0308 	add.w	r3, r7, #8
 80027d8:	4619      	mov	r1, r3
 80027da:	4857      	ldr	r0, [pc, #348]	; (8002938 <dw_main+0x370>)
 80027dc:	f000 f960 	bl	8002aa0 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4855      	ldr	r0, [pc, #340]	; (800293c <dw_main+0x374>)
 80027e6:	f000 f95b 	bl	8002aa0 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 80027ea:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <dw_main+0x350>)
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	4613      	mov	r3, r2
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <dw_main+0x364>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	4613      	mov	r3, r2
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        final_rx_ts_32 = (uint32)final_rx_ts;
 80027fe:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <dw_main+0x368>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	4613      	mov	r3, r2
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe00 	bl	8000414 <__aeabi_ui2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 800281c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fdf6 	bl	8000414 <__aeabi_ui2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fdec 	bl	8000414 <__aeabi_ui2d>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8002844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fde2 	bl	8000414 <__aeabi_ui2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9c7 2306 	strd	r2, r3, [r7, #24]
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8002858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800285c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002860:	f7fd fe52 	bl	8000508 <__aeabi_dmul>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4690      	mov	r8, r2
 800286a:	4699      	mov	r9, r3
 800286c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002870:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002874:	f7fd fe48 	bl	8000508 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4640      	mov	r0, r8
 800287e:	4649      	mov	r1, r9
 8002880:	f7fd fc8a 	bl	8000198 <__aeabi_dsub>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4690      	mov	r8, r2
 800288a:	4699      	mov	r9, r3
 800288c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002890:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002894:	f7fd fc82 	bl	800019c <__adddf3>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a4:	f7fd fc7a 	bl	800019c <__adddf3>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	f7fd fc72 	bl	800019c <__adddf3>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4640      	mov	r0, r8
 80028be:	4649      	mov	r1, r9
 80028c0:	f7fd ff4c 	bl	800075c <__aeabi_ddiv>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7fe f97c 	bl	8000bc8 <__aeabi_d2lz>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

                        tof = tof_dtu * DWT_TIME_UNITS;
 80028d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028dc:	f7fd fde6 	bl	80004ac <__aeabi_l2d>
 80028e0:	a305      	add	r3, pc, #20	; (adr r3, 80028f8 <dw_main+0x330>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fe0f 	bl	8000508 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4914      	ldr	r1, [pc, #80]	; (8002940 <dw_main+0x378>)
 80028f0:	e9c1 2300 	strd	r2, r3, [r1]
 80028f4:	e026      	b.n	8002944 <dw_main+0x37c>
 80028f6:	bf00      	nop
 80028f8:	3bce48fa 	.word	0x3bce48fa
 80028fc:	3db13518 	.word	0x3db13518
 8002900:	20000008 	.word	0x20000008
 8002904:	2000029c 	.word	0x2000029c
 8002908:	2427d000 	.word	0x2427d000
 800290c:	20000284 	.word	0x20000284
 8002910:	20000338 	.word	0x20000338
 8002914:	20000014 	.word	0x20000014
 8002918:	200002a0 	.word	0x200002a0
 800291c:	0abe0000 	.word	0x0abe0000
 8002920:	20000280 	.word	0x20000280
 8002924:	20000020 	.word	0x20000020
 8002928:	20000030 	.word	0x20000030
 800292c:	200002a8 	.word	0x200002a8
 8002930:	200002b0 	.word	0x200002b0
 8002934:	2000028e 	.word	0x2000028e
 8002938:	20000292 	.word	0x20000292
 800293c:	20000296 	.word	0x20000296
 8002940:	200002b8 	.word	0x200002b8
                        distance = tof * SPEED_OF_LIGHT;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <dw_main+0x3e0>)
 8002946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800294a:	a315      	add	r3, pc, #84	; (adr r3, 80029a0 <dw_main+0x3d8>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fdda 	bl	8000508 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4914      	ldr	r1, [pc, #80]	; (80029ac <dw_main+0x3e4>)
 800295a:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "DIST: %3.2f m", distance);
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <dw_main+0x3e4>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	4912      	ldr	r1, [pc, #72]	; (80029b0 <dw_main+0x3e8>)
 8002966:	4813      	ldr	r0, [pc, #76]	; (80029b4 <dw_main+0x3ec>)
 8002968:	f003 fc34 	bl	80061d4 <siprintf>
                        HAL_UART_Transmit(&huart2, dist_str, sizeof(dist_str), HAL_MAX_DELAY);
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	2210      	movs	r2, #16
 8002972:	4910      	ldr	r1, [pc, #64]	; (80029b4 <dw_main+0x3ec>)
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <dw_main+0x3f0>)
 8002976:	f001 ff35 	bl	80047e4 <HAL_UART_Transmit>
 800297a:	e64f      	b.n	800261c <dw_main+0x54>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <dw_main+0x3f4>)
 800297e:	2100      	movs	r1, #0
 8002980:	200f      	movs	r0, #15
 8002982:	f7fe ff44 	bl	800180e <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8002986:	f7ff f9c2 	bl	8001d0e <dwt_rxreset>
 800298a:	e647      	b.n	800261c <dw_main+0x54>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800298c:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <dw_main+0x3f4>)
 800298e:	2100      	movs	r1, #0
 8002990:	200f      	movs	r0, #15
 8002992:	f7fe ff3c 	bl	800180e <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8002996:	f7ff f9ba 	bl	8001d0e <dwt_rxreset>
 800299a:	e63f      	b.n	800261c <dw_main+0x54>
                    continue;
 800299c:	bf00      	nop
        dwt_setrxtimeout(0);
 800299e:	e63d      	b.n	800261c <dw_main+0x54>
 80029a0:	13000000 	.word	0x13000000
 80029a4:	41b1dd19 	.word	0x41b1dd19
 80029a8:	200002b8 	.word	0x200002b8
 80029ac:	200002c0 	.word	0x200002c0
 80029b0:	08009d30 	.word	0x08009d30
 80029b4:	200002c8 	.word	0x200002c8
 80029b8:	20000338 	.word	0x20000338
 80029bc:	24279000 	.word	0x24279000

080029c0 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80029c0:	b5b0      	push	{r4, r5, r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fdc3 	bl	8001560 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80029da:	2304      	movs	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e01d      	b.n	8002a1c <get_tx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 80029e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	020b      	lsls	r3, r1, #8
 80029ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80029f2:	0202      	lsls	r2, r0, #8
 80029f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a0a:	ea40 0402 	orr.w	r4, r0, r2
 8002a0e:	ea41 0503 	orr.w	r5, r1, r3
 8002a12:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dade      	bge.n	80029e0 <get_tx_timestamp_u64+0x20>
    }
    return ts;
 8002a22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bdb0      	pop	{r4, r5, r7, pc}

08002a30 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fd99 	bl	800157c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e01d      	b.n	8002a8c <get_rx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 8002a50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	020b      	lsls	r3, r1, #8
 8002a5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002a62:	0202      	lsls	r2, r0, #8
 8002a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8002a68:	1d3a      	adds	r2, r7, #4
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a7a:	ea40 0402 	orr.w	r4, r0, r2
 8002a7e:	ea41 0503 	orr.w	r5, r1, r3
 8002a82:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dade      	bge.n	8002a50 <get_rx_timestamp_u64+0x20>
    }
    return ts;
 8002a92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bdb0      	pop	{r4, r5, r7, pc}

08002aa0 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e010      	b.n	8002ad8 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	440a      	add	r2, r1
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	00d2      	lsls	r2, r2, #3
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	441a      	add	r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	ddeb      	ble.n	8002ab6 <final_msg_get_ts+0x16>
    }
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
	...

08002aec <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4804      	ldr	r0, [pc, #16]	; (8002b14 <_write+0x28>)
 8002b04:	f001 fe6e 	bl	80047e4 <HAL_UART_Transmit>
    return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000338 	.word	0x20000338

08002b18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <MX_USART2_UART_Init+0x50>)
 8002b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b3e:	220c      	movs	r2, #12
 8002b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b50:	f001 fdf8 	bl	8004744 <HAL_UART_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b5a:	f7ff fb97 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000338 	.word	0x20000338
 8002b68:	40004400 	.word	0x40004400

08002b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <HAL_UART_MspInit+0x8c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d12f      	bne.n	8002bee <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_UART_MspInit+0x90>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <HAL_UART_MspInit+0x90>)
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	6253      	str	r3, [r2, #36]	; 0x24
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_UART_MspInit+0x90>)
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_UART_MspInit+0x90>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <HAL_UART_MspInit+0x90>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	61d3      	str	r3, [r2, #28]
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_UART_MspInit+0x90>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bce:	2307      	movs	r3, #7
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4809      	ldr	r0, [pc, #36]	; (8002c00 <HAL_UART_MspInit+0x94>)
 8002bda:	f000 fa87 	bl	80030ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2026      	movs	r0, #38	; 0x26
 8002be4:	f000 f9bf 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be8:	2026      	movs	r0, #38	; 0x26
 8002bea:	f000 f9d8 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3728      	adds	r7, #40	; 0x28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000

08002c04 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c04:	f7ff fcda 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c0a:	490c      	ldr	r1, [pc, #48]	; (8002c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c20:	4c09      	ldr	r4, [pc, #36]	; (8002c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f002 fc09 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c32:	f7ff facb 	bl	80021cc <main>
  bx lr
 8002c36:	4770      	bx	lr
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002c40:	0800a2dc 	.word	0x0800a2dc
  ldr r2, =_sbss
 8002c44:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002c48:	20000394 	.word	0x20000394

08002c4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC1_IRQHandler>

08002c4e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 f979 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f000 f80e 	bl	8002c80 <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	e001      	b.n	8002c74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c70:	f7ff fb94 	bl	800239c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c74:	79fb      	ldrb	r3, [r7, #7]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_InitTick+0x68>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d022      	beq.n	8002cda <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_InitTick+0x6c>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_InitTick+0x68>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f994 	bl	8002fd6 <HAL_SYSTICK_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10f      	bne.n	8002cd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	d809      	bhi.n	8002cce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc2:	f000 f950 	bl	8002f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_InitTick+0x70>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e007      	b.n	8002cde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e004      	b.n	8002cde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e001      	b.n	8002cde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000004c 	.word	0x2000004c
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	20000048 	.word	0x20000048

08002cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_IncTick+0x1c>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_IncTick+0x20>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_IncTick+0x1c>)
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000380 	.word	0x20000380
 8002d14:	2000004c 	.word	0x2000004c

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <HAL_GetTick+0x10>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	20000380 	.word	0x20000380

08002d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d004      	beq.n	8002d50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_Delay+0x40>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d50:	bf00      	nop
 8002d52:	f7ff ffe1 	bl	8002d18 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d8f7      	bhi.n	8002d52 <HAL_Delay+0x26>
  {
  }
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2000004c 	.word	0x2000004c

08002d70 <__NVIC_SetPriorityGrouping>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da2:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	60d3      	str	r3, [r2, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_GetPriorityGrouping>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	f003 0307 	and.w	r3, r3, #7
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_EnableIRQ>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	db0b      	blt.n	8002dfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4906      	ldr	r1, [pc, #24]	; (8002e08 <__NVIC_EnableIRQ+0x34>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2001      	movs	r0, #1
 8002df6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_DisableIRQ>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db12      	blt.n	8002e44 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	490a      	ldr	r1, [pc, #40]	; (8002e50 <__NVIC_DisableIRQ+0x44>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	3320      	adds	r3, #32
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e38:	f3bf 8f4f 	dsb	sy
}
 8002e3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e3e:	f3bf 8f6f 	isb	sy
}
 8002e42:	bf00      	nop
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	; (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f7ff ff90 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff09 	bl	8002d70 <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f78:	f7ff ff1e 	bl	8002db8 <__NVIC_GetPriorityGrouping>
 8002f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff90 	bl	8002ea8 <NVIC_EncodePriority>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff5f 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff11 	bl	8002dd4 <__NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff1f 	bl	8002e0c <__NVIC_DisableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff94 	bl	8002f0c <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d008      	beq.n	8003018 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2204      	movs	r2, #4
 800300a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e022      	b.n	800305e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 020e 	bic.w	r2, r2, #14
 8003026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f003 021c 	and.w	r2, r3, #28
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d005      	beq.n	800308c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e029      	b.n	80030e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020e 	bic.w	r2, r2, #14
 800309a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f003 021c 	and.w	r2, r3, #28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
    }
  }
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003102:	e160      	b.n	80033c6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8152 	beq.w	80033c0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003130:	2b02      	cmp	r3, #2
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0201 	and.w	r2, r3, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d017      	beq.n	80031d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d123      	bne.n	8003226 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	08da      	lsrs	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3208      	adds	r2, #8
 80031e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	6939      	ldr	r1, [r7, #16]
 8003222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0203 	and.w	r2, r3, #3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80ac 	beq.w	80033c0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003268:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_GPIO_Init+0x2f8>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a5d      	ldr	r2, [pc, #372]	; (80033e4 <HAL_GPIO_Init+0x2f8>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <HAL_GPIO_Init+0x2f8>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003280:	4a59      	ldr	r2, [pc, #356]	; (80033e8 <HAL_GPIO_Init+0x2fc>)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a51      	ldr	r2, [pc, #324]	; (80033ec <HAL_GPIO_Init+0x300>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d025      	beq.n	80032f8 <HAL_GPIO_Init+0x20c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a50      	ldr	r2, [pc, #320]	; (80033f0 <HAL_GPIO_Init+0x304>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01f      	beq.n	80032f4 <HAL_GPIO_Init+0x208>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a4f      	ldr	r2, [pc, #316]	; (80033f4 <HAL_GPIO_Init+0x308>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d019      	beq.n	80032f0 <HAL_GPIO_Init+0x204>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a4e      	ldr	r2, [pc, #312]	; (80033f8 <HAL_GPIO_Init+0x30c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_GPIO_Init+0x200>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a4d      	ldr	r2, [pc, #308]	; (80033fc <HAL_GPIO_Init+0x310>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00d      	beq.n	80032e8 <HAL_GPIO_Init+0x1fc>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <HAL_GPIO_Init+0x314>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <HAL_GPIO_Init+0x1f8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_GPIO_Init+0x318>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d101      	bne.n	80032e0 <HAL_GPIO_Init+0x1f4>
 80032dc:	2306      	movs	r3, #6
 80032de:	e00c      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032e0:	2307      	movs	r3, #7
 80032e2:	e00a      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032e4:	2305      	movs	r3, #5
 80032e6:	e008      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e006      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032ec:	2303      	movs	r3, #3
 80032ee:	e004      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e002      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_GPIO_Init+0x20e>
 80032f8:	2300      	movs	r3, #0
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	f002 0203 	and.w	r2, r2, #3
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	4093      	lsls	r3, r2
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800330a:	4937      	ldr	r1, [pc, #220]	; (80033e8 <HAL_GPIO_Init+0x2fc>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003318:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_GPIO_Init+0x31c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_GPIO_Init+0x31c>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003342:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_GPIO_Init+0x31c>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003366:	4a28      	ldr	r2, [pc, #160]	; (8003408 <HAL_GPIO_Init+0x31c>)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336c:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_GPIO_Init+0x31c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43db      	mvns	r3, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003390:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <HAL_GPIO_Init+0x31c>)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_GPIO_Init+0x31c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_GPIO_Init+0x31c>)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f47f ae97 	bne.w	8003104 <HAL_GPIO_Init+0x18>
  }
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40021000 	.word	0x40021000
 8003400:	40021400 	.word	0x40021400
 8003404:	40021800 	.word	0x40021800
 8003408:	40010400 	.word	0x40010400

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003428:	e003      	b.n	8003432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	619a      	str	r2, [r3, #24]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e31d      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344e:	4b94      	ldr	r3, [pc, #592]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003458:	4b91      	ldr	r3, [pc, #580]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003460:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07b      	beq.n	8003566 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d006      	beq.n	8003482 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d10b      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003482:	4b87      	ldr	r3, [pc, #540]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d06a      	beq.n	8003564 <HAL_RCC_OscConfig+0x128>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d166      	bne.n	8003564 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e2f7      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x74>
 80034a2:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7e      	ldr	r2, [pc, #504]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e02d      	b.n	800350c <HAL_RCC_OscConfig+0xd0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x96>
 80034b8:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e01c      	b.n	800350c <HAL_RCC_OscConfig+0xd0>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0xb8>
 80034da:	4b71      	ldr	r3, [pc, #452]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a70      	ldr	r2, [pc, #448]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b6e      	ldr	r3, [pc, #440]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6d      	ldr	r2, [pc, #436]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xd0>
 80034f4:	4b6a      	ldr	r3, [pc, #424]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a69      	ldr	r2, [pc, #420]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b67      	ldr	r3, [pc, #412]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a66      	ldr	r2, [pc, #408]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7ff fc00 	bl	8002d18 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	f7ff fbfc 	bl	8002d18 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	; 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e2ad      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800352e:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xe0>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7ff fbec 	bl	8002d18 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003544:	f7ff fbe8 	bl	8002d18 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e299      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003556:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x108>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d05a      	beq.n	8003628 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d005      	beq.n	8003584 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_OscConfig+0x176>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003584:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_OscConfig+0x160>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e276      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b40      	ldr	r3, [pc, #256]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	493d      	ldr	r1, [pc, #244]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b0:	e03a      	b.n	8003628 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ba:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCC_OscConfig+0x268>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7ff fbaa 	bl	8002d18 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c8:	f7ff fba6 	bl	8002d18 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e257      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	492a      	ldr	r1, [pc, #168]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
 80035fa:	e015      	b.n	8003628 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_OscConfig+0x268>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7ff fb89 	bl	8002d18 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360a:	f7ff fb85 	bl	8002d18 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e236      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80b8 	beq.w	80037a6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d170      	bne.n	800371e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x218>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e21a      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003660:	429a      	cmp	r2, r3
 8003662:	d921      	bls.n	80036a8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fc4b 	bl	8003f04 <RCC_SetFlashLatencyFromMSIRange>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e208      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4906      	ldr	r1, [pc, #24]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	4901      	ldr	r1, [pc, #4]	; (80036a0 <HAL_RCC_OscConfig+0x264>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
 800369e:	e020      	b.n	80036e2 <HAL_RCC_OscConfig+0x2a6>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a8:	4ba4      	ldr	r3, [pc, #656]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	49a1      	ldr	r1, [pc, #644]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ba:	4ba0      	ldr	r3, [pc, #640]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	499c      	ldr	r1, [pc, #624]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fc16 	bl	8003f04 <RCC_SetFlashLatencyFromMSIRange>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e1d3      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	0b5b      	lsrs	r3, r3, #13
 80036e8:	3301      	adds	r3, #1
 80036ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80036f2:	4a92      	ldr	r2, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80036f4:	6892      	ldr	r2, [r2, #8]
 80036f6:	0912      	lsrs	r2, r2, #4
 80036f8:	f002 020f 	and.w	r2, r2, #15
 80036fc:	4990      	ldr	r1, [pc, #576]	; (8003940 <HAL_RCC_OscConfig+0x504>)
 80036fe:	5c8a      	ldrb	r2, [r1, r2]
 8003700:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003702:	4a90      	ldr	r2, [pc, #576]	; (8003944 <HAL_RCC_OscConfig+0x508>)
 8003704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003706:	4b90      	ldr	r3, [pc, #576]	; (8003948 <HAL_RCC_OscConfig+0x50c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fab8 	bl	8002c80 <HAL_InitTick>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d045      	beq.n	80037a6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	e1b5      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d029      	beq.n	800377a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003726:	4b89      	ldr	r3, [pc, #548]	; (800394c <HAL_RCC_OscConfig+0x510>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7ff faf4 	bl	8002d18 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003734:	f7ff faf0 	bl	8002d18 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1a1      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003746:	4b7d      	ldr	r3, [pc, #500]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003752:	4b7a      	ldr	r3, [pc, #488]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4977      	ldr	r1, [pc, #476]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003764:	4b75      	ldr	r3, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	4972      	ldr	r1, [pc, #456]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	e015      	b.n	80037a6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800377a:	4b74      	ldr	r3, [pc, #464]	; (800394c <HAL_RCC_OscConfig+0x510>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7ff faca 	bl	8002d18 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003788:	f7ff fac6 	bl	8002d18 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e177      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x500>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d030      	beq.n	8003814 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d016      	beq.n	80037e8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <HAL_RCC_OscConfig+0x514>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7ff faaa 	bl	8002d18 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c8:	f7ff faa6 	bl	8002d18 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e157      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037da:	4b58      	ldr	r3, [pc, #352]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0x38c>
 80037e6:	e015      	b.n	8003814 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e8:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_OscConfig+0x514>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7ff fa93 	bl	8002d18 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f6:	f7ff fa8f 	bl	8002d18 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e140      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <HAL_RCC_OscConfig+0x500>)
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80b5 	beq.w	800398c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b45      	ldr	r3, [pc, #276]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b42      	ldr	r3, [pc, #264]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	4a41      	ldr	r2, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6253      	str	r3, [r2, #36]	; 0x24
 800383e:	4b3f      	ldr	r3, [pc, #252]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <HAL_RCC_OscConfig+0x518>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <HAL_RCC_OscConfig+0x518>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3d      	ldr	r2, [pc, #244]	; (8003954 <HAL_RCC_OscConfig+0x518>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7ff fa57 	bl	8002d18 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7ff fa53 	bl	8002d18 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e104      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b34      	ldr	r3, [pc, #208]	; (8003954 <HAL_RCC_OscConfig+0x518>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x466>
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_RCC_OscConfig+0x500>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	6353      	str	r3, [r2, #52]	; 0x34
 80038a0:	e02d      	b.n	80038fe <HAL_RCC_OscConfig+0x4c2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x488>
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b4:	6353      	str	r3, [r2, #52]	; 0x34
 80038b6:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038c0:	6353      	str	r3, [r2, #52]	; 0x34
 80038c2:	e01c      	b.n	80038fe <HAL_RCC_OscConfig+0x4c2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d10c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	4a1a      	ldr	r2, [pc, #104]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d6:	6353      	str	r3, [r2, #52]	; 0x34
 80038d8:	4b18      	ldr	r3, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	4a17      	ldr	r2, [pc, #92]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6353      	str	r3, [r2, #52]	; 0x34
 80038e4:	e00b      	b.n	80038fe <HAL_RCC_OscConfig+0x4c2>
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	4a14      	ldr	r2, [pc, #80]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f0:	6353      	str	r3, [r2, #52]	; 0x34
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <HAL_RCC_OscConfig+0x500>)
 80038f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038fc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003906:	f7ff fa07 	bl	8002d18 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7ff fa03 	bl	8002d18 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0b2      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_OscConfig+0x500>)
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCC_OscConfig+0x4d2>
 8003930:	e023      	b.n	800397a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7ff f9f1 	bl	8002d18 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003938:	e019      	b.n	800396e <HAL_RCC_OscConfig+0x532>
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	08009e00 	.word	0x08009e00
 8003944:	20000004 	.word	0x20000004
 8003948:	20000048 	.word	0x20000048
 800394c:	42470020 	.word	0x42470020
 8003950:	42470680 	.word	0x42470680
 8003954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7ff f9de 	bl	8002d18 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e08d      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800396e:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ee      	bne.n	8003958 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800397a:	7ffb      	ldrb	r3, [r7, #31]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	4a43      	ldr	r2, [pc, #268]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2b00      	cmp	r3, #0
 8003992:	d079      	beq.n	8003a88 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d056      	beq.n	8003a48 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d13b      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_RCC_OscConfig+0x65c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7ff f9b6 	bl	8002d18 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b0:	f7ff f9b2 	bl	8002d18 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e063      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c2:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ce:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	4319      	orrs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	430b      	orrs	r3, r1
 80039e6:	492b      	ldr	r1, [pc, #172]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x65c>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7ff f991 	bl	8002d18 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fa:	f7ff f98d 	bl	8002d18 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e03e      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x5be>
 8003a18:	e036      	b.n	8003a88 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <HAL_RCC_OscConfig+0x65c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7ff f97a 	bl	8002d18 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a28:	f7ff f976 	bl	8002d18 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e027      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5ec>
 8003a46:	e01f      	b.n	8003a88 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e01a      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_RCC_OscConfig+0x658>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d10d      	bne.n	8003a84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	42470060 	.word	0x42470060

08003a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e11a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b8f      	ldr	r3, [pc, #572]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d919      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x34>
 8003ac4:	4b8a      	ldr	r3, [pc, #552]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a89      	ldr	r2, [pc, #548]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b87      	ldr	r3, [pc, #540]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 0201 	bic.w	r2, r3, #1
 8003ad8:	4985      	ldr	r1, [pc, #532]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae0:	4b83      	ldr	r3, [pc, #524]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0f9      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afe:	4b7d      	ldr	r3, [pc, #500]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	497a      	ldr	r1, [pc, #488]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 808e 	beq.w	8003c3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b26:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d121      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0d7      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d115      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0cb      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b56:	4b67      	ldr	r3, [pc, #412]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0bf      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b66:	4b63      	ldr	r3, [pc, #396]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0b7      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b5f      	ldr	r3, [pc, #380]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	495c      	ldr	r1, [pc, #368]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7ff f8c6 	bl	8002d18 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7ff f8be 	bl	8002d18 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e09b      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xfc>
 8003bba:	e03e      	b.n	8003c3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d112      	bne.n	8003bea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc6:	f7ff f8a7 	bl	8002d18 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e084      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bdc:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d1ee      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x12a>
 8003be8:	e027      	b.n	8003c3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d11d      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7ff f890 	bl	8002d18 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06d      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b3a      	ldr	r3, [pc, #232]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x158>
 8003c16:	e010      	b.n	8003c3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7ff f87e 	bl	8002d18 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e05b      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ee      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d219      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_RCC_ClockConfig+0x1be>
 8003c4e:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 0201 	bic.w	r2, r3, #1
 8003c62:	4923      	ldr	r1, [pc, #140]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_RCC_ClockConfig+0x254>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e034      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4917      	ldr	r1, [pc, #92]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f823 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <HAL_RCC_ClockConfig+0x258>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_RCC_ClockConfig+0x260>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_RCC_ClockConfig+0x264>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe ffd0 	bl	8002c80 <HAL_InitTick>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023c00 	.word	0x40023c00
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	08009e00 	.word	0x08009e00
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	20000048 	.word	0x20000048

08003d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d00d      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x32>
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	f200 80a4 	bhi.w	8003e68 <HAL_RCC_GetSysClockFreq+0x164>
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d002      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0x26>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d003      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x2c>
 8003d28:	e09e      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d2a:	4b5a      	ldr	r3, [pc, #360]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x190>)
 8003d2c:	613b      	str	r3, [r7, #16]
      break;
 8003d2e:	e0a9      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d30:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x194>)
 8003d32:	613b      	str	r3, [r7, #16]
      break;
 8003d34:	e0a6      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	0c9b      	lsrs	r3, r3, #18
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x198>)
 8003d40:	5cd3      	ldrb	r3, [r2, r3]
 8003d42:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	0d9b      	lsrs	r3, r3, #22
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d041      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	461c      	mov	r4, r3
 8003d60:	f04f 0500 	mov.w	r5, #0
 8003d64:	4620      	mov	r0, r4
 8003d66:	4629      	mov	r1, r5
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	014b      	lsls	r3, r1, #5
 8003d72:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d76:	0142      	lsls	r2, r0, #5
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	1b00      	subs	r0, r0, r4
 8003d7e:	eb61 0105 	sbc.w	r1, r1, r5
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	018b      	lsls	r3, r1, #6
 8003d8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d90:	0182      	lsls	r2, r0, #6
 8003d92:	1a12      	subs	r2, r2, r0
 8003d94:	eb63 0301 	sbc.w	r3, r3, r1
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	00d9      	lsls	r1, r3, #3
 8003da2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003da6:	00d0      	lsls	r0, r2, #3
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	1912      	adds	r2, r2, r4
 8003dae:	eb45 0303 	adc.w	r3, r5, r3
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0259      	lsls	r1, r3, #9
 8003dbc:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dc0:	0250      	lsls	r0, r2, #9
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	f7fc fee1 	bl	8000b98 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e040      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	461c      	mov	r4, r3
 8003de4:	f04f 0500 	mov.w	r5, #0
 8003de8:	4620      	mov	r0, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	014b      	lsls	r3, r1, #5
 8003df6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dfa:	0142      	lsls	r2, r0, #5
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	1b00      	subs	r0, r0, r4
 8003e02:	eb61 0105 	sbc.w	r1, r1, r5
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	018b      	lsls	r3, r1, #6
 8003e10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e14:	0182      	lsls	r2, r0, #6
 8003e16:	1a12      	subs	r2, r2, r0
 8003e18:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1c:	f04f 0000 	mov.w	r0, #0
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	00d9      	lsls	r1, r3, #3
 8003e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e2a:	00d0      	lsls	r0, r2, #3
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	1912      	adds	r2, r2, r4
 8003e32:	eb45 0303 	adc.w	r3, r5, r3
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0299      	lsls	r1, r3, #10
 8003e40:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e44:	0290      	lsls	r0, r2, #10
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	f7fc fe9f 	bl	8000b98 <__aeabi_uldivmod>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4613      	mov	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	613b      	str	r3, [r7, #16]
      break;
 8003e66:	e00d      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0b5b      	lsrs	r3, r3, #13
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
      break;
 8003e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e84:	693b      	ldr	r3, [r7, #16]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200
 8003e9c:	08009df4 	.word	0x08009df4

08003ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff2 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	08009e10 	.word	0x08009e10

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffde 	bl	8003ea0 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0adb      	lsrs	r3, r3, #11
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	08009e10 	.word	0x08009e10

08003f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d12c      	bne.n	8003f76 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f1c:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	e016      	b.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6253      	str	r3, [r2, #36]	; 0x24
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003f54:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003f68:	d105      	bne.n	8003f76 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f70:	d101      	bne.n	8003f76 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003f72:	2301      	movs	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 0201 	bic.w	r2, r3, #1
 8003f90:	490b      	ldr	r1, [pc, #44]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d001      	beq.n	8003faa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e07b      	b.n	80040ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe6:	d009      	beq.n	8003ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
 8003fee:	e005      	b.n	8003ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe f974 	bl	8002304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0104 	and.w	r1, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	f003 0210 	and.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b088      	sub	sp, #32
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_SPI_Transmit+0x22>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e12d      	b.n	8004354 <HAL_SPI_Transmit+0x27e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004100:	f7fe fe0a 	bl	8002d18 <HAL_GetTick>
 8004104:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	77fb      	strb	r3, [r7, #31]
    goto error;
 800411a:	e116      	b.n	800434a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_SPI_Transmit+0x52>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800412c:	e10d      	b.n	800434a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2203      	movs	r2, #3
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004174:	d10f      	bne.n	8004196 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004184:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004194:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d007      	beq.n	80041b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041bc:	d14f      	bne.n	800425e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Transmit+0xf6>
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d142      	bne.n	8004252 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	881a      	ldrh	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	1c9a      	adds	r2, r3, #2
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041f0:	e02f      	b.n	8004252 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d112      	bne.n	8004226 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	86da      	strh	r2, [r3, #54]	; 0x36
 8004224:	e015      	b.n	8004252 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004226:	f7fe fd77 	bl	8002d18 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d803      	bhi.n	800423e <HAL_SPI_Transmit+0x168>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d102      	bne.n	8004244 <HAL_SPI_Transmit+0x16e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d106      	bne.n	8004252 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004250:	e07b      	b.n	800434a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ca      	bne.n	80041f2 <HAL_SPI_Transmit+0x11c>
 800425c:	e050      	b.n	8004300 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_SPI_Transmit+0x196>
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d144      	bne.n	80042f6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	7812      	ldrb	r2, [r2, #0]
 8004278:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004292:	e030      	b.n	80042f6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d113      	bne.n	80042ca <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80042c8:	e015      	b.n	80042f6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ca:	f7fe fd25 	bl	8002d18 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d803      	bhi.n	80042e2 <HAL_SPI_Transmit+0x20c>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d102      	bne.n	80042e8 <HAL_SPI_Transmit+0x212>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042f4:	e029      	b.n	800434a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1c9      	bne.n	8004294 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f9db 	bl	80046c0 <SPI_EndRxTxTransaction>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e003      	b.n	800434a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004352:	7ffb      	ldrb	r3, [r7, #31]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	099b      	lsrs	r3, r3, #6
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
    return;
 800439e:	e0d7      	b.n	8004550 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_SPI_IRQHandler+0x66>
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
    return;
 80043c0:	e0c6      	b.n	8004550 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10c      	bne.n	80043e8 <HAL_SPI_IRQHandler+0x8c>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80b4 	beq.w	8004550 <HAL_SPI_IRQHandler+0x1f4>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80ad 	beq.w	8004550 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d023      	beq.n	800444a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b03      	cmp	r3, #3
 800440c:	d011      	beq.n	8004432 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f043 0204 	orr.w	r2, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	e00b      	b.n	800444a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
        return;
 8004448:	e082      	b.n	8004550 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d014      	beq.n	8004480 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f043 0208 	orr.w	r2, r3, #8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004498:	2300      	movs	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04f      	beq.n	800454e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d104      	bne.n	80044da <HAL_SPI_IRQHandler+0x17e>
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d034      	beq.n	8004544 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0203 	bic.w	r2, r2, #3
 80044e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d011      	beq.n	8004516 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_SPI_IRQHandler+0x1fc>)
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fdb2 	bl	8003068 <HAL_DMA_Abort_IT>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <HAL_SPI_IRQHandler+0x1fc>)
 8004524:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fd9c 	bl	8003068 <HAL_DMA_Abort_IT>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004542:	e003      	b.n	800454c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f809 	bl	800455c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800454a:	e000      	b.n	800454e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800454c:	bf00      	nop
    return;
 800454e:	bf00      	nop
  }
}
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	08004589 	.word	0x08004589

0800455c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457c:	b2db      	uxtb	r3, r3
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff ffda 	bl	800455c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045c0:	f7fe fbaa 	bl	8002d18 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	4413      	add	r3, r2
 80045ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045d0:	f7fe fba2 	bl	8002d18 <HAL_GetTick>
 80045d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	015b      	lsls	r3, r3, #5
 80045dc:	0d1b      	lsrs	r3, r3, #20
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e6:	e054      	b.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d050      	beq.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f0:	f7fe fb92 	bl	8002d18 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d902      	bls.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d13d      	bne.n	8004682 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004614:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800461e:	d111      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004628:	d004      	beq.n	8004634 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d107      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d10f      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800466c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e017      	b.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d19b      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000004 	.word	0x20000004

080046c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <SPI_EndRxTxTransaction+0x7c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <SPI_EndRxTxTransaction+0x80>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	0d5b      	lsrs	r3, r3, #21
 80046d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d112      	bne.n	8004712 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2200      	movs	r2, #0
 80046f4:	2180      	movs	r1, #128	; 0x80
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ff5a 	bl	80045b0 <SPI_WaitFlagStateUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f043 0220 	orr.w	r2, r3, #32
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e00f      	b.n	8004732 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3b01      	subs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d0f2      	beq.n	8004712 <SPI_EndRxTxTransaction+0x52>
 800472c:	e000      	b.n	8004730 <SPI_EndRxTxTransaction+0x70>
        break;
 800472e:	bf00      	nop
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000004 	.word	0x20000004
 8004740:	165e9f81 	.word	0x165e9f81

08004744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e042      	b.n	80047dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fe f9fe 	bl	8002b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fd71 	bl	8005270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b20      	cmp	r3, #32
 8004802:	d16d      	bne.n	80048e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_UART_Transmit+0x2c>
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e066      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2221      	movs	r2, #33	; 0x21
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004822:	f7fe fa79 	bl	8002d18 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483c:	d108      	bne.n	8004850 <HAL_UART_Transmit+0x6c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e003      	b.n	8004858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004858:	e02a      	b.n	80048b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 faf9 	bl	8004e5c <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e036      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	3302      	adds	r3, #2
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	e007      	b.n	80048a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1cf      	bne.n	800485a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fac9 	bl	8004e5c <UART_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e006      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b0ba      	sub	sp, #232	; 0xe8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004918:	2300      	movs	r3, #0
 800491a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800492a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_UART_IRQHandler+0x66>
 800493e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fbd1 	bl	80050f2 <UART_Receive_IT>
      return;
 8004950:	e25b      	b.n	8004e0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80de 	beq.w	8004b18 <HAL_UART_IRQHandler+0x22c>
 800495c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80d1 	beq.w	8004b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_UART_IRQHandler+0xae>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xd2>
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f043 0202 	orr.w	r2, r3, #2
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_UART_IRQHandler+0xf6>
 80049ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d011      	beq.n	8004a12 <HAL_UART_IRQHandler+0x126>
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0208 	orr.w	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 81f2 	beq.w	8004e00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_UART_IRQHandler+0x14e>
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fb5c 	bl	80050f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <HAL_UART_IRQHandler+0x17a>
 8004a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04f      	beq.n	8004b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa66 	bl	8004f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d141      	bne.n	8004afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1d9      	bne.n	8004a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d013      	beq.n	8004af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	4a7e      	ldr	r2, [pc, #504]	; (8004ccc <HAL_UART_IRQHandler+0x3e0>)
 8004ad4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fac4 	bl	8003068 <HAL_DMA_Abort_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004af0:	4610      	mov	r0, r2
 8004af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	e00e      	b.n	8004b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f99c 	bl	8004e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	e00a      	b.n	8004b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f998 	bl	8004e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e006      	b.n	8004b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f994 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b12:	e175      	b.n	8004e00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b14:	bf00      	nop
    return;
 8004b16:	e173      	b.n	8004e00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	f040 814f 	bne.w	8004dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8148 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8141 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	f040 80b6 	bne.w	8004cd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8145 	beq.w	8004e04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b82:	429a      	cmp	r2, r3
 8004b84:	f080 813e 	bcs.w	8004e04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	f000 8088 	beq.w	8004cac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bc8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1d9      	bne.n	8004b9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e1      	bne.n	8004be8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3314      	adds	r3, #20
 8004c2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e3      	bne.n	8004c24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7c:	f023 0310 	bic.w	r3, r3, #16
 8004c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e3      	bne.n	8004c6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe f9a1 	bl	8002fee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8bf 	bl	8004e46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cc8:	e09c      	b.n	8004e04 <HAL_UART_IRQHandler+0x518>
 8004cca:	bf00      	nop
 8004ccc:	08004ffd 	.word	0x08004ffd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 808e 	beq.w	8004e08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8089 	beq.w	8004e08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e3      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d52:	633a      	str	r2, [r7, #48]	; 0x30
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0310 	bic.w	r3, r3, #16
 8004d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d98:	61fa      	str	r2, [r7, #28]
 8004d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	69b9      	ldr	r1, [r7, #24]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	617b      	str	r3, [r7, #20]
   return(result);
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e3      	bne.n	8004d74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f844 	bl	8004e46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dbe:	e023      	b.n	8004e08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_UART_IRQHandler+0x4f4>
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f923 	bl	8005024 <UART_Transmit_IT>
    return;
 8004dde:	e014      	b.n	8004e0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <HAL_UART_IRQHandler+0x51e>
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f962 	bl	80050c2 <UART_EndTransmit_IT>
    return;
 8004dfe:	e004      	b.n	8004e0a <HAL_UART_IRQHandler+0x51e>
    return;
 8004e00:	bf00      	nop
 8004e02:	e002      	b.n	8004e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e04:	bf00      	nop
 8004e06:	e000      	b.n	8004e0a <HAL_UART_IRQHandler+0x51e>
      return;
 8004e08:	bf00      	nop
  }
}
 8004e0a:	37e8      	adds	r7, #232	; 0xe8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b090      	sub	sp, #64	; 0x40
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6c:	e050      	b.n	8004f10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d04c      	beq.n	8004f10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7c:	f7fd ff4c 	bl	8002d18 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d241      	bcs.n	8004f10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eac:	637a      	str	r2, [r7, #52]	; 0x34
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e5      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3314      	adds	r3, #20
 8004ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee0:	623a      	str	r2, [r7, #32]
 8004ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e5      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e00f      	b.n	8004f30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d09f      	beq.n	8004e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3740      	adds	r7, #64	; 0x40
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b095      	sub	sp, #84	; 0x54
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f60:	643a      	str	r2, [r7, #64]	; 0x40
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d119      	bne.n	8004fe4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0310 	bic.w	r3, r3, #16
 8004fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd0:	61ba      	str	r2, [r7, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ff2:	bf00      	nop
 8004ff4:	3754      	adds	r7, #84	; 0x54
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ff0c 	bl	8004e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b21      	cmp	r3, #33	; 0x21
 8005036:	d13e      	bne.n	80050b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d114      	bne.n	800506c <UART_Transmit_IT+0x48>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d110      	bne.n	800506c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]
 800506a:	e008      	b.n	800507e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	1c59      	adds	r1, r3, #1
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6211      	str	r1, [r2, #32]
 8005076:	781a      	ldrb	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4619      	mov	r1, r3
 800508c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr

080050c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fe94 	bl	8004e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b08c      	sub	sp, #48	; 0x30
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b22      	cmp	r3, #34	; 0x22
 8005104:	f040 80ae 	bne.w	8005264 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005110:	d117      	bne.n	8005142 <UART_Receive_IT+0x50>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d113      	bne.n	8005142 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005130:	b29a      	uxth	r2, r3
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	1c9a      	adds	r2, r3, #2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
 8005140:	e026      	b.n	8005190 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005154:	d007      	beq.n	8005166 <UART_Receive_IT+0x74>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <UART_Receive_IT+0x82>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e008      	b.n	8005186 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005180:	b2da      	uxtb	r2, r3
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4619      	mov	r1, r3
 800519e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d15d      	bne.n	8005260 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0220 	bic.w	r2, r2, #32
 80051b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d135      	bne.n	8005256 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 0310 	bic.w	r3, r3, #16
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	623a      	str	r2, [r7, #32]
 8005212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	69f9      	ldr	r1, [r7, #28]
 8005216:	6a3a      	ldr	r2, [r7, #32]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	61bb      	str	r3, [r7, #24]
   return(result);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b10      	cmp	r3, #16
 8005230:	d10a      	bne.n	8005248 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fdf9 	bl	8004e46 <HAL_UARTEx_RxEventCallback>
 8005254:	e002      	b.n	800525c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fde3 	bl	8004e22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e002      	b.n	8005266 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3730      	adds	r7, #48	; 0x30
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052b0:	f023 030c 	bic.w	r3, r3, #12
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	430b      	orrs	r3, r1
 80052bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a55      	ldr	r2, [pc, #340]	; (8005430 <UART_SetConfig+0x1c0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d103      	bne.n	80052e6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052de:	f7fe fdfd 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	e002      	b.n	80052ec <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052e6:	f7fe fde5 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 80052ea:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f4:	d14c      	bne.n	8005390 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009a      	lsls	r2, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	4a49      	ldr	r2, [pc, #292]	; (8005434 <UART_SetConfig+0x1c4>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	0119      	lsls	r1, r3, #4
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009a      	lsls	r2, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fbb2 f2f3 	udiv	r2, r2, r3
 800532c:	4b41      	ldr	r3, [pc, #260]	; (8005434 <UART_SetConfig+0x1c4>)
 800532e:	fba3 0302 	umull	r0, r3, r3, r2
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2064      	movs	r0, #100	; 0x64
 8005336:	fb00 f303 	mul.w	r3, r0, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	3332      	adds	r3, #50	; 0x32
 8005340:	4a3c      	ldr	r2, [pc, #240]	; (8005434 <UART_SetConfig+0x1c4>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800534e:	4419      	add	r1, r3
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009a      	lsls	r2, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	fbb2 f2f3 	udiv	r2, r2, r3
 8005366:	4b33      	ldr	r3, [pc, #204]	; (8005434 <UART_SetConfig+0x1c4>)
 8005368:	fba3 0302 	umull	r0, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	2064      	movs	r0, #100	; 0x64
 8005370:	fb00 f303 	mul.w	r3, r0, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	3332      	adds	r3, #50	; 0x32
 800537a:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <UART_SetConfig+0x1c4>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f003 0207 	and.w	r2, r3, #7
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	440a      	add	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800538e:	e04a      	b.n	8005426 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009a      	lsls	r2, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	4a23      	ldr	r2, [pc, #140]	; (8005434 <UART_SetConfig+0x1c4>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	0119      	lsls	r1, r3, #4
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009a      	lsls	r2, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <UART_SetConfig+0x1c4>)
 80053c8:	fba3 0302 	umull	r0, r3, r3, r2
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	2064      	movs	r0, #100	; 0x64
 80053d0:	fb00 f303 	mul.w	r3, r0, r3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	3332      	adds	r3, #50	; 0x32
 80053da:	4a16      	ldr	r2, [pc, #88]	; (8005434 <UART_SetConfig+0x1c4>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e6:	4419      	add	r1, r3
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009a      	lsls	r2, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <UART_SetConfig+0x1c4>)
 8005400:	fba3 0302 	umull	r0, r3, r3, r2
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	2064      	movs	r0, #100	; 0x64
 8005408:	fb00 f303 	mul.w	r3, r0, r3
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	3332      	adds	r3, #50	; 0x32
 8005412:	4a08      	ldr	r2, [pc, #32]	; (8005434 <UART_SetConfig+0x1c4>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	440a      	add	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40013800 	.word	0x40013800
 8005434:	51eb851f 	.word	0x51eb851f

08005438 <__errno>:
 8005438:	4b01      	ldr	r3, [pc, #4]	; (8005440 <__errno+0x8>)
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000050 	.word	0x20000050

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	2600      	movs	r6, #0
 8005448:	4d0c      	ldr	r5, [pc, #48]	; (800547c <__libc_init_array+0x38>)
 800544a:	4c0d      	ldr	r4, [pc, #52]	; (8005480 <__libc_init_array+0x3c>)
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	42a6      	cmp	r6, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	f004 fc50 	bl	8009cf8 <_init>
 8005458:	2600      	movs	r6, #0
 800545a:	4d0a      	ldr	r5, [pc, #40]	; (8005484 <__libc_init_array+0x40>)
 800545c:	4c0a      	ldr	r4, [pc, #40]	; (8005488 <__libc_init_array+0x44>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	42a6      	cmp	r6, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f855 3b04 	ldr.w	r3, [r5], #4
 800546c:	4798      	blx	r3
 800546e:	3601      	adds	r6, #1
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f855 3b04 	ldr.w	r3, [r5], #4
 8005476:	4798      	blx	r3
 8005478:	3601      	adds	r6, #1
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	0800a2d4 	.word	0x0800a2d4
 8005480:	0800a2d4 	.word	0x0800a2d4
 8005484:	0800a2d4 	.word	0x0800a2d4
 8005488:	0800a2d8 	.word	0x0800a2d8

0800548c <memcmp>:
 800548c:	b530      	push	{r4, r5, lr}
 800548e:	2400      	movs	r4, #0
 8005490:	3901      	subs	r1, #1
 8005492:	42a2      	cmp	r2, r4
 8005494:	d101      	bne.n	800549a <memcmp+0xe>
 8005496:	2000      	movs	r0, #0
 8005498:	e005      	b.n	80054a6 <memcmp+0x1a>
 800549a:	5d03      	ldrb	r3, [r0, r4]
 800549c:	3401      	adds	r4, #1
 800549e:	5d0d      	ldrb	r5, [r1, r4]
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	d0f6      	beq.n	8005492 <memcmp+0x6>
 80054a4:	1b58      	subs	r0, r3, r5
 80054a6:	bd30      	pop	{r4, r5, pc}

080054a8 <memset>:
 80054a8:	4603      	mov	r3, r0
 80054aa:	4402      	add	r2, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memset+0xa>
 80054b0:	4770      	bx	lr
 80054b2:	f803 1b01 	strb.w	r1, [r3], #1
 80054b6:	e7f9      	b.n	80054ac <memset+0x4>

080054b8 <__cvt>:
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054be:	461f      	mov	r7, r3
 80054c0:	bfbb      	ittet	lt
 80054c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80054c6:	461f      	movlt	r7, r3
 80054c8:	2300      	movge	r3, #0
 80054ca:	232d      	movlt	r3, #45	; 0x2d
 80054cc:	b088      	sub	sp, #32
 80054ce:	4614      	mov	r4, r2
 80054d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054d4:	7013      	strb	r3, [r2, #0]
 80054d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054d8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80054dc:	f023 0820 	bic.w	r8, r3, #32
 80054e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054e4:	d005      	beq.n	80054f2 <__cvt+0x3a>
 80054e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054ea:	d100      	bne.n	80054ee <__cvt+0x36>
 80054ec:	3501      	adds	r5, #1
 80054ee:	2302      	movs	r3, #2
 80054f0:	e000      	b.n	80054f4 <__cvt+0x3c>
 80054f2:	2303      	movs	r3, #3
 80054f4:	aa07      	add	r2, sp, #28
 80054f6:	9204      	str	r2, [sp, #16]
 80054f8:	aa06      	add	r2, sp, #24
 80054fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054fe:	e9cd 3500 	strd	r3, r5, [sp]
 8005502:	4622      	mov	r2, r4
 8005504:	463b      	mov	r3, r7
 8005506:	f001 fdb7 	bl	8007078 <_dtoa_r>
 800550a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800550e:	4606      	mov	r6, r0
 8005510:	d102      	bne.n	8005518 <__cvt+0x60>
 8005512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005514:	07db      	lsls	r3, r3, #31
 8005516:	d522      	bpl.n	800555e <__cvt+0xa6>
 8005518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800551c:	eb06 0905 	add.w	r9, r6, r5
 8005520:	d110      	bne.n	8005544 <__cvt+0x8c>
 8005522:	7833      	ldrb	r3, [r6, #0]
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d10a      	bne.n	800553e <__cvt+0x86>
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	4620      	mov	r0, r4
 800552e:	4639      	mov	r1, r7
 8005530:	f7fb fa52 	bl	80009d8 <__aeabi_dcmpeq>
 8005534:	b918      	cbnz	r0, 800553e <__cvt+0x86>
 8005536:	f1c5 0501 	rsb	r5, r5, #1
 800553a:	f8ca 5000 	str.w	r5, [sl]
 800553e:	f8da 3000 	ldr.w	r3, [sl]
 8005542:	4499      	add	r9, r3
 8005544:	2200      	movs	r2, #0
 8005546:	2300      	movs	r3, #0
 8005548:	4620      	mov	r0, r4
 800554a:	4639      	mov	r1, r7
 800554c:	f7fb fa44 	bl	80009d8 <__aeabi_dcmpeq>
 8005550:	b108      	cbz	r0, 8005556 <__cvt+0x9e>
 8005552:	f8cd 901c 	str.w	r9, [sp, #28]
 8005556:	2230      	movs	r2, #48	; 0x30
 8005558:	9b07      	ldr	r3, [sp, #28]
 800555a:	454b      	cmp	r3, r9
 800555c:	d307      	bcc.n	800556e <__cvt+0xb6>
 800555e:	4630      	mov	r0, r6
 8005560:	9b07      	ldr	r3, [sp, #28]
 8005562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005564:	1b9b      	subs	r3, r3, r6
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	b008      	add	sp, #32
 800556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800556e:	1c59      	adds	r1, r3, #1
 8005570:	9107      	str	r1, [sp, #28]
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e7f0      	b.n	8005558 <__cvt+0xa0>

08005576 <__exponent>:
 8005576:	4603      	mov	r3, r0
 8005578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557a:	2900      	cmp	r1, #0
 800557c:	f803 2b02 	strb.w	r2, [r3], #2
 8005580:	bfb6      	itet	lt
 8005582:	222d      	movlt	r2, #45	; 0x2d
 8005584:	222b      	movge	r2, #43	; 0x2b
 8005586:	4249      	neglt	r1, r1
 8005588:	2909      	cmp	r1, #9
 800558a:	7042      	strb	r2, [r0, #1]
 800558c:	dd2b      	ble.n	80055e6 <__exponent+0x70>
 800558e:	f10d 0407 	add.w	r4, sp, #7
 8005592:	46a4      	mov	ip, r4
 8005594:	270a      	movs	r7, #10
 8005596:	fb91 f6f7 	sdiv	r6, r1, r7
 800559a:	460a      	mov	r2, r1
 800559c:	46a6      	mov	lr, r4
 800559e:	fb07 1516 	mls	r5, r7, r6, r1
 80055a2:	2a63      	cmp	r2, #99	; 0x63
 80055a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80055a8:	4631      	mov	r1, r6
 80055aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80055ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055b2:	dcf0      	bgt.n	8005596 <__exponent+0x20>
 80055b4:	3130      	adds	r1, #48	; 0x30
 80055b6:	f1ae 0502 	sub.w	r5, lr, #2
 80055ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055be:	4629      	mov	r1, r5
 80055c0:	1c44      	adds	r4, r0, #1
 80055c2:	4561      	cmp	r1, ip
 80055c4:	d30a      	bcc.n	80055dc <__exponent+0x66>
 80055c6:	f10d 0209 	add.w	r2, sp, #9
 80055ca:	eba2 020e 	sub.w	r2, r2, lr
 80055ce:	4565      	cmp	r5, ip
 80055d0:	bf88      	it	hi
 80055d2:	2200      	movhi	r2, #0
 80055d4:	4413      	add	r3, r2
 80055d6:	1a18      	subs	r0, r3, r0
 80055d8:	b003      	add	sp, #12
 80055da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055e4:	e7ed      	b.n	80055c2 <__exponent+0x4c>
 80055e6:	2330      	movs	r3, #48	; 0x30
 80055e8:	3130      	adds	r1, #48	; 0x30
 80055ea:	7083      	strb	r3, [r0, #2]
 80055ec:	70c1      	strb	r1, [r0, #3]
 80055ee:	1d03      	adds	r3, r0, #4
 80055f0:	e7f1      	b.n	80055d6 <__exponent+0x60>
	...

080055f4 <_printf_float>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	b091      	sub	sp, #68	; 0x44
 80055fa:	460c      	mov	r4, r1
 80055fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005600:	4616      	mov	r6, r2
 8005602:	461f      	mov	r7, r3
 8005604:	4605      	mov	r5, r0
 8005606:	f002 ff81 	bl	800850c <_localeconv_r>
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	9309      	str	r3, [sp, #36]	; 0x24
 8005610:	f7fa fdb6 	bl	8000180 <strlen>
 8005614:	2300      	movs	r3, #0
 8005616:	930e      	str	r3, [sp, #56]	; 0x38
 8005618:	f8d8 3000 	ldr.w	r3, [r8]
 800561c:	900a      	str	r0, [sp, #40]	; 0x28
 800561e:	3307      	adds	r3, #7
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	f103 0208 	add.w	r2, r3, #8
 8005628:	f894 9018 	ldrb.w	r9, [r4, #24]
 800562c:	f8d4 b000 	ldr.w	fp, [r4]
 8005630:	f8c8 2000 	str.w	r2, [r8]
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800563c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005640:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005644:	930b      	str	r3, [sp, #44]	; 0x2c
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	4640      	mov	r0, r8
 800564c:	4b9c      	ldr	r3, [pc, #624]	; (80058c0 <_printf_float+0x2cc>)
 800564e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005650:	f7fb f9f4 	bl	8000a3c <__aeabi_dcmpun>
 8005654:	bb70      	cbnz	r0, 80056b4 <_printf_float+0xc0>
 8005656:	f04f 32ff 	mov.w	r2, #4294967295
 800565a:	4640      	mov	r0, r8
 800565c:	4b98      	ldr	r3, [pc, #608]	; (80058c0 <_printf_float+0x2cc>)
 800565e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005660:	f7fb f9ce 	bl	8000a00 <__aeabi_dcmple>
 8005664:	bb30      	cbnz	r0, 80056b4 <_printf_float+0xc0>
 8005666:	2200      	movs	r2, #0
 8005668:	2300      	movs	r3, #0
 800566a:	4640      	mov	r0, r8
 800566c:	4651      	mov	r1, sl
 800566e:	f7fb f9bd 	bl	80009ec <__aeabi_dcmplt>
 8005672:	b110      	cbz	r0, 800567a <_printf_float+0x86>
 8005674:	232d      	movs	r3, #45	; 0x2d
 8005676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800567a:	4b92      	ldr	r3, [pc, #584]	; (80058c4 <_printf_float+0x2d0>)
 800567c:	4892      	ldr	r0, [pc, #584]	; (80058c8 <_printf_float+0x2d4>)
 800567e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005682:	bf94      	ite	ls
 8005684:	4698      	movls	r8, r3
 8005686:	4680      	movhi	r8, r0
 8005688:	2303      	movs	r3, #3
 800568a:	f04f 0a00 	mov.w	sl, #0
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	f02b 0304 	bic.w	r3, fp, #4
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	4633      	mov	r3, r6
 8005698:	4621      	mov	r1, r4
 800569a:	4628      	mov	r0, r5
 800569c:	9700      	str	r7, [sp, #0]
 800569e:	aa0f      	add	r2, sp, #60	; 0x3c
 80056a0:	f000 f9d4 	bl	8005a4c <_printf_common>
 80056a4:	3001      	adds	r0, #1
 80056a6:	f040 8090 	bne.w	80057ca <_printf_float+0x1d6>
 80056aa:	f04f 30ff 	mov.w	r0, #4294967295
 80056ae:	b011      	add	sp, #68	; 0x44
 80056b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b4:	4642      	mov	r2, r8
 80056b6:	4653      	mov	r3, sl
 80056b8:	4640      	mov	r0, r8
 80056ba:	4651      	mov	r1, sl
 80056bc:	f7fb f9be 	bl	8000a3c <__aeabi_dcmpun>
 80056c0:	b148      	cbz	r0, 80056d6 <_printf_float+0xe2>
 80056c2:	f1ba 0f00 	cmp.w	sl, #0
 80056c6:	bfb8      	it	lt
 80056c8:	232d      	movlt	r3, #45	; 0x2d
 80056ca:	4880      	ldr	r0, [pc, #512]	; (80058cc <_printf_float+0x2d8>)
 80056cc:	bfb8      	it	lt
 80056ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056d2:	4b7f      	ldr	r3, [pc, #508]	; (80058d0 <_printf_float+0x2dc>)
 80056d4:	e7d3      	b.n	800567e <_printf_float+0x8a>
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	d142      	bne.n	8005766 <_printf_float+0x172>
 80056e0:	2306      	movs	r3, #6
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	9206      	str	r2, [sp, #24]
 80056e8:	aa0e      	add	r2, sp, #56	; 0x38
 80056ea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80056ee:	aa0d      	add	r2, sp, #52	; 0x34
 80056f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80056f4:	9203      	str	r2, [sp, #12]
 80056f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80056fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	4642      	mov	r2, r8
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	4628      	mov	r0, r5
 8005708:	4653      	mov	r3, sl
 800570a:	910b      	str	r1, [sp, #44]	; 0x2c
 800570c:	f7ff fed4 	bl	80054b8 <__cvt>
 8005710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005712:	4680      	mov	r8, r0
 8005714:	2947      	cmp	r1, #71	; 0x47
 8005716:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005718:	d108      	bne.n	800572c <_printf_float+0x138>
 800571a:	1cc8      	adds	r0, r1, #3
 800571c:	db02      	blt.n	8005724 <_printf_float+0x130>
 800571e:	6863      	ldr	r3, [r4, #4]
 8005720:	4299      	cmp	r1, r3
 8005722:	dd40      	ble.n	80057a6 <_printf_float+0x1b2>
 8005724:	f1a9 0902 	sub.w	r9, r9, #2
 8005728:	fa5f f989 	uxtb.w	r9, r9
 800572c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005730:	d81f      	bhi.n	8005772 <_printf_float+0x17e>
 8005732:	464a      	mov	r2, r9
 8005734:	3901      	subs	r1, #1
 8005736:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800573a:	910d      	str	r1, [sp, #52]	; 0x34
 800573c:	f7ff ff1b 	bl	8005576 <__exponent>
 8005740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005742:	4682      	mov	sl, r0
 8005744:	1813      	adds	r3, r2, r0
 8005746:	2a01      	cmp	r2, #1
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	dc02      	bgt.n	8005752 <_printf_float+0x15e>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	07d2      	lsls	r2, r2, #31
 8005750:	d501      	bpl.n	8005756 <_printf_float+0x162>
 8005752:	3301      	adds	r3, #1
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800575a:	2b00      	cmp	r3, #0
 800575c:	d09b      	beq.n	8005696 <_printf_float+0xa2>
 800575e:	232d      	movs	r3, #45	; 0x2d
 8005760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005764:	e797      	b.n	8005696 <_printf_float+0xa2>
 8005766:	2947      	cmp	r1, #71	; 0x47
 8005768:	d1bc      	bne.n	80056e4 <_printf_float+0xf0>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1ba      	bne.n	80056e4 <_printf_float+0xf0>
 800576e:	2301      	movs	r3, #1
 8005770:	e7b7      	b.n	80056e2 <_printf_float+0xee>
 8005772:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005776:	d118      	bne.n	80057aa <_printf_float+0x1b6>
 8005778:	2900      	cmp	r1, #0
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	dd0b      	ble.n	8005796 <_printf_float+0x1a2>
 800577e:	6121      	str	r1, [r4, #16]
 8005780:	b913      	cbnz	r3, 8005788 <_printf_float+0x194>
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	07d0      	lsls	r0, r2, #31
 8005786:	d502      	bpl.n	800578e <_printf_float+0x19a>
 8005788:	3301      	adds	r3, #1
 800578a:	440b      	add	r3, r1
 800578c:	6123      	str	r3, [r4, #16]
 800578e:	f04f 0a00 	mov.w	sl, #0
 8005792:	65a1      	str	r1, [r4, #88]	; 0x58
 8005794:	e7df      	b.n	8005756 <_printf_float+0x162>
 8005796:	b913      	cbnz	r3, 800579e <_printf_float+0x1aa>
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	07d2      	lsls	r2, r2, #31
 800579c:	d501      	bpl.n	80057a2 <_printf_float+0x1ae>
 800579e:	3302      	adds	r3, #2
 80057a0:	e7f4      	b.n	800578c <_printf_float+0x198>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e7f2      	b.n	800578c <_printf_float+0x198>
 80057a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80057aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ac:	4299      	cmp	r1, r3
 80057ae:	db05      	blt.n	80057bc <_printf_float+0x1c8>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	6121      	str	r1, [r4, #16]
 80057b4:	07d8      	lsls	r0, r3, #31
 80057b6:	d5ea      	bpl.n	800578e <_printf_float+0x19a>
 80057b8:	1c4b      	adds	r3, r1, #1
 80057ba:	e7e7      	b.n	800578c <_printf_float+0x198>
 80057bc:	2900      	cmp	r1, #0
 80057be:	bfcc      	ite	gt
 80057c0:	2201      	movgt	r2, #1
 80057c2:	f1c1 0202 	rsble	r2, r1, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	e7e0      	b.n	800578c <_printf_float+0x198>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	055a      	lsls	r2, r3, #21
 80057ce:	d407      	bmi.n	80057e0 <_printf_float+0x1ec>
 80057d0:	6923      	ldr	r3, [r4, #16]
 80057d2:	4642      	mov	r2, r8
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	d12b      	bne.n	8005836 <_printf_float+0x242>
 80057de:	e764      	b.n	80056aa <_printf_float+0xb6>
 80057e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057e4:	f240 80dd 	bls.w	80059a2 <_printf_float+0x3ae>
 80057e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	f7fb f8f2 	bl	80009d8 <__aeabi_dcmpeq>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d033      	beq.n	8005860 <_printf_float+0x26c>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <_printf_float+0x2e0>)
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af51 	beq.w	80056aa <_printf_float+0xb6>
 8005808:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800580c:	429a      	cmp	r2, r3
 800580e:	db02      	blt.n	8005816 <_printf_float+0x222>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	07d8      	lsls	r0, r3, #31
 8005814:	d50f      	bpl.n	8005836 <_printf_float+0x242>
 8005816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f af42 	beq.w	80056aa <_printf_float+0xb6>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 091a 	add.w	r9, r4, #26
 800582e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005830:	3b01      	subs	r3, #1
 8005832:	4543      	cmp	r3, r8
 8005834:	dc09      	bgt.n	800584a <_printf_float+0x256>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	079b      	lsls	r3, r3, #30
 800583a:	f100 8102 	bmi.w	8005a42 <_printf_float+0x44e>
 800583e:	68e0      	ldr	r0, [r4, #12]
 8005840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005842:	4298      	cmp	r0, r3
 8005844:	bfb8      	it	lt
 8005846:	4618      	movlt	r0, r3
 8005848:	e731      	b.n	80056ae <_printf_float+0xba>
 800584a:	2301      	movs	r3, #1
 800584c:	464a      	mov	r2, r9
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f af28 	beq.w	80056aa <_printf_float+0xb6>
 800585a:	f108 0801 	add.w	r8, r8, #1
 800585e:	e7e6      	b.n	800582e <_printf_float+0x23a>
 8005860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005862:	2b00      	cmp	r3, #0
 8005864:	dc38      	bgt.n	80058d8 <_printf_float+0x2e4>
 8005866:	2301      	movs	r3, #1
 8005868:	4631      	mov	r1, r6
 800586a:	4628      	mov	r0, r5
 800586c:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <_printf_float+0x2e0>)
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	f43f af1a 	beq.w	80056aa <_printf_float+0xb6>
 8005876:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800587a:	4313      	orrs	r3, r2
 800587c:	d102      	bne.n	8005884 <_printf_float+0x290>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	07d9      	lsls	r1, r3, #31
 8005882:	d5d8      	bpl.n	8005836 <_printf_float+0x242>
 8005884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f af0b 	beq.w	80056aa <_printf_float+0xb6>
 8005894:	f04f 0900 	mov.w	r9, #0
 8005898:	f104 0a1a 	add.w	sl, r4, #26
 800589c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800589e:	425b      	negs	r3, r3
 80058a0:	454b      	cmp	r3, r9
 80058a2:	dc01      	bgt.n	80058a8 <_printf_float+0x2b4>
 80058a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a6:	e794      	b.n	80057d2 <_printf_float+0x1de>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4652      	mov	r2, sl
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f aef9 	beq.w	80056aa <_printf_float+0xb6>
 80058b8:	f109 0901 	add.w	r9, r9, #1
 80058bc:	e7ee      	b.n	800589c <_printf_float+0x2a8>
 80058be:	bf00      	nop
 80058c0:	7fefffff 	.word	0x7fefffff
 80058c4:	08009e1c 	.word	0x08009e1c
 80058c8:	08009e20 	.word	0x08009e20
 80058cc:	08009e28 	.word	0x08009e28
 80058d0:	08009e24 	.word	0x08009e24
 80058d4:	08009e2c 	.word	0x08009e2c
 80058d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058dc:	429a      	cmp	r2, r3
 80058de:	bfa8      	it	ge
 80058e0:	461a      	movge	r2, r3
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	4691      	mov	r9, r2
 80058e6:	dc37      	bgt.n	8005958 <_printf_float+0x364>
 80058e8:	f04f 0b00 	mov.w	fp, #0
 80058ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058f0:	f104 021a 	add.w	r2, r4, #26
 80058f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80058f8:	ebaa 0309 	sub.w	r3, sl, r9
 80058fc:	455b      	cmp	r3, fp
 80058fe:	dc33      	bgt.n	8005968 <_printf_float+0x374>
 8005900:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005904:	429a      	cmp	r2, r3
 8005906:	db3b      	blt.n	8005980 <_printf_float+0x38c>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	07da      	lsls	r2, r3, #31
 800590c:	d438      	bmi.n	8005980 <_printf_float+0x38c>
 800590e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005910:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005912:	eba2 030a 	sub.w	r3, r2, sl
 8005916:	eba2 0901 	sub.w	r9, r2, r1
 800591a:	4599      	cmp	r9, r3
 800591c:	bfa8      	it	ge
 800591e:	4699      	movge	r9, r3
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	dc34      	bgt.n	8005990 <_printf_float+0x39c>
 8005926:	f04f 0800 	mov.w	r8, #0
 800592a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800592e:	f104 0a1a 	add.w	sl, r4, #26
 8005932:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	eba3 0309 	sub.w	r3, r3, r9
 800593c:	4543      	cmp	r3, r8
 800593e:	f77f af7a 	ble.w	8005836 <_printf_float+0x242>
 8005942:	2301      	movs	r3, #1
 8005944:	4652      	mov	r2, sl
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	f43f aeac 	beq.w	80056aa <_printf_float+0xb6>
 8005952:	f108 0801 	add.w	r8, r8, #1
 8005956:	e7ec      	b.n	8005932 <_printf_float+0x33e>
 8005958:	4613      	mov	r3, r2
 800595a:	4631      	mov	r1, r6
 800595c:	4642      	mov	r2, r8
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	d1c0      	bne.n	80058e8 <_printf_float+0x2f4>
 8005966:	e6a0      	b.n	80056aa <_printf_float+0xb6>
 8005968:	2301      	movs	r3, #1
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	f43f ae99 	beq.w	80056aa <_printf_float+0xb6>
 8005978:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800597a:	f10b 0b01 	add.w	fp, fp, #1
 800597e:	e7b9      	b.n	80058f4 <_printf_float+0x300>
 8005980:	4631      	mov	r1, r6
 8005982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	d1bf      	bne.n	800590e <_printf_float+0x31a>
 800598e:	e68c      	b.n	80056aa <_printf_float+0xb6>
 8005990:	464b      	mov	r3, r9
 8005992:	4631      	mov	r1, r6
 8005994:	4628      	mov	r0, r5
 8005996:	eb08 020a 	add.w	r2, r8, sl
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	d1c2      	bne.n	8005926 <_printf_float+0x332>
 80059a0:	e683      	b.n	80056aa <_printf_float+0xb6>
 80059a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059a4:	2a01      	cmp	r2, #1
 80059a6:	dc01      	bgt.n	80059ac <_printf_float+0x3b8>
 80059a8:	07db      	lsls	r3, r3, #31
 80059aa:	d537      	bpl.n	8005a1c <_printf_float+0x428>
 80059ac:	2301      	movs	r3, #1
 80059ae:	4642      	mov	r2, r8
 80059b0:	4631      	mov	r1, r6
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b8      	blx	r7
 80059b6:	3001      	adds	r0, #1
 80059b8:	f43f ae77 	beq.w	80056aa <_printf_float+0xb6>
 80059bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	f43f ae6f 	beq.w	80056aa <_printf_float+0xb6>
 80059cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059d0:	2200      	movs	r2, #0
 80059d2:	2300      	movs	r3, #0
 80059d4:	f7fb f800 	bl	80009d8 <__aeabi_dcmpeq>
 80059d8:	b9d8      	cbnz	r0, 8005a12 <_printf_float+0x41e>
 80059da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059dc:	f108 0201 	add.w	r2, r8, #1
 80059e0:	3b01      	subs	r3, #1
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	d10e      	bne.n	8005a0a <_printf_float+0x416>
 80059ec:	e65d      	b.n	80056aa <_printf_float+0xb6>
 80059ee:	2301      	movs	r3, #1
 80059f0:	464a      	mov	r2, r9
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	f43f ae56 	beq.w	80056aa <_printf_float+0xb6>
 80059fe:	f108 0801 	add.w	r8, r8, #1
 8005a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a04:	3b01      	subs	r3, #1
 8005a06:	4543      	cmp	r3, r8
 8005a08:	dcf1      	bgt.n	80059ee <_printf_float+0x3fa>
 8005a0a:	4653      	mov	r3, sl
 8005a0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a10:	e6e0      	b.n	80057d4 <_printf_float+0x1e0>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	f104 091a 	add.w	r9, r4, #26
 8005a1a:	e7f2      	b.n	8005a02 <_printf_float+0x40e>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4642      	mov	r2, r8
 8005a20:	e7df      	b.n	80059e2 <_printf_float+0x3ee>
 8005a22:	2301      	movs	r3, #1
 8005a24:	464a      	mov	r2, r9
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f43f ae3c 	beq.w	80056aa <_printf_float+0xb6>
 8005a32:	f108 0801 	add.w	r8, r8, #1
 8005a36:	68e3      	ldr	r3, [r4, #12]
 8005a38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a3a:	1a5b      	subs	r3, r3, r1
 8005a3c:	4543      	cmp	r3, r8
 8005a3e:	dcf0      	bgt.n	8005a22 <_printf_float+0x42e>
 8005a40:	e6fd      	b.n	800583e <_printf_float+0x24a>
 8005a42:	f04f 0800 	mov.w	r8, #0
 8005a46:	f104 0919 	add.w	r9, r4, #25
 8005a4a:	e7f4      	b.n	8005a36 <_printf_float+0x442>

08005a4c <_printf_common>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	4616      	mov	r6, r2
 8005a52:	4699      	mov	r9, r3
 8005a54:	688a      	ldr	r2, [r1, #8]
 8005a56:	690b      	ldr	r3, [r1, #16]
 8005a58:	4607      	mov	r7, r0
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bfb8      	it	lt
 8005a5e:	4613      	movlt	r3, r2
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a66:	460c      	mov	r4, r1
 8005a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a6c:	b10a      	cbz	r2, 8005a72 <_printf_common+0x26>
 8005a6e:	3301      	adds	r3, #1
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	0699      	lsls	r1, r3, #26
 8005a76:	bf42      	ittt	mi
 8005a78:	6833      	ldrmi	r3, [r6, #0]
 8005a7a:	3302      	addmi	r3, #2
 8005a7c:	6033      	strmi	r3, [r6, #0]
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	f015 0506 	ands.w	r5, r5, #6
 8005a84:	d106      	bne.n	8005a94 <_printf_common+0x48>
 8005a86:	f104 0a19 	add.w	sl, r4, #25
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	6832      	ldr	r2, [r6, #0]
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dc28      	bgt.n	8005ae6 <_printf_common+0x9a>
 8005a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a98:	1e13      	subs	r3, r2, #0
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	bf18      	it	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	0692      	lsls	r2, r2, #26
 8005aa2:	d42d      	bmi.n	8005b00 <_printf_common+0xb4>
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aac:	47c0      	blx	r8
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d020      	beq.n	8005af4 <_printf_common+0xa8>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	68e5      	ldr	r5, [r4, #12]
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	bf18      	it	ne
 8005abe:	2500      	movne	r5, #0
 8005ac0:	6832      	ldr	r2, [r6, #0]
 8005ac2:	f04f 0600 	mov.w	r6, #0
 8005ac6:	68a3      	ldr	r3, [r4, #8]
 8005ac8:	bf08      	it	eq
 8005aca:	1aad      	subeq	r5, r5, r2
 8005acc:	6922      	ldr	r2, [r4, #16]
 8005ace:	bf08      	it	eq
 8005ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	bfc4      	itt	gt
 8005ad8:	1a9b      	subgt	r3, r3, r2
 8005ada:	18ed      	addgt	r5, r5, r3
 8005adc:	341a      	adds	r4, #26
 8005ade:	42b5      	cmp	r5, r6
 8005ae0:	d11a      	bne.n	8005b18 <_printf_common+0xcc>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e008      	b.n	8005af8 <_printf_common+0xac>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4652      	mov	r2, sl
 8005aea:	4649      	mov	r1, r9
 8005aec:	4638      	mov	r0, r7
 8005aee:	47c0      	blx	r8
 8005af0:	3001      	adds	r0, #1
 8005af2:	d103      	bne.n	8005afc <_printf_common+0xb0>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	3501      	adds	r5, #1
 8005afe:	e7c4      	b.n	8005a8a <_printf_common+0x3e>
 8005b00:	2030      	movs	r0, #48	; 0x30
 8005b02:	18e1      	adds	r1, r4, r3
 8005b04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b0e:	4422      	add	r2, r4
 8005b10:	3302      	adds	r3, #2
 8005b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b16:	e7c5      	b.n	8005aa4 <_printf_common+0x58>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	4638      	mov	r0, r7
 8005b20:	47c0      	blx	r8
 8005b22:	3001      	adds	r0, #1
 8005b24:	d0e6      	beq.n	8005af4 <_printf_common+0xa8>
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7d9      	b.n	8005ade <_printf_common+0x92>
	...

08005b2c <_printf_i>:
 8005b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	7e27      	ldrb	r7, [r4, #24]
 8005b34:	4691      	mov	r9, r2
 8005b36:	2f78      	cmp	r7, #120	; 0x78
 8005b38:	4680      	mov	r8, r0
 8005b3a:	469a      	mov	sl, r3
 8005b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b42:	d807      	bhi.n	8005b54 <_printf_i+0x28>
 8005b44:	2f62      	cmp	r7, #98	; 0x62
 8005b46:	d80a      	bhi.n	8005b5e <_printf_i+0x32>
 8005b48:	2f00      	cmp	r7, #0
 8005b4a:	f000 80d9 	beq.w	8005d00 <_printf_i+0x1d4>
 8005b4e:	2f58      	cmp	r7, #88	; 0x58
 8005b50:	f000 80a4 	beq.w	8005c9c <_printf_i+0x170>
 8005b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b5c:	e03a      	b.n	8005bd4 <_printf_i+0xa8>
 8005b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b62:	2b15      	cmp	r3, #21
 8005b64:	d8f6      	bhi.n	8005b54 <_printf_i+0x28>
 8005b66:	a001      	add	r0, pc, #4	; (adr r0, 8005b6c <_printf_i+0x40>)
 8005b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bd9 	.word	0x08005bd9
 8005b74:	08005b55 	.word	0x08005b55
 8005b78:	08005b55 	.word	0x08005b55
 8005b7c:	08005b55 	.word	0x08005b55
 8005b80:	08005b55 	.word	0x08005b55
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005b55 	.word	0x08005b55
 8005b8c:	08005b55 	.word	0x08005b55
 8005b90:	08005b55 	.word	0x08005b55
 8005b94:	08005b55 	.word	0x08005b55
 8005b98:	08005ce7 	.word	0x08005ce7
 8005b9c:	08005c09 	.word	0x08005c09
 8005ba0:	08005cc9 	.word	0x08005cc9
 8005ba4:	08005b55 	.word	0x08005b55
 8005ba8:	08005b55 	.word	0x08005b55
 8005bac:	08005d09 	.word	0x08005d09
 8005bb0:	08005b55 	.word	0x08005b55
 8005bb4:	08005c09 	.word	0x08005c09
 8005bb8:	08005b55 	.word	0x08005b55
 8005bbc:	08005b55 	.word	0x08005b55
 8005bc0:	08005cd1 	.word	0x08005cd1
 8005bc4:	680b      	ldr	r3, [r1, #0]
 8005bc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bca:	1d1a      	adds	r2, r3, #4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	600a      	str	r2, [r1, #0]
 8005bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0a4      	b.n	8005d22 <_printf_i+0x1f6>
 8005bd8:	6825      	ldr	r5, [r4, #0]
 8005bda:	6808      	ldr	r0, [r1, #0]
 8005bdc:	062e      	lsls	r6, r5, #24
 8005bde:	f100 0304 	add.w	r3, r0, #4
 8005be2:	d50a      	bpl.n	8005bfa <_printf_i+0xce>
 8005be4:	6805      	ldr	r5, [r0, #0]
 8005be6:	600b      	str	r3, [r1, #0]
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	da03      	bge.n	8005bf4 <_printf_i+0xc8>
 8005bec:	232d      	movs	r3, #45	; 0x2d
 8005bee:	426d      	negs	r5, r5
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	485e      	ldr	r0, [pc, #376]	; (8005d70 <_printf_i+0x244>)
 8005bf8:	e019      	b.n	8005c2e <_printf_i+0x102>
 8005bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bfe:	6805      	ldr	r5, [r0, #0]
 8005c00:	600b      	str	r3, [r1, #0]
 8005c02:	bf18      	it	ne
 8005c04:	b22d      	sxthne	r5, r5
 8005c06:	e7ef      	b.n	8005be8 <_printf_i+0xbc>
 8005c08:	680b      	ldr	r3, [r1, #0]
 8005c0a:	6825      	ldr	r5, [r4, #0]
 8005c0c:	1d18      	adds	r0, r3, #4
 8005c0e:	6008      	str	r0, [r1, #0]
 8005c10:	0628      	lsls	r0, r5, #24
 8005c12:	d501      	bpl.n	8005c18 <_printf_i+0xec>
 8005c14:	681d      	ldr	r5, [r3, #0]
 8005c16:	e002      	b.n	8005c1e <_printf_i+0xf2>
 8005c18:	0669      	lsls	r1, r5, #25
 8005c1a:	d5fb      	bpl.n	8005c14 <_printf_i+0xe8>
 8005c1c:	881d      	ldrh	r5, [r3, #0]
 8005c1e:	2f6f      	cmp	r7, #111	; 0x6f
 8005c20:	bf0c      	ite	eq
 8005c22:	2308      	moveq	r3, #8
 8005c24:	230a      	movne	r3, #10
 8005c26:	4852      	ldr	r0, [pc, #328]	; (8005d70 <_printf_i+0x244>)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c2e:	6866      	ldr	r6, [r4, #4]
 8005c30:	2e00      	cmp	r6, #0
 8005c32:	bfa8      	it	ge
 8005c34:	6821      	ldrge	r1, [r4, #0]
 8005c36:	60a6      	str	r6, [r4, #8]
 8005c38:	bfa4      	itt	ge
 8005c3a:	f021 0104 	bicge.w	r1, r1, #4
 8005c3e:	6021      	strge	r1, [r4, #0]
 8005c40:	b90d      	cbnz	r5, 8005c46 <_printf_i+0x11a>
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	d04d      	beq.n	8005ce2 <_printf_i+0x1b6>
 8005c46:	4616      	mov	r6, r2
 8005c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c50:	5dc7      	ldrb	r7, [r0, r7]
 8005c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c56:	462f      	mov	r7, r5
 8005c58:	42bb      	cmp	r3, r7
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	d9f4      	bls.n	8005c48 <_printf_i+0x11c>
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d10b      	bne.n	8005c7a <_printf_i+0x14e>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	07df      	lsls	r7, r3, #31
 8005c66:	d508      	bpl.n	8005c7a <_printf_i+0x14e>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6861      	ldr	r1, [r4, #4]
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	bfde      	ittt	le
 8005c70:	2330      	movle	r3, #48	; 0x30
 8005c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c7a:	1b92      	subs	r2, r2, r6
 8005c7c:	6122      	str	r2, [r4, #16]
 8005c7e:	464b      	mov	r3, r9
 8005c80:	4621      	mov	r1, r4
 8005c82:	4640      	mov	r0, r8
 8005c84:	f8cd a000 	str.w	sl, [sp]
 8005c88:	aa03      	add	r2, sp, #12
 8005c8a:	f7ff fedf 	bl	8005a4c <_printf_common>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d14c      	bne.n	8005d2c <_printf_i+0x200>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	b004      	add	sp, #16
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	4834      	ldr	r0, [pc, #208]	; (8005d70 <_printf_i+0x244>)
 8005c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ca2:	680e      	ldr	r6, [r1, #0]
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005caa:	061f      	lsls	r7, r3, #24
 8005cac:	600e      	str	r6, [r1, #0]
 8005cae:	d514      	bpl.n	8005cda <_printf_i+0x1ae>
 8005cb0:	07d9      	lsls	r1, r3, #31
 8005cb2:	bf44      	itt	mi
 8005cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb8:	6023      	strmi	r3, [r4, #0]
 8005cba:	b91d      	cbnz	r5, 8005cc4 <_printf_i+0x198>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	f023 0320 	bic.w	r3, r3, #32
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	e7af      	b.n	8005c28 <_printf_i+0xfc>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	f043 0320 	orr.w	r3, r3, #32
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	2378      	movs	r3, #120	; 0x78
 8005cd2:	4828      	ldr	r0, [pc, #160]	; (8005d74 <_printf_i+0x248>)
 8005cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cd8:	e7e3      	b.n	8005ca2 <_printf_i+0x176>
 8005cda:	065e      	lsls	r6, r3, #25
 8005cdc:	bf48      	it	mi
 8005cde:	b2ad      	uxthmi	r5, r5
 8005ce0:	e7e6      	b.n	8005cb0 <_printf_i+0x184>
 8005ce2:	4616      	mov	r6, r2
 8005ce4:	e7bb      	b.n	8005c5e <_printf_i+0x132>
 8005ce6:	680b      	ldr	r3, [r1, #0]
 8005ce8:	6826      	ldr	r6, [r4, #0]
 8005cea:	1d1d      	adds	r5, r3, #4
 8005cec:	6960      	ldr	r0, [r4, #20]
 8005cee:	600d      	str	r5, [r1, #0]
 8005cf0:	0635      	lsls	r5, r6, #24
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	d501      	bpl.n	8005cfa <_printf_i+0x1ce>
 8005cf6:	6018      	str	r0, [r3, #0]
 8005cf8:	e002      	b.n	8005d00 <_printf_i+0x1d4>
 8005cfa:	0671      	lsls	r1, r6, #25
 8005cfc:	d5fb      	bpl.n	8005cf6 <_printf_i+0x1ca>
 8005cfe:	8018      	strh	r0, [r3, #0]
 8005d00:	2300      	movs	r3, #0
 8005d02:	4616      	mov	r6, r2
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	e7ba      	b.n	8005c7e <_printf_i+0x152>
 8005d08:	680b      	ldr	r3, [r1, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	600a      	str	r2, [r1, #0]
 8005d0e:	681e      	ldr	r6, [r3, #0]
 8005d10:	2100      	movs	r1, #0
 8005d12:	4630      	mov	r0, r6
 8005d14:	6862      	ldr	r2, [r4, #4]
 8005d16:	f002 fc1b 	bl	8008550 <memchr>
 8005d1a:	b108      	cbz	r0, 8005d20 <_printf_i+0x1f4>
 8005d1c:	1b80      	subs	r0, r0, r6
 8005d1e:	6060      	str	r0, [r4, #4]
 8005d20:	6863      	ldr	r3, [r4, #4]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2300      	movs	r3, #0
 8005d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2a:	e7a8      	b.n	8005c7e <_printf_i+0x152>
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4649      	mov	r1, r9
 8005d30:	4640      	mov	r0, r8
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	47d0      	blx	sl
 8005d36:	3001      	adds	r0, #1
 8005d38:	d0ab      	beq.n	8005c92 <_printf_i+0x166>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	079b      	lsls	r3, r3, #30
 8005d3e:	d413      	bmi.n	8005d68 <_printf_i+0x23c>
 8005d40:	68e0      	ldr	r0, [r4, #12]
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	4298      	cmp	r0, r3
 8005d46:	bfb8      	it	lt
 8005d48:	4618      	movlt	r0, r3
 8005d4a:	e7a4      	b.n	8005c96 <_printf_i+0x16a>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	4632      	mov	r2, r6
 8005d50:	4649      	mov	r1, r9
 8005d52:	4640      	mov	r0, r8
 8005d54:	47d0      	blx	sl
 8005d56:	3001      	adds	r0, #1
 8005d58:	d09b      	beq.n	8005c92 <_printf_i+0x166>
 8005d5a:	3501      	adds	r5, #1
 8005d5c:	68e3      	ldr	r3, [r4, #12]
 8005d5e:	9903      	ldr	r1, [sp, #12]
 8005d60:	1a5b      	subs	r3, r3, r1
 8005d62:	42ab      	cmp	r3, r5
 8005d64:	dcf2      	bgt.n	8005d4c <_printf_i+0x220>
 8005d66:	e7eb      	b.n	8005d40 <_printf_i+0x214>
 8005d68:	2500      	movs	r5, #0
 8005d6a:	f104 0619 	add.w	r6, r4, #25
 8005d6e:	e7f5      	b.n	8005d5c <_printf_i+0x230>
 8005d70:	08009e2e 	.word	0x08009e2e
 8005d74:	08009e3f 	.word	0x08009e3f

08005d78 <_scanf_float>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	9303      	str	r3, [sp, #12]
 8005d80:	688b      	ldr	r3, [r1, #8]
 8005d82:	4617      	mov	r7, r2
 8005d84:	1e5a      	subs	r2, r3, #1
 8005d86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d8a:	bf85      	ittet	hi
 8005d8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d90:	195b      	addhi	r3, r3, r5
 8005d92:	2300      	movls	r3, #0
 8005d94:	9302      	strhi	r3, [sp, #8]
 8005d96:	bf88      	it	hi
 8005d98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d9c:	468b      	mov	fp, r1
 8005d9e:	f04f 0500 	mov.w	r5, #0
 8005da2:	bf8c      	ite	hi
 8005da4:	608b      	strhi	r3, [r1, #8]
 8005da6:	9302      	strls	r3, [sp, #8]
 8005da8:	680b      	ldr	r3, [r1, #0]
 8005daa:	4680      	mov	r8, r0
 8005dac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005db0:	f84b 3b1c 	str.w	r3, [fp], #28
 8005db4:	460c      	mov	r4, r1
 8005db6:	465e      	mov	r6, fp
 8005db8:	46aa      	mov	sl, r5
 8005dba:	46a9      	mov	r9, r5
 8005dbc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005dc0:	9501      	str	r5, [sp, #4]
 8005dc2:	68a2      	ldr	r2, [r4, #8]
 8005dc4:	b152      	cbz	r2, 8005ddc <_scanf_float+0x64>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b4e      	cmp	r3, #78	; 0x4e
 8005dcc:	d864      	bhi.n	8005e98 <_scanf_float+0x120>
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d83c      	bhi.n	8005e4c <_scanf_float+0xd4>
 8005dd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005dd6:	b2c8      	uxtb	r0, r1
 8005dd8:	280e      	cmp	r0, #14
 8005dda:	d93a      	bls.n	8005e52 <_scanf_float+0xda>
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	d003      	beq.n	8005dea <_scanf_float+0x72>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dee:	f1ba 0f01 	cmp.w	sl, #1
 8005df2:	f200 8113 	bhi.w	800601c <_scanf_float+0x2a4>
 8005df6:	455e      	cmp	r6, fp
 8005df8:	f200 8105 	bhi.w	8006006 <_scanf_float+0x28e>
 8005dfc:	2501      	movs	r5, #1
 8005dfe:	4628      	mov	r0, r5
 8005e00:	b007      	add	sp, #28
 8005e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e0a:	2a0d      	cmp	r2, #13
 8005e0c:	d8e6      	bhi.n	8005ddc <_scanf_float+0x64>
 8005e0e:	a101      	add	r1, pc, #4	; (adr r1, 8005e14 <_scanf_float+0x9c>)
 8005e10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e14:	08005f53 	.word	0x08005f53
 8005e18:	08005ddd 	.word	0x08005ddd
 8005e1c:	08005ddd 	.word	0x08005ddd
 8005e20:	08005ddd 	.word	0x08005ddd
 8005e24:	08005fb3 	.word	0x08005fb3
 8005e28:	08005f8b 	.word	0x08005f8b
 8005e2c:	08005ddd 	.word	0x08005ddd
 8005e30:	08005ddd 	.word	0x08005ddd
 8005e34:	08005f61 	.word	0x08005f61
 8005e38:	08005ddd 	.word	0x08005ddd
 8005e3c:	08005ddd 	.word	0x08005ddd
 8005e40:	08005ddd 	.word	0x08005ddd
 8005e44:	08005ddd 	.word	0x08005ddd
 8005e48:	08005f19 	.word	0x08005f19
 8005e4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e50:	e7db      	b.n	8005e0a <_scanf_float+0x92>
 8005e52:	290e      	cmp	r1, #14
 8005e54:	d8c2      	bhi.n	8005ddc <_scanf_float+0x64>
 8005e56:	a001      	add	r0, pc, #4	; (adr r0, 8005e5c <_scanf_float+0xe4>)
 8005e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e5c:	08005f0b 	.word	0x08005f0b
 8005e60:	08005ddd 	.word	0x08005ddd
 8005e64:	08005f0b 	.word	0x08005f0b
 8005e68:	08005f9f 	.word	0x08005f9f
 8005e6c:	08005ddd 	.word	0x08005ddd
 8005e70:	08005eb9 	.word	0x08005eb9
 8005e74:	08005ef5 	.word	0x08005ef5
 8005e78:	08005ef5 	.word	0x08005ef5
 8005e7c:	08005ef5 	.word	0x08005ef5
 8005e80:	08005ef5 	.word	0x08005ef5
 8005e84:	08005ef5 	.word	0x08005ef5
 8005e88:	08005ef5 	.word	0x08005ef5
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005ef5 	.word	0x08005ef5
 8005e94:	08005ef5 	.word	0x08005ef5
 8005e98:	2b6e      	cmp	r3, #110	; 0x6e
 8005e9a:	d809      	bhi.n	8005eb0 <_scanf_float+0x138>
 8005e9c:	2b60      	cmp	r3, #96	; 0x60
 8005e9e:	d8b2      	bhi.n	8005e06 <_scanf_float+0x8e>
 8005ea0:	2b54      	cmp	r3, #84	; 0x54
 8005ea2:	d077      	beq.n	8005f94 <_scanf_float+0x21c>
 8005ea4:	2b59      	cmp	r3, #89	; 0x59
 8005ea6:	d199      	bne.n	8005ddc <_scanf_float+0x64>
 8005ea8:	2d07      	cmp	r5, #7
 8005eaa:	d197      	bne.n	8005ddc <_scanf_float+0x64>
 8005eac:	2508      	movs	r5, #8
 8005eae:	e029      	b.n	8005f04 <_scanf_float+0x18c>
 8005eb0:	2b74      	cmp	r3, #116	; 0x74
 8005eb2:	d06f      	beq.n	8005f94 <_scanf_float+0x21c>
 8005eb4:	2b79      	cmp	r3, #121	; 0x79
 8005eb6:	e7f6      	b.n	8005ea6 <_scanf_float+0x12e>
 8005eb8:	6821      	ldr	r1, [r4, #0]
 8005eba:	05c8      	lsls	r0, r1, #23
 8005ebc:	d51a      	bpl.n	8005ef4 <_scanf_float+0x17c>
 8005ebe:	9b02      	ldr	r3, [sp, #8]
 8005ec0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ec4:	6021      	str	r1, [r4, #0]
 8005ec6:	f109 0901 	add.w	r9, r9, #1
 8005eca:	b11b      	cbz	r3, 8005ed4 <_scanf_float+0x15c>
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	3201      	adds	r2, #1
 8005ed0:	9302      	str	r3, [sp, #8]
 8005ed2:	60a2      	str	r2, [r4, #8]
 8005ed4:	68a3      	ldr	r3, [r4, #8]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60a3      	str	r3, [r4, #8]
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	3301      	adds	r3, #1
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	f340 8084 	ble.w	8005ff4 <_scanf_float+0x27c>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	e766      	b.n	8005dc2 <_scanf_float+0x4a>
 8005ef4:	eb1a 0f05 	cmn.w	sl, r5
 8005ef8:	f47f af70 	bne.w	8005ddc <_scanf_float+0x64>
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	f806 3b01 	strb.w	r3, [r6], #1
 8005f08:	e7e4      	b.n	8005ed4 <_scanf_float+0x15c>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	0610      	lsls	r0, r2, #24
 8005f0e:	f57f af65 	bpl.w	8005ddc <_scanf_float+0x64>
 8005f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f16:	e7f4      	b.n	8005f02 <_scanf_float+0x18a>
 8005f18:	f1ba 0f00 	cmp.w	sl, #0
 8005f1c:	d10e      	bne.n	8005f3c <_scanf_float+0x1c4>
 8005f1e:	f1b9 0f00 	cmp.w	r9, #0
 8005f22:	d10e      	bne.n	8005f42 <_scanf_float+0x1ca>
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f2e:	d108      	bne.n	8005f42 <_scanf_float+0x1ca>
 8005f30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f34:	f04f 0a01 	mov.w	sl, #1
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	e7e3      	b.n	8005f04 <_scanf_float+0x18c>
 8005f3c:	f1ba 0f02 	cmp.w	sl, #2
 8005f40:	d055      	beq.n	8005fee <_scanf_float+0x276>
 8005f42:	2d01      	cmp	r5, #1
 8005f44:	d002      	beq.n	8005f4c <_scanf_float+0x1d4>
 8005f46:	2d04      	cmp	r5, #4
 8005f48:	f47f af48 	bne.w	8005ddc <_scanf_float+0x64>
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	b2ed      	uxtb	r5, r5
 8005f50:	e7d8      	b.n	8005f04 <_scanf_float+0x18c>
 8005f52:	f1ba 0f01 	cmp.w	sl, #1
 8005f56:	f47f af41 	bne.w	8005ddc <_scanf_float+0x64>
 8005f5a:	f04f 0a02 	mov.w	sl, #2
 8005f5e:	e7d1      	b.n	8005f04 <_scanf_float+0x18c>
 8005f60:	b97d      	cbnz	r5, 8005f82 <_scanf_float+0x20a>
 8005f62:	f1b9 0f00 	cmp.w	r9, #0
 8005f66:	f47f af3c 	bne.w	8005de2 <_scanf_float+0x6a>
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f74:	f47f af39 	bne.w	8005dea <_scanf_float+0x72>
 8005f78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f7c:	2501      	movs	r5, #1
 8005f7e:	6022      	str	r2, [r4, #0]
 8005f80:	e7c0      	b.n	8005f04 <_scanf_float+0x18c>
 8005f82:	2d03      	cmp	r5, #3
 8005f84:	d0e2      	beq.n	8005f4c <_scanf_float+0x1d4>
 8005f86:	2d05      	cmp	r5, #5
 8005f88:	e7de      	b.n	8005f48 <_scanf_float+0x1d0>
 8005f8a:	2d02      	cmp	r5, #2
 8005f8c:	f47f af26 	bne.w	8005ddc <_scanf_float+0x64>
 8005f90:	2503      	movs	r5, #3
 8005f92:	e7b7      	b.n	8005f04 <_scanf_float+0x18c>
 8005f94:	2d06      	cmp	r5, #6
 8005f96:	f47f af21 	bne.w	8005ddc <_scanf_float+0x64>
 8005f9a:	2507      	movs	r5, #7
 8005f9c:	e7b2      	b.n	8005f04 <_scanf_float+0x18c>
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	0591      	lsls	r1, r2, #22
 8005fa2:	f57f af1b 	bpl.w	8005ddc <_scanf_float+0x64>
 8005fa6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005faa:	6022      	str	r2, [r4, #0]
 8005fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fb0:	e7a8      	b.n	8005f04 <_scanf_float+0x18c>
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005fb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005fbc:	d006      	beq.n	8005fcc <_scanf_float+0x254>
 8005fbe:	0550      	lsls	r0, r2, #21
 8005fc0:	f57f af0c 	bpl.w	8005ddc <_scanf_float+0x64>
 8005fc4:	f1b9 0f00 	cmp.w	r9, #0
 8005fc8:	f43f af0f 	beq.w	8005dea <_scanf_float+0x72>
 8005fcc:	0591      	lsls	r1, r2, #22
 8005fce:	bf58      	it	pl
 8005fd0:	9901      	ldrpl	r1, [sp, #4]
 8005fd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fd6:	bf58      	it	pl
 8005fd8:	eba9 0101 	subpl.w	r1, r9, r1
 8005fdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005fe0:	f04f 0900 	mov.w	r9, #0
 8005fe4:	bf58      	it	pl
 8005fe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	e78a      	b.n	8005f04 <_scanf_float+0x18c>
 8005fee:	f04f 0a03 	mov.w	sl, #3
 8005ff2:	e787      	b.n	8005f04 <_scanf_float+0x18c>
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ffc:	4798      	blx	r3
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f43f aedf 	beq.w	8005dc2 <_scanf_float+0x4a>
 8006004:	e6ea      	b.n	8005ddc <_scanf_float+0x64>
 8006006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800600a:	463a      	mov	r2, r7
 800600c:	4640      	mov	r0, r8
 800600e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006012:	4798      	blx	r3
 8006014:	6923      	ldr	r3, [r4, #16]
 8006016:	3b01      	subs	r3, #1
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	e6ec      	b.n	8005df6 <_scanf_float+0x7e>
 800601c:	1e6b      	subs	r3, r5, #1
 800601e:	2b06      	cmp	r3, #6
 8006020:	d825      	bhi.n	800606e <_scanf_float+0x2f6>
 8006022:	2d02      	cmp	r5, #2
 8006024:	d836      	bhi.n	8006094 <_scanf_float+0x31c>
 8006026:	455e      	cmp	r6, fp
 8006028:	f67f aee8 	bls.w	8005dfc <_scanf_float+0x84>
 800602c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006030:	463a      	mov	r2, r7
 8006032:	4640      	mov	r0, r8
 8006034:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006038:	4798      	blx	r3
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	3b01      	subs	r3, #1
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	e7f1      	b.n	8006026 <_scanf_float+0x2ae>
 8006042:	9802      	ldr	r0, [sp, #8]
 8006044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006048:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800604c:	463a      	mov	r2, r7
 800604e:	9002      	str	r0, [sp, #8]
 8006050:	4640      	mov	r0, r8
 8006052:	4798      	blx	r3
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	3b01      	subs	r3, #1
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800605e:	fa5f fa8a 	uxtb.w	sl, sl
 8006062:	f1ba 0f02 	cmp.w	sl, #2
 8006066:	d1ec      	bne.n	8006042 <_scanf_float+0x2ca>
 8006068:	3d03      	subs	r5, #3
 800606a:	b2ed      	uxtb	r5, r5
 800606c:	1b76      	subs	r6, r6, r5
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	05da      	lsls	r2, r3, #23
 8006072:	d52f      	bpl.n	80060d4 <_scanf_float+0x35c>
 8006074:	055b      	lsls	r3, r3, #21
 8006076:	d510      	bpl.n	800609a <_scanf_float+0x322>
 8006078:	455e      	cmp	r6, fp
 800607a:	f67f aebf 	bls.w	8005dfc <_scanf_float+0x84>
 800607e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006082:	463a      	mov	r2, r7
 8006084:	4640      	mov	r0, r8
 8006086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800608a:	4798      	blx	r3
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	3b01      	subs	r3, #1
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	e7f1      	b.n	8006078 <_scanf_float+0x300>
 8006094:	46aa      	mov	sl, r5
 8006096:	9602      	str	r6, [sp, #8]
 8006098:	e7df      	b.n	800605a <_scanf_float+0x2e2>
 800609a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	2965      	cmp	r1, #101	; 0x65
 80060a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	d00c      	beq.n	80060c8 <_scanf_float+0x350>
 80060ae:	2945      	cmp	r1, #69	; 0x45
 80060b0:	d00a      	beq.n	80060c8 <_scanf_float+0x350>
 80060b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060b6:	463a      	mov	r2, r7
 80060b8:	4640      	mov	r0, r8
 80060ba:	4798      	blx	r3
 80060bc:	6923      	ldr	r3, [r4, #16]
 80060be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	1eb5      	subs	r5, r6, #2
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	463a      	mov	r2, r7
 80060ca:	4640      	mov	r0, r8
 80060cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060d0:	4798      	blx	r3
 80060d2:	462e      	mov	r6, r5
 80060d4:	6825      	ldr	r5, [r4, #0]
 80060d6:	f015 0510 	ands.w	r5, r5, #16
 80060da:	d159      	bne.n	8006190 <_scanf_float+0x418>
 80060dc:	7035      	strb	r5, [r6, #0]
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e8:	d11c      	bne.n	8006124 <_scanf_float+0x3ac>
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	454b      	cmp	r3, r9
 80060ee:	eba3 0209 	sub.w	r2, r3, r9
 80060f2:	d124      	bne.n	800613e <_scanf_float+0x3c6>
 80060f4:	2200      	movs	r2, #0
 80060f6:	4659      	mov	r1, fp
 80060f8:	4640      	mov	r0, r8
 80060fa:	f000 fea1 	bl	8006e40 <_strtod_r>
 80060fe:	f8d4 c000 	ldr.w	ip, [r4]
 8006102:	9b03      	ldr	r3, [sp, #12]
 8006104:	f01c 0f02 	tst.w	ip, #2
 8006108:	4606      	mov	r6, r0
 800610a:	460f      	mov	r7, r1
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	d021      	beq.n	8006154 <_scanf_float+0x3dc>
 8006110:	9903      	ldr	r1, [sp, #12]
 8006112:	1d1a      	adds	r2, r3, #4
 8006114:	600a      	str	r2, [r1, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	e9c3 6700 	strd	r6, r7, [r3]
 800611c:	68e3      	ldr	r3, [r4, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60e3      	str	r3, [r4, #12]
 8006122:	e66c      	b.n	8005dfe <_scanf_float+0x86>
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0e4      	beq.n	80060f4 <_scanf_float+0x37c>
 800612a:	9905      	ldr	r1, [sp, #20]
 800612c:	230a      	movs	r3, #10
 800612e:	462a      	mov	r2, r5
 8006130:	4640      	mov	r0, r8
 8006132:	3101      	adds	r1, #1
 8006134:	f000 ff10 	bl	8006f58 <_strtol_r>
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	9e05      	ldr	r6, [sp, #20]
 800613c:	1ac2      	subs	r2, r0, r3
 800613e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006142:	429e      	cmp	r6, r3
 8006144:	bf28      	it	cs
 8006146:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800614a:	4630      	mov	r0, r6
 800614c:	4911      	ldr	r1, [pc, #68]	; (8006194 <_scanf_float+0x41c>)
 800614e:	f000 f841 	bl	80061d4 <siprintf>
 8006152:	e7cf      	b.n	80060f4 <_scanf_float+0x37c>
 8006154:	f01c 0f04 	tst.w	ip, #4
 8006158:	f103 0e04 	add.w	lr, r3, #4
 800615c:	d003      	beq.n	8006166 <_scanf_float+0x3ee>
 800615e:	9903      	ldr	r1, [sp, #12]
 8006160:	f8c1 e000 	str.w	lr, [r1]
 8006164:	e7d7      	b.n	8006116 <_scanf_float+0x39e>
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	f8c2 e000 	str.w	lr, [r2]
 800616c:	f8d3 8000 	ldr.w	r8, [r3]
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	f7fa fc62 	bl	8000a3c <__aeabi_dcmpun>
 8006178:	b128      	cbz	r0, 8006186 <_scanf_float+0x40e>
 800617a:	4807      	ldr	r0, [pc, #28]	; (8006198 <_scanf_float+0x420>)
 800617c:	f000 f826 	bl	80061cc <nanf>
 8006180:	f8c8 0000 	str.w	r0, [r8]
 8006184:	e7ca      	b.n	800611c <_scanf_float+0x3a4>
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa fcb5 	bl	8000af8 <__aeabi_d2f>
 800618e:	e7f7      	b.n	8006180 <_scanf_float+0x408>
 8006190:	2500      	movs	r5, #0
 8006192:	e634      	b.n	8005dfe <_scanf_float+0x86>
 8006194:	08009e50 	.word	0x08009e50
 8006198:	0800a2c8 	.word	0x0800a2c8

0800619c <iprintf>:
 800619c:	b40f      	push	{r0, r1, r2, r3}
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <iprintf+0x2c>)
 80061a0:	b513      	push	{r0, r1, r4, lr}
 80061a2:	681c      	ldr	r4, [r3, #0]
 80061a4:	b124      	cbz	r4, 80061b0 <iprintf+0x14>
 80061a6:	69a3      	ldr	r3, [r4, #24]
 80061a8:	b913      	cbnz	r3, 80061b0 <iprintf+0x14>
 80061aa:	4620      	mov	r0, r4
 80061ac:	f001 fdaa 	bl	8007d04 <__sinit>
 80061b0:	ab05      	add	r3, sp, #20
 80061b2:	4620      	mov	r0, r4
 80061b4:	9a04      	ldr	r2, [sp, #16]
 80061b6:	68a1      	ldr	r1, [r4, #8]
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	f003 f8d5 	bl	8009368 <_vfiprintf_r>
 80061be:	b002      	add	sp, #8
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	b004      	add	sp, #16
 80061c6:	4770      	bx	lr
 80061c8:	20000050 	.word	0x20000050

080061cc <nanf>:
 80061cc:	4800      	ldr	r0, [pc, #0]	; (80061d0 <nanf+0x4>)
 80061ce:	4770      	bx	lr
 80061d0:	7fc00000 	.word	0x7fc00000

080061d4 <siprintf>:
 80061d4:	b40e      	push	{r1, r2, r3}
 80061d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061da:	b500      	push	{lr}
 80061dc:	b09c      	sub	sp, #112	; 0x70
 80061de:	ab1d      	add	r3, sp, #116	; 0x74
 80061e0:	9002      	str	r0, [sp, #8]
 80061e2:	9006      	str	r0, [sp, #24]
 80061e4:	9107      	str	r1, [sp, #28]
 80061e6:	9104      	str	r1, [sp, #16]
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <siprintf+0x38>)
 80061ea:	4909      	ldr	r1, [pc, #36]	; (8006210 <siprintf+0x3c>)
 80061ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f0:	9105      	str	r1, [sp, #20]
 80061f2:	6800      	ldr	r0, [r0, #0]
 80061f4:	a902      	add	r1, sp, #8
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	f002 ff8e 	bl	8009118 <_svfiprintf_r>
 80061fc:	2200      	movs	r2, #0
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	b01c      	add	sp, #112	; 0x70
 8006204:	f85d eb04 	ldr.w	lr, [sp], #4
 8006208:	b003      	add	sp, #12
 800620a:	4770      	bx	lr
 800620c:	20000050 	.word	0x20000050
 8006210:	ffff0208 	.word	0xffff0208

08006214 <sulp>:
 8006214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	460f      	mov	r7, r1
 800621a:	4690      	mov	r8, r2
 800621c:	f002 fd24 	bl	8008c68 <__ulp>
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	f1b8 0f00 	cmp.w	r8, #0
 8006228:	d011      	beq.n	800624e <sulp+0x3a>
 800622a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800622e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006232:	2b00      	cmp	r3, #0
 8006234:	dd0b      	ble.n	800624e <sulp+0x3a>
 8006236:	2400      	movs	r4, #0
 8006238:	051b      	lsls	r3, r3, #20
 800623a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800623e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006242:	4622      	mov	r2, r4
 8006244:	462b      	mov	r3, r5
 8006246:	f7fa f95f 	bl	8000508 <__aeabi_dmul>
 800624a:	4604      	mov	r4, r0
 800624c:	460d      	mov	r5, r1
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006258 <_strtod_l>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	469b      	mov	fp, r3
 800625e:	2300      	movs	r3, #0
 8006260:	b0a1      	sub	sp, #132	; 0x84
 8006262:	931c      	str	r3, [sp, #112]	; 0x70
 8006264:	4ba1      	ldr	r3, [pc, #644]	; (80064ec <_strtod_l+0x294>)
 8006266:	4682      	mov	sl, r0
 8006268:	681f      	ldr	r7, [r3, #0]
 800626a:	460e      	mov	r6, r1
 800626c:	4638      	mov	r0, r7
 800626e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006270:	f7f9 ff86 	bl	8000180 <strlen>
 8006274:	f04f 0800 	mov.w	r8, #0
 8006278:	4604      	mov	r4, r0
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	961b      	str	r6, [sp, #108]	; 0x6c
 8006280:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	2a2b      	cmp	r2, #43	; 0x2b
 8006286:	d04c      	beq.n	8006322 <_strtod_l+0xca>
 8006288:	d83a      	bhi.n	8006300 <_strtod_l+0xa8>
 800628a:	2a0d      	cmp	r2, #13
 800628c:	d833      	bhi.n	80062f6 <_strtod_l+0x9e>
 800628e:	2a08      	cmp	r2, #8
 8006290:	d833      	bhi.n	80062fa <_strtod_l+0xa2>
 8006292:	2a00      	cmp	r2, #0
 8006294:	d03d      	beq.n	8006312 <_strtod_l+0xba>
 8006296:	2300      	movs	r3, #0
 8006298:	930c      	str	r3, [sp, #48]	; 0x30
 800629a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800629c:	782b      	ldrb	r3, [r5, #0]
 800629e:	2b30      	cmp	r3, #48	; 0x30
 80062a0:	f040 80af 	bne.w	8006402 <_strtod_l+0x1aa>
 80062a4:	786b      	ldrb	r3, [r5, #1]
 80062a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062aa:	2b58      	cmp	r3, #88	; 0x58
 80062ac:	d16c      	bne.n	8006388 <_strtod_l+0x130>
 80062ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062b0:	4650      	mov	r0, sl
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	ab1c      	add	r3, sp, #112	; 0x70
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	4a8d      	ldr	r2, [pc, #564]	; (80064f0 <_strtod_l+0x298>)
 80062ba:	f8cd b008 	str.w	fp, [sp, #8]
 80062be:	ab1d      	add	r3, sp, #116	; 0x74
 80062c0:	a91b      	add	r1, sp, #108	; 0x6c
 80062c2:	f001 fe25 	bl	8007f10 <__gethex>
 80062c6:	f010 0607 	ands.w	r6, r0, #7
 80062ca:	4604      	mov	r4, r0
 80062cc:	d005      	beq.n	80062da <_strtod_l+0x82>
 80062ce:	2e06      	cmp	r6, #6
 80062d0:	d129      	bne.n	8006326 <_strtod_l+0xce>
 80062d2:	2300      	movs	r3, #0
 80062d4:	3501      	adds	r5, #1
 80062d6:	951b      	str	r5, [sp, #108]	; 0x6c
 80062d8:	930c      	str	r3, [sp, #48]	; 0x30
 80062da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 8596 	bne.w	8006e0e <_strtod_l+0xbb6>
 80062e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e4:	b1d3      	cbz	r3, 800631c <_strtod_l+0xc4>
 80062e6:	4642      	mov	r2, r8
 80062e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	b021      	add	sp, #132	; 0x84
 80062f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f6:	2a20      	cmp	r2, #32
 80062f8:	d1cd      	bne.n	8006296 <_strtod_l+0x3e>
 80062fa:	3301      	adds	r3, #1
 80062fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80062fe:	e7bf      	b.n	8006280 <_strtod_l+0x28>
 8006300:	2a2d      	cmp	r2, #45	; 0x2d
 8006302:	d1c8      	bne.n	8006296 <_strtod_l+0x3e>
 8006304:	2201      	movs	r2, #1
 8006306:	920c      	str	r2, [sp, #48]	; 0x30
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	921b      	str	r2, [sp, #108]	; 0x6c
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1c3      	bne.n	800629a <_strtod_l+0x42>
 8006312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006314:	961b      	str	r6, [sp, #108]	; 0x6c
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 8577 	bne.w	8006e0a <_strtod_l+0xbb2>
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	e7e4      	b.n	80062ec <_strtod_l+0x94>
 8006322:	2200      	movs	r2, #0
 8006324:	e7ef      	b.n	8006306 <_strtod_l+0xae>
 8006326:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006328:	b13a      	cbz	r2, 800633a <_strtod_l+0xe2>
 800632a:	2135      	movs	r1, #53	; 0x35
 800632c:	a81e      	add	r0, sp, #120	; 0x78
 800632e:	f002 fd9f 	bl	8008e70 <__copybits>
 8006332:	4650      	mov	r0, sl
 8006334:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006336:	f002 f967 	bl	8008608 <_Bfree>
 800633a:	3e01      	subs	r6, #1
 800633c:	2e05      	cmp	r6, #5
 800633e:	d807      	bhi.n	8006350 <_strtod_l+0xf8>
 8006340:	e8df f006 	tbb	[pc, r6]
 8006344:	1d180b0e 	.word	0x1d180b0e
 8006348:	030e      	.short	0x030e
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	46c8      	mov	r8, r9
 8006350:	0721      	lsls	r1, r4, #28
 8006352:	d5c2      	bpl.n	80062da <_strtod_l+0x82>
 8006354:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006358:	e7bf      	b.n	80062da <_strtod_l+0x82>
 800635a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800635e:	e7f7      	b.n	8006350 <_strtod_l+0xf8>
 8006360:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006362:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006366:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800636a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800636e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006372:	e7ed      	b.n	8006350 <_strtod_l+0xf8>
 8006374:	f04f 0800 	mov.w	r8, #0
 8006378:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80064f4 <_strtod_l+0x29c>
 800637c:	e7e8      	b.n	8006350 <_strtod_l+0xf8>
 800637e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006382:	f04f 38ff 	mov.w	r8, #4294967295
 8006386:	e7e3      	b.n	8006350 <_strtod_l+0xf8>
 8006388:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	921b      	str	r2, [sp, #108]	; 0x6c
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d0f9      	beq.n	8006388 <_strtod_l+0x130>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0a0      	beq.n	80062da <_strtod_l+0x82>
 8006398:	2301      	movs	r3, #1
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800639e:	220a      	movs	r2, #10
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	2300      	movs	r3, #0
 80063a4:	469b      	mov	fp, r3
 80063a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80063aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80063ac:	7805      	ldrb	r5, [r0, #0]
 80063ae:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80063b2:	b2d9      	uxtb	r1, r3
 80063b4:	2909      	cmp	r1, #9
 80063b6:	d926      	bls.n	8006406 <_strtod_l+0x1ae>
 80063b8:	4622      	mov	r2, r4
 80063ba:	4639      	mov	r1, r7
 80063bc:	f003 f95d 	bl	800967a <strncmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d032      	beq.n	800642a <_strtod_l+0x1d2>
 80063c4:	2000      	movs	r0, #0
 80063c6:	462b      	mov	r3, r5
 80063c8:	465c      	mov	r4, fp
 80063ca:	4602      	mov	r2, r0
 80063cc:	9004      	str	r0, [sp, #16]
 80063ce:	2b65      	cmp	r3, #101	; 0x65
 80063d0:	d001      	beq.n	80063d6 <_strtod_l+0x17e>
 80063d2:	2b45      	cmp	r3, #69	; 0x45
 80063d4:	d113      	bne.n	80063fe <_strtod_l+0x1a6>
 80063d6:	b91c      	cbnz	r4, 80063e0 <_strtod_l+0x188>
 80063d8:	9b07      	ldr	r3, [sp, #28]
 80063da:	4303      	orrs	r3, r0
 80063dc:	d099      	beq.n	8006312 <_strtod_l+0xba>
 80063de:	2400      	movs	r4, #0
 80063e0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80063e2:	1c73      	adds	r3, r6, #1
 80063e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80063e6:	7873      	ldrb	r3, [r6, #1]
 80063e8:	2b2b      	cmp	r3, #43	; 0x2b
 80063ea:	d078      	beq.n	80064de <_strtod_l+0x286>
 80063ec:	2b2d      	cmp	r3, #45	; 0x2d
 80063ee:	d07b      	beq.n	80064e8 <_strtod_l+0x290>
 80063f0:	2700      	movs	r7, #0
 80063f2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80063f6:	2909      	cmp	r1, #9
 80063f8:	f240 8082 	bls.w	8006500 <_strtod_l+0x2a8>
 80063fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80063fe:	2500      	movs	r5, #0
 8006400:	e09e      	b.n	8006540 <_strtod_l+0x2e8>
 8006402:	2300      	movs	r3, #0
 8006404:	e7c9      	b.n	800639a <_strtod_l+0x142>
 8006406:	f1bb 0f08 	cmp.w	fp, #8
 800640a:	bfd5      	itete	le
 800640c:	9906      	ldrle	r1, [sp, #24]
 800640e:	9905      	ldrgt	r1, [sp, #20]
 8006410:	fb02 3301 	mlale	r3, r2, r1, r3
 8006414:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006418:	f100 0001 	add.w	r0, r0, #1
 800641c:	bfd4      	ite	le
 800641e:	9306      	strle	r3, [sp, #24]
 8006420:	9305      	strgt	r3, [sp, #20]
 8006422:	f10b 0b01 	add.w	fp, fp, #1
 8006426:	901b      	str	r0, [sp, #108]	; 0x6c
 8006428:	e7bf      	b.n	80063aa <_strtod_l+0x152>
 800642a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800642c:	191a      	adds	r2, r3, r4
 800642e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006430:	5d1b      	ldrb	r3, [r3, r4]
 8006432:	f1bb 0f00 	cmp.w	fp, #0
 8006436:	d036      	beq.n	80064a6 <_strtod_l+0x24e>
 8006438:	465c      	mov	r4, fp
 800643a:	9004      	str	r0, [sp, #16]
 800643c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006440:	2a09      	cmp	r2, #9
 8006442:	d912      	bls.n	800646a <_strtod_l+0x212>
 8006444:	2201      	movs	r2, #1
 8006446:	e7c2      	b.n	80063ce <_strtod_l+0x176>
 8006448:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800644a:	3001      	adds	r0, #1
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b30      	cmp	r3, #48	; 0x30
 8006454:	d0f8      	beq.n	8006448 <_strtod_l+0x1f0>
 8006456:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800645a:	2a08      	cmp	r2, #8
 800645c:	f200 84dc 	bhi.w	8006e18 <_strtod_l+0xbc0>
 8006460:	9004      	str	r0, [sp, #16]
 8006462:	2000      	movs	r0, #0
 8006464:	4604      	mov	r4, r0
 8006466:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006468:	9208      	str	r2, [sp, #32]
 800646a:	3b30      	subs	r3, #48	; 0x30
 800646c:	f100 0201 	add.w	r2, r0, #1
 8006470:	d013      	beq.n	800649a <_strtod_l+0x242>
 8006472:	9904      	ldr	r1, [sp, #16]
 8006474:	1905      	adds	r5, r0, r4
 8006476:	4411      	add	r1, r2
 8006478:	9104      	str	r1, [sp, #16]
 800647a:	4622      	mov	r2, r4
 800647c:	210a      	movs	r1, #10
 800647e:	42aa      	cmp	r2, r5
 8006480:	d113      	bne.n	80064aa <_strtod_l+0x252>
 8006482:	1822      	adds	r2, r4, r0
 8006484:	2a08      	cmp	r2, #8
 8006486:	f104 0401 	add.w	r4, r4, #1
 800648a:	4404      	add	r4, r0
 800648c:	dc1b      	bgt.n	80064c6 <_strtod_l+0x26e>
 800648e:	220a      	movs	r2, #10
 8006490:	9906      	ldr	r1, [sp, #24]
 8006492:	fb02 3301 	mla	r3, r2, r1, r3
 8006496:	9306      	str	r3, [sp, #24]
 8006498:	2200      	movs	r2, #0
 800649a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800649c:	4610      	mov	r0, r2
 800649e:	1c59      	adds	r1, r3, #1
 80064a0:	911b      	str	r1, [sp, #108]	; 0x6c
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	e7ca      	b.n	800643c <_strtod_l+0x1e4>
 80064a6:	4658      	mov	r0, fp
 80064a8:	e7d3      	b.n	8006452 <_strtod_l+0x1fa>
 80064aa:	2a08      	cmp	r2, #8
 80064ac:	dc04      	bgt.n	80064b8 <_strtod_l+0x260>
 80064ae:	9f06      	ldr	r7, [sp, #24]
 80064b0:	434f      	muls	r7, r1
 80064b2:	9706      	str	r7, [sp, #24]
 80064b4:	3201      	adds	r2, #1
 80064b6:	e7e2      	b.n	800647e <_strtod_l+0x226>
 80064b8:	1c57      	adds	r7, r2, #1
 80064ba:	2f10      	cmp	r7, #16
 80064bc:	bfde      	ittt	le
 80064be:	9f05      	ldrle	r7, [sp, #20]
 80064c0:	434f      	mulle	r7, r1
 80064c2:	9705      	strle	r7, [sp, #20]
 80064c4:	e7f6      	b.n	80064b4 <_strtod_l+0x25c>
 80064c6:	2c10      	cmp	r4, #16
 80064c8:	bfdf      	itttt	le
 80064ca:	220a      	movle	r2, #10
 80064cc:	9905      	ldrle	r1, [sp, #20]
 80064ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80064d2:	9305      	strle	r3, [sp, #20]
 80064d4:	e7e0      	b.n	8006498 <_strtod_l+0x240>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2201      	movs	r2, #1
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	e77c      	b.n	80063d8 <_strtod_l+0x180>
 80064de:	2700      	movs	r7, #0
 80064e0:	1cb3      	adds	r3, r6, #2
 80064e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80064e4:	78b3      	ldrb	r3, [r6, #2]
 80064e6:	e784      	b.n	80063f2 <_strtod_l+0x19a>
 80064e8:	2701      	movs	r7, #1
 80064ea:	e7f9      	b.n	80064e0 <_strtod_l+0x288>
 80064ec:	0800a10c 	.word	0x0800a10c
 80064f0:	08009e58 	.word	0x08009e58
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	911b      	str	r1, [sp, #108]	; 0x6c
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d0f9      	beq.n	80064f8 <_strtod_l+0x2a0>
 8006504:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006508:	2908      	cmp	r1, #8
 800650a:	f63f af78 	bhi.w	80063fe <_strtod_l+0x1a6>
 800650e:	f04f 0e0a 	mov.w	lr, #10
 8006512:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8006516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006518:	9309      	str	r3, [sp, #36]	; 0x24
 800651a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800651c:	1c59      	adds	r1, r3, #1
 800651e:	911b      	str	r1, [sp, #108]	; 0x6c
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006526:	2d09      	cmp	r5, #9
 8006528:	d935      	bls.n	8006596 <_strtod_l+0x33e>
 800652a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800652c:	1b49      	subs	r1, r1, r5
 800652e:	2908      	cmp	r1, #8
 8006530:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006534:	dc02      	bgt.n	800653c <_strtod_l+0x2e4>
 8006536:	4565      	cmp	r5, ip
 8006538:	bfa8      	it	ge
 800653a:	4665      	movge	r5, ip
 800653c:	b107      	cbz	r7, 8006540 <_strtod_l+0x2e8>
 800653e:	426d      	negs	r5, r5
 8006540:	2c00      	cmp	r4, #0
 8006542:	d14c      	bne.n	80065de <_strtod_l+0x386>
 8006544:	9907      	ldr	r1, [sp, #28]
 8006546:	4301      	orrs	r1, r0
 8006548:	f47f aec7 	bne.w	80062da <_strtod_l+0x82>
 800654c:	2a00      	cmp	r2, #0
 800654e:	f47f aee0 	bne.w	8006312 <_strtod_l+0xba>
 8006552:	2b69      	cmp	r3, #105	; 0x69
 8006554:	d026      	beq.n	80065a4 <_strtod_l+0x34c>
 8006556:	dc23      	bgt.n	80065a0 <_strtod_l+0x348>
 8006558:	2b49      	cmp	r3, #73	; 0x49
 800655a:	d023      	beq.n	80065a4 <_strtod_l+0x34c>
 800655c:	2b4e      	cmp	r3, #78	; 0x4e
 800655e:	f47f aed8 	bne.w	8006312 <_strtod_l+0xba>
 8006562:	499c      	ldr	r1, [pc, #624]	; (80067d4 <_strtod_l+0x57c>)
 8006564:	a81b      	add	r0, sp, #108	; 0x6c
 8006566:	f001 ff21 	bl	80083ac <__match>
 800656a:	2800      	cmp	r0, #0
 800656c:	f43f aed1 	beq.w	8006312 <_strtod_l+0xba>
 8006570:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b28      	cmp	r3, #40	; 0x28
 8006576:	d12c      	bne.n	80065d2 <_strtod_l+0x37a>
 8006578:	4997      	ldr	r1, [pc, #604]	; (80067d8 <_strtod_l+0x580>)
 800657a:	aa1e      	add	r2, sp, #120	; 0x78
 800657c:	a81b      	add	r0, sp, #108	; 0x6c
 800657e:	f001 ff29 	bl	80083d4 <__hexnan>
 8006582:	2805      	cmp	r0, #5
 8006584:	d125      	bne.n	80065d2 <_strtod_l+0x37a>
 8006586:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006588:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800658c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006590:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006594:	e6a1      	b.n	80062da <_strtod_l+0x82>
 8006596:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800659a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800659e:	e7bc      	b.n	800651a <_strtod_l+0x2c2>
 80065a0:	2b6e      	cmp	r3, #110	; 0x6e
 80065a2:	e7dc      	b.n	800655e <_strtod_l+0x306>
 80065a4:	498d      	ldr	r1, [pc, #564]	; (80067dc <_strtod_l+0x584>)
 80065a6:	a81b      	add	r0, sp, #108	; 0x6c
 80065a8:	f001 ff00 	bl	80083ac <__match>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f aeb0 	beq.w	8006312 <_strtod_l+0xba>
 80065b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065b4:	498a      	ldr	r1, [pc, #552]	; (80067e0 <_strtod_l+0x588>)
 80065b6:	3b01      	subs	r3, #1
 80065b8:	a81b      	add	r0, sp, #108	; 0x6c
 80065ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80065bc:	f001 fef6 	bl	80083ac <__match>
 80065c0:	b910      	cbnz	r0, 80065c8 <_strtod_l+0x370>
 80065c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065c4:	3301      	adds	r3, #1
 80065c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80065c8:	f04f 0800 	mov.w	r8, #0
 80065cc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80067f0 <_strtod_l+0x598>
 80065d0:	e683      	b.n	80062da <_strtod_l+0x82>
 80065d2:	4884      	ldr	r0, [pc, #528]	; (80067e4 <_strtod_l+0x58c>)
 80065d4:	f002 fff8 	bl	80095c8 <nan>
 80065d8:	4680      	mov	r8, r0
 80065da:	4689      	mov	r9, r1
 80065dc:	e67d      	b.n	80062da <_strtod_l+0x82>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	f1bb 0f00 	cmp.w	fp, #0
 80065e4:	bf08      	it	eq
 80065e6:	46a3      	moveq	fp, r4
 80065e8:	1aeb      	subs	r3, r5, r3
 80065ea:	2c10      	cmp	r4, #16
 80065ec:	9806      	ldr	r0, [sp, #24]
 80065ee:	4626      	mov	r6, r4
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	bfa8      	it	ge
 80065f4:	2610      	movge	r6, #16
 80065f6:	f7f9 ff0d 	bl	8000414 <__aeabi_ui2d>
 80065fa:	2c09      	cmp	r4, #9
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	dd13      	ble.n	800662a <_strtod_l+0x3d2>
 8006602:	4b79      	ldr	r3, [pc, #484]	; (80067e8 <_strtod_l+0x590>)
 8006604:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006608:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800660c:	f7f9 ff7c 	bl	8000508 <__aeabi_dmul>
 8006610:	4680      	mov	r8, r0
 8006612:	9805      	ldr	r0, [sp, #20]
 8006614:	4689      	mov	r9, r1
 8006616:	f7f9 fefd 	bl	8000414 <__aeabi_ui2d>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4640      	mov	r0, r8
 8006620:	4649      	mov	r1, r9
 8006622:	f7f9 fdbb 	bl	800019c <__adddf3>
 8006626:	4680      	mov	r8, r0
 8006628:	4689      	mov	r9, r1
 800662a:	2c0f      	cmp	r4, #15
 800662c:	dc36      	bgt.n	800669c <_strtod_l+0x444>
 800662e:	9b07      	ldr	r3, [sp, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f43f ae52 	beq.w	80062da <_strtod_l+0x82>
 8006636:	dd22      	ble.n	800667e <_strtod_l+0x426>
 8006638:	2b16      	cmp	r3, #22
 800663a:	dc09      	bgt.n	8006650 <_strtod_l+0x3f8>
 800663c:	4c6a      	ldr	r4, [pc, #424]	; (80067e8 <_strtod_l+0x590>)
 800663e:	4642      	mov	r2, r8
 8006640:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8006644:	464b      	mov	r3, r9
 8006646:	e9d4 0100 	ldrd	r0, r1, [r4]
 800664a:	f7f9 ff5d 	bl	8000508 <__aeabi_dmul>
 800664e:	e7c3      	b.n	80065d8 <_strtod_l+0x380>
 8006650:	9a07      	ldr	r2, [sp, #28]
 8006652:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006656:	4293      	cmp	r3, r2
 8006658:	db20      	blt.n	800669c <_strtod_l+0x444>
 800665a:	4d63      	ldr	r5, [pc, #396]	; (80067e8 <_strtod_l+0x590>)
 800665c:	f1c4 040f 	rsb	r4, r4, #15
 8006660:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006664:	4642      	mov	r2, r8
 8006666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800666a:	464b      	mov	r3, r9
 800666c:	f7f9 ff4c 	bl	8000508 <__aeabi_dmul>
 8006670:	9b07      	ldr	r3, [sp, #28]
 8006672:	1b1c      	subs	r4, r3, r4
 8006674:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800667c:	e7e5      	b.n	800664a <_strtod_l+0x3f2>
 800667e:	9b07      	ldr	r3, [sp, #28]
 8006680:	3316      	adds	r3, #22
 8006682:	db0b      	blt.n	800669c <_strtod_l+0x444>
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	4a58      	ldr	r2, [pc, #352]	; (80067e8 <_strtod_l+0x590>)
 8006688:	1b5d      	subs	r5, r3, r5
 800668a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800668e:	4640      	mov	r0, r8
 8006690:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006694:	4649      	mov	r1, r9
 8006696:	f7fa f861 	bl	800075c <__aeabi_ddiv>
 800669a:	e79d      	b.n	80065d8 <_strtod_l+0x380>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	1ba6      	subs	r6, r4, r6
 80066a0:	441e      	add	r6, r3
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	dd71      	ble.n	800678a <_strtod_l+0x532>
 80066a6:	f016 030f 	ands.w	r3, r6, #15
 80066aa:	d00a      	beq.n	80066c2 <_strtod_l+0x46a>
 80066ac:	494e      	ldr	r1, [pc, #312]	; (80067e8 <_strtod_l+0x590>)
 80066ae:	4642      	mov	r2, r8
 80066b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066b8:	464b      	mov	r3, r9
 80066ba:	f7f9 ff25 	bl	8000508 <__aeabi_dmul>
 80066be:	4680      	mov	r8, r0
 80066c0:	4689      	mov	r9, r1
 80066c2:	f036 060f 	bics.w	r6, r6, #15
 80066c6:	d050      	beq.n	800676a <_strtod_l+0x512>
 80066c8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80066cc:	dd27      	ble.n	800671e <_strtod_l+0x4c6>
 80066ce:	f04f 0b00 	mov.w	fp, #0
 80066d2:	f8cd b010 	str.w	fp, [sp, #16]
 80066d6:	f8cd b020 	str.w	fp, [sp, #32]
 80066da:	f8cd b018 	str.w	fp, [sp, #24]
 80066de:	2322      	movs	r3, #34	; 0x22
 80066e0:	f04f 0800 	mov.w	r8, #0
 80066e4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80067f0 <_strtod_l+0x598>
 80066e8:	f8ca 3000 	str.w	r3, [sl]
 80066ec:	9b08      	ldr	r3, [sp, #32]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f43f adf3 	beq.w	80062da <_strtod_l+0x82>
 80066f4:	4650      	mov	r0, sl
 80066f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066f8:	f001 ff86 	bl	8008608 <_Bfree>
 80066fc:	4650      	mov	r0, sl
 80066fe:	9906      	ldr	r1, [sp, #24]
 8006700:	f001 ff82 	bl	8008608 <_Bfree>
 8006704:	4650      	mov	r0, sl
 8006706:	9904      	ldr	r1, [sp, #16]
 8006708:	f001 ff7e 	bl	8008608 <_Bfree>
 800670c:	4650      	mov	r0, sl
 800670e:	9908      	ldr	r1, [sp, #32]
 8006710:	f001 ff7a 	bl	8008608 <_Bfree>
 8006714:	4659      	mov	r1, fp
 8006716:	4650      	mov	r0, sl
 8006718:	f001 ff76 	bl	8008608 <_Bfree>
 800671c:	e5dd      	b.n	80062da <_strtod_l+0x82>
 800671e:	2300      	movs	r3, #0
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	461f      	mov	r7, r3
 8006726:	1136      	asrs	r6, r6, #4
 8006728:	2e01      	cmp	r6, #1
 800672a:	dc21      	bgt.n	8006770 <_strtod_l+0x518>
 800672c:	b10b      	cbz	r3, 8006732 <_strtod_l+0x4da>
 800672e:	4680      	mov	r8, r0
 8006730:	4689      	mov	r9, r1
 8006732:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <_strtod_l+0x594>)
 8006734:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006738:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800673c:	4642      	mov	r2, r8
 800673e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006742:	464b      	mov	r3, r9
 8006744:	f7f9 fee0 	bl	8000508 <__aeabi_dmul>
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <_strtod_l+0x598>)
 800674a:	460a      	mov	r2, r1
 800674c:	400b      	ands	r3, r1
 800674e:	4929      	ldr	r1, [pc, #164]	; (80067f4 <_strtod_l+0x59c>)
 8006750:	4680      	mov	r8, r0
 8006752:	428b      	cmp	r3, r1
 8006754:	d8bb      	bhi.n	80066ce <_strtod_l+0x476>
 8006756:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800675a:	428b      	cmp	r3, r1
 800675c:	bf86      	itte	hi
 800675e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006762:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80067f8 <_strtod_l+0x5a0>
 8006766:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800676a:	2300      	movs	r3, #0
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	e07e      	b.n	800686e <_strtod_l+0x616>
 8006770:	07f2      	lsls	r2, r6, #31
 8006772:	d507      	bpl.n	8006784 <_strtod_l+0x52c>
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <_strtod_l+0x594>)
 8006776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7f9 fec3 	bl	8000508 <__aeabi_dmul>
 8006782:	2301      	movs	r3, #1
 8006784:	3701      	adds	r7, #1
 8006786:	1076      	asrs	r6, r6, #1
 8006788:	e7ce      	b.n	8006728 <_strtod_l+0x4d0>
 800678a:	d0ee      	beq.n	800676a <_strtod_l+0x512>
 800678c:	4276      	negs	r6, r6
 800678e:	f016 020f 	ands.w	r2, r6, #15
 8006792:	d00a      	beq.n	80067aa <_strtod_l+0x552>
 8006794:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <_strtod_l+0x590>)
 8006796:	4640      	mov	r0, r8
 8006798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800679c:	4649      	mov	r1, r9
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 ffdb 	bl	800075c <__aeabi_ddiv>
 80067a6:	4680      	mov	r8, r0
 80067a8:	4689      	mov	r9, r1
 80067aa:	1136      	asrs	r6, r6, #4
 80067ac:	d0dd      	beq.n	800676a <_strtod_l+0x512>
 80067ae:	2e1f      	cmp	r6, #31
 80067b0:	dd24      	ble.n	80067fc <_strtod_l+0x5a4>
 80067b2:	f04f 0b00 	mov.w	fp, #0
 80067b6:	f8cd b010 	str.w	fp, [sp, #16]
 80067ba:	f8cd b020 	str.w	fp, [sp, #32]
 80067be:	f8cd b018 	str.w	fp, [sp, #24]
 80067c2:	2322      	movs	r3, #34	; 0x22
 80067c4:	f04f 0800 	mov.w	r8, #0
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	f8ca 3000 	str.w	r3, [sl]
 80067d0:	e78c      	b.n	80066ec <_strtod_l+0x494>
 80067d2:	bf00      	nop
 80067d4:	08009e29 	.word	0x08009e29
 80067d8:	08009e6c 	.word	0x08009e6c
 80067dc:	08009e21 	.word	0x08009e21
 80067e0:	08009fac 	.word	0x08009fac
 80067e4:	0800a2c8 	.word	0x0800a2c8
 80067e8:	0800a1a8 	.word	0x0800a1a8
 80067ec:	0800a180 	.word	0x0800a180
 80067f0:	7ff00000 	.word	0x7ff00000
 80067f4:	7ca00000 	.word	0x7ca00000
 80067f8:	7fefffff 	.word	0x7fefffff
 80067fc:	f016 0310 	ands.w	r3, r6, #16
 8006800:	bf18      	it	ne
 8006802:	236a      	movne	r3, #106	; 0x6a
 8006804:	4640      	mov	r0, r8
 8006806:	9305      	str	r3, [sp, #20]
 8006808:	4649      	mov	r1, r9
 800680a:	2300      	movs	r3, #0
 800680c:	4fb2      	ldr	r7, [pc, #712]	; (8006ad8 <_strtod_l+0x880>)
 800680e:	07f2      	lsls	r2, r6, #31
 8006810:	d504      	bpl.n	800681c <_strtod_l+0x5c4>
 8006812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006816:	f7f9 fe77 	bl	8000508 <__aeabi_dmul>
 800681a:	2301      	movs	r3, #1
 800681c:	1076      	asrs	r6, r6, #1
 800681e:	f107 0708 	add.w	r7, r7, #8
 8006822:	d1f4      	bne.n	800680e <_strtod_l+0x5b6>
 8006824:	b10b      	cbz	r3, 800682a <_strtod_l+0x5d2>
 8006826:	4680      	mov	r8, r0
 8006828:	4689      	mov	r9, r1
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	b1bb      	cbz	r3, 800685e <_strtod_l+0x606>
 800682e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006836:	2b00      	cmp	r3, #0
 8006838:	4649      	mov	r1, r9
 800683a:	dd10      	ble.n	800685e <_strtod_l+0x606>
 800683c:	2b1f      	cmp	r3, #31
 800683e:	f340 812b 	ble.w	8006a98 <_strtod_l+0x840>
 8006842:	2b34      	cmp	r3, #52	; 0x34
 8006844:	bfd8      	it	le
 8006846:	f04f 32ff 	movle.w	r2, #4294967295
 800684a:	f04f 0800 	mov.w	r8, #0
 800684e:	bfcf      	iteee	gt
 8006850:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006854:	3b20      	suble	r3, #32
 8006856:	fa02 f303 	lslle.w	r3, r2, r3
 800685a:	ea03 0901 	andle.w	r9, r3, r1
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f7fa f8b7 	bl	80009d8 <__aeabi_dcmpeq>
 800686a:	2800      	cmp	r0, #0
 800686c:	d1a1      	bne.n	80067b2 <_strtod_l+0x55a>
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	465a      	mov	r2, fp
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	4650      	mov	r0, sl
 8006876:	4623      	mov	r3, r4
 8006878:	9908      	ldr	r1, [sp, #32]
 800687a:	f001 ff31 	bl	80086e0 <__s2b>
 800687e:	9008      	str	r0, [sp, #32]
 8006880:	2800      	cmp	r0, #0
 8006882:	f43f af24 	beq.w	80066ce <_strtod_l+0x476>
 8006886:	9b04      	ldr	r3, [sp, #16]
 8006888:	f04f 0b00 	mov.w	fp, #0
 800688c:	1b5d      	subs	r5, r3, r5
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	f8cd b010 	str.w	fp, [sp, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	bfb4      	ite	lt
 8006898:	462b      	movlt	r3, r5
 800689a:	2300      	movge	r3, #0
 800689c:	930e      	str	r3, [sp, #56]	; 0x38
 800689e:	9b07      	ldr	r3, [sp, #28]
 80068a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068a4:	9316      	str	r3, [sp, #88]	; 0x58
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	4650      	mov	r0, sl
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	f001 fe6c 	bl	8008588 <_Balloc>
 80068b0:	9006      	str	r0, [sp, #24]
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f43f af13 	beq.w	80066de <_strtod_l+0x486>
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	300c      	adds	r0, #12
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	f103 010c 	add.w	r1, r3, #12
 80068c2:	3202      	adds	r2, #2
 80068c4:	0092      	lsls	r2, r2, #2
 80068c6:	f001 fe51 	bl	800856c <memcpy>
 80068ca:	ab1e      	add	r3, sp, #120	; 0x78
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	ab1d      	add	r3, sp, #116	; 0x74
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4642      	mov	r2, r8
 80068d4:	464b      	mov	r3, r9
 80068d6:	4650      	mov	r0, sl
 80068d8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80068dc:	f002 fa3e 	bl	8008d5c <__d2b>
 80068e0:	901c      	str	r0, [sp, #112]	; 0x70
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f43f aefb 	beq.w	80066de <_strtod_l+0x486>
 80068e8:	2101      	movs	r1, #1
 80068ea:	4650      	mov	r0, sl
 80068ec:	f001 ff90 	bl	8008810 <__i2b>
 80068f0:	4603      	mov	r3, r0
 80068f2:	9004      	str	r0, [sp, #16]
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f43f aef2 	beq.w	80066de <_strtod_l+0x486>
 80068fa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80068fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068fe:	2d00      	cmp	r5, #0
 8006900:	bfab      	itete	ge
 8006902:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006904:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006906:	18ee      	addge	r6, r5, r3
 8006908:	1b5c      	sublt	r4, r3, r5
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	bfa8      	it	ge
 800690e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006910:	eba5 0503 	sub.w	r5, r5, r3
 8006914:	4415      	add	r5, r2
 8006916:	4b71      	ldr	r3, [pc, #452]	; (8006adc <_strtod_l+0x884>)
 8006918:	f105 35ff 	add.w	r5, r5, #4294967295
 800691c:	bfb8      	it	lt
 800691e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006920:	429d      	cmp	r5, r3
 8006922:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006926:	f280 80c9 	bge.w	8006abc <_strtod_l+0x864>
 800692a:	1b5b      	subs	r3, r3, r5
 800692c:	2b1f      	cmp	r3, #31
 800692e:	f04f 0701 	mov.w	r7, #1
 8006932:	eba2 0203 	sub.w	r2, r2, r3
 8006936:	f300 80b6 	bgt.w	8006aa6 <_strtod_l+0x84e>
 800693a:	2500      	movs	r5, #0
 800693c:	fa07 f303 	lsl.w	r3, r7, r3
 8006940:	930f      	str	r3, [sp, #60]	; 0x3c
 8006942:	18b7      	adds	r7, r6, r2
 8006944:	9b05      	ldr	r3, [sp, #20]
 8006946:	42be      	cmp	r6, r7
 8006948:	4414      	add	r4, r2
 800694a:	441c      	add	r4, r3
 800694c:	4633      	mov	r3, r6
 800694e:	bfa8      	it	ge
 8006950:	463b      	movge	r3, r7
 8006952:	42a3      	cmp	r3, r4
 8006954:	bfa8      	it	ge
 8006956:	4623      	movge	r3, r4
 8006958:	2b00      	cmp	r3, #0
 800695a:	bfc2      	ittt	gt
 800695c:	1aff      	subgt	r7, r7, r3
 800695e:	1ae4      	subgt	r4, r4, r3
 8006960:	1af6      	subgt	r6, r6, r3
 8006962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	dd17      	ble.n	8006998 <_strtod_l+0x740>
 8006968:	461a      	mov	r2, r3
 800696a:	4650      	mov	r0, sl
 800696c:	9904      	ldr	r1, [sp, #16]
 800696e:	f002 f809 	bl	8008984 <__pow5mult>
 8006972:	9004      	str	r0, [sp, #16]
 8006974:	2800      	cmp	r0, #0
 8006976:	f43f aeb2 	beq.w	80066de <_strtod_l+0x486>
 800697a:	4601      	mov	r1, r0
 800697c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800697e:	4650      	mov	r0, sl
 8006980:	f001 ff5c 	bl	800883c <__multiply>
 8006984:	9009      	str	r0, [sp, #36]	; 0x24
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aea9 	beq.w	80066de <_strtod_l+0x486>
 800698c:	4650      	mov	r0, sl
 800698e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006990:	f001 fe3a 	bl	8008608 <_Bfree>
 8006994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006996:	931c      	str	r3, [sp, #112]	; 0x70
 8006998:	2f00      	cmp	r7, #0
 800699a:	f300 8093 	bgt.w	8006ac4 <_strtod_l+0x86c>
 800699e:	9b07      	ldr	r3, [sp, #28]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dd08      	ble.n	80069b6 <_strtod_l+0x75e>
 80069a4:	4650      	mov	r0, sl
 80069a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80069a8:	9906      	ldr	r1, [sp, #24]
 80069aa:	f001 ffeb 	bl	8008984 <__pow5mult>
 80069ae:	9006      	str	r0, [sp, #24]
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f43f ae94 	beq.w	80066de <_strtod_l+0x486>
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	dd08      	ble.n	80069cc <_strtod_l+0x774>
 80069ba:	4622      	mov	r2, r4
 80069bc:	4650      	mov	r0, sl
 80069be:	9906      	ldr	r1, [sp, #24]
 80069c0:	f002 f83a 	bl	8008a38 <__lshift>
 80069c4:	9006      	str	r0, [sp, #24]
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f43f ae89 	beq.w	80066de <_strtod_l+0x486>
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	dd08      	ble.n	80069e2 <_strtod_l+0x78a>
 80069d0:	4632      	mov	r2, r6
 80069d2:	4650      	mov	r0, sl
 80069d4:	9904      	ldr	r1, [sp, #16]
 80069d6:	f002 f82f 	bl	8008a38 <__lshift>
 80069da:	9004      	str	r0, [sp, #16]
 80069dc:	2800      	cmp	r0, #0
 80069de:	f43f ae7e 	beq.w	80066de <_strtod_l+0x486>
 80069e2:	4650      	mov	r0, sl
 80069e4:	9a06      	ldr	r2, [sp, #24]
 80069e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80069e8:	f002 f8ae 	bl	8008b48 <__mdiff>
 80069ec:	4683      	mov	fp, r0
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f43f ae75 	beq.w	80066de <_strtod_l+0x486>
 80069f4:	2400      	movs	r4, #0
 80069f6:	68c3      	ldr	r3, [r0, #12]
 80069f8:	9904      	ldr	r1, [sp, #16]
 80069fa:	60c4      	str	r4, [r0, #12]
 80069fc:	930d      	str	r3, [sp, #52]	; 0x34
 80069fe:	f002 f887 	bl	8008b10 <__mcmp>
 8006a02:	42a0      	cmp	r0, r4
 8006a04:	da70      	bge.n	8006ae8 <_strtod_l+0x890>
 8006a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a08:	ea53 0308 	orrs.w	r3, r3, r8
 8006a0c:	f040 8096 	bne.w	8006b3c <_strtod_l+0x8e4>
 8006a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f040 8091 	bne.w	8006b3c <_strtod_l+0x8e4>
 8006a1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a1e:	0d1b      	lsrs	r3, r3, #20
 8006a20:	051b      	lsls	r3, r3, #20
 8006a22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a26:	f240 8089 	bls.w	8006b3c <_strtod_l+0x8e4>
 8006a2a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006a2e:	b923      	cbnz	r3, 8006a3a <_strtod_l+0x7e2>
 8006a30:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	f340 8081 	ble.w	8006b3c <_strtod_l+0x8e4>
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4650      	mov	r0, sl
 8006a40:	f001 fffa 	bl	8008a38 <__lshift>
 8006a44:	9904      	ldr	r1, [sp, #16]
 8006a46:	4683      	mov	fp, r0
 8006a48:	f002 f862 	bl	8008b10 <__mcmp>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	dd75      	ble.n	8006b3c <_strtod_l+0x8e4>
 8006a50:	9905      	ldr	r1, [sp, #20]
 8006a52:	464b      	mov	r3, r9
 8006a54:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <_strtod_l+0x888>)
 8006a56:	2900      	cmp	r1, #0
 8006a58:	f000 8091 	beq.w	8006b7e <_strtod_l+0x926>
 8006a5c:	ea02 0109 	and.w	r1, r2, r9
 8006a60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a64:	f300 808b 	bgt.w	8006b7e <_strtod_l+0x926>
 8006a68:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a6c:	f77f aea9 	ble.w	80067c2 <_strtod_l+0x56a>
 8006a70:	2300      	movs	r3, #0
 8006a72:	4a1c      	ldr	r2, [pc, #112]	; (8006ae4 <_strtod_l+0x88c>)
 8006a74:	4640      	mov	r0, r8
 8006a76:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006a80:	f7f9 fd42 	bl	8000508 <__aeabi_dmul>
 8006a84:	460b      	mov	r3, r1
 8006a86:	4303      	orrs	r3, r0
 8006a88:	bf08      	it	eq
 8006a8a:	2322      	moveq	r3, #34	; 0x22
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	4689      	mov	r9, r1
 8006a90:	bf08      	it	eq
 8006a92:	f8ca 3000 	streq.w	r3, [sl]
 8006a96:	e62d      	b.n	80066f4 <_strtod_l+0x49c>
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	ea03 0808 	and.w	r8, r3, r8
 8006aa4:	e6db      	b.n	800685e <_strtod_l+0x606>
 8006aa6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006aaa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006aae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006ab2:	35e2      	adds	r5, #226	; 0xe2
 8006ab4:	fa07 f505 	lsl.w	r5, r7, r5
 8006ab8:	970f      	str	r7, [sp, #60]	; 0x3c
 8006aba:	e742      	b.n	8006942 <_strtod_l+0x6ea>
 8006abc:	2301      	movs	r3, #1
 8006abe:	2500      	movs	r5, #0
 8006ac0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ac2:	e73e      	b.n	8006942 <_strtod_l+0x6ea>
 8006ac4:	463a      	mov	r2, r7
 8006ac6:	4650      	mov	r0, sl
 8006ac8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006aca:	f001 ffb5 	bl	8008a38 <__lshift>
 8006ace:	901c      	str	r0, [sp, #112]	; 0x70
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f47f af64 	bne.w	800699e <_strtod_l+0x746>
 8006ad6:	e602      	b.n	80066de <_strtod_l+0x486>
 8006ad8:	08009e80 	.word	0x08009e80
 8006adc:	fffffc02 	.word	0xfffffc02
 8006ae0:	7ff00000 	.word	0x7ff00000
 8006ae4:	39500000 	.word	0x39500000
 8006ae8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006aec:	d166      	bne.n	8006bbc <_strtod_l+0x964>
 8006aee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006af4:	b35a      	cbz	r2, 8006b4e <_strtod_l+0x8f6>
 8006af6:	4a9c      	ldr	r2, [pc, #624]	; (8006d68 <_strtod_l+0xb10>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d12c      	bne.n	8006b56 <_strtod_l+0x8fe>
 8006afc:	9b05      	ldr	r3, [sp, #20]
 8006afe:	4640      	mov	r0, r8
 8006b00:	b303      	cbz	r3, 8006b44 <_strtod_l+0x8ec>
 8006b02:	464b      	mov	r3, r9
 8006b04:	4a99      	ldr	r2, [pc, #612]	; (8006d6c <_strtod_l+0xb14>)
 8006b06:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006b10:	d81b      	bhi.n	8006b4a <_strtod_l+0x8f2>
 8006b12:	0d12      	lsrs	r2, r2, #20
 8006b14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	4298      	cmp	r0, r3
 8006b1e:	d11a      	bne.n	8006b56 <_strtod_l+0x8fe>
 8006b20:	4b93      	ldr	r3, [pc, #588]	; (8006d70 <_strtod_l+0xb18>)
 8006b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d102      	bne.n	8006b2e <_strtod_l+0x8d6>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f43f add8 	beq.w	80066de <_strtod_l+0x486>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	4b8e      	ldr	r3, [pc, #568]	; (8006d6c <_strtod_l+0xb14>)
 8006b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b36:	401a      	ands	r2, r3
 8006b38:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006b3c:	9b05      	ldr	r3, [sp, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d196      	bne.n	8006a70 <_strtod_l+0x818>
 8006b42:	e5d7      	b.n	80066f4 <_strtod_l+0x49c>
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295
 8006b48:	e7e8      	b.n	8006b1c <_strtod_l+0x8c4>
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	e7e6      	b.n	8006b1c <_strtod_l+0x8c4>
 8006b4e:	ea53 0308 	orrs.w	r3, r3, r8
 8006b52:	f43f af7d 	beq.w	8006a50 <_strtod_l+0x7f8>
 8006b56:	b1e5      	cbz	r5, 8006b92 <_strtod_l+0x93a>
 8006b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5a:	421d      	tst	r5, r3
 8006b5c:	d0ee      	beq.n	8006b3c <_strtod_l+0x8e4>
 8006b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b60:	4640      	mov	r0, r8
 8006b62:	4649      	mov	r1, r9
 8006b64:	9a05      	ldr	r2, [sp, #20]
 8006b66:	b1c3      	cbz	r3, 8006b9a <_strtod_l+0x942>
 8006b68:	f7ff fb54 	bl	8006214 <sulp>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b74:	f7f9 fb12 	bl	800019c <__adddf3>
 8006b78:	4680      	mov	r8, r0
 8006b7a:	4689      	mov	r9, r1
 8006b7c:	e7de      	b.n	8006b3c <_strtod_l+0x8e4>
 8006b7e:	4013      	ands	r3, r2
 8006b80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b84:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006b88:	f04f 38ff 	mov.w	r8, #4294967295
 8006b8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006b90:	e7d4      	b.n	8006b3c <_strtod_l+0x8e4>
 8006b92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b94:	ea13 0f08 	tst.w	r3, r8
 8006b98:	e7e0      	b.n	8006b5c <_strtod_l+0x904>
 8006b9a:	f7ff fb3b 	bl	8006214 <sulp>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ba6:	f7f9 faf7 	bl	8000198 <__aeabi_dsub>
 8006baa:	2200      	movs	r2, #0
 8006bac:	2300      	movs	r3, #0
 8006bae:	4680      	mov	r8, r0
 8006bb0:	4689      	mov	r9, r1
 8006bb2:	f7f9 ff11 	bl	80009d8 <__aeabi_dcmpeq>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d0c0      	beq.n	8006b3c <_strtod_l+0x8e4>
 8006bba:	e602      	b.n	80067c2 <_strtod_l+0x56a>
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	9904      	ldr	r1, [sp, #16]
 8006bc0:	f002 f928 	bl	8008e14 <__ratio>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460f      	mov	r7, r1
 8006bce:	f7f9 ff17 	bl	8000a00 <__aeabi_dcmple>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d075      	beq.n	8006cc2 <_strtod_l+0xa6a>
 8006bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d047      	beq.n	8006c6c <_strtod_l+0xa14>
 8006bdc:	2600      	movs	r6, #0
 8006bde:	4f65      	ldr	r7, [pc, #404]	; (8006d74 <_strtod_l+0xb1c>)
 8006be0:	4d64      	ldr	r5, [pc, #400]	; (8006d74 <_strtod_l+0xb1c>)
 8006be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006be8:	0d1b      	lsrs	r3, r3, #20
 8006bea:	051b      	lsls	r3, r3, #20
 8006bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bf0:	4b61      	ldr	r3, [pc, #388]	; (8006d78 <_strtod_l+0xb20>)
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	f040 80c8 	bne.w	8006d88 <_strtod_l+0xb30>
 8006bf8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bfc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c02:	4640      	mov	r0, r8
 8006c04:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006c08:	4649      	mov	r1, r9
 8006c0a:	f002 f82d 	bl	8008c68 <__ulp>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7f9 fc77 	bl	8000508 <__aeabi_dmul>
 8006c1a:	4642      	mov	r2, r8
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	f7f9 fabd 	bl	800019c <__adddf3>
 8006c22:	460b      	mov	r3, r1
 8006c24:	4951      	ldr	r1, [pc, #324]	; (8006d6c <_strtod_l+0xb14>)
 8006c26:	4a55      	ldr	r2, [pc, #340]	; (8006d7c <_strtod_l+0xb24>)
 8006c28:	4019      	ands	r1, r3
 8006c2a:	4291      	cmp	r1, r2
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	d95e      	bls.n	8006cee <_strtod_l+0xa96>
 8006c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d103      	bne.n	8006c42 <_strtod_l+0x9ea>
 8006c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f43f ad4e 	beq.w	80066de <_strtod_l+0x486>
 8006c42:	f04f 38ff 	mov.w	r8, #4294967295
 8006c46:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006d70 <_strtod_l+0xb18>
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c4e:	f001 fcdb 	bl	8008608 <_Bfree>
 8006c52:	4650      	mov	r0, sl
 8006c54:	9906      	ldr	r1, [sp, #24]
 8006c56:	f001 fcd7 	bl	8008608 <_Bfree>
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	9904      	ldr	r1, [sp, #16]
 8006c5e:	f001 fcd3 	bl	8008608 <_Bfree>
 8006c62:	4659      	mov	r1, fp
 8006c64:	4650      	mov	r0, sl
 8006c66:	f001 fccf 	bl	8008608 <_Bfree>
 8006c6a:	e61c      	b.n	80068a6 <_strtod_l+0x64e>
 8006c6c:	f1b8 0f00 	cmp.w	r8, #0
 8006c70:	d119      	bne.n	8006ca6 <_strtod_l+0xa4e>
 8006c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c78:	b9e3      	cbnz	r3, 8006cb4 <_strtod_l+0xa5c>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4b3c      	ldr	r3, [pc, #240]	; (8006d74 <_strtod_l+0xb1c>)
 8006c82:	f7f9 feb3 	bl	80009ec <__aeabi_dcmplt>
 8006c86:	b9c8      	cbnz	r0, 8006cbc <_strtod_l+0xa64>
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	4b3c      	ldr	r3, [pc, #240]	; (8006d80 <_strtod_l+0xb28>)
 8006c90:	f7f9 fc3a 	bl	8000508 <__aeabi_dmul>
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c9c:	9418      	str	r4, [sp, #96]	; 0x60
 8006c9e:	9319      	str	r3, [sp, #100]	; 0x64
 8006ca0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006ca4:	e79d      	b.n	8006be2 <_strtod_l+0x98a>
 8006ca6:	f1b8 0f01 	cmp.w	r8, #1
 8006caa:	d103      	bne.n	8006cb4 <_strtod_l+0xa5c>
 8006cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f43f ad87 	beq.w	80067c2 <_strtod_l+0x56a>
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	4f32      	ldr	r7, [pc, #200]	; (8006d84 <_strtod_l+0xb2c>)
 8006cba:	e791      	b.n	8006be0 <_strtod_l+0x988>
 8006cbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006cbe:	4d30      	ldr	r5, [pc, #192]	; (8006d80 <_strtod_l+0xb28>)
 8006cc0:	e7ea      	b.n	8006c98 <_strtod_l+0xa40>
 8006cc2:	4b2f      	ldr	r3, [pc, #188]	; (8006d80 <_strtod_l+0xb28>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	4639      	mov	r1, r7
 8006cca:	f7f9 fc1d 	bl	8000508 <__aeabi_dmul>
 8006cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	b933      	cbnz	r3, 8006ce4 <_strtod_l+0xa8c>
 8006cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cda:	9010      	str	r0, [sp, #64]	; 0x40
 8006cdc:	9311      	str	r3, [sp, #68]	; 0x44
 8006cde:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ce2:	e77e      	b.n	8006be2 <_strtod_l+0x98a>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006cec:	e7f7      	b.n	8006cde <_strtod_l+0xa86>
 8006cee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006cf2:	9b05      	ldr	r3, [sp, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1a8      	bne.n	8006c4a <_strtod_l+0x9f2>
 8006cf8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cfe:	0d1b      	lsrs	r3, r3, #20
 8006d00:	051b      	lsls	r3, r3, #20
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d1a1      	bne.n	8006c4a <_strtod_l+0x9f2>
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 ff5d 	bl	8000bc8 <__aeabi_d2lz>
 8006d0e:	f7f9 fbcd 	bl	80004ac <__aeabi_l2d>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fa3d 	bl	8000198 <__aeabi_dsub>
 8006d1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d24:	ea43 0308 	orr.w	r3, r3, r8
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	d066      	beq.n	8006dfe <_strtod_l+0xba6>
 8006d30:	a309      	add	r3, pc, #36	; (adr r3, 8006d58 <_strtod_l+0xb00>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fe59 	bl	80009ec <__aeabi_dcmplt>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	f47f acda 	bne.w	80066f4 <_strtod_l+0x49c>
 8006d40:	a307      	add	r3, pc, #28	; (adr r3, 8006d60 <_strtod_l+0xb08>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f7f9 fe6d 	bl	8000a28 <__aeabi_dcmpgt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f af7b 	beq.w	8006c4a <_strtod_l+0x9f2>
 8006d54:	e4ce      	b.n	80066f4 <_strtod_l+0x49c>
 8006d56:	bf00      	nop
 8006d58:	94a03595 	.word	0x94a03595
 8006d5c:	3fdfffff 	.word	0x3fdfffff
 8006d60:	35afe535 	.word	0x35afe535
 8006d64:	3fe00000 	.word	0x3fe00000
 8006d68:	000fffff 	.word	0x000fffff
 8006d6c:	7ff00000 	.word	0x7ff00000
 8006d70:	7fefffff 	.word	0x7fefffff
 8006d74:	3ff00000 	.word	0x3ff00000
 8006d78:	7fe00000 	.word	0x7fe00000
 8006d7c:	7c9fffff 	.word	0x7c9fffff
 8006d80:	3fe00000 	.word	0x3fe00000
 8006d84:	bff00000 	.word	0xbff00000
 8006d88:	9b05      	ldr	r3, [sp, #20]
 8006d8a:	b313      	cbz	r3, 8006dd2 <_strtod_l+0xb7a>
 8006d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d92:	d81e      	bhi.n	8006dd2 <_strtod_l+0xb7a>
 8006d94:	a326      	add	r3, pc, #152	; (adr r3, 8006e30 <_strtod_l+0xbd8>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 fe2f 	bl	8000a00 <__aeabi_dcmple>
 8006da2:	b190      	cbz	r0, 8006dca <_strtod_l+0xb72>
 8006da4:	4629      	mov	r1, r5
 8006da6:	4620      	mov	r0, r4
 8006da8:	f7f9 fe86 	bl	8000ab8 <__aeabi_d2uiz>
 8006dac:	2801      	cmp	r0, #1
 8006dae:	bf38      	it	cc
 8006db0:	2001      	movcc	r0, #1
 8006db2:	f7f9 fb2f 	bl	8000414 <__aeabi_ui2d>
 8006db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	b9d3      	cbnz	r3, 8006df4 <_strtod_l+0xb9c>
 8006dbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dc2:	9012      	str	r0, [sp, #72]	; 0x48
 8006dc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dc6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006dca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dcc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006dd0:	1a9f      	subs	r7, r3, r2
 8006dd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dd6:	f001 ff47 	bl	8008c68 <__ulp>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fb91 	bl	8000508 <__aeabi_dmul>
 8006de6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dea:	f7f9 f9d7 	bl	800019c <__adddf3>
 8006dee:	4680      	mov	r8, r0
 8006df0:	4689      	mov	r9, r1
 8006df2:	e77e      	b.n	8006cf2 <_strtod_l+0xa9a>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006dfc:	e7e3      	b.n	8006dc6 <_strtod_l+0xb6e>
 8006dfe:	a30e      	add	r3, pc, #56	; (adr r3, 8006e38 <_strtod_l+0xbe0>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f7f9 fdf2 	bl	80009ec <__aeabi_dcmplt>
 8006e08:	e7a1      	b.n	8006d4e <_strtod_l+0xaf6>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8006e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	f7ff ba65 	b.w	80062e2 <_strtod_l+0x8a>
 8006e18:	2b65      	cmp	r3, #101	; 0x65
 8006e1a:	f43f ab5c 	beq.w	80064d6 <_strtod_l+0x27e>
 8006e1e:	2b45      	cmp	r3, #69	; 0x45
 8006e20:	f43f ab59 	beq.w	80064d6 <_strtod_l+0x27e>
 8006e24:	2201      	movs	r2, #1
 8006e26:	f7ff bb8d 	b.w	8006544 <_strtod_l+0x2ec>
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	ffc00000 	.word	0xffc00000
 8006e34:	41dfffff 	.word	0x41dfffff
 8006e38:	94a03595 	.word	0x94a03595
 8006e3c:	3fcfffff 	.word	0x3fcfffff

08006e40 <_strtod_r>:
 8006e40:	4b01      	ldr	r3, [pc, #4]	; (8006e48 <_strtod_r+0x8>)
 8006e42:	f7ff ba09 	b.w	8006258 <_strtod_l>
 8006e46:	bf00      	nop
 8006e48:	200000b8 	.word	0x200000b8

08006e4c <_strtol_l.isra.0>:
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e52:	4686      	mov	lr, r0
 8006e54:	d001      	beq.n	8006e5a <_strtol_l.isra.0+0xe>
 8006e56:	2b24      	cmp	r3, #36	; 0x24
 8006e58:	d906      	bls.n	8006e68 <_strtol_l.isra.0+0x1c>
 8006e5a:	f7fe faed 	bl	8005438 <__errno>
 8006e5e:	2316      	movs	r3, #22
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	2000      	movs	r0, #0
 8006e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e68:	468c      	mov	ip, r1
 8006e6a:	4e3a      	ldr	r6, [pc, #232]	; (8006f54 <_strtol_l.isra.0+0x108>)
 8006e6c:	4660      	mov	r0, ip
 8006e6e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006e72:	5da5      	ldrb	r5, [r4, r6]
 8006e74:	f015 0508 	ands.w	r5, r5, #8
 8006e78:	d1f8      	bne.n	8006e6c <_strtol_l.isra.0+0x20>
 8006e7a:	2c2d      	cmp	r4, #45	; 0x2d
 8006e7c:	d133      	bne.n	8006ee6 <_strtol_l.isra.0+0x9a>
 8006e7e:	f04f 0801 	mov.w	r8, #1
 8006e82:	f89c 4000 	ldrb.w	r4, [ip]
 8006e86:	f100 0c02 	add.w	ip, r0, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d05d      	beq.n	8006f4a <_strtol_l.isra.0+0xfe>
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d10c      	bne.n	8006eac <_strtol_l.isra.0+0x60>
 8006e92:	2c30      	cmp	r4, #48	; 0x30
 8006e94:	d10a      	bne.n	8006eac <_strtol_l.isra.0+0x60>
 8006e96:	f89c 0000 	ldrb.w	r0, [ip]
 8006e9a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006e9e:	2858      	cmp	r0, #88	; 0x58
 8006ea0:	d14e      	bne.n	8006f40 <_strtol_l.isra.0+0xf4>
 8006ea2:	2310      	movs	r3, #16
 8006ea4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006ea8:	f10c 0c02 	add.w	ip, ip, #2
 8006eac:	2500      	movs	r5, #0
 8006eae:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8006eb2:	3f01      	subs	r7, #1
 8006eb4:	fbb7 f9f3 	udiv	r9, r7, r3
 8006eb8:	4628      	mov	r0, r5
 8006eba:	fb03 7a19 	mls	sl, r3, r9, r7
 8006ebe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006ec2:	2e09      	cmp	r6, #9
 8006ec4:	d818      	bhi.n	8006ef8 <_strtol_l.isra.0+0xac>
 8006ec6:	4634      	mov	r4, r6
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	dd24      	ble.n	8006f16 <_strtol_l.isra.0+0xca>
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	db1f      	blt.n	8006f10 <_strtol_l.isra.0+0xc4>
 8006ed0:	4581      	cmp	r9, r0
 8006ed2:	d31d      	bcc.n	8006f10 <_strtol_l.isra.0+0xc4>
 8006ed4:	d101      	bne.n	8006eda <_strtol_l.isra.0+0x8e>
 8006ed6:	45a2      	cmp	sl, r4
 8006ed8:	db1a      	blt.n	8006f10 <_strtol_l.isra.0+0xc4>
 8006eda:	2501      	movs	r5, #1
 8006edc:	fb00 4003 	mla	r0, r0, r3, r4
 8006ee0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006ee4:	e7eb      	b.n	8006ebe <_strtol_l.isra.0+0x72>
 8006ee6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ee8:	bf08      	it	eq
 8006eea:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006eee:	46a8      	mov	r8, r5
 8006ef0:	bf08      	it	eq
 8006ef2:	f100 0c02 	addeq.w	ip, r0, #2
 8006ef6:	e7c8      	b.n	8006e8a <_strtol_l.isra.0+0x3e>
 8006ef8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006efc:	2e19      	cmp	r6, #25
 8006efe:	d801      	bhi.n	8006f04 <_strtol_l.isra.0+0xb8>
 8006f00:	3c37      	subs	r4, #55	; 0x37
 8006f02:	e7e1      	b.n	8006ec8 <_strtol_l.isra.0+0x7c>
 8006f04:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006f08:	2e19      	cmp	r6, #25
 8006f0a:	d804      	bhi.n	8006f16 <_strtol_l.isra.0+0xca>
 8006f0c:	3c57      	subs	r4, #87	; 0x57
 8006f0e:	e7db      	b.n	8006ec8 <_strtol_l.isra.0+0x7c>
 8006f10:	f04f 35ff 	mov.w	r5, #4294967295
 8006f14:	e7e4      	b.n	8006ee0 <_strtol_l.isra.0+0x94>
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	da08      	bge.n	8006f2c <_strtol_l.isra.0+0xe0>
 8006f1a:	2322      	movs	r3, #34	; 0x22
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f8ce 3000 	str.w	r3, [lr]
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	d09e      	beq.n	8006e64 <_strtol_l.isra.0+0x18>
 8006f26:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006f2a:	e007      	b.n	8006f3c <_strtol_l.isra.0+0xf0>
 8006f2c:	f1b8 0f00 	cmp.w	r8, #0
 8006f30:	d000      	beq.n	8006f34 <_strtol_l.isra.0+0xe8>
 8006f32:	4240      	negs	r0, r0
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	d095      	beq.n	8006e64 <_strtol_l.isra.0+0x18>
 8006f38:	2d00      	cmp	r5, #0
 8006f3a:	d1f4      	bne.n	8006f26 <_strtol_l.isra.0+0xda>
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	e791      	b.n	8006e64 <_strtol_l.isra.0+0x18>
 8006f40:	2430      	movs	r4, #48	; 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1b2      	bne.n	8006eac <_strtol_l.isra.0+0x60>
 8006f46:	2308      	movs	r3, #8
 8006f48:	e7b0      	b.n	8006eac <_strtol_l.isra.0+0x60>
 8006f4a:	2c30      	cmp	r4, #48	; 0x30
 8006f4c:	d0a3      	beq.n	8006e96 <_strtol_l.isra.0+0x4a>
 8006f4e:	230a      	movs	r3, #10
 8006f50:	e7ac      	b.n	8006eac <_strtol_l.isra.0+0x60>
 8006f52:	bf00      	nop
 8006f54:	08009ea9 	.word	0x08009ea9

08006f58 <_strtol_r>:
 8006f58:	f7ff bf78 	b.w	8006e4c <_strtol_l.isra.0>

08006f5c <quorem>:
 8006f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f60:	6903      	ldr	r3, [r0, #16]
 8006f62:	690c      	ldr	r4, [r1, #16]
 8006f64:	4607      	mov	r7, r0
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	f2c0 8083 	blt.w	8007072 <quorem+0x116>
 8006f6c:	3c01      	subs	r4, #1
 8006f6e:	f100 0514 	add.w	r5, r0, #20
 8006f72:	f101 0814 	add.w	r8, r1, #20
 8006f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f84:	3301      	adds	r3, #1
 8006f86:	429a      	cmp	r2, r3
 8006f88:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f94:	d332      	bcc.n	8006ffc <quorem+0xa0>
 8006f96:	f04f 0e00 	mov.w	lr, #0
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	46ac      	mov	ip, r5
 8006f9e:	46f2      	mov	sl, lr
 8006fa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fa4:	b293      	uxth	r3, r2
 8006fa6:	fb06 e303 	mla	r3, r6, r3, lr
 8006faa:	0c12      	lsrs	r2, r2, #16
 8006fac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fb0:	fb06 e202 	mla	r2, r6, r2, lr
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006fba:	f8dc a000 	ldr.w	sl, [ip]
 8006fbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fc2:	fa1f fa8a 	uxth.w	sl, sl
 8006fc6:	4453      	add	r3, sl
 8006fc8:	fa1f fa82 	uxth.w	sl, r2
 8006fcc:	f8dc 2000 	ldr.w	r2, [ip]
 8006fd0:	4581      	cmp	r9, r0
 8006fd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8006fe8:	d2da      	bcs.n	8006fa0 <quorem+0x44>
 8006fea:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fee:	b92b      	cbnz	r3, 8006ffc <quorem+0xa0>
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	3b04      	subs	r3, #4
 8006ff4:	429d      	cmp	r5, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	d32f      	bcc.n	800705a <quorem+0xfe>
 8006ffa:	613c      	str	r4, [r7, #16]
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f001 fd87 	bl	8008b10 <__mcmp>
 8007002:	2800      	cmp	r0, #0
 8007004:	db25      	blt.n	8007052 <quorem+0xf6>
 8007006:	4628      	mov	r0, r5
 8007008:	f04f 0c00 	mov.w	ip, #0
 800700c:	3601      	adds	r6, #1
 800700e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007012:	f8d0 e000 	ldr.w	lr, [r0]
 8007016:	b28b      	uxth	r3, r1
 8007018:	ebac 0303 	sub.w	r3, ip, r3
 800701c:	fa1f f28e 	uxth.w	r2, lr
 8007020:	4413      	add	r3, r2
 8007022:	0c0a      	lsrs	r2, r1, #16
 8007024:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007032:	45c1      	cmp	r9, r8
 8007034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007038:	f840 3b04 	str.w	r3, [r0], #4
 800703c:	d2e7      	bcs.n	800700e <quorem+0xb2>
 800703e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007046:	b922      	cbnz	r2, 8007052 <quorem+0xf6>
 8007048:	3b04      	subs	r3, #4
 800704a:	429d      	cmp	r5, r3
 800704c:	461a      	mov	r2, r3
 800704e:	d30a      	bcc.n	8007066 <quorem+0x10a>
 8007050:	613c      	str	r4, [r7, #16]
 8007052:	4630      	mov	r0, r6
 8007054:	b003      	add	sp, #12
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	3b04      	subs	r3, #4
 800705e:	2a00      	cmp	r2, #0
 8007060:	d1cb      	bne.n	8006ffa <quorem+0x9e>
 8007062:	3c01      	subs	r4, #1
 8007064:	e7c6      	b.n	8006ff4 <quorem+0x98>
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	3b04      	subs	r3, #4
 800706a:	2a00      	cmp	r2, #0
 800706c:	d1f0      	bne.n	8007050 <quorem+0xf4>
 800706e:	3c01      	subs	r4, #1
 8007070:	e7eb      	b.n	800704a <quorem+0xee>
 8007072:	2000      	movs	r0, #0
 8007074:	e7ee      	b.n	8007054 <quorem+0xf8>
	...

08007078 <_dtoa_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	4616      	mov	r6, r2
 800707e:	461f      	mov	r7, r3
 8007080:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007082:	b099      	sub	sp, #100	; 0x64
 8007084:	4605      	mov	r5, r0
 8007086:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800708a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800708e:	b974      	cbnz	r4, 80070ae <_dtoa_r+0x36>
 8007090:	2010      	movs	r0, #16
 8007092:	f001 fa43 	bl	800851c <malloc>
 8007096:	4602      	mov	r2, r0
 8007098:	6268      	str	r0, [r5, #36]	; 0x24
 800709a:	b920      	cbnz	r0, 80070a6 <_dtoa_r+0x2e>
 800709c:	21ea      	movs	r1, #234	; 0xea
 800709e:	4bae      	ldr	r3, [pc, #696]	; (8007358 <_dtoa_r+0x2e0>)
 80070a0:	48ae      	ldr	r0, [pc, #696]	; (800735c <_dtoa_r+0x2e4>)
 80070a2:	f002 fbdd 	bl	8009860 <__assert_func>
 80070a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070aa:	6004      	str	r4, [r0, #0]
 80070ac:	60c4      	str	r4, [r0, #12]
 80070ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070b0:	6819      	ldr	r1, [r3, #0]
 80070b2:	b151      	cbz	r1, 80070ca <_dtoa_r+0x52>
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	2301      	movs	r3, #1
 80070b8:	4093      	lsls	r3, r2
 80070ba:	604a      	str	r2, [r1, #4]
 80070bc:	608b      	str	r3, [r1, #8]
 80070be:	4628      	mov	r0, r5
 80070c0:	f001 faa2 	bl	8008608 <_Bfree>
 80070c4:	2200      	movs	r2, #0
 80070c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	1e3b      	subs	r3, r7, #0
 80070cc:	bfaf      	iteee	ge
 80070ce:	2300      	movge	r3, #0
 80070d0:	2201      	movlt	r2, #1
 80070d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070d6:	9305      	strlt	r3, [sp, #20]
 80070d8:	bfa8      	it	ge
 80070da:	f8c8 3000 	strge.w	r3, [r8]
 80070de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80070e2:	4b9f      	ldr	r3, [pc, #636]	; (8007360 <_dtoa_r+0x2e8>)
 80070e4:	bfb8      	it	lt
 80070e6:	f8c8 2000 	strlt.w	r2, [r8]
 80070ea:	ea33 0309 	bics.w	r3, r3, r9
 80070ee:	d119      	bne.n	8007124 <_dtoa_r+0xac>
 80070f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80070f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070fc:	4333      	orrs	r3, r6
 80070fe:	f000 8580 	beq.w	8007c02 <_dtoa_r+0xb8a>
 8007102:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007104:	b953      	cbnz	r3, 800711c <_dtoa_r+0xa4>
 8007106:	4b97      	ldr	r3, [pc, #604]	; (8007364 <_dtoa_r+0x2ec>)
 8007108:	e022      	b.n	8007150 <_dtoa_r+0xd8>
 800710a:	4b97      	ldr	r3, [pc, #604]	; (8007368 <_dtoa_r+0x2f0>)
 800710c:	9308      	str	r3, [sp, #32]
 800710e:	3308      	adds	r3, #8
 8007110:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	9808      	ldr	r0, [sp, #32]
 8007116:	b019      	add	sp, #100	; 0x64
 8007118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	4b91      	ldr	r3, [pc, #580]	; (8007364 <_dtoa_r+0x2ec>)
 800711e:	9308      	str	r3, [sp, #32]
 8007120:	3303      	adds	r3, #3
 8007122:	e7f5      	b.n	8007110 <_dtoa_r+0x98>
 8007124:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007128:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800712c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	f7f9 fc50 	bl	80009d8 <__aeabi_dcmpeq>
 8007138:	4680      	mov	r8, r0
 800713a:	b158      	cbz	r0, 8007154 <_dtoa_r+0xdc>
 800713c:	2301      	movs	r3, #1
 800713e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8559 	beq.w	8007bfc <_dtoa_r+0xb84>
 800714a:	4888      	ldr	r0, [pc, #544]	; (800736c <_dtoa_r+0x2f4>)
 800714c:	6018      	str	r0, [r3, #0]
 800714e:	1e43      	subs	r3, r0, #1
 8007150:	9308      	str	r3, [sp, #32]
 8007152:	e7df      	b.n	8007114 <_dtoa_r+0x9c>
 8007154:	ab16      	add	r3, sp, #88	; 0x58
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	ab17      	add	r3, sp, #92	; 0x5c
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4628      	mov	r0, r5
 800715e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007162:	f001 fdfb 	bl	8008d5c <__d2b>
 8007166:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800716a:	4682      	mov	sl, r0
 800716c:	2c00      	cmp	r4, #0
 800716e:	d07e      	beq.n	800726e <_dtoa_r+0x1f6>
 8007170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007176:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800717a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800717e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007182:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007186:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800718a:	2200      	movs	r2, #0
 800718c:	4b78      	ldr	r3, [pc, #480]	; (8007370 <_dtoa_r+0x2f8>)
 800718e:	f7f9 f803 	bl	8000198 <__aeabi_dsub>
 8007192:	a36b      	add	r3, pc, #428	; (adr r3, 8007340 <_dtoa_r+0x2c8>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 f9b6 	bl	8000508 <__aeabi_dmul>
 800719c:	a36a      	add	r3, pc, #424	; (adr r3, 8007348 <_dtoa_r+0x2d0>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f8 fffb 	bl	800019c <__adddf3>
 80071a6:	4606      	mov	r6, r0
 80071a8:	4620      	mov	r0, r4
 80071aa:	460f      	mov	r7, r1
 80071ac:	f7f9 f942 	bl	8000434 <__aeabi_i2d>
 80071b0:	a367      	add	r3, pc, #412	; (adr r3, 8007350 <_dtoa_r+0x2d8>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f7f9 f9a7 	bl	8000508 <__aeabi_dmul>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	4630      	mov	r0, r6
 80071c0:	4639      	mov	r1, r7
 80071c2:	f7f8 ffeb 	bl	800019c <__adddf3>
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	f7f9 fc4d 	bl	8000a68 <__aeabi_d2iz>
 80071ce:	2200      	movs	r2, #0
 80071d0:	4681      	mov	r9, r0
 80071d2:	2300      	movs	r3, #0
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 fc08 	bl	80009ec <__aeabi_dcmplt>
 80071dc:	b148      	cbz	r0, 80071f2 <_dtoa_r+0x17a>
 80071de:	4648      	mov	r0, r9
 80071e0:	f7f9 f928 	bl	8000434 <__aeabi_i2d>
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	f7f9 fbf6 	bl	80009d8 <__aeabi_dcmpeq>
 80071ec:	b908      	cbnz	r0, 80071f2 <_dtoa_r+0x17a>
 80071ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80071f2:	f1b9 0f16 	cmp.w	r9, #22
 80071f6:	d857      	bhi.n	80072a8 <_dtoa_r+0x230>
 80071f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071fc:	4b5d      	ldr	r3, [pc, #372]	; (8007374 <_dtoa_r+0x2fc>)
 80071fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f9 fbf1 	bl	80009ec <__aeabi_dcmplt>
 800720a:	2800      	cmp	r0, #0
 800720c:	d04e      	beq.n	80072ac <_dtoa_r+0x234>
 800720e:	2300      	movs	r3, #0
 8007210:	f109 39ff 	add.w	r9, r9, #4294967295
 8007214:	930f      	str	r3, [sp, #60]	; 0x3c
 8007216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007218:	1b1c      	subs	r4, r3, r4
 800721a:	1e63      	subs	r3, r4, #1
 800721c:	9309      	str	r3, [sp, #36]	; 0x24
 800721e:	bf49      	itett	mi
 8007220:	f1c4 0301 	rsbmi	r3, r4, #1
 8007224:	2300      	movpl	r3, #0
 8007226:	9306      	strmi	r3, [sp, #24]
 8007228:	2300      	movmi	r3, #0
 800722a:	bf54      	ite	pl
 800722c:	9306      	strpl	r3, [sp, #24]
 800722e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007230:	f1b9 0f00 	cmp.w	r9, #0
 8007234:	db3c      	blt.n	80072b0 <_dtoa_r+0x238>
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800723c:	444b      	add	r3, r9
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	2300      	movs	r3, #0
 8007242:	930a      	str	r3, [sp, #40]	; 0x28
 8007244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007246:	2b09      	cmp	r3, #9
 8007248:	d86c      	bhi.n	8007324 <_dtoa_r+0x2ac>
 800724a:	2b05      	cmp	r3, #5
 800724c:	bfc4      	itt	gt
 800724e:	3b04      	subgt	r3, #4
 8007250:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007254:	bfc8      	it	gt
 8007256:	2400      	movgt	r4, #0
 8007258:	f1a3 0302 	sub.w	r3, r3, #2
 800725c:	bfd8      	it	le
 800725e:	2401      	movle	r4, #1
 8007260:	2b03      	cmp	r3, #3
 8007262:	f200 808b 	bhi.w	800737c <_dtoa_r+0x304>
 8007266:	e8df f003 	tbb	[pc, r3]
 800726a:	4f2d      	.short	0x4f2d
 800726c:	5b4d      	.short	0x5b4d
 800726e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007272:	441c      	add	r4, r3
 8007274:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007278:	2b20      	cmp	r3, #32
 800727a:	bfc3      	ittte	gt
 800727c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007280:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007284:	fa09 f303 	lslgt.w	r3, r9, r3
 8007288:	f1c3 0320 	rsble	r3, r3, #32
 800728c:	bfc6      	itte	gt
 800728e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007292:	4318      	orrgt	r0, r3
 8007294:	fa06 f003 	lslle.w	r0, r6, r3
 8007298:	f7f9 f8bc 	bl	8000414 <__aeabi_ui2d>
 800729c:	2301      	movs	r3, #1
 800729e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80072a2:	3c01      	subs	r4, #1
 80072a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80072a6:	e770      	b.n	800718a <_dtoa_r+0x112>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e7b3      	b.n	8007214 <_dtoa_r+0x19c>
 80072ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80072ae:	e7b2      	b.n	8007216 <_dtoa_r+0x19e>
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	eba3 0309 	sub.w	r3, r3, r9
 80072b6:	9306      	str	r3, [sp, #24]
 80072b8:	f1c9 0300 	rsb	r3, r9, #0
 80072bc:	930a      	str	r3, [sp, #40]	; 0x28
 80072be:	2300      	movs	r3, #0
 80072c0:	930e      	str	r3, [sp, #56]	; 0x38
 80072c2:	e7bf      	b.n	8007244 <_dtoa_r+0x1cc>
 80072c4:	2300      	movs	r3, #0
 80072c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	dc59      	bgt.n	8007382 <_dtoa_r+0x30a>
 80072ce:	f04f 0b01 	mov.w	fp, #1
 80072d2:	465b      	mov	r3, fp
 80072d4:	f8cd b008 	str.w	fp, [sp, #8]
 80072d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80072dc:	2200      	movs	r2, #0
 80072de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80072e0:	6042      	str	r2, [r0, #4]
 80072e2:	2204      	movs	r2, #4
 80072e4:	f102 0614 	add.w	r6, r2, #20
 80072e8:	429e      	cmp	r6, r3
 80072ea:	6841      	ldr	r1, [r0, #4]
 80072ec:	d94f      	bls.n	800738e <_dtoa_r+0x316>
 80072ee:	4628      	mov	r0, r5
 80072f0:	f001 f94a 	bl	8008588 <_Balloc>
 80072f4:	9008      	str	r0, [sp, #32]
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d14d      	bne.n	8007396 <_dtoa_r+0x31e>
 80072fa:	4602      	mov	r2, r0
 80072fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007300:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <_dtoa_r+0x300>)
 8007302:	e6cd      	b.n	80070a0 <_dtoa_r+0x28>
 8007304:	2301      	movs	r3, #1
 8007306:	e7de      	b.n	80072c6 <_dtoa_r+0x24e>
 8007308:	2300      	movs	r3, #0
 800730a:	930b      	str	r3, [sp, #44]	; 0x2c
 800730c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800730e:	eb09 0b03 	add.w	fp, r9, r3
 8007312:	f10b 0301 	add.w	r3, fp, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	9302      	str	r3, [sp, #8]
 800731a:	bfb8      	it	lt
 800731c:	2301      	movlt	r3, #1
 800731e:	e7dd      	b.n	80072dc <_dtoa_r+0x264>
 8007320:	2301      	movs	r3, #1
 8007322:	e7f2      	b.n	800730a <_dtoa_r+0x292>
 8007324:	2401      	movs	r4, #1
 8007326:	2300      	movs	r3, #0
 8007328:	940b      	str	r4, [sp, #44]	; 0x2c
 800732a:	9322      	str	r3, [sp, #136]	; 0x88
 800732c:	f04f 3bff 	mov.w	fp, #4294967295
 8007330:	2200      	movs	r2, #0
 8007332:	2312      	movs	r3, #18
 8007334:	f8cd b008 	str.w	fp, [sp, #8]
 8007338:	9223      	str	r2, [sp, #140]	; 0x8c
 800733a:	e7cf      	b.n	80072dc <_dtoa_r+0x264>
 800733c:	f3af 8000 	nop.w
 8007340:	636f4361 	.word	0x636f4361
 8007344:	3fd287a7 	.word	0x3fd287a7
 8007348:	8b60c8b3 	.word	0x8b60c8b3
 800734c:	3fc68a28 	.word	0x3fc68a28
 8007350:	509f79fb 	.word	0x509f79fb
 8007354:	3fd34413 	.word	0x3fd34413
 8007358:	08009fb6 	.word	0x08009fb6
 800735c:	08009fcd 	.word	0x08009fcd
 8007360:	7ff00000 	.word	0x7ff00000
 8007364:	08009fb2 	.word	0x08009fb2
 8007368:	08009fa9 	.word	0x08009fa9
 800736c:	08009e2d 	.word	0x08009e2d
 8007370:	3ff80000 	.word	0x3ff80000
 8007374:	0800a1a8 	.word	0x0800a1a8
 8007378:	0800a02c 	.word	0x0800a02c
 800737c:	2301      	movs	r3, #1
 800737e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007380:	e7d4      	b.n	800732c <_dtoa_r+0x2b4>
 8007382:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007386:	465b      	mov	r3, fp
 8007388:	f8cd b008 	str.w	fp, [sp, #8]
 800738c:	e7a6      	b.n	80072dc <_dtoa_r+0x264>
 800738e:	3101      	adds	r1, #1
 8007390:	6041      	str	r1, [r0, #4]
 8007392:	0052      	lsls	r2, r2, #1
 8007394:	e7a6      	b.n	80072e4 <_dtoa_r+0x26c>
 8007396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007398:	9a08      	ldr	r2, [sp, #32]
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	2b0e      	cmp	r3, #14
 80073a0:	f200 80a8 	bhi.w	80074f4 <_dtoa_r+0x47c>
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	f000 80a5 	beq.w	80074f4 <_dtoa_r+0x47c>
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	dd34      	ble.n	800741a <_dtoa_r+0x3a2>
 80073b0:	4a9a      	ldr	r2, [pc, #616]	; (800761c <_dtoa_r+0x5a4>)
 80073b2:	f009 030f 	and.w	r3, r9, #15
 80073b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 80073be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80073ca:	d016      	beq.n	80073fa <_dtoa_r+0x382>
 80073cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073d0:	4b93      	ldr	r3, [pc, #588]	; (8007620 <_dtoa_r+0x5a8>)
 80073d2:	2703      	movs	r7, #3
 80073d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073d8:	f7f9 f9c0 	bl	800075c <__aeabi_ddiv>
 80073dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073e0:	f004 040f 	and.w	r4, r4, #15
 80073e4:	4e8e      	ldr	r6, [pc, #568]	; (8007620 <_dtoa_r+0x5a8>)
 80073e6:	b954      	cbnz	r4, 80073fe <_dtoa_r+0x386>
 80073e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f0:	f7f9 f9b4 	bl	800075c <__aeabi_ddiv>
 80073f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f8:	e029      	b.n	800744e <_dtoa_r+0x3d6>
 80073fa:	2702      	movs	r7, #2
 80073fc:	e7f2      	b.n	80073e4 <_dtoa_r+0x36c>
 80073fe:	07e1      	lsls	r1, r4, #31
 8007400:	d508      	bpl.n	8007414 <_dtoa_r+0x39c>
 8007402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007406:	e9d6 2300 	ldrd	r2, r3, [r6]
 800740a:	f7f9 f87d 	bl	8000508 <__aeabi_dmul>
 800740e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007412:	3701      	adds	r7, #1
 8007414:	1064      	asrs	r4, r4, #1
 8007416:	3608      	adds	r6, #8
 8007418:	e7e5      	b.n	80073e6 <_dtoa_r+0x36e>
 800741a:	f000 80a5 	beq.w	8007568 <_dtoa_r+0x4f0>
 800741e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007422:	f1c9 0400 	rsb	r4, r9, #0
 8007426:	4b7d      	ldr	r3, [pc, #500]	; (800761c <_dtoa_r+0x5a4>)
 8007428:	f004 020f 	and.w	r2, r4, #15
 800742c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	f7f9 f868 	bl	8000508 <__aeabi_dmul>
 8007438:	2702      	movs	r7, #2
 800743a:	2300      	movs	r3, #0
 800743c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007440:	4e77      	ldr	r6, [pc, #476]	; (8007620 <_dtoa_r+0x5a8>)
 8007442:	1124      	asrs	r4, r4, #4
 8007444:	2c00      	cmp	r4, #0
 8007446:	f040 8084 	bne.w	8007552 <_dtoa_r+0x4da>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d2      	bne.n	80073f4 <_dtoa_r+0x37c>
 800744e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 808b 	beq.w	800756c <_dtoa_r+0x4f4>
 8007456:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800745a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800745e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007462:	2200      	movs	r2, #0
 8007464:	4b6f      	ldr	r3, [pc, #444]	; (8007624 <_dtoa_r+0x5ac>)
 8007466:	f7f9 fac1 	bl	80009ec <__aeabi_dcmplt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d07e      	beq.n	800756c <_dtoa_r+0x4f4>
 800746e:	9b02      	ldr	r3, [sp, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d07b      	beq.n	800756c <_dtoa_r+0x4f4>
 8007474:	f1bb 0f00 	cmp.w	fp, #0
 8007478:	dd38      	ble.n	80074ec <_dtoa_r+0x474>
 800747a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800747e:	2200      	movs	r2, #0
 8007480:	4b69      	ldr	r3, [pc, #420]	; (8007628 <_dtoa_r+0x5b0>)
 8007482:	f7f9 f841 	bl	8000508 <__aeabi_dmul>
 8007486:	465c      	mov	r4, fp
 8007488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800748c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007490:	3701      	adds	r7, #1
 8007492:	4638      	mov	r0, r7
 8007494:	f7f8 ffce 	bl	8000434 <__aeabi_i2d>
 8007498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800749c:	f7f9 f834 	bl	8000508 <__aeabi_dmul>
 80074a0:	2200      	movs	r2, #0
 80074a2:	4b62      	ldr	r3, [pc, #392]	; (800762c <_dtoa_r+0x5b4>)
 80074a4:	f7f8 fe7a 	bl	800019c <__adddf3>
 80074a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074b0:	9611      	str	r6, [sp, #68]	; 0x44
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	d15d      	bne.n	8007572 <_dtoa_r+0x4fa>
 80074b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ba:	2200      	movs	r2, #0
 80074bc:	4b5c      	ldr	r3, [pc, #368]	; (8007630 <_dtoa_r+0x5b8>)
 80074be:	f7f8 fe6b 	bl	8000198 <__aeabi_dsub>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074ca:	4633      	mov	r3, r6
 80074cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074ce:	f7f9 faab 	bl	8000a28 <__aeabi_dcmpgt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f040 829e 	bne.w	8007a14 <_dtoa_r+0x99c>
 80074d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074e2:	f7f9 fa83 	bl	80009ec <__aeabi_dcmplt>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f040 8292 	bne.w	8007a10 <_dtoa_r+0x998>
 80074ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80074f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f2c0 8153 	blt.w	80077a2 <_dtoa_r+0x72a>
 80074fc:	f1b9 0f0e 	cmp.w	r9, #14
 8007500:	f300 814f 	bgt.w	80077a2 <_dtoa_r+0x72a>
 8007504:	4b45      	ldr	r3, [pc, #276]	; (800761c <_dtoa_r+0x5a4>)
 8007506:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800750a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800750e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007514:	2b00      	cmp	r3, #0
 8007516:	f280 80db 	bge.w	80076d0 <_dtoa_r+0x658>
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f300 80d7 	bgt.w	80076d0 <_dtoa_r+0x658>
 8007522:	f040 8274 	bne.w	8007a0e <_dtoa_r+0x996>
 8007526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800752a:	2200      	movs	r2, #0
 800752c:	4b40      	ldr	r3, [pc, #256]	; (8007630 <_dtoa_r+0x5b8>)
 800752e:	f7f8 ffeb 	bl	8000508 <__aeabi_dmul>
 8007532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007536:	f7f9 fa6d 	bl	8000a14 <__aeabi_dcmpge>
 800753a:	9c02      	ldr	r4, [sp, #8]
 800753c:	4626      	mov	r6, r4
 800753e:	2800      	cmp	r0, #0
 8007540:	f040 824a 	bne.w	80079d8 <_dtoa_r+0x960>
 8007544:	2331      	movs	r3, #49	; 0x31
 8007546:	9f08      	ldr	r7, [sp, #32]
 8007548:	f109 0901 	add.w	r9, r9, #1
 800754c:	f807 3b01 	strb.w	r3, [r7], #1
 8007550:	e246      	b.n	80079e0 <_dtoa_r+0x968>
 8007552:	07e2      	lsls	r2, r4, #31
 8007554:	d505      	bpl.n	8007562 <_dtoa_r+0x4ea>
 8007556:	e9d6 2300 	ldrd	r2, r3, [r6]
 800755a:	f7f8 ffd5 	bl	8000508 <__aeabi_dmul>
 800755e:	2301      	movs	r3, #1
 8007560:	3701      	adds	r7, #1
 8007562:	1064      	asrs	r4, r4, #1
 8007564:	3608      	adds	r6, #8
 8007566:	e76d      	b.n	8007444 <_dtoa_r+0x3cc>
 8007568:	2702      	movs	r7, #2
 800756a:	e770      	b.n	800744e <_dtoa_r+0x3d6>
 800756c:	46c8      	mov	r8, r9
 800756e:	9c02      	ldr	r4, [sp, #8]
 8007570:	e78f      	b.n	8007492 <_dtoa_r+0x41a>
 8007572:	9908      	ldr	r1, [sp, #32]
 8007574:	4b29      	ldr	r3, [pc, #164]	; (800761c <_dtoa_r+0x5a4>)
 8007576:	4421      	add	r1, r4
 8007578:	9112      	str	r1, [sp, #72]	; 0x48
 800757a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800757c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007580:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007584:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007588:	2900      	cmp	r1, #0
 800758a:	d055      	beq.n	8007638 <_dtoa_r+0x5c0>
 800758c:	2000      	movs	r0, #0
 800758e:	4929      	ldr	r1, [pc, #164]	; (8007634 <_dtoa_r+0x5bc>)
 8007590:	f7f9 f8e4 	bl	800075c <__aeabi_ddiv>
 8007594:	463b      	mov	r3, r7
 8007596:	4632      	mov	r2, r6
 8007598:	f7f8 fdfe 	bl	8000198 <__aeabi_dsub>
 800759c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075a0:	9f08      	ldr	r7, [sp, #32]
 80075a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a6:	f7f9 fa5f 	bl	8000a68 <__aeabi_d2iz>
 80075aa:	4604      	mov	r4, r0
 80075ac:	f7f8 ff42 	bl	8000434 <__aeabi_i2d>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075b8:	f7f8 fdee 	bl	8000198 <__aeabi_dsub>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	3430      	adds	r4, #48	; 0x30
 80075c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075ca:	f807 4b01 	strb.w	r4, [r7], #1
 80075ce:	f7f9 fa0d 	bl	80009ec <__aeabi_dcmplt>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d174      	bne.n	80076c0 <_dtoa_r+0x648>
 80075d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075da:	2000      	movs	r0, #0
 80075dc:	4911      	ldr	r1, [pc, #68]	; (8007624 <_dtoa_r+0x5ac>)
 80075de:	f7f8 fddb 	bl	8000198 <__aeabi_dsub>
 80075e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075e6:	f7f9 fa01 	bl	80009ec <__aeabi_dcmplt>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f040 80b6 	bne.w	800775c <_dtoa_r+0x6e4>
 80075f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075f2:	429f      	cmp	r7, r3
 80075f4:	f43f af7a 	beq.w	80074ec <_dtoa_r+0x474>
 80075f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075fc:	2200      	movs	r2, #0
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <_dtoa_r+0x5b0>)
 8007600:	f7f8 ff82 	bl	8000508 <__aeabi_dmul>
 8007604:	2200      	movs	r2, #0
 8007606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800760a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <_dtoa_r+0x5b0>)
 8007610:	f7f8 ff7a 	bl	8000508 <__aeabi_dmul>
 8007614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007618:	e7c3      	b.n	80075a2 <_dtoa_r+0x52a>
 800761a:	bf00      	nop
 800761c:	0800a1a8 	.word	0x0800a1a8
 8007620:	0800a180 	.word	0x0800a180
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	40240000 	.word	0x40240000
 800762c:	401c0000 	.word	0x401c0000
 8007630:	40140000 	.word	0x40140000
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	4630      	mov	r0, r6
 800763a:	4639      	mov	r1, r7
 800763c:	f7f8 ff64 	bl	8000508 <__aeabi_dmul>
 8007640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007642:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007646:	9c08      	ldr	r4, [sp, #32]
 8007648:	9314      	str	r3, [sp, #80]	; 0x50
 800764a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764e:	f7f9 fa0b 	bl	8000a68 <__aeabi_d2iz>
 8007652:	9015      	str	r0, [sp, #84]	; 0x54
 8007654:	f7f8 feee 	bl	8000434 <__aeabi_i2d>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007660:	f7f8 fd9a 	bl	8000198 <__aeabi_dsub>
 8007664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007666:	4606      	mov	r6, r0
 8007668:	3330      	adds	r3, #48	; 0x30
 800766a:	f804 3b01 	strb.w	r3, [r4], #1
 800766e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007670:	460f      	mov	r7, r1
 8007672:	429c      	cmp	r4, r3
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	d124      	bne.n	80076c4 <_dtoa_r+0x64c>
 800767a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800767e:	4bb3      	ldr	r3, [pc, #716]	; (800794c <_dtoa_r+0x8d4>)
 8007680:	f7f8 fd8c 	bl	800019c <__adddf3>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	f7f9 f9cc 	bl	8000a28 <__aeabi_dcmpgt>
 8007690:	2800      	cmp	r0, #0
 8007692:	d162      	bne.n	800775a <_dtoa_r+0x6e2>
 8007694:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007698:	2000      	movs	r0, #0
 800769a:	49ac      	ldr	r1, [pc, #688]	; (800794c <_dtoa_r+0x8d4>)
 800769c:	f7f8 fd7c 	bl	8000198 <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	f7f9 f9a0 	bl	80009ec <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f43f af1d 	beq.w	80074ec <_dtoa_r+0x474>
 80076b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076b4:	1e7b      	subs	r3, r7, #1
 80076b6:	9314      	str	r3, [sp, #80]	; 0x50
 80076b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d0f8      	beq.n	80076b2 <_dtoa_r+0x63a>
 80076c0:	46c1      	mov	r9, r8
 80076c2:	e03a      	b.n	800773a <_dtoa_r+0x6c2>
 80076c4:	4ba2      	ldr	r3, [pc, #648]	; (8007950 <_dtoa_r+0x8d8>)
 80076c6:	f7f8 ff1f 	bl	8000508 <__aeabi_dmul>
 80076ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076ce:	e7bc      	b.n	800764a <_dtoa_r+0x5d2>
 80076d0:	9f08      	ldr	r7, [sp, #32]
 80076d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076da:	f7f9 f83f 	bl	800075c <__aeabi_ddiv>
 80076de:	f7f9 f9c3 	bl	8000a68 <__aeabi_d2iz>
 80076e2:	4604      	mov	r4, r0
 80076e4:	f7f8 fea6 	bl	8000434 <__aeabi_i2d>
 80076e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ec:	f7f8 ff0c 	bl	8000508 <__aeabi_dmul>
 80076f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80076f4:	460b      	mov	r3, r1
 80076f6:	4602      	mov	r2, r0
 80076f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fc:	f7f8 fd4c 	bl	8000198 <__aeabi_dsub>
 8007700:	f807 6b01 	strb.w	r6, [r7], #1
 8007704:	9e08      	ldr	r6, [sp, #32]
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	1bbe      	subs	r6, r7, r6
 800770a:	42b3      	cmp	r3, r6
 800770c:	d13a      	bne.n	8007784 <_dtoa_r+0x70c>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	f7f8 fd43 	bl	800019c <__adddf3>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800771e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007722:	f7f9 f981 	bl	8000a28 <__aeabi_dcmpgt>
 8007726:	bb58      	cbnz	r0, 8007780 <_dtoa_r+0x708>
 8007728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800772c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007730:	f7f9 f952 	bl	80009d8 <__aeabi_dcmpeq>
 8007734:	b108      	cbz	r0, 800773a <_dtoa_r+0x6c2>
 8007736:	07e1      	lsls	r1, r4, #31
 8007738:	d422      	bmi.n	8007780 <_dtoa_r+0x708>
 800773a:	4628      	mov	r0, r5
 800773c:	4651      	mov	r1, sl
 800773e:	f000 ff63 	bl	8008608 <_Bfree>
 8007742:	2300      	movs	r3, #0
 8007744:	703b      	strb	r3, [r7, #0]
 8007746:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007748:	f109 0001 	add.w	r0, r9, #1
 800774c:	6018      	str	r0, [r3, #0]
 800774e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007750:	2b00      	cmp	r3, #0
 8007752:	f43f acdf 	beq.w	8007114 <_dtoa_r+0x9c>
 8007756:	601f      	str	r7, [r3, #0]
 8007758:	e4dc      	b.n	8007114 <_dtoa_r+0x9c>
 800775a:	4627      	mov	r7, r4
 800775c:	463b      	mov	r3, r7
 800775e:	461f      	mov	r7, r3
 8007760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007764:	2a39      	cmp	r2, #57	; 0x39
 8007766:	d107      	bne.n	8007778 <_dtoa_r+0x700>
 8007768:	9a08      	ldr	r2, [sp, #32]
 800776a:	429a      	cmp	r2, r3
 800776c:	d1f7      	bne.n	800775e <_dtoa_r+0x6e6>
 800776e:	2230      	movs	r2, #48	; 0x30
 8007770:	9908      	ldr	r1, [sp, #32]
 8007772:	f108 0801 	add.w	r8, r8, #1
 8007776:	700a      	strb	r2, [r1, #0]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	3201      	adds	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e79f      	b.n	80076c0 <_dtoa_r+0x648>
 8007780:	46c8      	mov	r8, r9
 8007782:	e7eb      	b.n	800775c <_dtoa_r+0x6e4>
 8007784:	2200      	movs	r2, #0
 8007786:	4b72      	ldr	r3, [pc, #456]	; (8007950 <_dtoa_r+0x8d8>)
 8007788:	f7f8 febe 	bl	8000508 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	f7f9 f91e 	bl	80009d8 <__aeabi_dcmpeq>
 800779c:	2800      	cmp	r0, #0
 800779e:	d098      	beq.n	80076d2 <_dtoa_r+0x65a>
 80077a0:	e7cb      	b.n	800773a <_dtoa_r+0x6c2>
 80077a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	f000 80cd 	beq.w	8007944 <_dtoa_r+0x8cc>
 80077aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077ac:	2a01      	cmp	r2, #1
 80077ae:	f300 80af 	bgt.w	8007910 <_dtoa_r+0x898>
 80077b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	f000 80a7 	beq.w	8007908 <_dtoa_r+0x890>
 80077ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077c0:	9f06      	ldr	r7, [sp, #24]
 80077c2:	9a06      	ldr	r2, [sp, #24]
 80077c4:	2101      	movs	r1, #1
 80077c6:	441a      	add	r2, r3
 80077c8:	9206      	str	r2, [sp, #24]
 80077ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077cc:	4628      	mov	r0, r5
 80077ce:	441a      	add	r2, r3
 80077d0:	9209      	str	r2, [sp, #36]	; 0x24
 80077d2:	f001 f81d 	bl	8008810 <__i2b>
 80077d6:	4606      	mov	r6, r0
 80077d8:	2f00      	cmp	r7, #0
 80077da:	dd0c      	ble.n	80077f6 <_dtoa_r+0x77e>
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd09      	ble.n	80077f6 <_dtoa_r+0x77e>
 80077e2:	42bb      	cmp	r3, r7
 80077e4:	bfa8      	it	ge
 80077e6:	463b      	movge	r3, r7
 80077e8:	9a06      	ldr	r2, [sp, #24]
 80077ea:	1aff      	subs	r7, r7, r3
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	9206      	str	r2, [sp, #24]
 80077f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
 80077f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f8:	b1f3      	cbz	r3, 8007838 <_dtoa_r+0x7c0>
 80077fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a9 	beq.w	8007954 <_dtoa_r+0x8dc>
 8007802:	2c00      	cmp	r4, #0
 8007804:	dd10      	ble.n	8007828 <_dtoa_r+0x7b0>
 8007806:	4631      	mov	r1, r6
 8007808:	4622      	mov	r2, r4
 800780a:	4628      	mov	r0, r5
 800780c:	f001 f8ba 	bl	8008984 <__pow5mult>
 8007810:	4652      	mov	r2, sl
 8007812:	4601      	mov	r1, r0
 8007814:	4606      	mov	r6, r0
 8007816:	4628      	mov	r0, r5
 8007818:	f001 f810 	bl	800883c <__multiply>
 800781c:	4680      	mov	r8, r0
 800781e:	4651      	mov	r1, sl
 8007820:	4628      	mov	r0, r5
 8007822:	f000 fef1 	bl	8008608 <_Bfree>
 8007826:	46c2      	mov	sl, r8
 8007828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782a:	1b1a      	subs	r2, r3, r4
 800782c:	d004      	beq.n	8007838 <_dtoa_r+0x7c0>
 800782e:	4651      	mov	r1, sl
 8007830:	4628      	mov	r0, r5
 8007832:	f001 f8a7 	bl	8008984 <__pow5mult>
 8007836:	4682      	mov	sl, r0
 8007838:	2101      	movs	r1, #1
 800783a:	4628      	mov	r0, r5
 800783c:	f000 ffe8 	bl	8008810 <__i2b>
 8007840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007842:	4604      	mov	r4, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	f340 8087 	ble.w	8007958 <_dtoa_r+0x8e0>
 800784a:	461a      	mov	r2, r3
 800784c:	4601      	mov	r1, r0
 800784e:	4628      	mov	r0, r5
 8007850:	f001 f898 	bl	8008984 <__pow5mult>
 8007854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007856:	4604      	mov	r4, r0
 8007858:	2b01      	cmp	r3, #1
 800785a:	f340 8080 	ble.w	800795e <_dtoa_r+0x8e6>
 800785e:	f04f 0800 	mov.w	r8, #0
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007868:	6918      	ldr	r0, [r3, #16]
 800786a:	f000 ff83 	bl	8008774 <__hi0bits>
 800786e:	f1c0 0020 	rsb	r0, r0, #32
 8007872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007874:	4418      	add	r0, r3
 8007876:	f010 001f 	ands.w	r0, r0, #31
 800787a:	f000 8092 	beq.w	80079a2 <_dtoa_r+0x92a>
 800787e:	f1c0 0320 	rsb	r3, r0, #32
 8007882:	2b04      	cmp	r3, #4
 8007884:	f340 808a 	ble.w	800799c <_dtoa_r+0x924>
 8007888:	f1c0 001c 	rsb	r0, r0, #28
 800788c:	9b06      	ldr	r3, [sp, #24]
 800788e:	4407      	add	r7, r0
 8007890:	4403      	add	r3, r0
 8007892:	9306      	str	r3, [sp, #24]
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	4403      	add	r3, r0
 8007898:	9309      	str	r3, [sp, #36]	; 0x24
 800789a:	9b06      	ldr	r3, [sp, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	dd05      	ble.n	80078ac <_dtoa_r+0x834>
 80078a0:	4651      	mov	r1, sl
 80078a2:	461a      	mov	r2, r3
 80078a4:	4628      	mov	r0, r5
 80078a6:	f001 f8c7 	bl	8008a38 <__lshift>
 80078aa:	4682      	mov	sl, r0
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dd05      	ble.n	80078be <_dtoa_r+0x846>
 80078b2:	4621      	mov	r1, r4
 80078b4:	461a      	mov	r2, r3
 80078b6:	4628      	mov	r0, r5
 80078b8:	f001 f8be 	bl	8008a38 <__lshift>
 80078bc:	4604      	mov	r4, r0
 80078be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d070      	beq.n	80079a6 <_dtoa_r+0x92e>
 80078c4:	4621      	mov	r1, r4
 80078c6:	4650      	mov	r0, sl
 80078c8:	f001 f922 	bl	8008b10 <__mcmp>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	da6a      	bge.n	80079a6 <_dtoa_r+0x92e>
 80078d0:	2300      	movs	r3, #0
 80078d2:	4651      	mov	r1, sl
 80078d4:	220a      	movs	r2, #10
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 feb8 	bl	800864c <__multadd>
 80078dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078de:	4682      	mov	sl, r0
 80078e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8193 	beq.w	8007c10 <_dtoa_r+0xb98>
 80078ea:	4631      	mov	r1, r6
 80078ec:	2300      	movs	r3, #0
 80078ee:	220a      	movs	r2, #10
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 feab 	bl	800864c <__multadd>
 80078f6:	f1bb 0f00 	cmp.w	fp, #0
 80078fa:	4606      	mov	r6, r0
 80078fc:	f300 8093 	bgt.w	8007a26 <_dtoa_r+0x9ae>
 8007900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007902:	2b02      	cmp	r3, #2
 8007904:	dc57      	bgt.n	80079b6 <_dtoa_r+0x93e>
 8007906:	e08e      	b.n	8007a26 <_dtoa_r+0x9ae>
 8007908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800790a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800790e:	e756      	b.n	80077be <_dtoa_r+0x746>
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	1e5c      	subs	r4, r3, #1
 8007914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007916:	42a3      	cmp	r3, r4
 8007918:	bfb7      	itett	lt
 800791a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800791c:	1b1c      	subge	r4, r3, r4
 800791e:	1ae2      	sublt	r2, r4, r3
 8007920:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007922:	bfbe      	ittt	lt
 8007924:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007926:	189b      	addlt	r3, r3, r2
 8007928:	930e      	strlt	r3, [sp, #56]	; 0x38
 800792a:	9b02      	ldr	r3, [sp, #8]
 800792c:	bfb8      	it	lt
 800792e:	2400      	movlt	r4, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfbb      	ittet	lt
 8007934:	9b06      	ldrlt	r3, [sp, #24]
 8007936:	9a02      	ldrlt	r2, [sp, #8]
 8007938:	9f06      	ldrge	r7, [sp, #24]
 800793a:	1a9f      	sublt	r7, r3, r2
 800793c:	bfac      	ite	ge
 800793e:	9b02      	ldrge	r3, [sp, #8]
 8007940:	2300      	movlt	r3, #0
 8007942:	e73e      	b.n	80077c2 <_dtoa_r+0x74a>
 8007944:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007946:	9f06      	ldr	r7, [sp, #24]
 8007948:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800794a:	e745      	b.n	80077d8 <_dtoa_r+0x760>
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	40240000 	.word	0x40240000
 8007954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007956:	e76a      	b.n	800782e <_dtoa_r+0x7b6>
 8007958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795a:	2b01      	cmp	r3, #1
 800795c:	dc19      	bgt.n	8007992 <_dtoa_r+0x91a>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	b9bb      	cbnz	r3, 8007992 <_dtoa_r+0x91a>
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007968:	b99b      	cbnz	r3, 8007992 <_dtoa_r+0x91a>
 800796a:	9b05      	ldr	r3, [sp, #20]
 800796c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007970:	0d1b      	lsrs	r3, r3, #20
 8007972:	051b      	lsls	r3, r3, #20
 8007974:	b183      	cbz	r3, 8007998 <_dtoa_r+0x920>
 8007976:	f04f 0801 	mov.w	r8, #1
 800797a:	9b06      	ldr	r3, [sp, #24]
 800797c:	3301      	adds	r3, #1
 800797e:	9306      	str	r3, [sp, #24]
 8007980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007982:	3301      	adds	r3, #1
 8007984:	9309      	str	r3, [sp, #36]	; 0x24
 8007986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f af6a 	bne.w	8007862 <_dtoa_r+0x7ea>
 800798e:	2001      	movs	r0, #1
 8007990:	e76f      	b.n	8007872 <_dtoa_r+0x7fa>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	e7f6      	b.n	8007986 <_dtoa_r+0x90e>
 8007998:	4698      	mov	r8, r3
 800799a:	e7f4      	b.n	8007986 <_dtoa_r+0x90e>
 800799c:	f43f af7d 	beq.w	800789a <_dtoa_r+0x822>
 80079a0:	4618      	mov	r0, r3
 80079a2:	301c      	adds	r0, #28
 80079a4:	e772      	b.n	800788c <_dtoa_r+0x814>
 80079a6:	9b02      	ldr	r3, [sp, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc36      	bgt.n	8007a1a <_dtoa_r+0x9a2>
 80079ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	dd33      	ble.n	8007a1a <_dtoa_r+0x9a2>
 80079b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80079b6:	f1bb 0f00 	cmp.w	fp, #0
 80079ba:	d10d      	bne.n	80079d8 <_dtoa_r+0x960>
 80079bc:	4621      	mov	r1, r4
 80079be:	465b      	mov	r3, fp
 80079c0:	2205      	movs	r2, #5
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 fe42 	bl	800864c <__multadd>
 80079c8:	4601      	mov	r1, r0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4650      	mov	r0, sl
 80079ce:	f001 f89f 	bl	8008b10 <__mcmp>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	f73f adb6 	bgt.w	8007544 <_dtoa_r+0x4cc>
 80079d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079da:	9f08      	ldr	r7, [sp, #32]
 80079dc:	ea6f 0903 	mvn.w	r9, r3
 80079e0:	f04f 0800 	mov.w	r8, #0
 80079e4:	4621      	mov	r1, r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 fe0e 	bl	8008608 <_Bfree>
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	f43f aea4 	beq.w	800773a <_dtoa_r+0x6c2>
 80079f2:	f1b8 0f00 	cmp.w	r8, #0
 80079f6:	d005      	beq.n	8007a04 <_dtoa_r+0x98c>
 80079f8:	45b0      	cmp	r8, r6
 80079fa:	d003      	beq.n	8007a04 <_dtoa_r+0x98c>
 80079fc:	4641      	mov	r1, r8
 80079fe:	4628      	mov	r0, r5
 8007a00:	f000 fe02 	bl	8008608 <_Bfree>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fdfe 	bl	8008608 <_Bfree>
 8007a0c:	e695      	b.n	800773a <_dtoa_r+0x6c2>
 8007a0e:	2400      	movs	r4, #0
 8007a10:	4626      	mov	r6, r4
 8007a12:	e7e1      	b.n	80079d8 <_dtoa_r+0x960>
 8007a14:	46c1      	mov	r9, r8
 8007a16:	4626      	mov	r6, r4
 8007a18:	e594      	b.n	8007544 <_dtoa_r+0x4cc>
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80fc 	beq.w	8007c1e <_dtoa_r+0xba6>
 8007a26:	2f00      	cmp	r7, #0
 8007a28:	dd05      	ble.n	8007a36 <_dtoa_r+0x9be>
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f001 f802 	bl	8008a38 <__lshift>
 8007a34:	4606      	mov	r6, r0
 8007a36:	f1b8 0f00 	cmp.w	r8, #0
 8007a3a:	d05c      	beq.n	8007af6 <_dtoa_r+0xa7e>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	6871      	ldr	r1, [r6, #4]
 8007a40:	f000 fda2 	bl	8008588 <_Balloc>
 8007a44:	4607      	mov	r7, r0
 8007a46:	b928      	cbnz	r0, 8007a54 <_dtoa_r+0x9dc>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a4e:	4b7e      	ldr	r3, [pc, #504]	; (8007c48 <_dtoa_r+0xbd0>)
 8007a50:	f7ff bb26 	b.w	80070a0 <_dtoa_r+0x28>
 8007a54:	6932      	ldr	r2, [r6, #16]
 8007a56:	f106 010c 	add.w	r1, r6, #12
 8007a5a:	3202      	adds	r2, #2
 8007a5c:	0092      	lsls	r2, r2, #2
 8007a5e:	300c      	adds	r0, #12
 8007a60:	f000 fd84 	bl	800856c <memcpy>
 8007a64:	2201      	movs	r2, #1
 8007a66:	4639      	mov	r1, r7
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 ffe5 	bl	8008a38 <__lshift>
 8007a6e:	46b0      	mov	r8, r6
 8007a70:	4606      	mov	r6, r0
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	3301      	adds	r3, #1
 8007a76:	9302      	str	r3, [sp, #8]
 8007a78:	9b08      	ldr	r3, [sp, #32]
 8007a7a:	445b      	add	r3, fp
 8007a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	9309      	str	r3, [sp, #36]	; 0x24
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a90:	f7ff fa64 	bl	8006f5c <quorem>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4641      	mov	r1, r8
 8007a98:	3330      	adds	r3, #48	; 0x30
 8007a9a:	9004      	str	r0, [sp, #16]
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa0:	f001 f836 	bl	8008b10 <__mcmp>
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	9006      	str	r0, [sp, #24]
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f001 f84c 	bl	8008b48 <__mdiff>
 8007ab0:	68c2      	ldr	r2, [r0, #12]
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ab6:	bb02      	cbnz	r2, 8007afa <_dtoa_r+0xa82>
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4650      	mov	r0, sl
 8007abc:	f001 f828 	bl	8008b10 <__mcmp>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007acc:	f000 fd9c 	bl	8008608 <_Bfree>
 8007ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad4:	9f02      	ldr	r7, [sp, #8]
 8007ad6:	ea43 0102 	orr.w	r1, r3, r2
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	430b      	orrs	r3, r1
 8007ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae0:	d10d      	bne.n	8007afe <_dtoa_r+0xa86>
 8007ae2:	2b39      	cmp	r3, #57	; 0x39
 8007ae4:	d027      	beq.n	8007b36 <_dtoa_r+0xabe>
 8007ae6:	9a06      	ldr	r2, [sp, #24]
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	dd01      	ble.n	8007af0 <_dtoa_r+0xa78>
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	3331      	adds	r3, #49	; 0x31
 8007af0:	f88b 3000 	strb.w	r3, [fp]
 8007af4:	e776      	b.n	80079e4 <_dtoa_r+0x96c>
 8007af6:	4630      	mov	r0, r6
 8007af8:	e7b9      	b.n	8007a6e <_dtoa_r+0x9f6>
 8007afa:	2201      	movs	r2, #1
 8007afc:	e7e2      	b.n	8007ac4 <_dtoa_r+0xa4c>
 8007afe:	9906      	ldr	r1, [sp, #24]
 8007b00:	2900      	cmp	r1, #0
 8007b02:	db04      	blt.n	8007b0e <_dtoa_r+0xa96>
 8007b04:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007b06:	4301      	orrs	r1, r0
 8007b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b0a:	4301      	orrs	r1, r0
 8007b0c:	d120      	bne.n	8007b50 <_dtoa_r+0xad8>
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	ddee      	ble.n	8007af0 <_dtoa_r+0xa78>
 8007b12:	4651      	mov	r1, sl
 8007b14:	2201      	movs	r2, #1
 8007b16:	4628      	mov	r0, r5
 8007b18:	9302      	str	r3, [sp, #8]
 8007b1a:	f000 ff8d 	bl	8008a38 <__lshift>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4682      	mov	sl, r0
 8007b22:	f000 fff5 	bl	8008b10 <__mcmp>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	dc02      	bgt.n	8007b32 <_dtoa_r+0xaba>
 8007b2c:	d1e0      	bne.n	8007af0 <_dtoa_r+0xa78>
 8007b2e:	07da      	lsls	r2, r3, #31
 8007b30:	d5de      	bpl.n	8007af0 <_dtoa_r+0xa78>
 8007b32:	2b39      	cmp	r3, #57	; 0x39
 8007b34:	d1da      	bne.n	8007aec <_dtoa_r+0xa74>
 8007b36:	2339      	movs	r3, #57	; 0x39
 8007b38:	f88b 3000 	strb.w	r3, [fp]
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	461f      	mov	r7, r3
 8007b40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	2a39      	cmp	r2, #57	; 0x39
 8007b48:	d050      	beq.n	8007bec <_dtoa_r+0xb74>
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e749      	b.n	80079e4 <_dtoa_r+0x96c>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	dd03      	ble.n	8007b5c <_dtoa_r+0xae4>
 8007b54:	2b39      	cmp	r3, #57	; 0x39
 8007b56:	d0ee      	beq.n	8007b36 <_dtoa_r+0xabe>
 8007b58:	3301      	adds	r3, #1
 8007b5a:	e7c9      	b.n	8007af0 <_dtoa_r+0xa78>
 8007b5c:	9a02      	ldr	r2, [sp, #8]
 8007b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b64:	428a      	cmp	r2, r1
 8007b66:	d02a      	beq.n	8007bbe <_dtoa_r+0xb46>
 8007b68:	4651      	mov	r1, sl
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 fd6c 	bl	800864c <__multadd>
 8007b74:	45b0      	cmp	r8, r6
 8007b76:	4682      	mov	sl, r0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	f04f 020a 	mov.w	r2, #10
 8007b80:	4641      	mov	r1, r8
 8007b82:	4628      	mov	r0, r5
 8007b84:	d107      	bne.n	8007b96 <_dtoa_r+0xb1e>
 8007b86:	f000 fd61 	bl	800864c <__multadd>
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	9b02      	ldr	r3, [sp, #8]
 8007b90:	3301      	adds	r3, #1
 8007b92:	9302      	str	r3, [sp, #8]
 8007b94:	e777      	b.n	8007a86 <_dtoa_r+0xa0e>
 8007b96:	f000 fd59 	bl	800864c <__multadd>
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 fd52 	bl	800864c <__multadd>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	e7f0      	b.n	8007b8e <_dtoa_r+0xb16>
 8007bac:	f1bb 0f00 	cmp.w	fp, #0
 8007bb0:	bfcc      	ite	gt
 8007bb2:	465f      	movgt	r7, fp
 8007bb4:	2701      	movle	r7, #1
 8007bb6:	f04f 0800 	mov.w	r8, #0
 8007bba:	9a08      	ldr	r2, [sp, #32]
 8007bbc:	4417      	add	r7, r2
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	9302      	str	r3, [sp, #8]
 8007bc6:	f000 ff37 	bl	8008a38 <__lshift>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4682      	mov	sl, r0
 8007bce:	f000 ff9f 	bl	8008b10 <__mcmp>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	dcb2      	bgt.n	8007b3c <_dtoa_r+0xac4>
 8007bd6:	d102      	bne.n	8007bde <_dtoa_r+0xb66>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	07db      	lsls	r3, r3, #31
 8007bdc:	d4ae      	bmi.n	8007b3c <_dtoa_r+0xac4>
 8007bde:	463b      	mov	r3, r7
 8007be0:	461f      	mov	r7, r3
 8007be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007be6:	2a30      	cmp	r2, #48	; 0x30
 8007be8:	d0fa      	beq.n	8007be0 <_dtoa_r+0xb68>
 8007bea:	e6fb      	b.n	80079e4 <_dtoa_r+0x96c>
 8007bec:	9a08      	ldr	r2, [sp, #32]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d1a5      	bne.n	8007b3e <_dtoa_r+0xac6>
 8007bf2:	2331      	movs	r3, #49	; 0x31
 8007bf4:	f109 0901 	add.w	r9, r9, #1
 8007bf8:	7013      	strb	r3, [r2, #0]
 8007bfa:	e6f3      	b.n	80079e4 <_dtoa_r+0x96c>
 8007bfc:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <_dtoa_r+0xbd4>)
 8007bfe:	f7ff baa7 	b.w	8007150 <_dtoa_r+0xd8>
 8007c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f aa80 	bne.w	800710a <_dtoa_r+0x92>
 8007c0a:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <_dtoa_r+0xbd8>)
 8007c0c:	f7ff baa0 	b.w	8007150 <_dtoa_r+0xd8>
 8007c10:	f1bb 0f00 	cmp.w	fp, #0
 8007c14:	dc03      	bgt.n	8007c1e <_dtoa_r+0xba6>
 8007c16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	f73f aecc 	bgt.w	80079b6 <_dtoa_r+0x93e>
 8007c1e:	9f08      	ldr	r7, [sp, #32]
 8007c20:	4621      	mov	r1, r4
 8007c22:	4650      	mov	r0, sl
 8007c24:	f7ff f99a 	bl	8006f5c <quorem>
 8007c28:	9a08      	ldr	r2, [sp, #32]
 8007c2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c2e:	f807 3b01 	strb.w	r3, [r7], #1
 8007c32:	1aba      	subs	r2, r7, r2
 8007c34:	4593      	cmp	fp, r2
 8007c36:	ddb9      	ble.n	8007bac <_dtoa_r+0xb34>
 8007c38:	4651      	mov	r1, sl
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fd04 	bl	800864c <__multadd>
 8007c44:	4682      	mov	sl, r0
 8007c46:	e7eb      	b.n	8007c20 <_dtoa_r+0xba8>
 8007c48:	0800a02c 	.word	0x0800a02c
 8007c4c:	08009e2c 	.word	0x08009e2c
 8007c50:	08009fa9 	.word	0x08009fa9

08007c54 <std>:
 8007c54:	2300      	movs	r3, #0
 8007c56:	b510      	push	{r4, lr}
 8007c58:	4604      	mov	r4, r0
 8007c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c62:	6083      	str	r3, [r0, #8]
 8007c64:	8181      	strh	r1, [r0, #12]
 8007c66:	6643      	str	r3, [r0, #100]	; 0x64
 8007c68:	81c2      	strh	r2, [r0, #14]
 8007c6a:	6183      	str	r3, [r0, #24]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	2208      	movs	r2, #8
 8007c70:	305c      	adds	r0, #92	; 0x5c
 8007c72:	f7fd fc19 	bl	80054a8 <memset>
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <std+0x38>)
 8007c78:	6224      	str	r4, [r4, #32]
 8007c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <std+0x3c>)
 8007c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c80:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <std+0x40>)
 8007c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c84:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <std+0x44>)
 8007c86:	6323      	str	r3, [r4, #48]	; 0x30
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	080095f5 	.word	0x080095f5
 8007c90:	08009617 	.word	0x08009617
 8007c94:	0800964f 	.word	0x0800964f
 8007c98:	08009673 	.word	0x08009673

08007c9c <_cleanup_r>:
 8007c9c:	4901      	ldr	r1, [pc, #4]	; (8007ca4 <_cleanup_r+0x8>)
 8007c9e:	f000 b8af 	b.w	8007e00 <_fwalk_reent>
 8007ca2:	bf00      	nop
 8007ca4:	080099c9 	.word	0x080099c9

08007ca8 <__sfmoreglue>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	2568      	movs	r5, #104	; 0x68
 8007cac:	1e4a      	subs	r2, r1, #1
 8007cae:	4355      	muls	r5, r2
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cb6:	f001 f979 	bl	8008fac <_malloc_r>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	b140      	cbz	r0, 8007cd0 <__sfmoreglue+0x28>
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	60a0      	str	r0, [r4, #8]
 8007cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ccc:	f7fd fbec 	bl	80054a8 <memset>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 bc1e 	b.w	8008516 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	2000038c 	.word	0x2000038c

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 bc19 	b.w	8008518 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	2000038c 	.word	0x2000038c

08007cec <__sinit_lock_acquire>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__sinit_lock_acquire+0x8>)
 8007cee:	f000 bc12 	b.w	8008516 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	20000387 	.word	0x20000387

08007cf8 <__sinit_lock_release>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__sinit_lock_release+0x8>)
 8007cfa:	f000 bc0d 	b.w	8008518 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	20000387 	.word	0x20000387

08007d04 <__sinit>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7ff fff0 	bl	8007cec <__sinit_lock_acquire>
 8007d0c:	69a3      	ldr	r3, [r4, #24]
 8007d0e:	b11b      	cbz	r3, 8007d18 <__sinit+0x14>
 8007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d14:	f7ff bff0 	b.w	8007cf8 <__sinit_lock_release>
 8007d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d1e:	4b13      	ldr	r3, [pc, #76]	; (8007d6c <__sinit+0x68>)
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <__sinit+0x6c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	bf08      	it	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bf08      	it	eq
 8007d30:	61a3      	streq	r3, [r4, #24]
 8007d32:	f000 f81f 	bl	8007d74 <__sfp>
 8007d36:	6060      	str	r0, [r4, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 f81b 	bl	8007d74 <__sfp>
 8007d3e:	60a0      	str	r0, [r4, #8]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 f817 	bl	8007d74 <__sfp>
 8007d46:	2200      	movs	r2, #0
 8007d48:	2104      	movs	r1, #4
 8007d4a:	60e0      	str	r0, [r4, #12]
 8007d4c:	6860      	ldr	r0, [r4, #4]
 8007d4e:	f7ff ff81 	bl	8007c54 <std>
 8007d52:	2201      	movs	r2, #1
 8007d54:	2109      	movs	r1, #9
 8007d56:	68a0      	ldr	r0, [r4, #8]
 8007d58:	f7ff ff7c 	bl	8007c54 <std>
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	2112      	movs	r1, #18
 8007d60:	68e0      	ldr	r0, [r4, #12]
 8007d62:	f7ff ff77 	bl	8007c54 <std>
 8007d66:	2301      	movs	r3, #1
 8007d68:	61a3      	str	r3, [r4, #24]
 8007d6a:	e7d1      	b.n	8007d10 <__sinit+0xc>
 8007d6c:	08009e18 	.word	0x08009e18
 8007d70:	08007c9d 	.word	0x08007c9d

08007d74 <__sfp>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	4607      	mov	r7, r0
 8007d78:	f7ff ffac 	bl	8007cd4 <__sfp_lock_acquire>
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <__sfp+0x84>)
 8007d7e:	681e      	ldr	r6, [r3, #0]
 8007d80:	69b3      	ldr	r3, [r6, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__sfp+0x16>
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff ffbd 	bl	8007d04 <__sinit>
 8007d8a:	3648      	adds	r6, #72	; 0x48
 8007d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	d503      	bpl.n	8007d9c <__sfp+0x28>
 8007d94:	6833      	ldr	r3, [r6, #0]
 8007d96:	b30b      	cbz	r3, 8007ddc <__sfp+0x68>
 8007d98:	6836      	ldr	r6, [r6, #0]
 8007d9a:	e7f7      	b.n	8007d8c <__sfp+0x18>
 8007d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007da0:	b9d5      	cbnz	r5, 8007dd8 <__sfp+0x64>
 8007da2:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <__sfp+0x88>)
 8007da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007da8:	60e3      	str	r3, [r4, #12]
 8007daa:	6665      	str	r5, [r4, #100]	; 0x64
 8007dac:	f000 fbb2 	bl	8008514 <__retarget_lock_init_recursive>
 8007db0:	f7ff ff96 	bl	8007ce0 <__sfp_lock_release>
 8007db4:	2208      	movs	r2, #8
 8007db6:	4629      	mov	r1, r5
 8007db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	61a5      	str	r5, [r4, #24]
 8007dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dc8:	f7fd fb6e 	bl	80054a8 <memset>
 8007dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd8:	3468      	adds	r4, #104	; 0x68
 8007dda:	e7d9      	b.n	8007d90 <__sfp+0x1c>
 8007ddc:	2104      	movs	r1, #4
 8007dde:	4638      	mov	r0, r7
 8007de0:	f7ff ff62 	bl	8007ca8 <__sfmoreglue>
 8007de4:	4604      	mov	r4, r0
 8007de6:	6030      	str	r0, [r6, #0]
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1d5      	bne.n	8007d98 <__sfp+0x24>
 8007dec:	f7ff ff78 	bl	8007ce0 <__sfp_lock_release>
 8007df0:	230c      	movs	r3, #12
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	e7ee      	b.n	8007dd4 <__sfp+0x60>
 8007df6:	bf00      	nop
 8007df8:	08009e18 	.word	0x08009e18
 8007dfc:	ffff0001 	.word	0xffff0001

08007e00 <_fwalk_reent>:
 8007e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	4606      	mov	r6, r0
 8007e06:	4688      	mov	r8, r1
 8007e08:	2700      	movs	r7, #0
 8007e0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e12:	f1b9 0901 	subs.w	r9, r9, #1
 8007e16:	d505      	bpl.n	8007e24 <_fwalk_reent+0x24>
 8007e18:	6824      	ldr	r4, [r4, #0]
 8007e1a:	2c00      	cmp	r4, #0
 8007e1c:	d1f7      	bne.n	8007e0e <_fwalk_reent+0xe>
 8007e1e:	4638      	mov	r0, r7
 8007e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e24:	89ab      	ldrh	r3, [r5, #12]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d907      	bls.n	8007e3a <_fwalk_reent+0x3a>
 8007e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	d003      	beq.n	8007e3a <_fwalk_reent+0x3a>
 8007e32:	4629      	mov	r1, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	47c0      	blx	r8
 8007e38:	4307      	orrs	r7, r0
 8007e3a:	3568      	adds	r5, #104	; 0x68
 8007e3c:	e7e9      	b.n	8007e12 <_fwalk_reent+0x12>

08007e3e <rshift>:
 8007e3e:	6903      	ldr	r3, [r0, #16]
 8007e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e44:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e48:	f100 0414 	add.w	r4, r0, #20
 8007e4c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e50:	dd46      	ble.n	8007ee0 <rshift+0xa2>
 8007e52:	f011 011f 	ands.w	r1, r1, #31
 8007e56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e5e:	d10c      	bne.n	8007e7a <rshift+0x3c>
 8007e60:	4629      	mov	r1, r5
 8007e62:	f100 0710 	add.w	r7, r0, #16
 8007e66:	42b1      	cmp	r1, r6
 8007e68:	d335      	bcc.n	8007ed6 <rshift+0x98>
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	1eea      	subs	r2, r5, #3
 8007e70:	4296      	cmp	r6, r2
 8007e72:	bf38      	it	cc
 8007e74:	2300      	movcc	r3, #0
 8007e76:	4423      	add	r3, r4
 8007e78:	e015      	b.n	8007ea6 <rshift+0x68>
 8007e7a:	46a1      	mov	r9, r4
 8007e7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e80:	f1c1 0820 	rsb	r8, r1, #32
 8007e84:	40cf      	lsrs	r7, r1
 8007e86:	f105 0e04 	add.w	lr, r5, #4
 8007e8a:	4576      	cmp	r6, lr
 8007e8c:	46f4      	mov	ip, lr
 8007e8e:	d816      	bhi.n	8007ebe <rshift+0x80>
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	009a      	lsls	r2, r3, #2
 8007e94:	3a04      	subs	r2, #4
 8007e96:	3501      	adds	r5, #1
 8007e98:	42ae      	cmp	r6, r5
 8007e9a:	bf38      	it	cc
 8007e9c:	2200      	movcc	r2, #0
 8007e9e:	18a3      	adds	r3, r4, r2
 8007ea0:	50a7      	str	r7, [r4, r2]
 8007ea2:	b107      	cbz	r7, 8007ea6 <rshift+0x68>
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	eba3 0204 	sub.w	r2, r3, r4
 8007eac:	bf08      	it	eq
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007eb4:	6102      	str	r2, [r0, #16]
 8007eb6:	bf08      	it	eq
 8007eb8:	6143      	streq	r3, [r0, #20]
 8007eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	f8dc c000 	ldr.w	ip, [ip]
 8007ec2:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ec6:	ea4c 0707 	orr.w	r7, ip, r7
 8007eca:	f849 7b04 	str.w	r7, [r9], #4
 8007ece:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ed2:	40cf      	lsrs	r7, r1
 8007ed4:	e7d9      	b.n	8007e8a <rshift+0x4c>
 8007ed6:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eda:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ede:	e7c2      	b.n	8007e66 <rshift+0x28>
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	e7e0      	b.n	8007ea6 <rshift+0x68>

08007ee4 <__hexdig_fun>:
 8007ee4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ee8:	2b09      	cmp	r3, #9
 8007eea:	d802      	bhi.n	8007ef2 <__hexdig_fun+0xe>
 8007eec:	3820      	subs	r0, #32
 8007eee:	b2c0      	uxtb	r0, r0
 8007ef0:	4770      	bx	lr
 8007ef2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d801      	bhi.n	8007efe <__hexdig_fun+0x1a>
 8007efa:	3847      	subs	r0, #71	; 0x47
 8007efc:	e7f7      	b.n	8007eee <__hexdig_fun+0xa>
 8007efe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d801      	bhi.n	8007f0a <__hexdig_fun+0x26>
 8007f06:	3827      	subs	r0, #39	; 0x27
 8007f08:	e7f1      	b.n	8007eee <__hexdig_fun+0xa>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	4770      	bx	lr
	...

08007f10 <__gethex>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	b08b      	sub	sp, #44	; 0x2c
 8007f16:	9306      	str	r3, [sp, #24]
 8007f18:	4bb9      	ldr	r3, [pc, #740]	; (8008200 <__gethex+0x2f0>)
 8007f1a:	9002      	str	r0, [sp, #8]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	468b      	mov	fp, r1
 8007f20:	4618      	mov	r0, r3
 8007f22:	4690      	mov	r8, r2
 8007f24:	9303      	str	r3, [sp, #12]
 8007f26:	f7f8 f92b 	bl	8000180 <strlen>
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	f8db 2000 	ldr.w	r2, [fp]
 8007f32:	4403      	add	r3, r0
 8007f34:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f38:	9307      	str	r3, [sp, #28]
 8007f3a:	1c93      	adds	r3, r2, #2
 8007f3c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f40:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f44:	32fe      	adds	r2, #254	; 0xfe
 8007f46:	18d1      	adds	r1, r2, r3
 8007f48:	461f      	mov	r7, r3
 8007f4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f4e:	9101      	str	r1, [sp, #4]
 8007f50:	2830      	cmp	r0, #48	; 0x30
 8007f52:	d0f8      	beq.n	8007f46 <__gethex+0x36>
 8007f54:	f7ff ffc6 	bl	8007ee4 <__hexdig_fun>
 8007f58:	4604      	mov	r4, r0
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d13a      	bne.n	8007fd4 <__gethex+0xc4>
 8007f5e:	4652      	mov	r2, sl
 8007f60:	4638      	mov	r0, r7
 8007f62:	9903      	ldr	r1, [sp, #12]
 8007f64:	f001 fb89 	bl	800967a <strncmp>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d166      	bne.n	800803c <__gethex+0x12c>
 8007f6e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007f72:	eb07 060a 	add.w	r6, r7, sl
 8007f76:	f7ff ffb5 	bl	8007ee4 <__hexdig_fun>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d060      	beq.n	8008040 <__gethex+0x130>
 8007f7e:	4633      	mov	r3, r6
 8007f80:	7818      	ldrb	r0, [r3, #0]
 8007f82:	461f      	mov	r7, r3
 8007f84:	2830      	cmp	r0, #48	; 0x30
 8007f86:	f103 0301 	add.w	r3, r3, #1
 8007f8a:	d0f9      	beq.n	8007f80 <__gethex+0x70>
 8007f8c:	f7ff ffaa 	bl	8007ee4 <__hexdig_fun>
 8007f90:	2301      	movs	r3, #1
 8007f92:	fab0 f480 	clz	r4, r0
 8007f96:	4635      	mov	r5, r6
 8007f98:	0964      	lsrs	r4, r4, #5
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	4616      	mov	r6, r2
 8007fa0:	7830      	ldrb	r0, [r6, #0]
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	f7ff ff9e 	bl	8007ee4 <__hexdig_fun>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d1f8      	bne.n	8007f9e <__gethex+0x8e>
 8007fac:	4652      	mov	r2, sl
 8007fae:	4630      	mov	r0, r6
 8007fb0:	9903      	ldr	r1, [sp, #12]
 8007fb2:	f001 fb62 	bl	800967a <strncmp>
 8007fb6:	b980      	cbnz	r0, 8007fda <__gethex+0xca>
 8007fb8:	b94d      	cbnz	r5, 8007fce <__gethex+0xbe>
 8007fba:	eb06 050a 	add.w	r5, r6, sl
 8007fbe:	462a      	mov	r2, r5
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	7830      	ldrb	r0, [r6, #0]
 8007fc4:	3201      	adds	r2, #1
 8007fc6:	f7ff ff8d 	bl	8007ee4 <__hexdig_fun>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1f8      	bne.n	8007fc0 <__gethex+0xb0>
 8007fce:	1bad      	subs	r5, r5, r6
 8007fd0:	00ad      	lsls	r5, r5, #2
 8007fd2:	e004      	b.n	8007fde <__gethex+0xce>
 8007fd4:	2400      	movs	r4, #0
 8007fd6:	4625      	mov	r5, r4
 8007fd8:	e7e0      	b.n	8007f9c <__gethex+0x8c>
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	d1f7      	bne.n	8007fce <__gethex+0xbe>
 8007fde:	7833      	ldrb	r3, [r6, #0]
 8007fe0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fe4:	2b50      	cmp	r3, #80	; 0x50
 8007fe6:	d139      	bne.n	800805c <__gethex+0x14c>
 8007fe8:	7873      	ldrb	r3, [r6, #1]
 8007fea:	2b2b      	cmp	r3, #43	; 0x2b
 8007fec:	d02a      	beq.n	8008044 <__gethex+0x134>
 8007fee:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff0:	d02c      	beq.n	800804c <__gethex+0x13c>
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	1c71      	adds	r1, r6, #1
 8007ff8:	7808      	ldrb	r0, [r1, #0]
 8007ffa:	f7ff ff73 	bl	8007ee4 <__hexdig_fun>
 8007ffe:	1e43      	subs	r3, r0, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b18      	cmp	r3, #24
 8008004:	d82a      	bhi.n	800805c <__gethex+0x14c>
 8008006:	f1a0 0210 	sub.w	r2, r0, #16
 800800a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800800e:	f7ff ff69 	bl	8007ee4 <__hexdig_fun>
 8008012:	1e43      	subs	r3, r0, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b18      	cmp	r3, #24
 8008018:	d91b      	bls.n	8008052 <__gethex+0x142>
 800801a:	f1b9 0f00 	cmp.w	r9, #0
 800801e:	d000      	beq.n	8008022 <__gethex+0x112>
 8008020:	4252      	negs	r2, r2
 8008022:	4415      	add	r5, r2
 8008024:	f8cb 1000 	str.w	r1, [fp]
 8008028:	b1d4      	cbz	r4, 8008060 <__gethex+0x150>
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf14      	ite	ne
 8008030:	2700      	movne	r7, #0
 8008032:	2706      	moveq	r7, #6
 8008034:	4638      	mov	r0, r7
 8008036:	b00b      	add	sp, #44	; 0x2c
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	463e      	mov	r6, r7
 800803e:	4625      	mov	r5, r4
 8008040:	2401      	movs	r4, #1
 8008042:	e7cc      	b.n	8007fde <__gethex+0xce>
 8008044:	f04f 0900 	mov.w	r9, #0
 8008048:	1cb1      	adds	r1, r6, #2
 800804a:	e7d5      	b.n	8007ff8 <__gethex+0xe8>
 800804c:	f04f 0901 	mov.w	r9, #1
 8008050:	e7fa      	b.n	8008048 <__gethex+0x138>
 8008052:	230a      	movs	r3, #10
 8008054:	fb03 0202 	mla	r2, r3, r2, r0
 8008058:	3a10      	subs	r2, #16
 800805a:	e7d6      	b.n	800800a <__gethex+0xfa>
 800805c:	4631      	mov	r1, r6
 800805e:	e7e1      	b.n	8008024 <__gethex+0x114>
 8008060:	4621      	mov	r1, r4
 8008062:	1bf3      	subs	r3, r6, r7
 8008064:	3b01      	subs	r3, #1
 8008066:	2b07      	cmp	r3, #7
 8008068:	dc0a      	bgt.n	8008080 <__gethex+0x170>
 800806a:	9802      	ldr	r0, [sp, #8]
 800806c:	f000 fa8c 	bl	8008588 <_Balloc>
 8008070:	4604      	mov	r4, r0
 8008072:	b940      	cbnz	r0, 8008086 <__gethex+0x176>
 8008074:	4602      	mov	r2, r0
 8008076:	21de      	movs	r1, #222	; 0xde
 8008078:	4b62      	ldr	r3, [pc, #392]	; (8008204 <__gethex+0x2f4>)
 800807a:	4863      	ldr	r0, [pc, #396]	; (8008208 <__gethex+0x2f8>)
 800807c:	f001 fbf0 	bl	8009860 <__assert_func>
 8008080:	3101      	adds	r1, #1
 8008082:	105b      	asrs	r3, r3, #1
 8008084:	e7ef      	b.n	8008066 <__gethex+0x156>
 8008086:	f04f 0b00 	mov.w	fp, #0
 800808a:	f100 0914 	add.w	r9, r0, #20
 800808e:	f1ca 0301 	rsb	r3, sl, #1
 8008092:	f8cd 9010 	str.w	r9, [sp, #16]
 8008096:	f8cd b004 	str.w	fp, [sp, #4]
 800809a:	9308      	str	r3, [sp, #32]
 800809c:	42b7      	cmp	r7, r6
 800809e:	d33f      	bcc.n	8008120 <__gethex+0x210>
 80080a0:	9f04      	ldr	r7, [sp, #16]
 80080a2:	9b01      	ldr	r3, [sp, #4]
 80080a4:	f847 3b04 	str.w	r3, [r7], #4
 80080a8:	eba7 0709 	sub.w	r7, r7, r9
 80080ac:	10bf      	asrs	r7, r7, #2
 80080ae:	6127      	str	r7, [r4, #16]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fb5f 	bl	8008774 <__hi0bits>
 80080b6:	017f      	lsls	r7, r7, #5
 80080b8:	f8d8 6000 	ldr.w	r6, [r8]
 80080bc:	1a3f      	subs	r7, r7, r0
 80080be:	42b7      	cmp	r7, r6
 80080c0:	dd62      	ble.n	8008188 <__gethex+0x278>
 80080c2:	1bbf      	subs	r7, r7, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fef5 	bl	8008eb6 <__any_on>
 80080cc:	4682      	mov	sl, r0
 80080ce:	b1a8      	cbz	r0, 80080fc <__gethex+0x1ec>
 80080d0:	f04f 0a01 	mov.w	sl, #1
 80080d4:	1e7b      	subs	r3, r7, #1
 80080d6:	1159      	asrs	r1, r3, #5
 80080d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80080dc:	f003 021f 	and.w	r2, r3, #31
 80080e0:	fa0a f202 	lsl.w	r2, sl, r2
 80080e4:	420a      	tst	r2, r1
 80080e6:	d009      	beq.n	80080fc <__gethex+0x1ec>
 80080e8:	4553      	cmp	r3, sl
 80080ea:	dd05      	ble.n	80080f8 <__gethex+0x1e8>
 80080ec:	4620      	mov	r0, r4
 80080ee:	1eb9      	subs	r1, r7, #2
 80080f0:	f000 fee1 	bl	8008eb6 <__any_on>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d144      	bne.n	8008182 <__gethex+0x272>
 80080f8:	f04f 0a02 	mov.w	sl, #2
 80080fc:	4639      	mov	r1, r7
 80080fe:	4620      	mov	r0, r4
 8008100:	f7ff fe9d 	bl	8007e3e <rshift>
 8008104:	443d      	add	r5, r7
 8008106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800810a:	42ab      	cmp	r3, r5
 800810c:	da4a      	bge.n	80081a4 <__gethex+0x294>
 800810e:	4621      	mov	r1, r4
 8008110:	9802      	ldr	r0, [sp, #8]
 8008112:	f000 fa79 	bl	8008608 <_Bfree>
 8008116:	2300      	movs	r3, #0
 8008118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800811a:	27a3      	movs	r7, #163	; 0xa3
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e789      	b.n	8008034 <__gethex+0x124>
 8008120:	1e73      	subs	r3, r6, #1
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	9305      	str	r3, [sp, #20]
 8008126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800812a:	4293      	cmp	r3, r2
 800812c:	d019      	beq.n	8008162 <__gethex+0x252>
 800812e:	f1bb 0f20 	cmp.w	fp, #32
 8008132:	d107      	bne.n	8008144 <__gethex+0x234>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	9a01      	ldr	r2, [sp, #4]
 8008138:	f843 2b04 	str.w	r2, [r3], #4
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	469b      	mov	fp, r3
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008148:	f7ff fecc 	bl	8007ee4 <__hexdig_fun>
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	f000 000f 	and.w	r0, r0, #15
 8008152:	fa00 f00b 	lsl.w	r0, r0, fp
 8008156:	4303      	orrs	r3, r0
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	f10b 0b04 	add.w	fp, fp, #4
 800815e:	9b05      	ldr	r3, [sp, #20]
 8008160:	e00d      	b.n	800817e <__gethex+0x26e>
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	9a08      	ldr	r2, [sp, #32]
 8008166:	4413      	add	r3, r2
 8008168:	42bb      	cmp	r3, r7
 800816a:	d3e0      	bcc.n	800812e <__gethex+0x21e>
 800816c:	4618      	mov	r0, r3
 800816e:	4652      	mov	r2, sl
 8008170:	9903      	ldr	r1, [sp, #12]
 8008172:	9309      	str	r3, [sp, #36]	; 0x24
 8008174:	f001 fa81 	bl	800967a <strncmp>
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	2800      	cmp	r0, #0
 800817c:	d1d7      	bne.n	800812e <__gethex+0x21e>
 800817e:	461e      	mov	r6, r3
 8008180:	e78c      	b.n	800809c <__gethex+0x18c>
 8008182:	f04f 0a03 	mov.w	sl, #3
 8008186:	e7b9      	b.n	80080fc <__gethex+0x1ec>
 8008188:	da09      	bge.n	800819e <__gethex+0x28e>
 800818a:	1bf7      	subs	r7, r6, r7
 800818c:	4621      	mov	r1, r4
 800818e:	463a      	mov	r2, r7
 8008190:	9802      	ldr	r0, [sp, #8]
 8008192:	f000 fc51 	bl	8008a38 <__lshift>
 8008196:	4604      	mov	r4, r0
 8008198:	1bed      	subs	r5, r5, r7
 800819a:	f100 0914 	add.w	r9, r0, #20
 800819e:	f04f 0a00 	mov.w	sl, #0
 80081a2:	e7b0      	b.n	8008106 <__gethex+0x1f6>
 80081a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80081a8:	42a8      	cmp	r0, r5
 80081aa:	dd71      	ble.n	8008290 <__gethex+0x380>
 80081ac:	1b45      	subs	r5, r0, r5
 80081ae:	42ae      	cmp	r6, r5
 80081b0:	dc34      	bgt.n	800821c <__gethex+0x30c>
 80081b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d028      	beq.n	800820c <__gethex+0x2fc>
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d02a      	beq.n	8008214 <__gethex+0x304>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d115      	bne.n	80081ee <__gethex+0x2de>
 80081c2:	42ae      	cmp	r6, r5
 80081c4:	d113      	bne.n	80081ee <__gethex+0x2de>
 80081c6:	2e01      	cmp	r6, #1
 80081c8:	d10b      	bne.n	80081e2 <__gethex+0x2d2>
 80081ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081ce:	9a06      	ldr	r2, [sp, #24]
 80081d0:	2762      	movs	r7, #98	; 0x62
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	2301      	movs	r3, #1
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f8c9 3000 	str.w	r3, [r9]
 80081dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081de:	601c      	str	r4, [r3, #0]
 80081e0:	e728      	b.n	8008034 <__gethex+0x124>
 80081e2:	4620      	mov	r0, r4
 80081e4:	1e71      	subs	r1, r6, #1
 80081e6:	f000 fe66 	bl	8008eb6 <__any_on>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1ed      	bne.n	80081ca <__gethex+0x2ba>
 80081ee:	4621      	mov	r1, r4
 80081f0:	9802      	ldr	r0, [sp, #8]
 80081f2:	f000 fa09 	bl	8008608 <_Bfree>
 80081f6:	2300      	movs	r3, #0
 80081f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081fa:	2750      	movs	r7, #80	; 0x50
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	e719      	b.n	8008034 <__gethex+0x124>
 8008200:	0800a10c 	.word	0x0800a10c
 8008204:	0800a02c 	.word	0x0800a02c
 8008208:	0800a0a0 	.word	0x0800a0a0
 800820c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1ed      	bne.n	80081ee <__gethex+0x2de>
 8008212:	e7da      	b.n	80081ca <__gethex+0x2ba>
 8008214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1d7      	bne.n	80081ca <__gethex+0x2ba>
 800821a:	e7e8      	b.n	80081ee <__gethex+0x2de>
 800821c:	1e6f      	subs	r7, r5, #1
 800821e:	f1ba 0f00 	cmp.w	sl, #0
 8008222:	d132      	bne.n	800828a <__gethex+0x37a>
 8008224:	b127      	cbz	r7, 8008230 <__gethex+0x320>
 8008226:	4639      	mov	r1, r7
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fe44 	bl	8008eb6 <__any_on>
 800822e:	4682      	mov	sl, r0
 8008230:	2101      	movs	r1, #1
 8008232:	117b      	asrs	r3, r7, #5
 8008234:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008238:	f007 071f 	and.w	r7, r7, #31
 800823c:	fa01 f707 	lsl.w	r7, r1, r7
 8008240:	421f      	tst	r7, r3
 8008242:	f04f 0702 	mov.w	r7, #2
 8008246:	4629      	mov	r1, r5
 8008248:	4620      	mov	r0, r4
 800824a:	bf18      	it	ne
 800824c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008250:	1b76      	subs	r6, r6, r5
 8008252:	f7ff fdf4 	bl	8007e3e <rshift>
 8008256:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800825a:	f1ba 0f00 	cmp.w	sl, #0
 800825e:	d048      	beq.n	80082f2 <__gethex+0x3e2>
 8008260:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d015      	beq.n	8008294 <__gethex+0x384>
 8008268:	2b03      	cmp	r3, #3
 800826a:	d017      	beq.n	800829c <__gethex+0x38c>
 800826c:	2b01      	cmp	r3, #1
 800826e:	d109      	bne.n	8008284 <__gethex+0x374>
 8008270:	f01a 0f02 	tst.w	sl, #2
 8008274:	d006      	beq.n	8008284 <__gethex+0x374>
 8008276:	f8d9 0000 	ldr.w	r0, [r9]
 800827a:	ea4a 0a00 	orr.w	sl, sl, r0
 800827e:	f01a 0f01 	tst.w	sl, #1
 8008282:	d10e      	bne.n	80082a2 <__gethex+0x392>
 8008284:	f047 0710 	orr.w	r7, r7, #16
 8008288:	e033      	b.n	80082f2 <__gethex+0x3e2>
 800828a:	f04f 0a01 	mov.w	sl, #1
 800828e:	e7cf      	b.n	8008230 <__gethex+0x320>
 8008290:	2701      	movs	r7, #1
 8008292:	e7e2      	b.n	800825a <__gethex+0x34a>
 8008294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008296:	f1c3 0301 	rsb	r3, r3, #1
 800829a:	9315      	str	r3, [sp, #84]	; 0x54
 800829c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <__gethex+0x374>
 80082a2:	f04f 0c00 	mov.w	ip, #0
 80082a6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082aa:	f104 0314 	add.w	r3, r4, #20
 80082ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082c0:	d01c      	beq.n	80082fc <__gethex+0x3ec>
 80082c2:	3201      	adds	r2, #1
 80082c4:	6002      	str	r2, [r0, #0]
 80082c6:	2f02      	cmp	r7, #2
 80082c8:	f104 0314 	add.w	r3, r4, #20
 80082cc:	d13d      	bne.n	800834a <__gethex+0x43a>
 80082ce:	f8d8 2000 	ldr.w	r2, [r8]
 80082d2:	3a01      	subs	r2, #1
 80082d4:	42b2      	cmp	r2, r6
 80082d6:	d10a      	bne.n	80082ee <__gethex+0x3de>
 80082d8:	2201      	movs	r2, #1
 80082da:	1171      	asrs	r1, r6, #5
 80082dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082e0:	f006 061f 	and.w	r6, r6, #31
 80082e4:	fa02 f606 	lsl.w	r6, r2, r6
 80082e8:	421e      	tst	r6, r3
 80082ea:	bf18      	it	ne
 80082ec:	4617      	movne	r7, r2
 80082ee:	f047 0720 	orr.w	r7, r7, #32
 80082f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082f4:	601c      	str	r4, [r3, #0]
 80082f6:	9b06      	ldr	r3, [sp, #24]
 80082f8:	601d      	str	r5, [r3, #0]
 80082fa:	e69b      	b.n	8008034 <__gethex+0x124>
 80082fc:	4299      	cmp	r1, r3
 80082fe:	f843 cc04 	str.w	ip, [r3, #-4]
 8008302:	d8d8      	bhi.n	80082b6 <__gethex+0x3a6>
 8008304:	68a3      	ldr	r3, [r4, #8]
 8008306:	459b      	cmp	fp, r3
 8008308:	db17      	blt.n	800833a <__gethex+0x42a>
 800830a:	6861      	ldr	r1, [r4, #4]
 800830c:	9802      	ldr	r0, [sp, #8]
 800830e:	3101      	adds	r1, #1
 8008310:	f000 f93a 	bl	8008588 <_Balloc>
 8008314:	4681      	mov	r9, r0
 8008316:	b918      	cbnz	r0, 8008320 <__gethex+0x410>
 8008318:	4602      	mov	r2, r0
 800831a:	2184      	movs	r1, #132	; 0x84
 800831c:	4b19      	ldr	r3, [pc, #100]	; (8008384 <__gethex+0x474>)
 800831e:	e6ac      	b.n	800807a <__gethex+0x16a>
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	f104 010c 	add.w	r1, r4, #12
 8008326:	3202      	adds	r2, #2
 8008328:	0092      	lsls	r2, r2, #2
 800832a:	300c      	adds	r0, #12
 800832c:	f000 f91e 	bl	800856c <memcpy>
 8008330:	4621      	mov	r1, r4
 8008332:	9802      	ldr	r0, [sp, #8]
 8008334:	f000 f968 	bl	8008608 <_Bfree>
 8008338:	464c      	mov	r4, r9
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	6122      	str	r2, [r4, #16]
 8008340:	2201      	movs	r2, #1
 8008342:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008346:	615a      	str	r2, [r3, #20]
 8008348:	e7bd      	b.n	80082c6 <__gethex+0x3b6>
 800834a:	6922      	ldr	r2, [r4, #16]
 800834c:	455a      	cmp	r2, fp
 800834e:	dd0b      	ble.n	8008368 <__gethex+0x458>
 8008350:	2101      	movs	r1, #1
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff fd73 	bl	8007e3e <rshift>
 8008358:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800835c:	3501      	adds	r5, #1
 800835e:	42ab      	cmp	r3, r5
 8008360:	f6ff aed5 	blt.w	800810e <__gethex+0x1fe>
 8008364:	2701      	movs	r7, #1
 8008366:	e7c2      	b.n	80082ee <__gethex+0x3de>
 8008368:	f016 061f 	ands.w	r6, r6, #31
 800836c:	d0fa      	beq.n	8008364 <__gethex+0x454>
 800836e:	449a      	add	sl, r3
 8008370:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008374:	f000 f9fe 	bl	8008774 <__hi0bits>
 8008378:	f1c6 0620 	rsb	r6, r6, #32
 800837c:	42b0      	cmp	r0, r6
 800837e:	dbe7      	blt.n	8008350 <__gethex+0x440>
 8008380:	e7f0      	b.n	8008364 <__gethex+0x454>
 8008382:	bf00      	nop
 8008384:	0800a02c 	.word	0x0800a02c

08008388 <L_shift>:
 8008388:	f1c2 0208 	rsb	r2, r2, #8
 800838c:	0092      	lsls	r2, r2, #2
 800838e:	b570      	push	{r4, r5, r6, lr}
 8008390:	f1c2 0620 	rsb	r6, r2, #32
 8008394:	6843      	ldr	r3, [r0, #4]
 8008396:	6804      	ldr	r4, [r0, #0]
 8008398:	fa03 f506 	lsl.w	r5, r3, r6
 800839c:	432c      	orrs	r4, r5
 800839e:	40d3      	lsrs	r3, r2
 80083a0:	6004      	str	r4, [r0, #0]
 80083a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80083a6:	4288      	cmp	r0, r1
 80083a8:	d3f4      	bcc.n	8008394 <L_shift+0xc>
 80083aa:	bd70      	pop	{r4, r5, r6, pc}

080083ac <__match>:
 80083ac:	b530      	push	{r4, r5, lr}
 80083ae:	6803      	ldr	r3, [r0, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b6:	b914      	cbnz	r4, 80083be <__match+0x12>
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	2001      	movs	r0, #1
 80083bc:	bd30      	pop	{r4, r5, pc}
 80083be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083c6:	2d19      	cmp	r5, #25
 80083c8:	bf98      	it	ls
 80083ca:	3220      	addls	r2, #32
 80083cc:	42a2      	cmp	r2, r4
 80083ce:	d0f0      	beq.n	80083b2 <__match+0x6>
 80083d0:	2000      	movs	r0, #0
 80083d2:	e7f3      	b.n	80083bc <__match+0x10>

080083d4 <__hexnan>:
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	2500      	movs	r5, #0
 80083da:	680b      	ldr	r3, [r1, #0]
 80083dc:	4682      	mov	sl, r0
 80083de:	115e      	asrs	r6, r3, #5
 80083e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083e4:	f013 031f 	ands.w	r3, r3, #31
 80083e8:	bf18      	it	ne
 80083ea:	3604      	addne	r6, #4
 80083ec:	1f37      	subs	r7, r6, #4
 80083ee:	4690      	mov	r8, r2
 80083f0:	46b9      	mov	r9, r7
 80083f2:	463c      	mov	r4, r7
 80083f4:	46ab      	mov	fp, r5
 80083f6:	b087      	sub	sp, #28
 80083f8:	6801      	ldr	r1, [r0, #0]
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8008400:	9502      	str	r5, [sp, #8]
 8008402:	784a      	ldrb	r2, [r1, #1]
 8008404:	1c4b      	adds	r3, r1, #1
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	b342      	cbz	r2, 800845c <__hexnan+0x88>
 800840a:	4610      	mov	r0, r2
 800840c:	9105      	str	r1, [sp, #20]
 800840e:	9204      	str	r2, [sp, #16]
 8008410:	f7ff fd68 	bl	8007ee4 <__hexdig_fun>
 8008414:	2800      	cmp	r0, #0
 8008416:	d14f      	bne.n	80084b8 <__hexnan+0xe4>
 8008418:	9a04      	ldr	r2, [sp, #16]
 800841a:	9905      	ldr	r1, [sp, #20]
 800841c:	2a20      	cmp	r2, #32
 800841e:	d818      	bhi.n	8008452 <__hexnan+0x7e>
 8008420:	9b02      	ldr	r3, [sp, #8]
 8008422:	459b      	cmp	fp, r3
 8008424:	dd13      	ble.n	800844e <__hexnan+0x7a>
 8008426:	454c      	cmp	r4, r9
 8008428:	d206      	bcs.n	8008438 <__hexnan+0x64>
 800842a:	2d07      	cmp	r5, #7
 800842c:	dc04      	bgt.n	8008438 <__hexnan+0x64>
 800842e:	462a      	mov	r2, r5
 8008430:	4649      	mov	r1, r9
 8008432:	4620      	mov	r0, r4
 8008434:	f7ff ffa8 	bl	8008388 <L_shift>
 8008438:	4544      	cmp	r4, r8
 800843a:	d950      	bls.n	80084de <__hexnan+0x10a>
 800843c:	2300      	movs	r3, #0
 800843e:	f1a4 0904 	sub.w	r9, r4, #4
 8008442:	f844 3c04 	str.w	r3, [r4, #-4]
 8008446:	461d      	mov	r5, r3
 8008448:	464c      	mov	r4, r9
 800844a:	f8cd b008 	str.w	fp, [sp, #8]
 800844e:	9903      	ldr	r1, [sp, #12]
 8008450:	e7d7      	b.n	8008402 <__hexnan+0x2e>
 8008452:	2a29      	cmp	r2, #41	; 0x29
 8008454:	d156      	bne.n	8008504 <__hexnan+0x130>
 8008456:	3102      	adds	r1, #2
 8008458:	f8ca 1000 	str.w	r1, [sl]
 800845c:	f1bb 0f00 	cmp.w	fp, #0
 8008460:	d050      	beq.n	8008504 <__hexnan+0x130>
 8008462:	454c      	cmp	r4, r9
 8008464:	d206      	bcs.n	8008474 <__hexnan+0xa0>
 8008466:	2d07      	cmp	r5, #7
 8008468:	dc04      	bgt.n	8008474 <__hexnan+0xa0>
 800846a:	462a      	mov	r2, r5
 800846c:	4649      	mov	r1, r9
 800846e:	4620      	mov	r0, r4
 8008470:	f7ff ff8a 	bl	8008388 <L_shift>
 8008474:	4544      	cmp	r4, r8
 8008476:	d934      	bls.n	80084e2 <__hexnan+0x10e>
 8008478:	4623      	mov	r3, r4
 800847a:	f1a8 0204 	sub.w	r2, r8, #4
 800847e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008482:	429f      	cmp	r7, r3
 8008484:	f842 1f04 	str.w	r1, [r2, #4]!
 8008488:	d2f9      	bcs.n	800847e <__hexnan+0xaa>
 800848a:	1b3b      	subs	r3, r7, r4
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	3304      	adds	r3, #4
 8008492:	3401      	adds	r4, #1
 8008494:	3e03      	subs	r6, #3
 8008496:	42b4      	cmp	r4, r6
 8008498:	bf88      	it	hi
 800849a:	2304      	movhi	r3, #4
 800849c:	2200      	movs	r2, #0
 800849e:	4443      	add	r3, r8
 80084a0:	f843 2b04 	str.w	r2, [r3], #4
 80084a4:	429f      	cmp	r7, r3
 80084a6:	d2fb      	bcs.n	80084a0 <__hexnan+0xcc>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	b91b      	cbnz	r3, 80084b4 <__hexnan+0xe0>
 80084ac:	4547      	cmp	r7, r8
 80084ae:	d127      	bne.n	8008500 <__hexnan+0x12c>
 80084b0:	2301      	movs	r3, #1
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	2005      	movs	r0, #5
 80084b6:	e026      	b.n	8008506 <__hexnan+0x132>
 80084b8:	3501      	adds	r5, #1
 80084ba:	2d08      	cmp	r5, #8
 80084bc:	f10b 0b01 	add.w	fp, fp, #1
 80084c0:	dd06      	ble.n	80084d0 <__hexnan+0xfc>
 80084c2:	4544      	cmp	r4, r8
 80084c4:	d9c3      	bls.n	800844e <__hexnan+0x7a>
 80084c6:	2300      	movs	r3, #0
 80084c8:	2501      	movs	r5, #1
 80084ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80084ce:	3c04      	subs	r4, #4
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	f000 000f 	and.w	r0, r0, #15
 80084d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80084da:	6022      	str	r2, [r4, #0]
 80084dc:	e7b7      	b.n	800844e <__hexnan+0x7a>
 80084de:	2508      	movs	r5, #8
 80084e0:	e7b5      	b.n	800844e <__hexnan+0x7a>
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0df      	beq.n	80084a8 <__hexnan+0xd4>
 80084e8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ec:	f1c3 0320 	rsb	r3, r3, #32
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
 80084f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084f8:	401a      	ands	r2, r3
 80084fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80084fe:	e7d3      	b.n	80084a8 <__hexnan+0xd4>
 8008500:	3f04      	subs	r7, #4
 8008502:	e7d1      	b.n	80084a8 <__hexnan+0xd4>
 8008504:	2004      	movs	r0, #4
 8008506:	b007      	add	sp, #28
 8008508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800850c <_localeconv_r>:
 800850c:	4800      	ldr	r0, [pc, #0]	; (8008510 <_localeconv_r+0x4>)
 800850e:	4770      	bx	lr
 8008510:	200001a8 	.word	0x200001a8

08008514 <__retarget_lock_init_recursive>:
 8008514:	4770      	bx	lr

08008516 <__retarget_lock_acquire_recursive>:
 8008516:	4770      	bx	lr

08008518 <__retarget_lock_release_recursive>:
 8008518:	4770      	bx	lr
	...

0800851c <malloc>:
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <malloc+0xc>)
 800851e:	4601      	mov	r1, r0
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	f000 bd43 	b.w	8008fac <_malloc_r>
 8008526:	bf00      	nop
 8008528:	20000050 	.word	0x20000050

0800852c <__ascii_mbtowc>:
 800852c:	b082      	sub	sp, #8
 800852e:	b901      	cbnz	r1, 8008532 <__ascii_mbtowc+0x6>
 8008530:	a901      	add	r1, sp, #4
 8008532:	b142      	cbz	r2, 8008546 <__ascii_mbtowc+0x1a>
 8008534:	b14b      	cbz	r3, 800854a <__ascii_mbtowc+0x1e>
 8008536:	7813      	ldrb	r3, [r2, #0]
 8008538:	600b      	str	r3, [r1, #0]
 800853a:	7812      	ldrb	r2, [r2, #0]
 800853c:	1e10      	subs	r0, r2, #0
 800853e:	bf18      	it	ne
 8008540:	2001      	movne	r0, #1
 8008542:	b002      	add	sp, #8
 8008544:	4770      	bx	lr
 8008546:	4610      	mov	r0, r2
 8008548:	e7fb      	b.n	8008542 <__ascii_mbtowc+0x16>
 800854a:	f06f 0001 	mvn.w	r0, #1
 800854e:	e7f8      	b.n	8008542 <__ascii_mbtowc+0x16>

08008550 <memchr>:
 8008550:	4603      	mov	r3, r0
 8008552:	b510      	push	{r4, lr}
 8008554:	b2c9      	uxtb	r1, r1
 8008556:	4402      	add	r2, r0
 8008558:	4293      	cmp	r3, r2
 800855a:	4618      	mov	r0, r3
 800855c:	d101      	bne.n	8008562 <memchr+0x12>
 800855e:	2000      	movs	r0, #0
 8008560:	e003      	b.n	800856a <memchr+0x1a>
 8008562:	7804      	ldrb	r4, [r0, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	428c      	cmp	r4, r1
 8008568:	d1f6      	bne.n	8008558 <memchr+0x8>
 800856a:	bd10      	pop	{r4, pc}

0800856c <memcpy>:
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	f100 33ff 	add.w	r3, r0, #4294967295
 8008574:	d100      	bne.n	8008578 <memcpy+0xc>
 8008576:	4770      	bx	lr
 8008578:	b510      	push	{r4, lr}
 800857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857e:	4291      	cmp	r1, r2
 8008580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008584:	d1f9      	bne.n	800857a <memcpy+0xe>
 8008586:	bd10      	pop	{r4, pc}

08008588 <_Balloc>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800858c:	4604      	mov	r4, r0
 800858e:	460d      	mov	r5, r1
 8008590:	b976      	cbnz	r6, 80085b0 <_Balloc+0x28>
 8008592:	2010      	movs	r0, #16
 8008594:	f7ff ffc2 	bl	800851c <malloc>
 8008598:	4602      	mov	r2, r0
 800859a:	6260      	str	r0, [r4, #36]	; 0x24
 800859c:	b920      	cbnz	r0, 80085a8 <_Balloc+0x20>
 800859e:	2166      	movs	r1, #102	; 0x66
 80085a0:	4b17      	ldr	r3, [pc, #92]	; (8008600 <_Balloc+0x78>)
 80085a2:	4818      	ldr	r0, [pc, #96]	; (8008604 <_Balloc+0x7c>)
 80085a4:	f001 f95c 	bl	8009860 <__assert_func>
 80085a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085ac:	6006      	str	r6, [r0, #0]
 80085ae:	60c6      	str	r6, [r0, #12]
 80085b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085b2:	68f3      	ldr	r3, [r6, #12]
 80085b4:	b183      	cbz	r3, 80085d8 <_Balloc+0x50>
 80085b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085be:	b9b8      	cbnz	r0, 80085f0 <_Balloc+0x68>
 80085c0:	2101      	movs	r1, #1
 80085c2:	fa01 f605 	lsl.w	r6, r1, r5
 80085c6:	1d72      	adds	r2, r6, #5
 80085c8:	4620      	mov	r0, r4
 80085ca:	0092      	lsls	r2, r2, #2
 80085cc:	f000 fc94 	bl	8008ef8 <_calloc_r>
 80085d0:	b160      	cbz	r0, 80085ec <_Balloc+0x64>
 80085d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085d6:	e00e      	b.n	80085f6 <_Balloc+0x6e>
 80085d8:	2221      	movs	r2, #33	; 0x21
 80085da:	2104      	movs	r1, #4
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fc8b 	bl	8008ef8 <_calloc_r>
 80085e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e4:	60f0      	str	r0, [r6, #12]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e4      	bne.n	80085b6 <_Balloc+0x2e>
 80085ec:	2000      	movs	r0, #0
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	6802      	ldr	r2, [r0, #0]
 80085f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085f6:	2300      	movs	r3, #0
 80085f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085fc:	e7f7      	b.n	80085ee <_Balloc+0x66>
 80085fe:	bf00      	nop
 8008600:	08009fb6 	.word	0x08009fb6
 8008604:	0800a120 	.word	0x0800a120

08008608 <_Bfree>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800860c:	4605      	mov	r5, r0
 800860e:	460c      	mov	r4, r1
 8008610:	b976      	cbnz	r6, 8008630 <_Bfree+0x28>
 8008612:	2010      	movs	r0, #16
 8008614:	f7ff ff82 	bl	800851c <malloc>
 8008618:	4602      	mov	r2, r0
 800861a:	6268      	str	r0, [r5, #36]	; 0x24
 800861c:	b920      	cbnz	r0, 8008628 <_Bfree+0x20>
 800861e:	218a      	movs	r1, #138	; 0x8a
 8008620:	4b08      	ldr	r3, [pc, #32]	; (8008644 <_Bfree+0x3c>)
 8008622:	4809      	ldr	r0, [pc, #36]	; (8008648 <_Bfree+0x40>)
 8008624:	f001 f91c 	bl	8009860 <__assert_func>
 8008628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800862c:	6006      	str	r6, [r0, #0]
 800862e:	60c6      	str	r6, [r0, #12]
 8008630:	b13c      	cbz	r4, 8008642 <_Bfree+0x3a>
 8008632:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008634:	6862      	ldr	r2, [r4, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800863c:	6021      	str	r1, [r4, #0]
 800863e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	08009fb6 	.word	0x08009fb6
 8008648:	0800a120 	.word	0x0800a120

0800864c <__multadd>:
 800864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008650:	4698      	mov	r8, r3
 8008652:	460c      	mov	r4, r1
 8008654:	2300      	movs	r3, #0
 8008656:	690e      	ldr	r6, [r1, #16]
 8008658:	4607      	mov	r7, r0
 800865a:	f101 0014 	add.w	r0, r1, #20
 800865e:	6805      	ldr	r5, [r0, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	b2a9      	uxth	r1, r5
 8008664:	fb02 8101 	mla	r1, r2, r1, r8
 8008668:	0c2d      	lsrs	r5, r5, #16
 800866a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800866e:	fb02 c505 	mla	r5, r2, r5, ip
 8008672:	b289      	uxth	r1, r1
 8008674:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008678:	429e      	cmp	r6, r3
 800867a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800867e:	f840 1b04 	str.w	r1, [r0], #4
 8008682:	dcec      	bgt.n	800865e <__multadd+0x12>
 8008684:	f1b8 0f00 	cmp.w	r8, #0
 8008688:	d022      	beq.n	80086d0 <__multadd+0x84>
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	42b3      	cmp	r3, r6
 800868e:	dc19      	bgt.n	80086c4 <__multadd+0x78>
 8008690:	6861      	ldr	r1, [r4, #4]
 8008692:	4638      	mov	r0, r7
 8008694:	3101      	adds	r1, #1
 8008696:	f7ff ff77 	bl	8008588 <_Balloc>
 800869a:	4605      	mov	r5, r0
 800869c:	b928      	cbnz	r0, 80086aa <__multadd+0x5e>
 800869e:	4602      	mov	r2, r0
 80086a0:	21b5      	movs	r1, #181	; 0xb5
 80086a2:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <__multadd+0x8c>)
 80086a4:	480d      	ldr	r0, [pc, #52]	; (80086dc <__multadd+0x90>)
 80086a6:	f001 f8db 	bl	8009860 <__assert_func>
 80086aa:	6922      	ldr	r2, [r4, #16]
 80086ac:	f104 010c 	add.w	r1, r4, #12
 80086b0:	3202      	adds	r2, #2
 80086b2:	0092      	lsls	r2, r2, #2
 80086b4:	300c      	adds	r0, #12
 80086b6:	f7ff ff59 	bl	800856c <memcpy>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4638      	mov	r0, r7
 80086be:	f7ff ffa3 	bl	8008608 <_Bfree>
 80086c2:	462c      	mov	r4, r5
 80086c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086c8:	3601      	adds	r6, #1
 80086ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80086ce:	6126      	str	r6, [r4, #16]
 80086d0:	4620      	mov	r0, r4
 80086d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d6:	bf00      	nop
 80086d8:	0800a02c 	.word	0x0800a02c
 80086dc:	0800a120 	.word	0x0800a120

080086e0 <__s2b>:
 80086e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e4:	4615      	mov	r5, r2
 80086e6:	2209      	movs	r2, #9
 80086e8:	461f      	mov	r7, r3
 80086ea:	3308      	adds	r3, #8
 80086ec:	460c      	mov	r4, r1
 80086ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80086f2:	4606      	mov	r6, r0
 80086f4:	2201      	movs	r2, #1
 80086f6:	2100      	movs	r1, #0
 80086f8:	429a      	cmp	r2, r3
 80086fa:	db09      	blt.n	8008710 <__s2b+0x30>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff ff43 	bl	8008588 <_Balloc>
 8008702:	b940      	cbnz	r0, 8008716 <__s2b+0x36>
 8008704:	4602      	mov	r2, r0
 8008706:	21ce      	movs	r1, #206	; 0xce
 8008708:	4b18      	ldr	r3, [pc, #96]	; (800876c <__s2b+0x8c>)
 800870a:	4819      	ldr	r0, [pc, #100]	; (8008770 <__s2b+0x90>)
 800870c:	f001 f8a8 	bl	8009860 <__assert_func>
 8008710:	0052      	lsls	r2, r2, #1
 8008712:	3101      	adds	r1, #1
 8008714:	e7f0      	b.n	80086f8 <__s2b+0x18>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	2d09      	cmp	r5, #9
 800871a:	6143      	str	r3, [r0, #20]
 800871c:	f04f 0301 	mov.w	r3, #1
 8008720:	6103      	str	r3, [r0, #16]
 8008722:	dd16      	ble.n	8008752 <__s2b+0x72>
 8008724:	f104 0909 	add.w	r9, r4, #9
 8008728:	46c8      	mov	r8, r9
 800872a:	442c      	add	r4, r5
 800872c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008730:	4601      	mov	r1, r0
 8008732:	220a      	movs	r2, #10
 8008734:	4630      	mov	r0, r6
 8008736:	3b30      	subs	r3, #48	; 0x30
 8008738:	f7ff ff88 	bl	800864c <__multadd>
 800873c:	45a0      	cmp	r8, r4
 800873e:	d1f5      	bne.n	800872c <__s2b+0x4c>
 8008740:	f1a5 0408 	sub.w	r4, r5, #8
 8008744:	444c      	add	r4, r9
 8008746:	1b2d      	subs	r5, r5, r4
 8008748:	1963      	adds	r3, r4, r5
 800874a:	42bb      	cmp	r3, r7
 800874c:	db04      	blt.n	8008758 <__s2b+0x78>
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008752:	2509      	movs	r5, #9
 8008754:	340a      	adds	r4, #10
 8008756:	e7f6      	b.n	8008746 <__s2b+0x66>
 8008758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800875c:	4601      	mov	r1, r0
 800875e:	220a      	movs	r2, #10
 8008760:	4630      	mov	r0, r6
 8008762:	3b30      	subs	r3, #48	; 0x30
 8008764:	f7ff ff72 	bl	800864c <__multadd>
 8008768:	e7ee      	b.n	8008748 <__s2b+0x68>
 800876a:	bf00      	nop
 800876c:	0800a02c 	.word	0x0800a02c
 8008770:	0800a120 	.word	0x0800a120

08008774 <__hi0bits>:
 8008774:	0c02      	lsrs	r2, r0, #16
 8008776:	0412      	lsls	r2, r2, #16
 8008778:	4603      	mov	r3, r0
 800877a:	b9ca      	cbnz	r2, 80087b0 <__hi0bits+0x3c>
 800877c:	0403      	lsls	r3, r0, #16
 800877e:	2010      	movs	r0, #16
 8008780:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008784:	bf04      	itt	eq
 8008786:	021b      	lsleq	r3, r3, #8
 8008788:	3008      	addeq	r0, #8
 800878a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800878e:	bf04      	itt	eq
 8008790:	011b      	lsleq	r3, r3, #4
 8008792:	3004      	addeq	r0, #4
 8008794:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008798:	bf04      	itt	eq
 800879a:	009b      	lsleq	r3, r3, #2
 800879c:	3002      	addeq	r0, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	db05      	blt.n	80087ae <__hi0bits+0x3a>
 80087a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80087a6:	f100 0001 	add.w	r0, r0, #1
 80087aa:	bf08      	it	eq
 80087ac:	2020      	moveq	r0, #32
 80087ae:	4770      	bx	lr
 80087b0:	2000      	movs	r0, #0
 80087b2:	e7e5      	b.n	8008780 <__hi0bits+0xc>

080087b4 <__lo0bits>:
 80087b4:	6803      	ldr	r3, [r0, #0]
 80087b6:	4602      	mov	r2, r0
 80087b8:	f013 0007 	ands.w	r0, r3, #7
 80087bc:	d00b      	beq.n	80087d6 <__lo0bits+0x22>
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	d422      	bmi.n	8008808 <__lo0bits+0x54>
 80087c2:	0798      	lsls	r0, r3, #30
 80087c4:	bf49      	itett	mi
 80087c6:	085b      	lsrmi	r3, r3, #1
 80087c8:	089b      	lsrpl	r3, r3, #2
 80087ca:	2001      	movmi	r0, #1
 80087cc:	6013      	strmi	r3, [r2, #0]
 80087ce:	bf5c      	itt	pl
 80087d0:	2002      	movpl	r0, #2
 80087d2:	6013      	strpl	r3, [r2, #0]
 80087d4:	4770      	bx	lr
 80087d6:	b299      	uxth	r1, r3
 80087d8:	b909      	cbnz	r1, 80087de <__lo0bits+0x2a>
 80087da:	2010      	movs	r0, #16
 80087dc:	0c1b      	lsrs	r3, r3, #16
 80087de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087e2:	bf04      	itt	eq
 80087e4:	0a1b      	lsreq	r3, r3, #8
 80087e6:	3008      	addeq	r0, #8
 80087e8:	0719      	lsls	r1, r3, #28
 80087ea:	bf04      	itt	eq
 80087ec:	091b      	lsreq	r3, r3, #4
 80087ee:	3004      	addeq	r0, #4
 80087f0:	0799      	lsls	r1, r3, #30
 80087f2:	bf04      	itt	eq
 80087f4:	089b      	lsreq	r3, r3, #2
 80087f6:	3002      	addeq	r0, #2
 80087f8:	07d9      	lsls	r1, r3, #31
 80087fa:	d403      	bmi.n	8008804 <__lo0bits+0x50>
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	f100 0001 	add.w	r0, r0, #1
 8008802:	d003      	beq.n	800880c <__lo0bits+0x58>
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	4770      	bx	lr
 8008808:	2000      	movs	r0, #0
 800880a:	4770      	bx	lr
 800880c:	2020      	movs	r0, #32
 800880e:	4770      	bx	lr

08008810 <__i2b>:
 8008810:	b510      	push	{r4, lr}
 8008812:	460c      	mov	r4, r1
 8008814:	2101      	movs	r1, #1
 8008816:	f7ff feb7 	bl	8008588 <_Balloc>
 800881a:	4602      	mov	r2, r0
 800881c:	b928      	cbnz	r0, 800882a <__i2b+0x1a>
 800881e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008822:	4b04      	ldr	r3, [pc, #16]	; (8008834 <__i2b+0x24>)
 8008824:	4804      	ldr	r0, [pc, #16]	; (8008838 <__i2b+0x28>)
 8008826:	f001 f81b 	bl	8009860 <__assert_func>
 800882a:	2301      	movs	r3, #1
 800882c:	6144      	str	r4, [r0, #20]
 800882e:	6103      	str	r3, [r0, #16]
 8008830:	bd10      	pop	{r4, pc}
 8008832:	bf00      	nop
 8008834:	0800a02c 	.word	0x0800a02c
 8008838:	0800a120 	.word	0x0800a120

0800883c <__multiply>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	4614      	mov	r4, r2
 8008842:	690a      	ldr	r2, [r1, #16]
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	460d      	mov	r5, r1
 8008848:	429a      	cmp	r2, r3
 800884a:	bfbe      	ittt	lt
 800884c:	460b      	movlt	r3, r1
 800884e:	4625      	movlt	r5, r4
 8008850:	461c      	movlt	r4, r3
 8008852:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008856:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800885a:	68ab      	ldr	r3, [r5, #8]
 800885c:	6869      	ldr	r1, [r5, #4]
 800885e:	eb0a 0709 	add.w	r7, sl, r9
 8008862:	42bb      	cmp	r3, r7
 8008864:	b085      	sub	sp, #20
 8008866:	bfb8      	it	lt
 8008868:	3101      	addlt	r1, #1
 800886a:	f7ff fe8d 	bl	8008588 <_Balloc>
 800886e:	b930      	cbnz	r0, 800887e <__multiply+0x42>
 8008870:	4602      	mov	r2, r0
 8008872:	f240 115d 	movw	r1, #349	; 0x15d
 8008876:	4b41      	ldr	r3, [pc, #260]	; (800897c <__multiply+0x140>)
 8008878:	4841      	ldr	r0, [pc, #260]	; (8008980 <__multiply+0x144>)
 800887a:	f000 fff1 	bl	8009860 <__assert_func>
 800887e:	f100 0614 	add.w	r6, r0, #20
 8008882:	4633      	mov	r3, r6
 8008884:	2200      	movs	r2, #0
 8008886:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800888a:	4543      	cmp	r3, r8
 800888c:	d31e      	bcc.n	80088cc <__multiply+0x90>
 800888e:	f105 0c14 	add.w	ip, r5, #20
 8008892:	f104 0314 	add.w	r3, r4, #20
 8008896:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800889a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800889e:	9202      	str	r2, [sp, #8]
 80088a0:	ebac 0205 	sub.w	r2, ip, r5
 80088a4:	3a15      	subs	r2, #21
 80088a6:	f022 0203 	bic.w	r2, r2, #3
 80088aa:	3204      	adds	r2, #4
 80088ac:	f105 0115 	add.w	r1, r5, #21
 80088b0:	458c      	cmp	ip, r1
 80088b2:	bf38      	it	cc
 80088b4:	2204      	movcc	r2, #4
 80088b6:	9201      	str	r2, [sp, #4]
 80088b8:	9a02      	ldr	r2, [sp, #8]
 80088ba:	9303      	str	r3, [sp, #12]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d808      	bhi.n	80088d2 <__multiply+0x96>
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	dc55      	bgt.n	8008970 <__multiply+0x134>
 80088c4:	6107      	str	r7, [r0, #16]
 80088c6:	b005      	add	sp, #20
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	f843 2b04 	str.w	r2, [r3], #4
 80088d0:	e7db      	b.n	800888a <__multiply+0x4e>
 80088d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80088d6:	f1ba 0f00 	cmp.w	sl, #0
 80088da:	d020      	beq.n	800891e <__multiply+0xe2>
 80088dc:	46b1      	mov	r9, r6
 80088de:	2200      	movs	r2, #0
 80088e0:	f105 0e14 	add.w	lr, r5, #20
 80088e4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80088e8:	f8d9 b000 	ldr.w	fp, [r9]
 80088ec:	b2a1      	uxth	r1, r4
 80088ee:	fa1f fb8b 	uxth.w	fp, fp
 80088f2:	fb0a b101 	mla	r1, sl, r1, fp
 80088f6:	4411      	add	r1, r2
 80088f8:	f8d9 2000 	ldr.w	r2, [r9]
 80088fc:	0c24      	lsrs	r4, r4, #16
 80088fe:	0c12      	lsrs	r2, r2, #16
 8008900:	fb0a 2404 	mla	r4, sl, r4, r2
 8008904:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008908:	b289      	uxth	r1, r1
 800890a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800890e:	45f4      	cmp	ip, lr
 8008910:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008914:	f849 1b04 	str.w	r1, [r9], #4
 8008918:	d8e4      	bhi.n	80088e4 <__multiply+0xa8>
 800891a:	9901      	ldr	r1, [sp, #4]
 800891c:	5072      	str	r2, [r6, r1]
 800891e:	9a03      	ldr	r2, [sp, #12]
 8008920:	3304      	adds	r3, #4
 8008922:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008926:	f1b9 0f00 	cmp.w	r9, #0
 800892a:	d01f      	beq.n	800896c <__multiply+0x130>
 800892c:	46b6      	mov	lr, r6
 800892e:	f04f 0a00 	mov.w	sl, #0
 8008932:	6834      	ldr	r4, [r6, #0]
 8008934:	f105 0114 	add.w	r1, r5, #20
 8008938:	880a      	ldrh	r2, [r1, #0]
 800893a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800893e:	b2a4      	uxth	r4, r4
 8008940:	fb09 b202 	mla	r2, r9, r2, fp
 8008944:	4492      	add	sl, r2
 8008946:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800894a:	f84e 4b04 	str.w	r4, [lr], #4
 800894e:	f851 4b04 	ldr.w	r4, [r1], #4
 8008952:	f8be 2000 	ldrh.w	r2, [lr]
 8008956:	0c24      	lsrs	r4, r4, #16
 8008958:	fb09 2404 	mla	r4, r9, r4, r2
 800895c:	458c      	cmp	ip, r1
 800895e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008962:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008966:	d8e7      	bhi.n	8008938 <__multiply+0xfc>
 8008968:	9a01      	ldr	r2, [sp, #4]
 800896a:	50b4      	str	r4, [r6, r2]
 800896c:	3604      	adds	r6, #4
 800896e:	e7a3      	b.n	80088b8 <__multiply+0x7c>
 8008970:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1a5      	bne.n	80088c4 <__multiply+0x88>
 8008978:	3f01      	subs	r7, #1
 800897a:	e7a1      	b.n	80088c0 <__multiply+0x84>
 800897c:	0800a02c 	.word	0x0800a02c
 8008980:	0800a120 	.word	0x0800a120

08008984 <__pow5mult>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4615      	mov	r5, r2
 800898a:	f012 0203 	ands.w	r2, r2, #3
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	d007      	beq.n	80089a4 <__pow5mult+0x20>
 8008994:	4c25      	ldr	r4, [pc, #148]	; (8008a2c <__pow5mult+0xa8>)
 8008996:	3a01      	subs	r2, #1
 8008998:	2300      	movs	r3, #0
 800899a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800899e:	f7ff fe55 	bl	800864c <__multadd>
 80089a2:	4607      	mov	r7, r0
 80089a4:	10ad      	asrs	r5, r5, #2
 80089a6:	d03d      	beq.n	8008a24 <__pow5mult+0xa0>
 80089a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089aa:	b97c      	cbnz	r4, 80089cc <__pow5mult+0x48>
 80089ac:	2010      	movs	r0, #16
 80089ae:	f7ff fdb5 	bl	800851c <malloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	6270      	str	r0, [r6, #36]	; 0x24
 80089b6:	b928      	cbnz	r0, 80089c4 <__pow5mult+0x40>
 80089b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089bc:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <__pow5mult+0xac>)
 80089be:	481d      	ldr	r0, [pc, #116]	; (8008a34 <__pow5mult+0xb0>)
 80089c0:	f000 ff4e 	bl	8009860 <__assert_func>
 80089c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c8:	6004      	str	r4, [r0, #0]
 80089ca:	60c4      	str	r4, [r0, #12]
 80089cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d4:	b94c      	cbnz	r4, 80089ea <__pow5mult+0x66>
 80089d6:	f240 2171 	movw	r1, #625	; 0x271
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ff18 	bl	8008810 <__i2b>
 80089e0:	2300      	movs	r3, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	07eb      	lsls	r3, r5, #31
 80089f0:	d50a      	bpl.n	8008a08 <__pow5mult+0x84>
 80089f2:	4639      	mov	r1, r7
 80089f4:	4622      	mov	r2, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ff20 	bl	800883c <__multiply>
 80089fc:	4680      	mov	r8, r0
 80089fe:	4639      	mov	r1, r7
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fe01 	bl	8008608 <_Bfree>
 8008a06:	4647      	mov	r7, r8
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	d00b      	beq.n	8008a24 <__pow5mult+0xa0>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	b938      	cbnz	r0, 8008a20 <__pow5mult+0x9c>
 8008a10:	4622      	mov	r2, r4
 8008a12:	4621      	mov	r1, r4
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff ff11 	bl	800883c <__multiply>
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	f8c0 9000 	str.w	r9, [r0]
 8008a20:	4604      	mov	r4, r0
 8008a22:	e7e4      	b.n	80089ee <__pow5mult+0x6a>
 8008a24:	4638      	mov	r0, r7
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800a270 	.word	0x0800a270
 8008a30:	08009fb6 	.word	0x08009fb6
 8008a34:	0800a120 	.word	0x0800a120

08008a38 <__lshift>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	4607      	mov	r7, r0
 8008a40:	4691      	mov	r9, r2
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	6849      	ldr	r1, [r1, #4]
 8008a46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a4a:	68a3      	ldr	r3, [r4, #8]
 8008a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a50:	f108 0601 	add.w	r6, r8, #1
 8008a54:	42b3      	cmp	r3, r6
 8008a56:	db0b      	blt.n	8008a70 <__lshift+0x38>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff fd95 	bl	8008588 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b948      	cbnz	r0, 8008a76 <__lshift+0x3e>
 8008a62:	4602      	mov	r2, r0
 8008a64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a68:	4b27      	ldr	r3, [pc, #156]	; (8008b08 <__lshift+0xd0>)
 8008a6a:	4828      	ldr	r0, [pc, #160]	; (8008b0c <__lshift+0xd4>)
 8008a6c:	f000 fef8 	bl	8009860 <__assert_func>
 8008a70:	3101      	adds	r1, #1
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	e7ee      	b.n	8008a54 <__lshift+0x1c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f100 0114 	add.w	r1, r0, #20
 8008a7c:	f100 0210 	add.w	r2, r0, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	4553      	cmp	r3, sl
 8008a84:	db33      	blt.n	8008aee <__lshift+0xb6>
 8008a86:	6920      	ldr	r0, [r4, #16]
 8008a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a8c:	f104 0314 	add.w	r3, r4, #20
 8008a90:	f019 091f 	ands.w	r9, r9, #31
 8008a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a9c:	d02b      	beq.n	8008af6 <__lshift+0xbe>
 8008a9e:	468a      	mov	sl, r1
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f1c9 0e20 	rsb	lr, r9, #32
 8008aa6:	6818      	ldr	r0, [r3, #0]
 8008aa8:	fa00 f009 	lsl.w	r0, r0, r9
 8008aac:	4302      	orrs	r2, r0
 8008aae:	f84a 2b04 	str.w	r2, [sl], #4
 8008ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab6:	459c      	cmp	ip, r3
 8008ab8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008abc:	d8f3      	bhi.n	8008aa6 <__lshift+0x6e>
 8008abe:	ebac 0304 	sub.w	r3, ip, r4
 8008ac2:	3b15      	subs	r3, #21
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	3304      	adds	r3, #4
 8008aca:	f104 0015 	add.w	r0, r4, #21
 8008ace:	4584      	cmp	ip, r0
 8008ad0:	bf38      	it	cc
 8008ad2:	2304      	movcc	r3, #4
 8008ad4:	50ca      	str	r2, [r1, r3]
 8008ad6:	b10a      	cbz	r2, 8008adc <__lshift+0xa4>
 8008ad8:	f108 0602 	add.w	r6, r8, #2
 8008adc:	3e01      	subs	r6, #1
 8008ade:	4638      	mov	r0, r7
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	612e      	str	r6, [r5, #16]
 8008ae4:	f7ff fd90 	bl	8008608 <_Bfree>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008af2:	3301      	adds	r3, #1
 8008af4:	e7c5      	b.n	8008a82 <__lshift+0x4a>
 8008af6:	3904      	subs	r1, #4
 8008af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afc:	459c      	cmp	ip, r3
 8008afe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b02:	d8f9      	bhi.n	8008af8 <__lshift+0xc0>
 8008b04:	e7ea      	b.n	8008adc <__lshift+0xa4>
 8008b06:	bf00      	nop
 8008b08:	0800a02c 	.word	0x0800a02c
 8008b0c:	0800a120 	.word	0x0800a120

08008b10 <__mcmp>:
 8008b10:	4603      	mov	r3, r0
 8008b12:	690a      	ldr	r2, [r1, #16]
 8008b14:	6900      	ldr	r0, [r0, #16]
 8008b16:	b530      	push	{r4, r5, lr}
 8008b18:	1a80      	subs	r0, r0, r2
 8008b1a:	d10d      	bne.n	8008b38 <__mcmp+0x28>
 8008b1c:	3314      	adds	r3, #20
 8008b1e:	3114      	adds	r1, #20
 8008b20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b30:	4295      	cmp	r5, r2
 8008b32:	d002      	beq.n	8008b3a <__mcmp+0x2a>
 8008b34:	d304      	bcc.n	8008b40 <__mcmp+0x30>
 8008b36:	2001      	movs	r0, #1
 8008b38:	bd30      	pop	{r4, r5, pc}
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	d3f4      	bcc.n	8008b28 <__mcmp+0x18>
 8008b3e:	e7fb      	b.n	8008b38 <__mcmp+0x28>
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	e7f8      	b.n	8008b38 <__mcmp+0x28>
	...

08008b48 <__mdiff>:
 8008b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	4606      	mov	r6, r0
 8008b50:	4611      	mov	r1, r2
 8008b52:	4620      	mov	r0, r4
 8008b54:	4692      	mov	sl, r2
 8008b56:	f7ff ffdb 	bl	8008b10 <__mcmp>
 8008b5a:	1e05      	subs	r5, r0, #0
 8008b5c:	d111      	bne.n	8008b82 <__mdiff+0x3a>
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff fd11 	bl	8008588 <_Balloc>
 8008b66:	4602      	mov	r2, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <__mdiff+0x2e>
 8008b6a:	f240 2132 	movw	r1, #562	; 0x232
 8008b6e:	4b3c      	ldr	r3, [pc, #240]	; (8008c60 <__mdiff+0x118>)
 8008b70:	483c      	ldr	r0, [pc, #240]	; (8008c64 <__mdiff+0x11c>)
 8008b72:	f000 fe75 	bl	8009860 <__assert_func>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b82:	bfa4      	itt	ge
 8008b84:	4653      	movge	r3, sl
 8008b86:	46a2      	movge	sl, r4
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008b8e:	bfa6      	itte	ge
 8008b90:	461c      	movge	r4, r3
 8008b92:	2500      	movge	r5, #0
 8008b94:	2501      	movlt	r5, #1
 8008b96:	f7ff fcf7 	bl	8008588 <_Balloc>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	b918      	cbnz	r0, 8008ba6 <__mdiff+0x5e>
 8008b9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ba2:	4b2f      	ldr	r3, [pc, #188]	; (8008c60 <__mdiff+0x118>)
 8008ba4:	e7e4      	b.n	8008b70 <__mdiff+0x28>
 8008ba6:	f100 0814 	add.w	r8, r0, #20
 8008baa:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008bae:	60c5      	str	r5, [r0, #12]
 8008bb0:	f04f 0c00 	mov.w	ip, #0
 8008bb4:	f10a 0514 	add.w	r5, sl, #20
 8008bb8:	f10a 0010 	add.w	r0, sl, #16
 8008bbc:	46c2      	mov	sl, r8
 8008bbe:	6926      	ldr	r6, [r4, #16]
 8008bc0:	f104 0914 	add.w	r9, r4, #20
 8008bc4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008bc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bcc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008bd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bd4:	fa1f f18b 	uxth.w	r1, fp
 8008bd8:	4461      	add	r1, ip
 8008bda:	fa1f fc83 	uxth.w	ip, r3
 8008bde:	0c1b      	lsrs	r3, r3, #16
 8008be0:	eba1 010c 	sub.w	r1, r1, ip
 8008be4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008be8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008bec:	b289      	uxth	r1, r1
 8008bee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008bf2:	454e      	cmp	r6, r9
 8008bf4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008bf8:	f84a 3b04 	str.w	r3, [sl], #4
 8008bfc:	d8e6      	bhi.n	8008bcc <__mdiff+0x84>
 8008bfe:	1b33      	subs	r3, r6, r4
 8008c00:	3b15      	subs	r3, #21
 8008c02:	f023 0303 	bic.w	r3, r3, #3
 8008c06:	3415      	adds	r4, #21
 8008c08:	3304      	adds	r3, #4
 8008c0a:	42a6      	cmp	r6, r4
 8008c0c:	bf38      	it	cc
 8008c0e:	2304      	movcc	r3, #4
 8008c10:	441d      	add	r5, r3
 8008c12:	4443      	add	r3, r8
 8008c14:	461e      	mov	r6, r3
 8008c16:	462c      	mov	r4, r5
 8008c18:	4574      	cmp	r4, lr
 8008c1a:	d30e      	bcc.n	8008c3a <__mdiff+0xf2>
 8008c1c:	f10e 0103 	add.w	r1, lr, #3
 8008c20:	1b49      	subs	r1, r1, r5
 8008c22:	f021 0103 	bic.w	r1, r1, #3
 8008c26:	3d03      	subs	r5, #3
 8008c28:	45ae      	cmp	lr, r5
 8008c2a:	bf38      	it	cc
 8008c2c:	2100      	movcc	r1, #0
 8008c2e:	4419      	add	r1, r3
 8008c30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008c34:	b18b      	cbz	r3, 8008c5a <__mdiff+0x112>
 8008c36:	6117      	str	r7, [r2, #16]
 8008c38:	e7a0      	b.n	8008b7c <__mdiff+0x34>
 8008c3a:	f854 8b04 	ldr.w	r8, [r4], #4
 8008c3e:	fa1f f188 	uxth.w	r1, r8
 8008c42:	4461      	add	r1, ip
 8008c44:	1408      	asrs	r0, r1, #16
 8008c46:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008c4a:	b289      	uxth	r1, r1
 8008c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c54:	f846 1b04 	str.w	r1, [r6], #4
 8008c58:	e7de      	b.n	8008c18 <__mdiff+0xd0>
 8008c5a:	3f01      	subs	r7, #1
 8008c5c:	e7e8      	b.n	8008c30 <__mdiff+0xe8>
 8008c5e:	bf00      	nop
 8008c60:	0800a02c 	.word	0x0800a02c
 8008c64:	0800a120 	.word	0x0800a120

08008c68 <__ulp>:
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <__ulp+0x48>)
 8008c6a:	400b      	ands	r3, r1
 8008c6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dd02      	ble.n	8008c7a <__ulp+0x12>
 8008c74:	2000      	movs	r0, #0
 8008c76:	4619      	mov	r1, r3
 8008c78:	4770      	bx	lr
 8008c7a:	425b      	negs	r3, r3
 8008c7c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008c80:	f04f 0000 	mov.w	r0, #0
 8008c84:	f04f 0100 	mov.w	r1, #0
 8008c88:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c8c:	da04      	bge.n	8008c98 <__ulp+0x30>
 8008c8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c92:	fa43 f102 	asr.w	r1, r3, r2
 8008c96:	4770      	bx	lr
 8008c98:	f1a2 0314 	sub.w	r3, r2, #20
 8008c9c:	2b1e      	cmp	r3, #30
 8008c9e:	bfd6      	itet	le
 8008ca0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008ca4:	2301      	movgt	r3, #1
 8008ca6:	fa22 f303 	lsrle.w	r3, r2, r3
 8008caa:	4618      	mov	r0, r3
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	7ff00000 	.word	0x7ff00000

08008cb4 <__b2d>:
 8008cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	6907      	ldr	r7, [r0, #16]
 8008cba:	f100 0914 	add.w	r9, r0, #20
 8008cbe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008cc2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008cc6:	f1a7 0804 	sub.w	r8, r7, #4
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff fd52 	bl	8008774 <__hi0bits>
 8008cd0:	f1c0 0320 	rsb	r3, r0, #32
 8008cd4:	280a      	cmp	r0, #10
 8008cd6:	600b      	str	r3, [r1, #0]
 8008cd8:	491f      	ldr	r1, [pc, #124]	; (8008d58 <__b2d+0xa4>)
 8008cda:	dc17      	bgt.n	8008d0c <__b2d+0x58>
 8008cdc:	45c1      	cmp	r9, r8
 8008cde:	bf28      	it	cs
 8008ce0:	2200      	movcs	r2, #0
 8008ce2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ce6:	fa26 f30c 	lsr.w	r3, r6, ip
 8008cea:	bf38      	it	cc
 8008cec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008cf0:	ea43 0501 	orr.w	r5, r3, r1
 8008cf4:	f100 0315 	add.w	r3, r0, #21
 8008cf8:	fa06 f303 	lsl.w	r3, r6, r3
 8008cfc:	fa22 f20c 	lsr.w	r2, r2, ip
 8008d00:	ea43 0402 	orr.w	r4, r3, r2
 8008d04:	4620      	mov	r0, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0c:	45c1      	cmp	r9, r8
 8008d0e:	bf2e      	itee	cs
 8008d10:	2200      	movcs	r2, #0
 8008d12:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d16:	f1a7 0808 	subcc.w	r8, r7, #8
 8008d1a:	f1b0 030b 	subs.w	r3, r0, #11
 8008d1e:	d016      	beq.n	8008d4e <__b2d+0x9a>
 8008d20:	f1c3 0720 	rsb	r7, r3, #32
 8008d24:	fa22 f107 	lsr.w	r1, r2, r7
 8008d28:	45c8      	cmp	r8, r9
 8008d2a:	fa06 f603 	lsl.w	r6, r6, r3
 8008d2e:	ea46 0601 	orr.w	r6, r6, r1
 8008d32:	bf94      	ite	ls
 8008d34:	2100      	movls	r1, #0
 8008d36:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008d3a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008d3e:	fa02 f003 	lsl.w	r0, r2, r3
 8008d42:	40f9      	lsrs	r1, r7
 8008d44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d48:	ea40 0401 	orr.w	r4, r0, r1
 8008d4c:	e7da      	b.n	8008d04 <__b2d+0x50>
 8008d4e:	4614      	mov	r4, r2
 8008d50:	ea46 0501 	orr.w	r5, r6, r1
 8008d54:	e7d6      	b.n	8008d04 <__b2d+0x50>
 8008d56:	bf00      	nop
 8008d58:	3ff00000 	.word	0x3ff00000

08008d5c <__d2b>:
 8008d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008d60:	2101      	movs	r1, #1
 8008d62:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008d66:	4690      	mov	r8, r2
 8008d68:	461d      	mov	r5, r3
 8008d6a:	f7ff fc0d 	bl	8008588 <_Balloc>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	b930      	cbnz	r0, 8008d80 <__d2b+0x24>
 8008d72:	4602      	mov	r2, r0
 8008d74:	f240 310a 	movw	r1, #778	; 0x30a
 8008d78:	4b24      	ldr	r3, [pc, #144]	; (8008e0c <__d2b+0xb0>)
 8008d7a:	4825      	ldr	r0, [pc, #148]	; (8008e10 <__d2b+0xb4>)
 8008d7c:	f000 fd70 	bl	8009860 <__assert_func>
 8008d80:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008d84:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008d88:	bb2d      	cbnz	r5, 8008dd6 <__d2b+0x7a>
 8008d8a:	9301      	str	r3, [sp, #4]
 8008d8c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d90:	d026      	beq.n	8008de0 <__d2b+0x84>
 8008d92:	4668      	mov	r0, sp
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	f7ff fd0d 	bl	80087b4 <__lo0bits>
 8008d9a:	9900      	ldr	r1, [sp, #0]
 8008d9c:	b1f0      	cbz	r0, 8008ddc <__d2b+0x80>
 8008d9e:	9a01      	ldr	r2, [sp, #4]
 8008da0:	f1c0 0320 	rsb	r3, r0, #32
 8008da4:	fa02 f303 	lsl.w	r3, r2, r3
 8008da8:	430b      	orrs	r3, r1
 8008daa:	40c2      	lsrs	r2, r0
 8008dac:	6163      	str	r3, [r4, #20]
 8008dae:	9201      	str	r2, [sp, #4]
 8008db0:	9b01      	ldr	r3, [sp, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	bf14      	ite	ne
 8008db6:	2102      	movne	r1, #2
 8008db8:	2101      	moveq	r1, #1
 8008dba:	61a3      	str	r3, [r4, #24]
 8008dbc:	6121      	str	r1, [r4, #16]
 8008dbe:	b1c5      	cbz	r5, 8008df2 <__d2b+0x96>
 8008dc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008dc4:	4405      	add	r5, r0
 8008dc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008dca:	603d      	str	r5, [r7, #0]
 8008dcc:	6030      	str	r0, [r6, #0]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	b002      	add	sp, #8
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dda:	e7d6      	b.n	8008d8a <__d2b+0x2e>
 8008ddc:	6161      	str	r1, [r4, #20]
 8008dde:	e7e7      	b.n	8008db0 <__d2b+0x54>
 8008de0:	a801      	add	r0, sp, #4
 8008de2:	f7ff fce7 	bl	80087b4 <__lo0bits>
 8008de6:	2101      	movs	r1, #1
 8008de8:	9b01      	ldr	r3, [sp, #4]
 8008dea:	6121      	str	r1, [r4, #16]
 8008dec:	6163      	str	r3, [r4, #20]
 8008dee:	3020      	adds	r0, #32
 8008df0:	e7e5      	b.n	8008dbe <__d2b+0x62>
 8008df2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008df6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dfa:	6038      	str	r0, [r7, #0]
 8008dfc:	6918      	ldr	r0, [r3, #16]
 8008dfe:	f7ff fcb9 	bl	8008774 <__hi0bits>
 8008e02:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008e06:	6031      	str	r1, [r6, #0]
 8008e08:	e7e1      	b.n	8008dce <__d2b+0x72>
 8008e0a:	bf00      	nop
 8008e0c:	0800a02c 	.word	0x0800a02c
 8008e10:	0800a120 	.word	0x0800a120

08008e14 <__ratio>:
 8008e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	4688      	mov	r8, r1
 8008e1a:	4669      	mov	r1, sp
 8008e1c:	4681      	mov	r9, r0
 8008e1e:	f7ff ff49 	bl	8008cb4 <__b2d>
 8008e22:	460f      	mov	r7, r1
 8008e24:	4604      	mov	r4, r0
 8008e26:	460d      	mov	r5, r1
 8008e28:	4640      	mov	r0, r8
 8008e2a:	a901      	add	r1, sp, #4
 8008e2c:	f7ff ff42 	bl	8008cb4 <__b2d>
 8008e30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e38:	468b      	mov	fp, r1
 8008e3a:	eba3 0c02 	sub.w	ip, r3, r2
 8008e3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e42:	1a9b      	subs	r3, r3, r2
 8008e44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bfd5      	itete	le
 8008e4c:	460a      	movle	r2, r1
 8008e4e:	462a      	movgt	r2, r5
 8008e50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e54:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e58:	bfd8      	it	le
 8008e5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e5e:	465b      	mov	r3, fp
 8008e60:	4602      	mov	r2, r0
 8008e62:	4639      	mov	r1, r7
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7f7 fc79 	bl	800075c <__aeabi_ddiv>
 8008e6a:	b003      	add	sp, #12
 8008e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e70 <__copybits>:
 8008e70:	3901      	subs	r1, #1
 8008e72:	b570      	push	{r4, r5, r6, lr}
 8008e74:	1149      	asrs	r1, r1, #5
 8008e76:	6914      	ldr	r4, [r2, #16]
 8008e78:	3101      	adds	r1, #1
 8008e7a:	f102 0314 	add.w	r3, r2, #20
 8008e7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e86:	1f05      	subs	r5, r0, #4
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	d30c      	bcc.n	8008ea6 <__copybits+0x36>
 8008e8c:	1aa3      	subs	r3, r4, r2
 8008e8e:	3b11      	subs	r3, #17
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	3211      	adds	r2, #17
 8008e96:	42a2      	cmp	r2, r4
 8008e98:	bf88      	it	hi
 8008e9a:	2300      	movhi	r3, #0
 8008e9c:	4418      	add	r0, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4288      	cmp	r0, r1
 8008ea2:	d305      	bcc.n	8008eb0 <__copybits+0x40>
 8008ea4:	bd70      	pop	{r4, r5, r6, pc}
 8008ea6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008eaa:	f845 6f04 	str.w	r6, [r5, #4]!
 8008eae:	e7eb      	b.n	8008e88 <__copybits+0x18>
 8008eb0:	f840 3b04 	str.w	r3, [r0], #4
 8008eb4:	e7f4      	b.n	8008ea0 <__copybits+0x30>

08008eb6 <__any_on>:
 8008eb6:	f100 0214 	add.w	r2, r0, #20
 8008eba:	6900      	ldr	r0, [r0, #16]
 8008ebc:	114b      	asrs	r3, r1, #5
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	db11      	blt.n	8008ee8 <__any_on+0x32>
 8008ec4:	dd0a      	ble.n	8008edc <__any_on+0x26>
 8008ec6:	f011 011f 	ands.w	r1, r1, #31
 8008eca:	d007      	beq.n	8008edc <__any_on+0x26>
 8008ecc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ed0:	fa24 f001 	lsr.w	r0, r4, r1
 8008ed4:	fa00 f101 	lsl.w	r1, r0, r1
 8008ed8:	428c      	cmp	r4, r1
 8008eda:	d10b      	bne.n	8008ef4 <__any_on+0x3e>
 8008edc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d803      	bhi.n	8008eec <__any_on+0x36>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	bd10      	pop	{r4, pc}
 8008ee8:	4603      	mov	r3, r0
 8008eea:	e7f7      	b.n	8008edc <__any_on+0x26>
 8008eec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	d0f5      	beq.n	8008ee0 <__any_on+0x2a>
 8008ef4:	2001      	movs	r0, #1
 8008ef6:	e7f6      	b.n	8008ee6 <__any_on+0x30>

08008ef8 <_calloc_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	fb02 f501 	mul.w	r5, r2, r1
 8008efe:	4629      	mov	r1, r5
 8008f00:	f000 f854 	bl	8008fac <_malloc_r>
 8008f04:	4604      	mov	r4, r0
 8008f06:	b118      	cbz	r0, 8008f10 <_calloc_r+0x18>
 8008f08:	462a      	mov	r2, r5
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	f7fc facc 	bl	80054a8 <memset>
 8008f10:	4620      	mov	r0, r4
 8008f12:	bd38      	pop	{r3, r4, r5, pc}

08008f14 <_free_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4605      	mov	r5, r0
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d043      	beq.n	8008fa4 <_free_r+0x90>
 8008f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f20:	1f0c      	subs	r4, r1, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfb8      	it	lt
 8008f26:	18e4      	addlt	r4, r4, r3
 8008f28:	f000 fe2c 	bl	8009b84 <__malloc_lock>
 8008f2c:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <_free_r+0x94>)
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	4610      	mov	r0, r2
 8008f32:	b933      	cbnz	r3, 8008f42 <_free_r+0x2e>
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	6014      	str	r4, [r2, #0]
 8008f38:	4628      	mov	r0, r5
 8008f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f3e:	f000 be27 	b.w	8009b90 <__malloc_unlock>
 8008f42:	42a3      	cmp	r3, r4
 8008f44:	d90a      	bls.n	8008f5c <_free_r+0x48>
 8008f46:	6821      	ldr	r1, [r4, #0]
 8008f48:	1862      	adds	r2, r4, r1
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	bf01      	itttt	eq
 8008f4e:	681a      	ldreq	r2, [r3, #0]
 8008f50:	685b      	ldreq	r3, [r3, #4]
 8008f52:	1852      	addeq	r2, r2, r1
 8008f54:	6022      	streq	r2, [r4, #0]
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	6004      	str	r4, [r0, #0]
 8008f5a:	e7ed      	b.n	8008f38 <_free_r+0x24>
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	b10b      	cbz	r3, 8008f66 <_free_r+0x52>
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	d9fa      	bls.n	8008f5c <_free_r+0x48>
 8008f66:	6811      	ldr	r1, [r2, #0]
 8008f68:	1850      	adds	r0, r2, r1
 8008f6a:	42a0      	cmp	r0, r4
 8008f6c:	d10b      	bne.n	8008f86 <_free_r+0x72>
 8008f6e:	6820      	ldr	r0, [r4, #0]
 8008f70:	4401      	add	r1, r0
 8008f72:	1850      	adds	r0, r2, r1
 8008f74:	4283      	cmp	r3, r0
 8008f76:	6011      	str	r1, [r2, #0]
 8008f78:	d1de      	bne.n	8008f38 <_free_r+0x24>
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4401      	add	r1, r0
 8008f80:	6011      	str	r1, [r2, #0]
 8008f82:	6053      	str	r3, [r2, #4]
 8008f84:	e7d8      	b.n	8008f38 <_free_r+0x24>
 8008f86:	d902      	bls.n	8008f8e <_free_r+0x7a>
 8008f88:	230c      	movs	r3, #12
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	e7d4      	b.n	8008f38 <_free_r+0x24>
 8008f8e:	6820      	ldr	r0, [r4, #0]
 8008f90:	1821      	adds	r1, r4, r0
 8008f92:	428b      	cmp	r3, r1
 8008f94:	bf01      	itttt	eq
 8008f96:	6819      	ldreq	r1, [r3, #0]
 8008f98:	685b      	ldreq	r3, [r3, #4]
 8008f9a:	1809      	addeq	r1, r1, r0
 8008f9c:	6021      	streq	r1, [r4, #0]
 8008f9e:	6063      	str	r3, [r4, #4]
 8008fa0:	6054      	str	r4, [r2, #4]
 8008fa2:	e7c9      	b.n	8008f38 <_free_r+0x24>
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200002d8 	.word	0x200002d8

08008fac <_malloc_r>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	1ccd      	adds	r5, r1, #3
 8008fb0:	f025 0503 	bic.w	r5, r5, #3
 8008fb4:	3508      	adds	r5, #8
 8008fb6:	2d0c      	cmp	r5, #12
 8008fb8:	bf38      	it	cc
 8008fba:	250c      	movcc	r5, #12
 8008fbc:	2d00      	cmp	r5, #0
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	db01      	blt.n	8008fc6 <_malloc_r+0x1a>
 8008fc2:	42a9      	cmp	r1, r5
 8008fc4:	d903      	bls.n	8008fce <_malloc_r+0x22>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	6033      	str	r3, [r6, #0]
 8008fca:	2000      	movs	r0, #0
 8008fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fce:	f000 fdd9 	bl	8009b84 <__malloc_lock>
 8008fd2:	4921      	ldr	r1, [pc, #132]	; (8009058 <_malloc_r+0xac>)
 8008fd4:	680a      	ldr	r2, [r1, #0]
 8008fd6:	4614      	mov	r4, r2
 8008fd8:	b99c      	cbnz	r4, 8009002 <_malloc_r+0x56>
 8008fda:	4f20      	ldr	r7, [pc, #128]	; (800905c <_malloc_r+0xb0>)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	b923      	cbnz	r3, 8008fea <_malloc_r+0x3e>
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f000 faf6 	bl	80095d4 <_sbrk_r>
 8008fe8:	6038      	str	r0, [r7, #0]
 8008fea:	4629      	mov	r1, r5
 8008fec:	4630      	mov	r0, r6
 8008fee:	f000 faf1 	bl	80095d4 <_sbrk_r>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d123      	bne.n	800903e <_malloc_r+0x92>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	f000 fdc8 	bl	8009b90 <__malloc_unlock>
 8009000:	e7e3      	b.n	8008fca <_malloc_r+0x1e>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	1b5b      	subs	r3, r3, r5
 8009006:	d417      	bmi.n	8009038 <_malloc_r+0x8c>
 8009008:	2b0b      	cmp	r3, #11
 800900a:	d903      	bls.n	8009014 <_malloc_r+0x68>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	441c      	add	r4, r3
 8009010:	6025      	str	r5, [r4, #0]
 8009012:	e004      	b.n	800901e <_malloc_r+0x72>
 8009014:	6863      	ldr	r3, [r4, #4]
 8009016:	42a2      	cmp	r2, r4
 8009018:	bf0c      	ite	eq
 800901a:	600b      	streq	r3, [r1, #0]
 800901c:	6053      	strne	r3, [r2, #4]
 800901e:	4630      	mov	r0, r6
 8009020:	f000 fdb6 	bl	8009b90 <__malloc_unlock>
 8009024:	f104 000b 	add.w	r0, r4, #11
 8009028:	1d23      	adds	r3, r4, #4
 800902a:	f020 0007 	bic.w	r0, r0, #7
 800902e:	1ac2      	subs	r2, r0, r3
 8009030:	d0cc      	beq.n	8008fcc <_malloc_r+0x20>
 8009032:	1a1b      	subs	r3, r3, r0
 8009034:	50a3      	str	r3, [r4, r2]
 8009036:	e7c9      	b.n	8008fcc <_malloc_r+0x20>
 8009038:	4622      	mov	r2, r4
 800903a:	6864      	ldr	r4, [r4, #4]
 800903c:	e7cc      	b.n	8008fd8 <_malloc_r+0x2c>
 800903e:	1cc4      	adds	r4, r0, #3
 8009040:	f024 0403 	bic.w	r4, r4, #3
 8009044:	42a0      	cmp	r0, r4
 8009046:	d0e3      	beq.n	8009010 <_malloc_r+0x64>
 8009048:	1a21      	subs	r1, r4, r0
 800904a:	4630      	mov	r0, r6
 800904c:	f000 fac2 	bl	80095d4 <_sbrk_r>
 8009050:	3001      	adds	r0, #1
 8009052:	d1dd      	bne.n	8009010 <_malloc_r+0x64>
 8009054:	e7cf      	b.n	8008ff6 <_malloc_r+0x4a>
 8009056:	bf00      	nop
 8009058:	200002d8 	.word	0x200002d8
 800905c:	200002dc 	.word	0x200002dc

08009060 <__ssputs_r>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	688e      	ldr	r6, [r1, #8]
 8009066:	4682      	mov	sl, r0
 8009068:	429e      	cmp	r6, r3
 800906a:	460c      	mov	r4, r1
 800906c:	4690      	mov	r8, r2
 800906e:	461f      	mov	r7, r3
 8009070:	d838      	bhi.n	80090e4 <__ssputs_r+0x84>
 8009072:	898a      	ldrh	r2, [r1, #12]
 8009074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009078:	d032      	beq.n	80090e0 <__ssputs_r+0x80>
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	6909      	ldr	r1, [r1, #16]
 800907e:	3301      	adds	r3, #1
 8009080:	eba5 0901 	sub.w	r9, r5, r1
 8009084:	6965      	ldr	r5, [r4, #20]
 8009086:	444b      	add	r3, r9
 8009088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800908c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009090:	106d      	asrs	r5, r5, #1
 8009092:	429d      	cmp	r5, r3
 8009094:	bf38      	it	cc
 8009096:	461d      	movcc	r5, r3
 8009098:	0553      	lsls	r3, r2, #21
 800909a:	d531      	bpl.n	8009100 <__ssputs_r+0xa0>
 800909c:	4629      	mov	r1, r5
 800909e:	f7ff ff85 	bl	8008fac <_malloc_r>
 80090a2:	4606      	mov	r6, r0
 80090a4:	b950      	cbnz	r0, 80090bc <__ssputs_r+0x5c>
 80090a6:	230c      	movs	r3, #12
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	f8ca 3000 	str.w	r3, [sl]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090bc:	464a      	mov	r2, r9
 80090be:	6921      	ldr	r1, [r4, #16]
 80090c0:	f7ff fa54 	bl	800856c <memcpy>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	6126      	str	r6, [r4, #16]
 80090d2:	444e      	add	r6, r9
 80090d4:	6026      	str	r6, [r4, #0]
 80090d6:	463e      	mov	r6, r7
 80090d8:	6165      	str	r5, [r4, #20]
 80090da:	eba5 0509 	sub.w	r5, r5, r9
 80090de:	60a5      	str	r5, [r4, #8]
 80090e0:	42be      	cmp	r6, r7
 80090e2:	d900      	bls.n	80090e6 <__ssputs_r+0x86>
 80090e4:	463e      	mov	r6, r7
 80090e6:	4632      	mov	r2, r6
 80090e8:	4641      	mov	r1, r8
 80090ea:	6820      	ldr	r0, [r4, #0]
 80090ec:	f000 fd30 	bl	8009b50 <memmove>
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	6822      	ldr	r2, [r4, #0]
 80090f4:	1b9b      	subs	r3, r3, r6
 80090f6:	4432      	add	r2, r6
 80090f8:	2000      	movs	r0, #0
 80090fa:	60a3      	str	r3, [r4, #8]
 80090fc:	6022      	str	r2, [r4, #0]
 80090fe:	e7db      	b.n	80090b8 <__ssputs_r+0x58>
 8009100:	462a      	mov	r2, r5
 8009102:	f000 fd4b 	bl	8009b9c <_realloc_r>
 8009106:	4606      	mov	r6, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	d1e1      	bne.n	80090d0 <__ssputs_r+0x70>
 800910c:	4650      	mov	r0, sl
 800910e:	6921      	ldr	r1, [r4, #16]
 8009110:	f7ff ff00 	bl	8008f14 <_free_r>
 8009114:	e7c7      	b.n	80090a6 <__ssputs_r+0x46>
	...

08009118 <_svfiprintf_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4698      	mov	r8, r3
 800911e:	898b      	ldrh	r3, [r1, #12]
 8009120:	4607      	mov	r7, r0
 8009122:	061b      	lsls	r3, r3, #24
 8009124:	460d      	mov	r5, r1
 8009126:	4614      	mov	r4, r2
 8009128:	b09d      	sub	sp, #116	; 0x74
 800912a:	d50e      	bpl.n	800914a <_svfiprintf_r+0x32>
 800912c:	690b      	ldr	r3, [r1, #16]
 800912e:	b963      	cbnz	r3, 800914a <_svfiprintf_r+0x32>
 8009130:	2140      	movs	r1, #64	; 0x40
 8009132:	f7ff ff3b 	bl	8008fac <_malloc_r>
 8009136:	6028      	str	r0, [r5, #0]
 8009138:	6128      	str	r0, [r5, #16]
 800913a:	b920      	cbnz	r0, 8009146 <_svfiprintf_r+0x2e>
 800913c:	230c      	movs	r3, #12
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e0d1      	b.n	80092ea <_svfiprintf_r+0x1d2>
 8009146:	2340      	movs	r3, #64	; 0x40
 8009148:	616b      	str	r3, [r5, #20]
 800914a:	2300      	movs	r3, #0
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	2320      	movs	r3, #32
 8009150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009154:	2330      	movs	r3, #48	; 0x30
 8009156:	f04f 0901 	mov.w	r9, #1
 800915a:	f8cd 800c 	str.w	r8, [sp, #12]
 800915e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009304 <_svfiprintf_r+0x1ec>
 8009162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009166:	4623      	mov	r3, r4
 8009168:	469a      	mov	sl, r3
 800916a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800916e:	b10a      	cbz	r2, 8009174 <_svfiprintf_r+0x5c>
 8009170:	2a25      	cmp	r2, #37	; 0x25
 8009172:	d1f9      	bne.n	8009168 <_svfiprintf_r+0x50>
 8009174:	ebba 0b04 	subs.w	fp, sl, r4
 8009178:	d00b      	beq.n	8009192 <_svfiprintf_r+0x7a>
 800917a:	465b      	mov	r3, fp
 800917c:	4622      	mov	r2, r4
 800917e:	4629      	mov	r1, r5
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff ff6d 	bl	8009060 <__ssputs_r>
 8009186:	3001      	adds	r0, #1
 8009188:	f000 80aa 	beq.w	80092e0 <_svfiprintf_r+0x1c8>
 800918c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800918e:	445a      	add	r2, fp
 8009190:	9209      	str	r2, [sp, #36]	; 0x24
 8009192:	f89a 3000 	ldrb.w	r3, [sl]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80a2 	beq.w	80092e0 <_svfiprintf_r+0x1c8>
 800919c:	2300      	movs	r3, #0
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091a6:	f10a 0a01 	add.w	sl, sl, #1
 80091aa:	9304      	str	r3, [sp, #16]
 80091ac:	9307      	str	r3, [sp, #28]
 80091ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b2:	931a      	str	r3, [sp, #104]	; 0x68
 80091b4:	4654      	mov	r4, sl
 80091b6:	2205      	movs	r2, #5
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	4851      	ldr	r0, [pc, #324]	; (8009304 <_svfiprintf_r+0x1ec>)
 80091be:	f7ff f9c7 	bl	8008550 <memchr>
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	b9d8      	cbnz	r0, 80091fe <_svfiprintf_r+0xe6>
 80091c6:	06d0      	lsls	r0, r2, #27
 80091c8:	bf44      	itt	mi
 80091ca:	2320      	movmi	r3, #32
 80091cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d0:	0711      	lsls	r1, r2, #28
 80091d2:	bf44      	itt	mi
 80091d4:	232b      	movmi	r3, #43	; 0x2b
 80091d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091da:	f89a 3000 	ldrb.w	r3, [sl]
 80091de:	2b2a      	cmp	r3, #42	; 0x2a
 80091e0:	d015      	beq.n	800920e <_svfiprintf_r+0xf6>
 80091e2:	4654      	mov	r4, sl
 80091e4:	2000      	movs	r0, #0
 80091e6:	f04f 0c0a 	mov.w	ip, #10
 80091ea:	9a07      	ldr	r2, [sp, #28]
 80091ec:	4621      	mov	r1, r4
 80091ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f2:	3b30      	subs	r3, #48	; 0x30
 80091f4:	2b09      	cmp	r3, #9
 80091f6:	d94e      	bls.n	8009296 <_svfiprintf_r+0x17e>
 80091f8:	b1b0      	cbz	r0, 8009228 <_svfiprintf_r+0x110>
 80091fa:	9207      	str	r2, [sp, #28]
 80091fc:	e014      	b.n	8009228 <_svfiprintf_r+0x110>
 80091fe:	eba0 0308 	sub.w	r3, r0, r8
 8009202:	fa09 f303 	lsl.w	r3, r9, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	46a2      	mov	sl, r4
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	e7d2      	b.n	80091b4 <_svfiprintf_r+0x9c>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	1d19      	adds	r1, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9103      	str	r1, [sp, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfbb      	ittet	lt
 800921a:	425b      	neglt	r3, r3
 800921c:	f042 0202 	orrlt.w	r2, r2, #2
 8009220:	9307      	strge	r3, [sp, #28]
 8009222:	9307      	strlt	r3, [sp, #28]
 8009224:	bfb8      	it	lt
 8009226:	9204      	strlt	r2, [sp, #16]
 8009228:	7823      	ldrb	r3, [r4, #0]
 800922a:	2b2e      	cmp	r3, #46	; 0x2e
 800922c:	d10c      	bne.n	8009248 <_svfiprintf_r+0x130>
 800922e:	7863      	ldrb	r3, [r4, #1]
 8009230:	2b2a      	cmp	r3, #42	; 0x2a
 8009232:	d135      	bne.n	80092a0 <_svfiprintf_r+0x188>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	3402      	adds	r4, #2
 8009238:	1d1a      	adds	r2, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	9203      	str	r2, [sp, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfb8      	it	lt
 8009242:	f04f 33ff 	movlt.w	r3, #4294967295
 8009246:	9305      	str	r3, [sp, #20]
 8009248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009314 <_svfiprintf_r+0x1fc>
 800924c:	2203      	movs	r2, #3
 800924e:	4650      	mov	r0, sl
 8009250:	7821      	ldrb	r1, [r4, #0]
 8009252:	f7ff f97d 	bl	8008550 <memchr>
 8009256:	b140      	cbz	r0, 800926a <_svfiprintf_r+0x152>
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	eba0 000a 	sub.w	r0, r0, sl
 800925e:	fa03 f000 	lsl.w	r0, r3, r0
 8009262:	9b04      	ldr	r3, [sp, #16]
 8009264:	3401      	adds	r4, #1
 8009266:	4303      	orrs	r3, r0
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926e:	2206      	movs	r2, #6
 8009270:	4825      	ldr	r0, [pc, #148]	; (8009308 <_svfiprintf_r+0x1f0>)
 8009272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009276:	f7ff f96b 	bl	8008550 <memchr>
 800927a:	2800      	cmp	r0, #0
 800927c:	d038      	beq.n	80092f0 <_svfiprintf_r+0x1d8>
 800927e:	4b23      	ldr	r3, [pc, #140]	; (800930c <_svfiprintf_r+0x1f4>)
 8009280:	bb1b      	cbnz	r3, 80092ca <_svfiprintf_r+0x1b2>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	3307      	adds	r3, #7
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	3308      	adds	r3, #8
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009290:	4433      	add	r3, r6
 8009292:	9309      	str	r3, [sp, #36]	; 0x24
 8009294:	e767      	b.n	8009166 <_svfiprintf_r+0x4e>
 8009296:	460c      	mov	r4, r1
 8009298:	2001      	movs	r0, #1
 800929a:	fb0c 3202 	mla	r2, ip, r2, r3
 800929e:	e7a5      	b.n	80091ec <_svfiprintf_r+0xd4>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f04f 0c0a 	mov.w	ip, #10
 80092a6:	4619      	mov	r1, r3
 80092a8:	3401      	adds	r4, #1
 80092aa:	9305      	str	r3, [sp, #20]
 80092ac:	4620      	mov	r0, r4
 80092ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b2:	3a30      	subs	r2, #48	; 0x30
 80092b4:	2a09      	cmp	r2, #9
 80092b6:	d903      	bls.n	80092c0 <_svfiprintf_r+0x1a8>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0c5      	beq.n	8009248 <_svfiprintf_r+0x130>
 80092bc:	9105      	str	r1, [sp, #20]
 80092be:	e7c3      	b.n	8009248 <_svfiprintf_r+0x130>
 80092c0:	4604      	mov	r4, r0
 80092c2:	2301      	movs	r3, #1
 80092c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c8:	e7f0      	b.n	80092ac <_svfiprintf_r+0x194>
 80092ca:	ab03      	add	r3, sp, #12
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	462a      	mov	r2, r5
 80092d0:	4638      	mov	r0, r7
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <_svfiprintf_r+0x1f8>)
 80092d4:	a904      	add	r1, sp, #16
 80092d6:	f7fc f98d 	bl	80055f4 <_printf_float>
 80092da:	1c42      	adds	r2, r0, #1
 80092dc:	4606      	mov	r6, r0
 80092de:	d1d6      	bne.n	800928e <_svfiprintf_r+0x176>
 80092e0:	89ab      	ldrh	r3, [r5, #12]
 80092e2:	065b      	lsls	r3, r3, #25
 80092e4:	f53f af2c 	bmi.w	8009140 <_svfiprintf_r+0x28>
 80092e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ea:	b01d      	add	sp, #116	; 0x74
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	ab03      	add	r3, sp, #12
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	462a      	mov	r2, r5
 80092f6:	4638      	mov	r0, r7
 80092f8:	4b05      	ldr	r3, [pc, #20]	; (8009310 <_svfiprintf_r+0x1f8>)
 80092fa:	a904      	add	r1, sp, #16
 80092fc:	f7fc fc16 	bl	8005b2c <_printf_i>
 8009300:	e7eb      	b.n	80092da <_svfiprintf_r+0x1c2>
 8009302:	bf00      	nop
 8009304:	0800a27c 	.word	0x0800a27c
 8009308:	0800a286 	.word	0x0800a286
 800930c:	080055f5 	.word	0x080055f5
 8009310:	08009061 	.word	0x08009061
 8009314:	0800a282 	.word	0x0800a282

08009318 <__sfputc_r>:
 8009318:	6893      	ldr	r3, [r2, #8]
 800931a:	b410      	push	{r4}
 800931c:	3b01      	subs	r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	6093      	str	r3, [r2, #8]
 8009322:	da07      	bge.n	8009334 <__sfputc_r+0x1c>
 8009324:	6994      	ldr	r4, [r2, #24]
 8009326:	42a3      	cmp	r3, r4
 8009328:	db01      	blt.n	800932e <__sfputc_r+0x16>
 800932a:	290a      	cmp	r1, #10
 800932c:	d102      	bne.n	8009334 <__sfputc_r+0x1c>
 800932e:	bc10      	pop	{r4}
 8009330:	f000 b9b6 	b.w	80096a0 <__swbuf_r>
 8009334:	6813      	ldr	r3, [r2, #0]
 8009336:	1c58      	adds	r0, r3, #1
 8009338:	6010      	str	r0, [r2, #0]
 800933a:	7019      	strb	r1, [r3, #0]
 800933c:	4608      	mov	r0, r1
 800933e:	bc10      	pop	{r4}
 8009340:	4770      	bx	lr

08009342 <__sfputs_r>:
 8009342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009344:	4606      	mov	r6, r0
 8009346:	460f      	mov	r7, r1
 8009348:	4614      	mov	r4, r2
 800934a:	18d5      	adds	r5, r2, r3
 800934c:	42ac      	cmp	r4, r5
 800934e:	d101      	bne.n	8009354 <__sfputs_r+0x12>
 8009350:	2000      	movs	r0, #0
 8009352:	e007      	b.n	8009364 <__sfputs_r+0x22>
 8009354:	463a      	mov	r2, r7
 8009356:	4630      	mov	r0, r6
 8009358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935c:	f7ff ffdc 	bl	8009318 <__sfputc_r>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d1f3      	bne.n	800934c <__sfputs_r+0xa>
 8009364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009368 <_vfiprintf_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	460d      	mov	r5, r1
 800936e:	4614      	mov	r4, r2
 8009370:	4698      	mov	r8, r3
 8009372:	4606      	mov	r6, r0
 8009374:	b09d      	sub	sp, #116	; 0x74
 8009376:	b118      	cbz	r0, 8009380 <_vfiprintf_r+0x18>
 8009378:	6983      	ldr	r3, [r0, #24]
 800937a:	b90b      	cbnz	r3, 8009380 <_vfiprintf_r+0x18>
 800937c:	f7fe fcc2 	bl	8007d04 <__sinit>
 8009380:	4b89      	ldr	r3, [pc, #548]	; (80095a8 <_vfiprintf_r+0x240>)
 8009382:	429d      	cmp	r5, r3
 8009384:	d11b      	bne.n	80093be <_vfiprintf_r+0x56>
 8009386:	6875      	ldr	r5, [r6, #4]
 8009388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800938a:	07d9      	lsls	r1, r3, #31
 800938c:	d405      	bmi.n	800939a <_vfiprintf_r+0x32>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	059a      	lsls	r2, r3, #22
 8009392:	d402      	bmi.n	800939a <_vfiprintf_r+0x32>
 8009394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009396:	f7ff f8be 	bl	8008516 <__retarget_lock_acquire_recursive>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	071b      	lsls	r3, r3, #28
 800939e:	d501      	bpl.n	80093a4 <_vfiprintf_r+0x3c>
 80093a0:	692b      	ldr	r3, [r5, #16]
 80093a2:	b9eb      	cbnz	r3, 80093e0 <_vfiprintf_r+0x78>
 80093a4:	4629      	mov	r1, r5
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 f9ec 	bl	8009784 <__swsetup_r>
 80093ac:	b1c0      	cbz	r0, 80093e0 <_vfiprintf_r+0x78>
 80093ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093b0:	07dc      	lsls	r4, r3, #31
 80093b2:	d50e      	bpl.n	80093d2 <_vfiprintf_r+0x6a>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b01d      	add	sp, #116	; 0x74
 80093ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093be:	4b7b      	ldr	r3, [pc, #492]	; (80095ac <_vfiprintf_r+0x244>)
 80093c0:	429d      	cmp	r5, r3
 80093c2:	d101      	bne.n	80093c8 <_vfiprintf_r+0x60>
 80093c4:	68b5      	ldr	r5, [r6, #8]
 80093c6:	e7df      	b.n	8009388 <_vfiprintf_r+0x20>
 80093c8:	4b79      	ldr	r3, [pc, #484]	; (80095b0 <_vfiprintf_r+0x248>)
 80093ca:	429d      	cmp	r5, r3
 80093cc:	bf08      	it	eq
 80093ce:	68f5      	ldreq	r5, [r6, #12]
 80093d0:	e7da      	b.n	8009388 <_vfiprintf_r+0x20>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	0598      	lsls	r0, r3, #22
 80093d6:	d4ed      	bmi.n	80093b4 <_vfiprintf_r+0x4c>
 80093d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093da:	f7ff f89d 	bl	8008518 <__retarget_lock_release_recursive>
 80093de:	e7e9      	b.n	80093b4 <_vfiprintf_r+0x4c>
 80093e0:	2300      	movs	r3, #0
 80093e2:	9309      	str	r3, [sp, #36]	; 0x24
 80093e4:	2320      	movs	r3, #32
 80093e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ea:	2330      	movs	r3, #48	; 0x30
 80093ec:	f04f 0901 	mov.w	r9, #1
 80093f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80095b4 <_vfiprintf_r+0x24c>
 80093f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093fc:	4623      	mov	r3, r4
 80093fe:	469a      	mov	sl, r3
 8009400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009404:	b10a      	cbz	r2, 800940a <_vfiprintf_r+0xa2>
 8009406:	2a25      	cmp	r2, #37	; 0x25
 8009408:	d1f9      	bne.n	80093fe <_vfiprintf_r+0x96>
 800940a:	ebba 0b04 	subs.w	fp, sl, r4
 800940e:	d00b      	beq.n	8009428 <_vfiprintf_r+0xc0>
 8009410:	465b      	mov	r3, fp
 8009412:	4622      	mov	r2, r4
 8009414:	4629      	mov	r1, r5
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff ff93 	bl	8009342 <__sfputs_r>
 800941c:	3001      	adds	r0, #1
 800941e:	f000 80aa 	beq.w	8009576 <_vfiprintf_r+0x20e>
 8009422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009424:	445a      	add	r2, fp
 8009426:	9209      	str	r2, [sp, #36]	; 0x24
 8009428:	f89a 3000 	ldrb.w	r3, [sl]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80a2 	beq.w	8009576 <_vfiprintf_r+0x20e>
 8009432:	2300      	movs	r3, #0
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009448:	931a      	str	r3, [sp, #104]	; 0x68
 800944a:	4654      	mov	r4, sl
 800944c:	2205      	movs	r2, #5
 800944e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009452:	4858      	ldr	r0, [pc, #352]	; (80095b4 <_vfiprintf_r+0x24c>)
 8009454:	f7ff f87c 	bl	8008550 <memchr>
 8009458:	9a04      	ldr	r2, [sp, #16]
 800945a:	b9d8      	cbnz	r0, 8009494 <_vfiprintf_r+0x12c>
 800945c:	06d1      	lsls	r1, r2, #27
 800945e:	bf44      	itt	mi
 8009460:	2320      	movmi	r3, #32
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009466:	0713      	lsls	r3, r2, #28
 8009468:	bf44      	itt	mi
 800946a:	232b      	movmi	r3, #43	; 0x2b
 800946c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009470:	f89a 3000 	ldrb.w	r3, [sl]
 8009474:	2b2a      	cmp	r3, #42	; 0x2a
 8009476:	d015      	beq.n	80094a4 <_vfiprintf_r+0x13c>
 8009478:	4654      	mov	r4, sl
 800947a:	2000      	movs	r0, #0
 800947c:	f04f 0c0a 	mov.w	ip, #10
 8009480:	9a07      	ldr	r2, [sp, #28]
 8009482:	4621      	mov	r1, r4
 8009484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009488:	3b30      	subs	r3, #48	; 0x30
 800948a:	2b09      	cmp	r3, #9
 800948c:	d94e      	bls.n	800952c <_vfiprintf_r+0x1c4>
 800948e:	b1b0      	cbz	r0, 80094be <_vfiprintf_r+0x156>
 8009490:	9207      	str	r2, [sp, #28]
 8009492:	e014      	b.n	80094be <_vfiprintf_r+0x156>
 8009494:	eba0 0308 	sub.w	r3, r0, r8
 8009498:	fa09 f303 	lsl.w	r3, r9, r3
 800949c:	4313      	orrs	r3, r2
 800949e:	46a2      	mov	sl, r4
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	e7d2      	b.n	800944a <_vfiprintf_r+0xe2>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	1d19      	adds	r1, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfbb      	ittet	lt
 80094b0:	425b      	neglt	r3, r3
 80094b2:	f042 0202 	orrlt.w	r2, r2, #2
 80094b6:	9307      	strge	r3, [sp, #28]
 80094b8:	9307      	strlt	r3, [sp, #28]
 80094ba:	bfb8      	it	lt
 80094bc:	9204      	strlt	r2, [sp, #16]
 80094be:	7823      	ldrb	r3, [r4, #0]
 80094c0:	2b2e      	cmp	r3, #46	; 0x2e
 80094c2:	d10c      	bne.n	80094de <_vfiprintf_r+0x176>
 80094c4:	7863      	ldrb	r3, [r4, #1]
 80094c6:	2b2a      	cmp	r3, #42	; 0x2a
 80094c8:	d135      	bne.n	8009536 <_vfiprintf_r+0x1ce>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	3402      	adds	r4, #2
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	9203      	str	r2, [sp, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfb8      	it	lt
 80094d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095c4 <_vfiprintf_r+0x25c>
 80094e2:	2203      	movs	r2, #3
 80094e4:	4650      	mov	r0, sl
 80094e6:	7821      	ldrb	r1, [r4, #0]
 80094e8:	f7ff f832 	bl	8008550 <memchr>
 80094ec:	b140      	cbz	r0, 8009500 <_vfiprintf_r+0x198>
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	eba0 000a 	sub.w	r0, r0, sl
 80094f4:	fa03 f000 	lsl.w	r0, r3, r0
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	3401      	adds	r4, #1
 80094fc:	4303      	orrs	r3, r0
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	2206      	movs	r2, #6
 8009506:	482c      	ldr	r0, [pc, #176]	; (80095b8 <_vfiprintf_r+0x250>)
 8009508:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800950c:	f7ff f820 	bl	8008550 <memchr>
 8009510:	2800      	cmp	r0, #0
 8009512:	d03f      	beq.n	8009594 <_vfiprintf_r+0x22c>
 8009514:	4b29      	ldr	r3, [pc, #164]	; (80095bc <_vfiprintf_r+0x254>)
 8009516:	bb1b      	cbnz	r3, 8009560 <_vfiprintf_r+0x1f8>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	3307      	adds	r3, #7
 800951c:	f023 0307 	bic.w	r3, r3, #7
 8009520:	3308      	adds	r3, #8
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	443b      	add	r3, r7
 8009528:	9309      	str	r3, [sp, #36]	; 0x24
 800952a:	e767      	b.n	80093fc <_vfiprintf_r+0x94>
 800952c:	460c      	mov	r4, r1
 800952e:	2001      	movs	r0, #1
 8009530:	fb0c 3202 	mla	r2, ip, r2, r3
 8009534:	e7a5      	b.n	8009482 <_vfiprintf_r+0x11a>
 8009536:	2300      	movs	r3, #0
 8009538:	f04f 0c0a 	mov.w	ip, #10
 800953c:	4619      	mov	r1, r3
 800953e:	3401      	adds	r4, #1
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	4620      	mov	r0, r4
 8009544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009548:	3a30      	subs	r2, #48	; 0x30
 800954a:	2a09      	cmp	r2, #9
 800954c:	d903      	bls.n	8009556 <_vfiprintf_r+0x1ee>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c5      	beq.n	80094de <_vfiprintf_r+0x176>
 8009552:	9105      	str	r1, [sp, #20]
 8009554:	e7c3      	b.n	80094de <_vfiprintf_r+0x176>
 8009556:	4604      	mov	r4, r0
 8009558:	2301      	movs	r3, #1
 800955a:	fb0c 2101 	mla	r1, ip, r1, r2
 800955e:	e7f0      	b.n	8009542 <_vfiprintf_r+0x1da>
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	462a      	mov	r2, r5
 8009566:	4630      	mov	r0, r6
 8009568:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <_vfiprintf_r+0x258>)
 800956a:	a904      	add	r1, sp, #16
 800956c:	f7fc f842 	bl	80055f4 <_printf_float>
 8009570:	4607      	mov	r7, r0
 8009572:	1c78      	adds	r0, r7, #1
 8009574:	d1d6      	bne.n	8009524 <_vfiprintf_r+0x1bc>
 8009576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	d405      	bmi.n	8009588 <_vfiprintf_r+0x220>
 800957c:	89ab      	ldrh	r3, [r5, #12]
 800957e:	059a      	lsls	r2, r3, #22
 8009580:	d402      	bmi.n	8009588 <_vfiprintf_r+0x220>
 8009582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009584:	f7fe ffc8 	bl	8008518 <__retarget_lock_release_recursive>
 8009588:	89ab      	ldrh	r3, [r5, #12]
 800958a:	065b      	lsls	r3, r3, #25
 800958c:	f53f af12 	bmi.w	80093b4 <_vfiprintf_r+0x4c>
 8009590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009592:	e711      	b.n	80093b8 <_vfiprintf_r+0x50>
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4630      	mov	r0, r6
 800959c:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <_vfiprintf_r+0x258>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	f7fc fac4 	bl	8005b2c <_printf_i>
 80095a4:	e7e4      	b.n	8009570 <_vfiprintf_r+0x208>
 80095a6:	bf00      	nop
 80095a8:	0800a060 	.word	0x0800a060
 80095ac:	0800a080 	.word	0x0800a080
 80095b0:	0800a040 	.word	0x0800a040
 80095b4:	0800a27c 	.word	0x0800a27c
 80095b8:	0800a286 	.word	0x0800a286
 80095bc:	080055f5 	.word	0x080055f5
 80095c0:	08009343 	.word	0x08009343
 80095c4:	0800a282 	.word	0x0800a282

080095c8 <nan>:
 80095c8:	2000      	movs	r0, #0
 80095ca:	4901      	ldr	r1, [pc, #4]	; (80095d0 <nan+0x8>)
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	7ff80000 	.word	0x7ff80000

080095d4 <_sbrk_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	2300      	movs	r3, #0
 80095d8:	4d05      	ldr	r5, [pc, #20]	; (80095f0 <_sbrk_r+0x1c>)
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	f7f8 ffb6 	bl	8002550 <_sbrk>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_sbrk_r+0x1a>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_sbrk_r+0x1a>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000390 	.word	0x20000390

080095f4 <__sread>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	460c      	mov	r4, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	f000 faf4 	bl	8009be8 <_read_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	bfab      	itete	ge
 8009604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009606:	89a3      	ldrhlt	r3, [r4, #12]
 8009608:	181b      	addge	r3, r3, r0
 800960a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800960e:	bfac      	ite	ge
 8009610:	6563      	strge	r3, [r4, #84]	; 0x54
 8009612:	81a3      	strhlt	r3, [r4, #12]
 8009614:	bd10      	pop	{r4, pc}

08009616 <__swrite>:
 8009616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961a:	461f      	mov	r7, r3
 800961c:	898b      	ldrh	r3, [r1, #12]
 800961e:	4605      	mov	r5, r0
 8009620:	05db      	lsls	r3, r3, #23
 8009622:	460c      	mov	r4, r1
 8009624:	4616      	mov	r6, r2
 8009626:	d505      	bpl.n	8009634 <__swrite+0x1e>
 8009628:	2302      	movs	r3, #2
 800962a:	2200      	movs	r2, #0
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	f000 fa18 	bl	8009a64 <_lseek_r>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	4632      	mov	r2, r6
 8009638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	4628      	mov	r0, r5
 8009640:	463b      	mov	r3, r7
 8009642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	f000 b889 	b.w	8009760 <_write_r>

0800964e <__sseek>:
 800964e:	b510      	push	{r4, lr}
 8009650:	460c      	mov	r4, r1
 8009652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009656:	f000 fa05 	bl	8009a64 <_lseek_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	bf15      	itete	ne
 8009660:	6560      	strne	r0, [r4, #84]	; 0x54
 8009662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800966a:	81a3      	strheq	r3, [r4, #12]
 800966c:	bf18      	it	ne
 800966e:	81a3      	strhne	r3, [r4, #12]
 8009670:	bd10      	pop	{r4, pc}

08009672 <__sclose>:
 8009672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009676:	f000 b911 	b.w	800989c <_close_r>

0800967a <strncmp>:
 800967a:	b510      	push	{r4, lr}
 800967c:	b16a      	cbz	r2, 800969a <strncmp+0x20>
 800967e:	3901      	subs	r1, #1
 8009680:	1884      	adds	r4, r0, r2
 8009682:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009686:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800968a:	4293      	cmp	r3, r2
 800968c:	d103      	bne.n	8009696 <strncmp+0x1c>
 800968e:	42a0      	cmp	r0, r4
 8009690:	d001      	beq.n	8009696 <strncmp+0x1c>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1f5      	bne.n	8009682 <strncmp+0x8>
 8009696:	1a98      	subs	r0, r3, r2
 8009698:	bd10      	pop	{r4, pc}
 800969a:	4610      	mov	r0, r2
 800969c:	e7fc      	b.n	8009698 <strncmp+0x1e>
	...

080096a0 <__swbuf_r>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	460e      	mov	r6, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	4605      	mov	r5, r0
 80096a8:	b118      	cbz	r0, 80096b2 <__swbuf_r+0x12>
 80096aa:	6983      	ldr	r3, [r0, #24]
 80096ac:	b90b      	cbnz	r3, 80096b2 <__swbuf_r+0x12>
 80096ae:	f7fe fb29 	bl	8007d04 <__sinit>
 80096b2:	4b21      	ldr	r3, [pc, #132]	; (8009738 <__swbuf_r+0x98>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d12b      	bne.n	8009710 <__swbuf_r+0x70>
 80096b8:	686c      	ldr	r4, [r5, #4]
 80096ba:	69a3      	ldr	r3, [r4, #24]
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	071a      	lsls	r2, r3, #28
 80096c2:	d52f      	bpl.n	8009724 <__swbuf_r+0x84>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	b36b      	cbz	r3, 8009724 <__swbuf_r+0x84>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	6820      	ldr	r0, [r4, #0]
 80096cc:	b2f6      	uxtb	r6, r6
 80096ce:	1ac0      	subs	r0, r0, r3
 80096d0:	6963      	ldr	r3, [r4, #20]
 80096d2:	4637      	mov	r7, r6
 80096d4:	4283      	cmp	r3, r0
 80096d6:	dc04      	bgt.n	80096e2 <__swbuf_r+0x42>
 80096d8:	4621      	mov	r1, r4
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f974 	bl	80099c8 <_fflush_r>
 80096e0:	bb30      	cbnz	r0, 8009730 <__swbuf_r+0x90>
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	3001      	adds	r0, #1
 80096e6:	3b01      	subs	r3, #1
 80096e8:	60a3      	str	r3, [r4, #8]
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	701e      	strb	r6, [r3, #0]
 80096f2:	6963      	ldr	r3, [r4, #20]
 80096f4:	4283      	cmp	r3, r0
 80096f6:	d004      	beq.n	8009702 <__swbuf_r+0x62>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	07db      	lsls	r3, r3, #31
 80096fc:	d506      	bpl.n	800970c <__swbuf_r+0x6c>
 80096fe:	2e0a      	cmp	r6, #10
 8009700:	d104      	bne.n	800970c <__swbuf_r+0x6c>
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 f95f 	bl	80099c8 <_fflush_r>
 800970a:	b988      	cbnz	r0, 8009730 <__swbuf_r+0x90>
 800970c:	4638      	mov	r0, r7
 800970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <__swbuf_r+0x9c>)
 8009712:	429c      	cmp	r4, r3
 8009714:	d101      	bne.n	800971a <__swbuf_r+0x7a>
 8009716:	68ac      	ldr	r4, [r5, #8]
 8009718:	e7cf      	b.n	80096ba <__swbuf_r+0x1a>
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <__swbuf_r+0xa0>)
 800971c:	429c      	cmp	r4, r3
 800971e:	bf08      	it	eq
 8009720:	68ec      	ldreq	r4, [r5, #12]
 8009722:	e7ca      	b.n	80096ba <__swbuf_r+0x1a>
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f82c 	bl	8009784 <__swsetup_r>
 800972c:	2800      	cmp	r0, #0
 800972e:	d0cb      	beq.n	80096c8 <__swbuf_r+0x28>
 8009730:	f04f 37ff 	mov.w	r7, #4294967295
 8009734:	e7ea      	b.n	800970c <__swbuf_r+0x6c>
 8009736:	bf00      	nop
 8009738:	0800a060 	.word	0x0800a060
 800973c:	0800a080 	.word	0x0800a080
 8009740:	0800a040 	.word	0x0800a040

08009744 <__ascii_wctomb>:
 8009744:	4603      	mov	r3, r0
 8009746:	4608      	mov	r0, r1
 8009748:	b141      	cbz	r1, 800975c <__ascii_wctomb+0x18>
 800974a:	2aff      	cmp	r2, #255	; 0xff
 800974c:	d904      	bls.n	8009758 <__ascii_wctomb+0x14>
 800974e:	228a      	movs	r2, #138	; 0x8a
 8009750:	f04f 30ff 	mov.w	r0, #4294967295
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	4770      	bx	lr
 8009758:	2001      	movs	r0, #1
 800975a:	700a      	strb	r2, [r1, #0]
 800975c:	4770      	bx	lr
	...

08009760 <_write_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	4611      	mov	r1, r2
 8009768:	2200      	movs	r2, #0
 800976a:	4d05      	ldr	r5, [pc, #20]	; (8009780 <_write_r+0x20>)
 800976c:	602a      	str	r2, [r5, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	f7f9 f9bc 	bl	8002aec <_write>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_write_r+0x1e>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_write_r+0x1e>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	20000390 	.word	0x20000390

08009784 <__swsetup_r>:
 8009784:	4b32      	ldr	r3, [pc, #200]	; (8009850 <__swsetup_r+0xcc>)
 8009786:	b570      	push	{r4, r5, r6, lr}
 8009788:	681d      	ldr	r5, [r3, #0]
 800978a:	4606      	mov	r6, r0
 800978c:	460c      	mov	r4, r1
 800978e:	b125      	cbz	r5, 800979a <__swsetup_r+0x16>
 8009790:	69ab      	ldr	r3, [r5, #24]
 8009792:	b913      	cbnz	r3, 800979a <__swsetup_r+0x16>
 8009794:	4628      	mov	r0, r5
 8009796:	f7fe fab5 	bl	8007d04 <__sinit>
 800979a:	4b2e      	ldr	r3, [pc, #184]	; (8009854 <__swsetup_r+0xd0>)
 800979c:	429c      	cmp	r4, r3
 800979e:	d10f      	bne.n	80097c0 <__swsetup_r+0x3c>
 80097a0:	686c      	ldr	r4, [r5, #4]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a8:	0719      	lsls	r1, r3, #28
 80097aa:	d42c      	bmi.n	8009806 <__swsetup_r+0x82>
 80097ac:	06dd      	lsls	r5, r3, #27
 80097ae:	d411      	bmi.n	80097d4 <__swsetup_r+0x50>
 80097b0:	2309      	movs	r3, #9
 80097b2:	6033      	str	r3, [r6, #0]
 80097b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e03e      	b.n	800983e <__swsetup_r+0xba>
 80097c0:	4b25      	ldr	r3, [pc, #148]	; (8009858 <__swsetup_r+0xd4>)
 80097c2:	429c      	cmp	r4, r3
 80097c4:	d101      	bne.n	80097ca <__swsetup_r+0x46>
 80097c6:	68ac      	ldr	r4, [r5, #8]
 80097c8:	e7eb      	b.n	80097a2 <__swsetup_r+0x1e>
 80097ca:	4b24      	ldr	r3, [pc, #144]	; (800985c <__swsetup_r+0xd8>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	bf08      	it	eq
 80097d0:	68ec      	ldreq	r4, [r5, #12]
 80097d2:	e7e6      	b.n	80097a2 <__swsetup_r+0x1e>
 80097d4:	0758      	lsls	r0, r3, #29
 80097d6:	d512      	bpl.n	80097fe <__swsetup_r+0x7a>
 80097d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097da:	b141      	cbz	r1, 80097ee <__swsetup_r+0x6a>
 80097dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e0:	4299      	cmp	r1, r3
 80097e2:	d002      	beq.n	80097ea <__swsetup_r+0x66>
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7ff fb95 	bl	8008f14 <_free_r>
 80097ea:	2300      	movs	r3, #0
 80097ec:	6363      	str	r3, [r4, #52]	; 0x34
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	2300      	movs	r3, #0
 80097f8:	6063      	str	r3, [r4, #4]
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	f043 0308 	orr.w	r3, r3, #8
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	b94b      	cbnz	r3, 800981e <__swsetup_r+0x9a>
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009814:	d003      	beq.n	800981e <__swsetup_r+0x9a>
 8009816:	4621      	mov	r1, r4
 8009818:	4630      	mov	r0, r6
 800981a:	f000 f959 	bl	8009ad0 <__smakebuf_r>
 800981e:	89a0      	ldrh	r0, [r4, #12]
 8009820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009824:	f010 0301 	ands.w	r3, r0, #1
 8009828:	d00a      	beq.n	8009840 <__swsetup_r+0xbc>
 800982a:	2300      	movs	r3, #0
 800982c:	60a3      	str	r3, [r4, #8]
 800982e:	6963      	ldr	r3, [r4, #20]
 8009830:	425b      	negs	r3, r3
 8009832:	61a3      	str	r3, [r4, #24]
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	b943      	cbnz	r3, 800984a <__swsetup_r+0xc6>
 8009838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800983c:	d1ba      	bne.n	80097b4 <__swsetup_r+0x30>
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	0781      	lsls	r1, r0, #30
 8009842:	bf58      	it	pl
 8009844:	6963      	ldrpl	r3, [r4, #20]
 8009846:	60a3      	str	r3, [r4, #8]
 8009848:	e7f4      	b.n	8009834 <__swsetup_r+0xb0>
 800984a:	2000      	movs	r0, #0
 800984c:	e7f7      	b.n	800983e <__swsetup_r+0xba>
 800984e:	bf00      	nop
 8009850:	20000050 	.word	0x20000050
 8009854:	0800a060 	.word	0x0800a060
 8009858:	0800a080 	.word	0x0800a080
 800985c:	0800a040 	.word	0x0800a040

08009860 <__assert_func>:
 8009860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009862:	4614      	mov	r4, r2
 8009864:	461a      	mov	r2, r3
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <__assert_func+0x2c>)
 8009868:	4605      	mov	r5, r0
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68d8      	ldr	r0, [r3, #12]
 800986e:	b14c      	cbz	r4, 8009884 <__assert_func+0x24>
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <__assert_func+0x30>)
 8009872:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009876:	9100      	str	r1, [sp, #0]
 8009878:	462b      	mov	r3, r5
 800987a:	4906      	ldr	r1, [pc, #24]	; (8009894 <__assert_func+0x34>)
 800987c:	f000 f8e0 	bl	8009a40 <fiprintf>
 8009880:	f000 f9c4 	bl	8009c0c <abort>
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <__assert_func+0x38>)
 8009886:	461c      	mov	r4, r3
 8009888:	e7f3      	b.n	8009872 <__assert_func+0x12>
 800988a:	bf00      	nop
 800988c:	20000050 	.word	0x20000050
 8009890:	0800a28d 	.word	0x0800a28d
 8009894:	0800a29a 	.word	0x0800a29a
 8009898:	0800a2c8 	.word	0x0800a2c8

0800989c <_close_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	2300      	movs	r3, #0
 80098a0:	4d05      	ldr	r5, [pc, #20]	; (80098b8 <_close_r+0x1c>)
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7f8 fe22 	bl	80024f0 <_close>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_close_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_close_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	20000390 	.word	0x20000390

080098bc <__sflush_r>:
 80098bc:	898a      	ldrh	r2, [r1, #12]
 80098be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c2:	4605      	mov	r5, r0
 80098c4:	0710      	lsls	r0, r2, #28
 80098c6:	460c      	mov	r4, r1
 80098c8:	d458      	bmi.n	800997c <__sflush_r+0xc0>
 80098ca:	684b      	ldr	r3, [r1, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	dc05      	bgt.n	80098dc <__sflush_r+0x20>
 80098d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dc02      	bgt.n	80098dc <__sflush_r+0x20>
 80098d6:	2000      	movs	r0, #0
 80098d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098de:	2e00      	cmp	r6, #0
 80098e0:	d0f9      	beq.n	80098d6 <__sflush_r+0x1a>
 80098e2:	2300      	movs	r3, #0
 80098e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098e8:	682f      	ldr	r7, [r5, #0]
 80098ea:	602b      	str	r3, [r5, #0]
 80098ec:	d032      	beq.n	8009954 <__sflush_r+0x98>
 80098ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	075a      	lsls	r2, r3, #29
 80098f4:	d505      	bpl.n	8009902 <__sflush_r+0x46>
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	1ac0      	subs	r0, r0, r3
 80098fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098fc:	b10b      	cbz	r3, 8009902 <__sflush_r+0x46>
 80098fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009900:	1ac0      	subs	r0, r0, r3
 8009902:	2300      	movs	r3, #0
 8009904:	4602      	mov	r2, r0
 8009906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009908:	4628      	mov	r0, r5
 800990a:	6a21      	ldr	r1, [r4, #32]
 800990c:	47b0      	blx	r6
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	d106      	bne.n	8009922 <__sflush_r+0x66>
 8009914:	6829      	ldr	r1, [r5, #0]
 8009916:	291d      	cmp	r1, #29
 8009918:	d82c      	bhi.n	8009974 <__sflush_r+0xb8>
 800991a:	4a2a      	ldr	r2, [pc, #168]	; (80099c4 <__sflush_r+0x108>)
 800991c:	40ca      	lsrs	r2, r1
 800991e:	07d6      	lsls	r6, r2, #31
 8009920:	d528      	bpl.n	8009974 <__sflush_r+0xb8>
 8009922:	2200      	movs	r2, #0
 8009924:	6062      	str	r2, [r4, #4]
 8009926:	6922      	ldr	r2, [r4, #16]
 8009928:	04d9      	lsls	r1, r3, #19
 800992a:	6022      	str	r2, [r4, #0]
 800992c:	d504      	bpl.n	8009938 <__sflush_r+0x7c>
 800992e:	1c42      	adds	r2, r0, #1
 8009930:	d101      	bne.n	8009936 <__sflush_r+0x7a>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	b903      	cbnz	r3, 8009938 <__sflush_r+0x7c>
 8009936:	6560      	str	r0, [r4, #84]	; 0x54
 8009938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800993a:	602f      	str	r7, [r5, #0]
 800993c:	2900      	cmp	r1, #0
 800993e:	d0ca      	beq.n	80098d6 <__sflush_r+0x1a>
 8009940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009944:	4299      	cmp	r1, r3
 8009946:	d002      	beq.n	800994e <__sflush_r+0x92>
 8009948:	4628      	mov	r0, r5
 800994a:	f7ff fae3 	bl	8008f14 <_free_r>
 800994e:	2000      	movs	r0, #0
 8009950:	6360      	str	r0, [r4, #52]	; 0x34
 8009952:	e7c1      	b.n	80098d8 <__sflush_r+0x1c>
 8009954:	6a21      	ldr	r1, [r4, #32]
 8009956:	2301      	movs	r3, #1
 8009958:	4628      	mov	r0, r5
 800995a:	47b0      	blx	r6
 800995c:	1c41      	adds	r1, r0, #1
 800995e:	d1c7      	bne.n	80098f0 <__sflush_r+0x34>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0c4      	beq.n	80098f0 <__sflush_r+0x34>
 8009966:	2b1d      	cmp	r3, #29
 8009968:	d001      	beq.n	800996e <__sflush_r+0xb2>
 800996a:	2b16      	cmp	r3, #22
 800996c:	d101      	bne.n	8009972 <__sflush_r+0xb6>
 800996e:	602f      	str	r7, [r5, #0]
 8009970:	e7b1      	b.n	80098d6 <__sflush_r+0x1a>
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009978:	81a3      	strh	r3, [r4, #12]
 800997a:	e7ad      	b.n	80098d8 <__sflush_r+0x1c>
 800997c:	690f      	ldr	r7, [r1, #16]
 800997e:	2f00      	cmp	r7, #0
 8009980:	d0a9      	beq.n	80098d6 <__sflush_r+0x1a>
 8009982:	0793      	lsls	r3, r2, #30
 8009984:	bf18      	it	ne
 8009986:	2300      	movne	r3, #0
 8009988:	680e      	ldr	r6, [r1, #0]
 800998a:	bf08      	it	eq
 800998c:	694b      	ldreq	r3, [r1, #20]
 800998e:	eba6 0807 	sub.w	r8, r6, r7
 8009992:	600f      	str	r7, [r1, #0]
 8009994:	608b      	str	r3, [r1, #8]
 8009996:	f1b8 0f00 	cmp.w	r8, #0
 800999a:	dd9c      	ble.n	80098d6 <__sflush_r+0x1a>
 800999c:	4643      	mov	r3, r8
 800999e:	463a      	mov	r2, r7
 80099a0:	4628      	mov	r0, r5
 80099a2:	6a21      	ldr	r1, [r4, #32]
 80099a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099a6:	47b0      	blx	r6
 80099a8:	2800      	cmp	r0, #0
 80099aa:	dc06      	bgt.n	80099ba <__sflush_r+0xfe>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	e78e      	b.n	80098d8 <__sflush_r+0x1c>
 80099ba:	4407      	add	r7, r0
 80099bc:	eba8 0800 	sub.w	r8, r8, r0
 80099c0:	e7e9      	b.n	8009996 <__sflush_r+0xda>
 80099c2:	bf00      	nop
 80099c4:	20400001 	.word	0x20400001

080099c8 <_fflush_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	690b      	ldr	r3, [r1, #16]
 80099cc:	4605      	mov	r5, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	b913      	cbnz	r3, 80099d8 <_fflush_r+0x10>
 80099d2:	2500      	movs	r5, #0
 80099d4:	4628      	mov	r0, r5
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	b118      	cbz	r0, 80099e2 <_fflush_r+0x1a>
 80099da:	6983      	ldr	r3, [r0, #24]
 80099dc:	b90b      	cbnz	r3, 80099e2 <_fflush_r+0x1a>
 80099de:	f7fe f991 	bl	8007d04 <__sinit>
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <_fflush_r+0x6c>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d11b      	bne.n	8009a20 <_fflush_r+0x58>
 80099e8:	686c      	ldr	r4, [r5, #4]
 80099ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ef      	beq.n	80099d2 <_fflush_r+0xa>
 80099f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099f4:	07d0      	lsls	r0, r2, #31
 80099f6:	d404      	bmi.n	8009a02 <_fflush_r+0x3a>
 80099f8:	0599      	lsls	r1, r3, #22
 80099fa:	d402      	bmi.n	8009a02 <_fflush_r+0x3a>
 80099fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099fe:	f7fe fd8a 	bl	8008516 <__retarget_lock_acquire_recursive>
 8009a02:	4628      	mov	r0, r5
 8009a04:	4621      	mov	r1, r4
 8009a06:	f7ff ff59 	bl	80098bc <__sflush_r>
 8009a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	07da      	lsls	r2, r3, #31
 8009a10:	d4e0      	bmi.n	80099d4 <_fflush_r+0xc>
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	059b      	lsls	r3, r3, #22
 8009a16:	d4dd      	bmi.n	80099d4 <_fflush_r+0xc>
 8009a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a1a:	f7fe fd7d 	bl	8008518 <__retarget_lock_release_recursive>
 8009a1e:	e7d9      	b.n	80099d4 <_fflush_r+0xc>
 8009a20:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <_fflush_r+0x70>)
 8009a22:	429c      	cmp	r4, r3
 8009a24:	d101      	bne.n	8009a2a <_fflush_r+0x62>
 8009a26:	68ac      	ldr	r4, [r5, #8]
 8009a28:	e7df      	b.n	80099ea <_fflush_r+0x22>
 8009a2a:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <_fflush_r+0x74>)
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	bf08      	it	eq
 8009a30:	68ec      	ldreq	r4, [r5, #12]
 8009a32:	e7da      	b.n	80099ea <_fflush_r+0x22>
 8009a34:	0800a060 	.word	0x0800a060
 8009a38:	0800a080 	.word	0x0800a080
 8009a3c:	0800a040 	.word	0x0800a040

08009a40 <fiprintf>:
 8009a40:	b40e      	push	{r1, r2, r3}
 8009a42:	b503      	push	{r0, r1, lr}
 8009a44:	4601      	mov	r1, r0
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	4805      	ldr	r0, [pc, #20]	; (8009a60 <fiprintf+0x20>)
 8009a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	f7ff fc89 	bl	8009368 <_vfiprintf_r>
 8009a56:	b002      	add	sp, #8
 8009a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a5c:	b003      	add	sp, #12
 8009a5e:	4770      	bx	lr
 8009a60:	20000050 	.word	0x20000050

08009a64 <_lseek_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4d05      	ldr	r5, [pc, #20]	; (8009a84 <_lseek_r+0x20>)
 8009a70:	602a      	str	r2, [r5, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	f7f8 fd60 	bl	8002538 <_lseek>
 8009a78:	1c43      	adds	r3, r0, #1
 8009a7a:	d102      	bne.n	8009a82 <_lseek_r+0x1e>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	b103      	cbz	r3, 8009a82 <_lseek_r+0x1e>
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	bd38      	pop	{r3, r4, r5, pc}
 8009a84:	20000390 	.word	0x20000390

08009a88 <__swhatbuf_r>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	460e      	mov	r6, r1
 8009a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a90:	4614      	mov	r4, r2
 8009a92:	2900      	cmp	r1, #0
 8009a94:	461d      	mov	r5, r3
 8009a96:	b096      	sub	sp, #88	; 0x58
 8009a98:	da07      	bge.n	8009aaa <__swhatbuf_r+0x22>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	602b      	str	r3, [r5, #0]
 8009a9e:	89b3      	ldrh	r3, [r6, #12]
 8009aa0:	061a      	lsls	r2, r3, #24
 8009aa2:	d410      	bmi.n	8009ac6 <__swhatbuf_r+0x3e>
 8009aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa8:	e00e      	b.n	8009ac8 <__swhatbuf_r+0x40>
 8009aaa:	466a      	mov	r2, sp
 8009aac:	f000 f8b6 	bl	8009c1c <_fstat_r>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	dbf2      	blt.n	8009a9a <__swhatbuf_r+0x12>
 8009ab4:	9a01      	ldr	r2, [sp, #4]
 8009ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009abe:	425a      	negs	r2, r3
 8009ac0:	415a      	adcs	r2, r3
 8009ac2:	602a      	str	r2, [r5, #0]
 8009ac4:	e7ee      	b.n	8009aa4 <__swhatbuf_r+0x1c>
 8009ac6:	2340      	movs	r3, #64	; 0x40
 8009ac8:	2000      	movs	r0, #0
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	b016      	add	sp, #88	; 0x58
 8009ace:	bd70      	pop	{r4, r5, r6, pc}

08009ad0 <__smakebuf_r>:
 8009ad0:	898b      	ldrh	r3, [r1, #12]
 8009ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ad4:	079d      	lsls	r5, r3, #30
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460c      	mov	r4, r1
 8009ada:	d507      	bpl.n	8009aec <__smakebuf_r+0x1c>
 8009adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	6123      	str	r3, [r4, #16]
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	6163      	str	r3, [r4, #20]
 8009ae8:	b002      	add	sp, #8
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	466a      	mov	r2, sp
 8009aee:	ab01      	add	r3, sp, #4
 8009af0:	f7ff ffca 	bl	8009a88 <__swhatbuf_r>
 8009af4:	9900      	ldr	r1, [sp, #0]
 8009af6:	4605      	mov	r5, r0
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7ff fa57 	bl	8008fac <_malloc_r>
 8009afe:	b948      	cbnz	r0, 8009b14 <__smakebuf_r+0x44>
 8009b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b04:	059a      	lsls	r2, r3, #22
 8009b06:	d4ef      	bmi.n	8009ae8 <__smakebuf_r+0x18>
 8009b08:	f023 0303 	bic.w	r3, r3, #3
 8009b0c:	f043 0302 	orr.w	r3, r3, #2
 8009b10:	81a3      	strh	r3, [r4, #12]
 8009b12:	e7e3      	b.n	8009adc <__smakebuf_r+0xc>
 8009b14:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <__smakebuf_r+0x7c>)
 8009b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	6020      	str	r0, [r4, #0]
 8009b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	6120      	str	r0, [r4, #16]
 8009b26:	6163      	str	r3, [r4, #20]
 8009b28:	9b01      	ldr	r3, [sp, #4]
 8009b2a:	b15b      	cbz	r3, 8009b44 <__smakebuf_r+0x74>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b32:	f000 f885 	bl	8009c40 <_isatty_r>
 8009b36:	b128      	cbz	r0, 8009b44 <__smakebuf_r+0x74>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	89a0      	ldrh	r0, [r4, #12]
 8009b46:	4305      	orrs	r5, r0
 8009b48:	81a5      	strh	r5, [r4, #12]
 8009b4a:	e7cd      	b.n	8009ae8 <__smakebuf_r+0x18>
 8009b4c:	08007c9d 	.word	0x08007c9d

08009b50 <memmove>:
 8009b50:	4288      	cmp	r0, r1
 8009b52:	b510      	push	{r4, lr}
 8009b54:	eb01 0402 	add.w	r4, r1, r2
 8009b58:	d902      	bls.n	8009b60 <memmove+0x10>
 8009b5a:	4284      	cmp	r4, r0
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	d807      	bhi.n	8009b70 <memmove+0x20>
 8009b60:	1e43      	subs	r3, r0, #1
 8009b62:	42a1      	cmp	r1, r4
 8009b64:	d008      	beq.n	8009b78 <memmove+0x28>
 8009b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b6e:	e7f8      	b.n	8009b62 <memmove+0x12>
 8009b70:	4601      	mov	r1, r0
 8009b72:	4402      	add	r2, r0
 8009b74:	428a      	cmp	r2, r1
 8009b76:	d100      	bne.n	8009b7a <memmove+0x2a>
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b82:	e7f7      	b.n	8009b74 <memmove+0x24>

08009b84 <__malloc_lock>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__malloc_lock+0x8>)
 8009b86:	f7fe bcc6 	b.w	8008516 <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	20000388 	.word	0x20000388

08009b90 <__malloc_unlock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	; (8009b98 <__malloc_unlock+0x8>)
 8009b92:	f7fe bcc1 	b.w	8008518 <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	20000388 	.word	0x20000388

08009b9c <_realloc_r>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	460e      	mov	r6, r1
 8009ba4:	b921      	cbnz	r1, 8009bb0 <_realloc_r+0x14>
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bac:	f7ff b9fe 	b.w	8008fac <_malloc_r>
 8009bb0:	b922      	cbnz	r2, 8009bbc <_realloc_r+0x20>
 8009bb2:	f7ff f9af 	bl	8008f14 <_free_r>
 8009bb6:	4625      	mov	r5, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbc:	f000 f850 	bl	8009c60 <_malloc_usable_size_r>
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d20f      	bcs.n	8009be4 <_realloc_r+0x48>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f7ff f9f0 	bl	8008fac <_malloc_r>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0f2      	beq.n	8009bb8 <_realloc_r+0x1c>
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	f7fe fcc9 	bl	800856c <memcpy>
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7ff f999 	bl	8008f14 <_free_r>
 8009be2:	e7e9      	b.n	8009bb8 <_realloc_r+0x1c>
 8009be4:	4635      	mov	r5, r6
 8009be6:	e7e7      	b.n	8009bb8 <_realloc_r+0x1c>

08009be8 <_read_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4604      	mov	r4, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	4611      	mov	r1, r2
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4d05      	ldr	r5, [pc, #20]	; (8009c08 <_read_r+0x20>)
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f7f8 fc5d 	bl	80024b6 <_read>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_read_r+0x1e>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_read_r+0x1e>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	20000390 	.word	0x20000390

08009c0c <abort>:
 8009c0c:	2006      	movs	r0, #6
 8009c0e:	b508      	push	{r3, lr}
 8009c10:	f000 f856 	bl	8009cc0 <raise>
 8009c14:	2001      	movs	r0, #1
 8009c16:	f7f8 fc44 	bl	80024a2 <_exit>
	...

08009c1c <_fstat_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4d06      	ldr	r5, [pc, #24]	; (8009c3c <_fstat_r+0x20>)
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	f7f8 fc6c 	bl	8002506 <_fstat>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	d102      	bne.n	8009c38 <_fstat_r+0x1c>
 8009c32:	682b      	ldr	r3, [r5, #0]
 8009c34:	b103      	cbz	r3, 8009c38 <_fstat_r+0x1c>
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	bd38      	pop	{r3, r4, r5, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000390 	.word	0x20000390

08009c40 <_isatty_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	2300      	movs	r3, #0
 8009c44:	4d05      	ldr	r5, [pc, #20]	; (8009c5c <_isatty_r+0x1c>)
 8009c46:	4604      	mov	r4, r0
 8009c48:	4608      	mov	r0, r1
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	f7f8 fc6a 	bl	8002524 <_isatty>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_isatty_r+0x1a>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_isatty_r+0x1a>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20000390 	.word	0x20000390

08009c60 <_malloc_usable_size_r>:
 8009c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c64:	1f18      	subs	r0, r3, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfbc      	itt	lt
 8009c6a:	580b      	ldrlt	r3, [r1, r0]
 8009c6c:	18c0      	addlt	r0, r0, r3
 8009c6e:	4770      	bx	lr

08009c70 <_raise_r>:
 8009c70:	291f      	cmp	r1, #31
 8009c72:	b538      	push	{r3, r4, r5, lr}
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	d904      	bls.n	8009c84 <_raise_r+0x14>
 8009c7a:	2316      	movs	r3, #22
 8009c7c:	6003      	str	r3, [r0, #0]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c86:	b112      	cbz	r2, 8009c8e <_raise_r+0x1e>
 8009c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c8c:	b94b      	cbnz	r3, 8009ca2 <_raise_r+0x32>
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f830 	bl	8009cf4 <_getpid_r>
 8009c94:	462a      	mov	r2, r5
 8009c96:	4601      	mov	r1, r0
 8009c98:	4620      	mov	r0, r4
 8009c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9e:	f000 b817 	b.w	8009cd0 <_kill_r>
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d00a      	beq.n	8009cbc <_raise_r+0x4c>
 8009ca6:	1c59      	adds	r1, r3, #1
 8009ca8:	d103      	bne.n	8009cb2 <_raise_r+0x42>
 8009caa:	2316      	movs	r3, #22
 8009cac:	6003      	str	r3, [r0, #0]
 8009cae:	2001      	movs	r0, #1
 8009cb0:	e7e7      	b.n	8009c82 <_raise_r+0x12>
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cba:	4798      	blx	r3
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e7e0      	b.n	8009c82 <_raise_r+0x12>

08009cc0 <raise>:
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <raise+0xc>)
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f7ff bfd3 	b.w	8009c70 <_raise_r>
 8009cca:	bf00      	nop
 8009ccc:	20000050 	.word	0x20000050

08009cd0 <_kill_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4d06      	ldr	r5, [pc, #24]	; (8009cf0 <_kill_r+0x20>)
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	f7f8 fbd0 	bl	8002482 <_kill>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d102      	bne.n	8009cec <_kill_r+0x1c>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	b103      	cbz	r3, 8009cec <_kill_r+0x1c>
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000390 	.word	0x20000390

08009cf4 <_getpid_r>:
 8009cf4:	f7f8 bbbe 	b.w	8002474 <_getpid>

08009cf8 <_init>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr

08009d04 <_fini>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr
