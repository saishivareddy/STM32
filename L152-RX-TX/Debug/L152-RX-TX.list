
L152-RX-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076dc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f0  080080f0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080080f0  080080f0  000180f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080f8  080080f8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08008100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  200000b4  080081b4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  080081b4  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b09  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000311a  00000000  00000000  00032be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00036ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4d3  00000000  00000000  00037f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016230  00000000  00000000  000523fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000911ab  00000000  00000000  0006862b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f97d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  000f9828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b4 	.word	0x200000b4
 8000158:	00000000 	.word	0x00000000
 800015c:	08007800 	.word	0x08007800

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000b8 	.word	0x200000b8
 8000178:	08007800 	.word	0x08007800

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b087      	sub	sp, #28
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004a4:	4b9f      	ldr	r3, [pc, #636]	; (8000724 <dwt_initialise+0x290>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80004ac:	4b9d      	ldr	r3, [pc, #628]	; (8000724 <dwt_initialise+0x290>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2200      	movs	r2, #0
 80004b2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80004b4:	4b9b      	ldr	r3, [pc, #620]	; (8000724 <dwt_initialise+0x290>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2200      	movs	r2, #0
 80004ba:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80004bc:	4b99      	ldr	r3, [pc, #612]	; (8000724 <dwt_initialise+0x290>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80004c4:	4b97      	ldr	r3, [pc, #604]	; (8000724 <dwt_initialise+0x290>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80004cc:	4b95      	ldr	r3, [pc, #596]	; (8000724 <dwt_initialise+0x290>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2200      	movs	r2, #0
 80004d2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80004d4:	4b93      	ldr	r3, [pc, #588]	; (8000724 <dwt_initialise+0x290>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2200      	movs	r2, #0
 80004da:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80004dc:	f000 f926 	bl	800072c <dwt_readdevid>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4a91      	ldr	r2, [pc, #580]	; (8000728 <dwt_initialise+0x294>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d002      	beq.n	80004ee <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	e115      	b.n	800071a <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d101      	bne.n	80004fc <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80004f8:	f000 fe14 	bl	8001124 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	2b00      	cmp	r3, #0
 8000504:	d004      	beq.n	8000510 <dwt_initialise+0x7c>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d102      	bne.n	8000516 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fc87 	bl	8000e24 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000516:	2204      	movs	r2, #4
 8000518:	2100      	movs	r1, #0
 800051a:	2024      	movs	r0, #36	; 0x24
 800051c:	f000 fbcc 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d116      	bne.n	8000558 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800052a:	2004      	movs	r0, #4
 800052c:	f000 fc1a 	bl	8000d64 <_dwt_otpread>
 8000530:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d01f      	beq.n	800057a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800053a:	2202      	movs	r2, #2
 800053c:	2112      	movs	r1, #18
 800053e:	202d      	movs	r0, #45	; 0x2d
 8000540:	f000 fbba 	bl	8000cb8 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000544:	4b77      	ldr	r3, [pc, #476]	; (8000724 <dwt_initialise+0x290>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	8ada      	ldrh	r2, [r3, #22]
 800054a:	4b76      	ldr	r3, [pc, #472]	; (8000724 <dwt_initialise+0x290>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000552:	b292      	uxth	r2, r2
 8000554:	82da      	strh	r2, [r3, #22]
 8000556:	e010      	b.n	800057a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000558:	2130      	movs	r1, #48	; 0x30
 800055a:	2028      	movs	r0, #40	; 0x28
 800055c:	f000 fb55 	bl	8000c0a <dwt_read32bitoffsetreg>
 8000560:	4603      	mov	r3, r0
 8000562:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000566:	d008      	beq.n	800057a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000568:	4b6e      	ldr	r3, [pc, #440]	; (8000724 <dwt_initialise+0x290>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	8ada      	ldrh	r2, [r3, #22]
 800056e:	4b6d      	ldr	r3, [pc, #436]	; (8000724 <dwt_initialise+0x290>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000576:	b292      	uxth	r2, r2
 8000578:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f003 0302 	and.w	r3, r3, #2
 8000580:	2b00      	cmp	r3, #0
 8000582:	d009      	beq.n	8000598 <dwt_initialise+0x104>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b00      	cmp	r3, #0
 800058c:	d011      	beq.n	80005b2 <dwt_initialise+0x11e>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d00c      	beq.n	80005b2 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000598:	201e      	movs	r0, #30
 800059a:	f000 fbe3 	bl	8000d64 <_dwt_otpread>
 800059e:	4603      	mov	r3, r0
 80005a0:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005a2:	8afb      	ldrh	r3, [r7, #22]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b5e      	ldr	r3, [pc, #376]	; (8000724 <dwt_initialise+0x290>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	72da      	strb	r2, [r3, #11]
 80005b0:	e003      	b.n	80005ba <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005b2:	4b5c      	ldr	r3, [pc, #368]	; (8000724 <dwt_initialise+0x290>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10b      	bne.n	80005dc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80005c4:	8afb      	ldrh	r3, [r7, #22]
 80005c6:	f003 031f 	and.w	r3, r3, #31
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80005ce:	2310      	movs	r3, #16
 80005d0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80005d2:	8afb      	ldrh	r3, [r7, #22]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fdca 	bl	8001170 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80005e6:	4b4f      	ldr	r3, [pc, #316]	; (8000724 <dwt_initialise+0x290>)
 80005e8:	681c      	ldr	r4, [r3, #0]
 80005ea:	2006      	movs	r0, #6
 80005ec:	f000 fbba 	bl	8000d64 <_dwt_otpread>
 80005f0:	4603      	mov	r3, r0
 80005f2:	6023      	str	r3, [r4, #0]
 80005f4:	e003      	b.n	80005fe <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <dwt_initialise+0x290>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	2b00      	cmp	r3, #0
 8000606:	d007      	beq.n	8000618 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000608:	4b46      	ldr	r3, [pc, #280]	; (8000724 <dwt_initialise+0x290>)
 800060a:	681c      	ldr	r4, [r3, #0]
 800060c:	2007      	movs	r0, #7
 800060e:	f000 fba9 	bl	8000d64 <_dwt_otpread>
 8000612:	4603      	mov	r3, r0
 8000614:	6063      	str	r3, [r4, #4]
 8000616:	e003      	b.n	8000620 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <dwt_initialise+0x290>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000626:	2b00      	cmp	r3, #0
 8000628:	d008      	beq.n	800063c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800062a:	2008      	movs	r0, #8
 800062c:	f000 fb9a 	bl	8000d64 <_dwt_otpread>
 8000630:	4602      	mov	r2, r0
 8000632:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <dwt_initialise+0x290>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	721a      	strb	r2, [r3, #8]
 800063a:	e003      	b.n	8000644 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800063c:	4b39      	ldr	r3, [pc, #228]	; (8000724 <dwt_initialise+0x290>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2200      	movs	r2, #0
 8000642:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	2b00      	cmp	r3, #0
 800064c:	d008      	beq.n	8000660 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800064e:	2009      	movs	r0, #9
 8000650:	f000 fb88 	bl	8000d64 <_dwt_otpread>
 8000654:	4602      	mov	r2, r0
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <dwt_initialise+0x290>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	725a      	strb	r2, [r3, #9]
 800065e:	e003      	b.n	8000668 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <dwt_initialise+0x290>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	d121      	bne.n	80006b6 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00b      	beq.n	8000694 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 800067c:	f000 fbbf 	bl	8000dfe <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <dwt_initialise+0x290>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	8ada      	ldrh	r2, [r3, #22]
 8000686:	4b27      	ldr	r3, [pc, #156]	; (8000724 <dwt_initialise+0x290>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800068e:	b292      	uxth	r2, r2
 8000690:	82da      	strh	r2, [r3, #22]
 8000692:	e01e      	b.n	80006d2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000694:	2105      	movs	r1, #5
 8000696:	2036      	movs	r0, #54	; 0x36
 8000698:	f000 fade 	bl	8000c58 <dwt_read16bitoffsetreg>
 800069c:	4603      	mov	r3, r0
 800069e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006a6:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	461a      	mov	r2, r3
 80006ac:	2105      	movs	r1, #5
 80006ae:	2036      	movs	r0, #54	; 0x36
 80006b0:	f000 fb15 	bl	8000cde <dwt_write16bitoffsetreg>
 80006b4:	e00d      	b.n	80006d2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d108      	bne.n	80006d2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <dwt_initialise+0x290>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	8ada      	ldrh	r2, [r3, #22]
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <dwt_initialise+0x290>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ce:	b292      	uxth	r2, r2
 80006d0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80006d2:	2001      	movs	r0, #1
 80006d4:	f000 fba6 	bl	8000e24 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80006d8:	2200      	movs	r2, #0
 80006da:	210a      	movs	r1, #10
 80006dc:	202c      	movs	r0, #44	; 0x2c
 80006de:	f000 faeb 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <dwt_initialise+0x290>)
 80006e4:	681c      	ldr	r4, [r3, #0]
 80006e6:	2100      	movs	r1, #0
 80006e8:	2004      	movs	r0, #4
 80006ea:	f000 fa8e 	bl	8000c0a <dwt_read32bitoffsetreg>
 80006ee:	4603      	mov	r3, r0
 80006f0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <dwt_initialise+0x290>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	0c1b      	lsrs	r3, r3, #16
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <dwt_initialise+0x290>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f002 0203 	and.w	r2, r2, #3
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <dwt_initialise+0x290>)
 800070a:	681c      	ldr	r4, [r3, #0]
 800070c:	2100      	movs	r1, #0
 800070e:	2008      	movs	r0, #8
 8000710:	f000 fa7b 	bl	8000c0a <dwt_read32bitoffsetreg>
 8000714:	4603      	mov	r3, r0
 8000716:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000718:	2300      	movs	r3, #0

} // end dwt_initialise()
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000
 8000728:	deca0130 	.word	0xdeca0130

0800072c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000730:	2100      	movs	r1, #0
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fa69 	bl	8000c0a <dwt_read32bitoffsetreg>
 8000738:	4603      	mov	r3, r0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	461a      	mov	r2, r3
 800075c:	4ba1      	ldr	r3, [pc, #644]	; (80009e4 <dwt_configure+0x2a4>)
 800075e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000762:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	3b01      	subs	r3, #1
 800076a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800076c:	7cfb      	ldrb	r3, [r7, #19]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d002      	beq.n	8000778 <dwt_configure+0x38>
 8000772:	7cfb      	ldrb	r3, [r7, #19]
 8000774:	2b07      	cmp	r3, #7
 8000776:	d101      	bne.n	800077c <dwt_configure+0x3c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <dwt_configure+0x3e>
 800077c:	2300      	movs	r3, #0
 800077e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	79db      	ldrb	r3, [r3, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10b      	bne.n	80007a0 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000788:	4b97      	ldr	r3, [pc, #604]	; (80009e8 <dwt_configure+0x2a8>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	691a      	ldr	r2, [r3, #16]
 800078e:	4b96      	ldr	r3, [pc, #600]	; (80009e8 <dwt_configure+0x2a8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000796:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000798:	8abb      	ldrh	r3, [r7, #20]
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	82bb      	strh	r3, [r7, #20]
 800079e:	e007      	b.n	80007b0 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007a0:	4b91      	ldr	r3, [pc, #580]	; (80009e8 <dwt_configure+0x2a8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	691a      	ldr	r2, [r3, #16]
 80007a6:	4b90      	ldr	r3, [pc, #576]	; (80009e8 <dwt_configure+0x2a8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007ae:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007b0:	4b8d      	ldr	r3, [pc, #564]	; (80009e8 <dwt_configure+0x2a8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	7a12      	ldrb	r2, [r2, #8]
 80007b8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80007ba:	4b8b      	ldr	r3, [pc, #556]	; (80009e8 <dwt_configure+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	691a      	ldr	r2, [r3, #16]
 80007c0:	4b89      	ldr	r3, [pc, #548]	; (80009e8 <dwt_configure+0x2a8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80007c8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80007ca:	4b87      	ldr	r3, [pc, #540]	; (80009e8 <dwt_configure+0x2a8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6919      	ldr	r1, [r3, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a1b      	ldrb	r3, [r3, #8]
 80007d4:	041b      	lsls	r3, r3, #16
 80007d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80007da:	4b83      	ldr	r3, [pc, #524]	; (80009e8 <dwt_configure+0x2a8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80007e2:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <dwt_configure+0x2a8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	461a      	mov	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	2004      	movs	r0, #4
 80007ee:	f000 fa92 	bl	8000d16 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80007f2:	8abb      	ldrh	r3, [r7, #20]
 80007f4:	461a      	mov	r2, r3
 80007f6:	f642 0104 	movw	r1, #10244	; 0x2804
 80007fa:	202e      	movs	r0, #46	; 0x2e
 80007fc:	f000 fa6f 	bl	8000cde <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000800:	7cbb      	ldrb	r3, [r7, #18]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fadb 	bl	8000dbe <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000808:	7cfb      	ldrb	r3, [r7, #19]
 800080a:	4a78      	ldr	r2, [pc, #480]	; (80009ec <dwt_configure+0x2ac>)
 800080c:	5cd3      	ldrb	r3, [r2, r3]
 800080e:	461a      	mov	r2, r3
 8000810:	4b77      	ldr	r3, [pc, #476]	; (80009f0 <dwt_configure+0x2b0>)
 8000812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000816:	461a      	mov	r2, r3
 8000818:	2107      	movs	r1, #7
 800081a:	202b      	movs	r0, #43	; 0x2b
 800081c:	f000 fa7b 	bl	8000d16 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000820:	7cfb      	ldrb	r3, [r7, #19]
 8000822:	4a72      	ldr	r2, [pc, #456]	; (80009ec <dwt_configure+0x2ac>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	461a      	mov	r2, r3
 8000828:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <dwt_configure+0x2b4>)
 800082a:	5c9b      	ldrb	r3, [r3, r2]
 800082c:	461a      	mov	r2, r3
 800082e:	210b      	movs	r1, #11
 8000830:	202b      	movs	r0, #43	; 0x2b
 8000832:	f000 fa41 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000836:	7c7b      	ldrb	r3, [r7, #17]
 8000838:	4a6f      	ldr	r2, [pc, #444]	; (80009f8 <dwt_configure+0x2b8>)
 800083a:	5cd3      	ldrb	r3, [r2, r3]
 800083c:	461a      	mov	r2, r3
 800083e:	210b      	movs	r1, #11
 8000840:	2028      	movs	r0, #40	; 0x28
 8000842:	f000 fa39 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000846:	7cfb      	ldrb	r3, [r7, #19]
 8000848:	4a68      	ldr	r2, [pc, #416]	; (80009ec <dwt_configure+0x2ac>)
 800084a:	5cd3      	ldrb	r3, [r2, r3]
 800084c:	461a      	mov	r2, r3
 800084e:	4b6b      	ldr	r3, [pc, #428]	; (80009fc <dwt_configure+0x2bc>)
 8000850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000854:	461a      	mov	r2, r3
 8000856:	210c      	movs	r1, #12
 8000858:	2028      	movs	r0, #40	; 0x28
 800085a:	f000 fa5c 	bl	8000d16 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	79db      	ldrb	r3, [r3, #7]
 8000862:	4618      	mov	r0, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	799b      	ldrb	r3, [r3, #6]
 8000868:	4619      	mov	r1, r3
 800086a:	4a65      	ldr	r2, [pc, #404]	; (8000a00 <dwt_configure+0x2c0>)
 800086c:	0043      	lsls	r3, r0, #1
 800086e:	440b      	add	r3, r1
 8000870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000874:	461a      	mov	r2, r3
 8000876:	2102      	movs	r1, #2
 8000878:	2027      	movs	r0, #39	; 0x27
 800087a:	f000 fa30 	bl	8000cde <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800087e:	7cbb      	ldrb	r3, [r7, #18]
 8000880:	4a60      	ldr	r2, [pc, #384]	; (8000a04 <dwt_configure+0x2c4>)
 8000882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000886:	461a      	mov	r2, r3
 8000888:	2104      	movs	r1, #4
 800088a:	2027      	movs	r0, #39	; 0x27
 800088c:	f000 fa27 	bl	8000cde <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	79db      	ldrb	r3, [r3, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d105      	bne.n	80008a4 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000898:	2264      	movs	r2, #100	; 0x64
 800089a:	2106      	movs	r1, #6
 800089c:	2027      	movs	r0, #39	; 0x27
 800089e:	f000 fa1e 	bl	8000cde <dwt_write16bitoffsetreg>
 80008a2:	e018      	b.n	80008d6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	789b      	ldrb	r3, [r3, #2]
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d10a      	bne.n	80008c2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80008ac:	2210      	movs	r2, #16
 80008ae:	2106      	movs	r1, #6
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f000 fa14 	bl	8000cde <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80008b6:	2210      	movs	r2, #16
 80008b8:	2126      	movs	r1, #38	; 0x26
 80008ba:	2027      	movs	r0, #39	; 0x27
 80008bc:	f000 f9fc 	bl	8000cb8 <dwt_write8bitoffsetreg>
 80008c0:	e009      	b.n	80008d6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80008c2:	2220      	movs	r2, #32
 80008c4:	2106      	movs	r1, #6
 80008c6:	2027      	movs	r0, #39	; 0x27
 80008c8:	f000 fa09 	bl	8000cde <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80008cc:	2228      	movs	r2, #40	; 0x28
 80008ce:	2126      	movs	r1, #38	; 0x26
 80008d0:	2027      	movs	r0, #39	; 0x27
 80008d2:	f000 f9f1 	bl	8000cb8 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80008d6:	7cbb      	ldrb	r3, [r7, #18]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	78d2      	ldrb	r2, [r2, #3]
 80008dc:	4611      	mov	r1, r2
 80008de:	4a4a      	ldr	r2, [pc, #296]	; (8000a08 <dwt_configure+0x2c8>)
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e8:	461a      	mov	r2, r3
 80008ea:	2108      	movs	r1, #8
 80008ec:	2027      	movs	r0, #39	; 0x27
 80008ee:	f000 fa12 	bl	8000d16 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	895b      	ldrh	r3, [r3, #10]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d103      	bne.n	8000902 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f241 0241 	movw	r2, #4161	; 0x1041
 8000900:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	895b      	ldrh	r3, [r3, #10]
 8000906:	461a      	mov	r2, r3
 8000908:	2120      	movs	r1, #32
 800090a:	2027      	movs	r0, #39	; 0x27
 800090c:	f000 f9e7 	bl	8000cde <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000910:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <dwt_configure+0x2cc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	210c      	movs	r1, #12
 8000918:	2023      	movs	r0, #35	; 0x23
 800091a:	f000 f9fc 	bl	8000d16 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800091e:	7cbb      	ldrb	r3, [r7, #18]
 8000920:	4a3a      	ldr	r2, [pc, #232]	; (8000a0c <dwt_configure+0x2cc>)
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	889b      	ldrh	r3, [r3, #4]
 8000928:	461a      	mov	r2, r3
 800092a:	2104      	movs	r1, #4
 800092c:	2023      	movs	r0, #35	; 0x23
 800092e:	f000 f9d6 	bl	8000cde <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	799b      	ldrb	r3, [r3, #6]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d00d      	beq.n	8000956 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	79db      	ldrb	r3, [r3, #7]
 800093e:	461a      	mov	r2, r3
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <dwt_configure+0x2d0>)
 8000942:	5c9b      	ldrb	r3, [r3, r2]
 8000944:	461a      	mov	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	2021      	movs	r0, #33	; 0x21
 800094a:	f000 f9b5 	bl	8000cb8 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800094e:	2303      	movs	r3, #3
 8000950:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000952:	2301      	movs	r3, #1
 8000954:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000956:	7cfb      	ldrb	r3, [r7, #19]
 8000958:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800095c:	7cfb      	ldrb	r3, [r7, #19]
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000962:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	049b      	lsls	r3, r3, #18
 800096a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800096e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	051b      	lsls	r3, r3, #20
 8000974:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000978:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800097a:	7dbb      	ldrb	r3, [r7, #22]
 800097c:	045b      	lsls	r3, r3, #17
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000982:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	059b      	lsls	r3, r3, #22
 800098a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800098e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000996:	4313      	orrs	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	2100      	movs	r1, #0
 800099e:	201f      	movs	r0, #31
 80009a0:	f000 f9b9 	bl	8000d16 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	789a      	ldrb	r2, [r3, #2]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	0419      	lsls	r1, r3, #16
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	79db      	ldrb	r3, [r3, #7]
 80009b6:	035a      	lsls	r2, r3, #13
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <dwt_configure+0x2a8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <dwt_configure+0x2a8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	461a      	mov	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	2008      	movs	r0, #8
 80009cc:	f000 f9a3 	bl	8000d16 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80009d0:	2242      	movs	r2, #66	; 0x42
 80009d2:	2100      	movs	r1, #0
 80009d4:	200d      	movs	r0, #13
 80009d6:	f000 f96f 	bl	8000cb8 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	080078f8 	.word	0x080078f8
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08007878 	.word	0x08007878
 80009f0:	08007898 	.word	0x08007898
 80009f4:	080078b0 	.word	0x080078b0
 80009f8:	080078b8 	.word	0x080078b8
 80009fc:	08007880 	.word	0x08007880
 8000a00:	080078c8 	.word	0x080078c8
 8000a04:	080078d4 	.word	0x080078d4
 8000a08:	080078d8 	.word	0x080078d8
 8000a0c:	080078bc 	.word	0x080078bc
 8000a10:	080078c4 	.word	0x080078c4

08000a14 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	80fb      	strh	r3, [r7, #6]
 8000a20:	4613      	mov	r3, r2
 8000a22:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a24:	88ba      	ldrh	r2, [r7, #4]
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	4413      	add	r3, r2
 8000a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a2e:	dc09      	bgt.n	8000a44 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	3b02      	subs	r3, #2
 8000a34:	461a      	mov	r2, r3
 8000a36:	88b9      	ldrh	r1, [r7, #4]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f000 f83a 	bl	8000ab4 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000a40:	2300      	movs	r3, #0
 8000a42:	e001      	b.n	8000a48 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	603a      	str	r2, [r7, #0]
 8000a5a:	80fb      	strh	r3, [r7, #6]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <dwt_writetxfctrl+0x3c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68da      	ldr	r2, [r3, #12]
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	059b      	lsls	r3, r3, #22
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	03db      	lsls	r3, r3, #15
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2008      	movs	r0, #8
 8000a7e:	f000 f94a 	bl	8000d16 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000000 	.word	0x20000000

08000a90 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000aa0:	887a      	ldrh	r2, [r7, #2]
 8000aa2:	8839      	ldrh	r1, [r7, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2011      	movs	r0, #17
 8000aa8:	f000 f85b 	bl	8000b62 <dwt_readfromdevice>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60ba      	str	r2, [r7, #8]
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	81fb      	strh	r3, [r7, #14]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000aca:	89bb      	ldrh	r3, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10c      	bne.n	8000aea <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1c59      	adds	r1, r3, #1
 8000ad8:	6179      	str	r1, [r7, #20]
 8000ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	3318      	adds	r3, #24
 8000ae2:	443b      	add	r3, r7
 8000ae4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000ae8:	e02f      	b.n	8000b4a <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	1c59      	adds	r1, r3, #1
 8000af2:	6179      	str	r1, [r7, #20]
 8000af4:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	3318      	adds	r3, #24
 8000afc:	443b      	add	r3, r7
 8000afe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b02:	89bb      	ldrh	r3, [r7, #12]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d809      	bhi.n	8000b1c <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	617a      	str	r2, [r7, #20]
 8000b0e:	89ba      	ldrh	r2, [r7, #12]
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	3318      	adds	r3, #24
 8000b14:	443b      	add	r3, r7
 8000b16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b1a:	e016      	b.n	8000b4a <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	1c59      	adds	r1, r3, #1
 8000b24:	6179      	str	r1, [r7, #20]
 8000b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	3318      	adds	r3, #24
 8000b2e:	443b      	add	r3, r7
 8000b30:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000b34:	89bb      	ldrh	r3, [r7, #12]
 8000b36:	09db      	lsrs	r3, r3, #7
 8000b38:	b299      	uxth	r1, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	617a      	str	r2, [r7, #20]
 8000b40:	b2ca      	uxtb	r2, r1
 8000b42:	3318      	adds	r3, #24
 8000b44:	443b      	add	r3, r7
 8000b46:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	b298      	uxth	r0, r3
 8000b4e:	f107 0110 	add.w	r1, r7, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	f000 fb4d 	bl	80011f4 <writetospi>
} // end dwt_writetodevice()
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	81fb      	strh	r3, [r7, #14]
 8000b70:	460b      	mov	r3, r1
 8000b72:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b78:	89bb      	ldrh	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d109      	bne.n	8000b92 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	617a      	str	r2, [r7, #20]
 8000b84:	89fa      	ldrh	r2, [r7, #14]
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	3318      	adds	r3, #24
 8000b8a:	443b      	add	r3, r7
 8000b8c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b90:	e02f      	b.n	8000bf2 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b92:	89fb      	ldrh	r3, [r7, #14]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	1c59      	adds	r1, r3, #1
 8000b9a:	6179      	str	r1, [r7, #20]
 8000b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	443b      	add	r3, r7
 8000ba6:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	2b7f      	cmp	r3, #127	; 0x7f
 8000bae:	d809      	bhi.n	8000bc4 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	617a      	str	r2, [r7, #20]
 8000bb6:	89ba      	ldrh	r2, [r7, #12]
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	3318      	adds	r3, #24
 8000bbc:	443b      	add	r3, r7
 8000bbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bc2:	e016      	b.n	8000bf2 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000bc4:	89bb      	ldrh	r3, [r7, #12]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	1c59      	adds	r1, r3, #1
 8000bcc:	6179      	str	r1, [r7, #20]
 8000bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	3318      	adds	r3, #24
 8000bd6:	443b      	add	r3, r7
 8000bd8:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	09db      	lsrs	r3, r3, #7
 8000be0:	b299      	uxth	r1, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	617a      	str	r2, [r7, #20]
 8000be8:	b2ca      	uxtb	r2, r1
 8000bea:	3318      	adds	r3, #24
 8000bec:	443b      	add	r3, r7
 8000bee:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	f107 0110 	add.w	r1, r7, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	f000 fb2d 	bl	800125c <readfromspi>
} // end dwt_readfromdevice()
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b299      	uxth	r1, r3
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2204      	movs	r2, #4
 8000c26:	f7ff ff9c 	bl	8000b62 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	e00b      	b.n	8000c48 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	f107 010c 	add.w	r1, r7, #12
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	440a      	add	r2, r1
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	daf0      	bge.n	8000c30 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000c4e:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000c62:	2300      	movs	r3, #0
 8000c64:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	b298      	uxth	r0, r3
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b299      	uxth	r1, r3
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2202      	movs	r2, #2
 8000c74:	f7ff ff75 	bl	8000b62 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000c78:	7b7b      	ldrb	r3, [r7, #13]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4413      	add	r3, r2
 8000c86:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000c88:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	b298      	uxth	r0, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b299      	uxth	r1, r3
 8000ca4:	f107 030f 	add.w	r3, r7, #15
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f7ff ff5a 	bl	8000b62 <dwt_readfromdevice>

    return regval ;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	b298      	uxth	r0, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	b299      	uxth	r1, r3
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f7ff feef 	bl	8000ab4 <dwt_writetodevice>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2202      	movs	r2, #2
 8000d0a:	f7ff fed3 	bl	8000ab4 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e00d      	b.n	8000d44 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	b2d9      	uxtb	r1, r3
 8000d2c:	f107 0210 	add.w	r2, r7, #16
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4413      	add	r3, r2
 8000d34:	460a      	mov	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	ddee      	ble.n	8000d28 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	b298      	uxth	r0, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	b299      	uxth	r1, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2204      	movs	r2, #4
 8000d58:	f7ff feac 	bl	8000ab4 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2104      	movs	r1, #4
 8000d74:	202d      	movs	r0, #45	; 0x2d
 8000d76:	f7ff ffb2 	bl	8000cde <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	2106      	movs	r1, #6
 8000d7e:	202d      	movs	r0, #45	; 0x2d
 8000d80:	f7ff ff9a 	bl	8000cb8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000d84:	2200      	movs	r2, #0
 8000d86:	2106      	movs	r1, #6
 8000d88:	202d      	movs	r0, #45	; 0x2d
 8000d8a:	f7ff ff95 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000d8e:	210a      	movs	r1, #10
 8000d90:	202d      	movs	r0, #45	; 0x2d
 8000d92:	f7ff ff3a 	bl	8000c0a <dwt_read32bitoffsetreg>
 8000d96:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000da6:	2200      	movs	r2, #0
 8000da8:	2102      	movs	r1, #2
 8000daa:	202c      	movs	r0, #44	; 0x2c
 8000dac:	f7ff ff84 	bl	8000cb8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000db0:	2202      	movs	r2, #2
 8000db2:	2102      	movs	r1, #2
 8000db4:	202c      	movs	r0, #44	; 0x2c
 8000db6:	f7ff ff7f 	bl	8000cb8 <dwt_write8bitoffsetreg>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000dc6:	226d      	movs	r2, #109	; 0x6d
 8000dc8:	f640 0106 	movw	r1, #2054	; 0x806
 8000dcc:	202e      	movs	r0, #46	; 0x2e
 8000dce:	f7ff ff73 	bl	8000cb8 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000dd8:	f240 6207 	movw	r2, #1543	; 0x607
 8000ddc:	f641 0106 	movw	r1, #6150	; 0x1806
 8000de0:	202e      	movs	r0, #46	; 0x2e
 8000de2:	f7ff ff7c 	bl	8000cde <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000de6:	e006      	b.n	8000df6 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000de8:	f241 6207 	movw	r2, #5639	; 0x1607
 8000dec:	f641 0106 	movw	r1, #6150	; 0x1806
 8000df0:	202e      	movs	r0, #46	; 0x2e
 8000df2:	f7ff ff74 	bl	8000cde <dwt_write16bitoffsetreg>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000e02:	200e      	movs	r0, #14
 8000e04:	f000 f80e 	bl	8000e24 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e0c:	2106      	movs	r1, #6
 8000e0e:	202d      	movs	r0, #45	; 0x2d
 8000e10:	f7ff ff65 	bl	8000cde <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 f9e1 	bl	80011dc <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 f802 	bl	8000e24 <_dwt_enableclocks>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2202      	movs	r2, #2
 8000e32:	2100      	movs	r1, #0
 8000e34:	2036      	movs	r0, #54	; 0x36
 8000e36:	f7ff fe94 	bl	8000b62 <dwt_readfromdevice>
    switch(clocks)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0e      	cmp	r3, #14
 8000e3e:	d876      	bhi.n	8000f2e <_dwt_enableclocks+0x10a>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <_dwt_enableclocks+0x24>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e95 	.word	0x08000e95
 8000e4c:	08000e85 	.word	0x08000e85
 8000e50:	08000eab 	.word	0x08000eab
 8000e54:	08000f2f 	.word	0x08000f2f
 8000e58:	08000f2f 	.word	0x08000f2f
 8000e5c:	08000f2f 	.word	0x08000f2f
 8000e60:	08000f2f 	.word	0x08000f2f
 8000e64:	08000ec1 	.word	0x08000ec1
 8000e68:	08000ee1 	.word	0x08000ee1
 8000e6c:	08000f2f 	.word	0x08000f2f
 8000e70:	08000f2f 	.word	0x08000f2f
 8000e74:	08000ef7 	.word	0x08000ef7
 8000e78:	08000f03 	.word	0x08000f03
 8000e7c:	08000f0f 	.word	0x08000f0f
 8000e80:	08000f25 	.word	0x08000f25
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000e84:	2300      	movs	r3, #0
 8000e86:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e92:	e04d      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000e94:	7b3b      	ldrb	r3, [r7, #12]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	f023 0303 	bic.w	r3, r3, #3
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000ea8:	e042      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000eaa:	7b3b      	ldrb	r3, [r7, #12]
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	f023 0303 	bic.w	r3, r3, #3
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000ebe:	e037      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000ec0:	7b3b      	ldrb	r3, [r7, #12]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000ed4:	7b7b      	ldrb	r3, [r7, #13]
 8000ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ede:	e027      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000eea:	7b7b      	ldrb	r3, [r7, #13]
 8000eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ef4:	e01c      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000ef6:	7b7b      	ldrb	r3, [r7, #13]
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f00:	e016      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000f02:	7b7b      	ldrb	r3, [r7, #13]
 8000f04:	f023 0302 	bic.w	r3, r3, #2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f0c:	e010      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000f0e:	7b3b      	ldrb	r3, [r7, #12]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f22:	e005      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000f24:	2301      	movs	r3, #1
 8000f26:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f2c:	e000      	b.n	8000f30 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000f2e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2201      	movs	r2, #1
 8000f36:	2100      	movs	r1, #0
 8000f38:	2036      	movs	r0, #54	; 0x36
 8000f3a:	f7ff fdbb 	bl	8000ab4 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	3301      	adds	r3, #1
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	2036      	movs	r0, #54	; 0x36
 8000f4a:	f7ff fdb3 	bl	8000ab4 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop

08000f58 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff ff61 	bl	8000e24 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000f62:	2200      	movs	r2, #0
 8000f64:	2104      	movs	r1, #4
 8000f66:	2036      	movs	r0, #54	; 0x36
 8000f68:	f7ff feb9 	bl	8000cde <dwt_write16bitoffsetreg>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8000f82:	2300      	movs	r3, #0
 8000f84:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <dwt_starttx+0x98>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d020      	beq.n	8000fe8 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	f043 0306 	orr.w	r3, r3, #6
 8000fac:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	200d      	movs	r0, #13
 8000fb6:	f7ff fe7f 	bl	8000cb8 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8000fba:	2103      	movs	r1, #3
 8000fbc:	200f      	movs	r0, #15
 8000fbe:	f7ff fe4b 	bl	8000c58 <dwt_read16bitoffsetreg>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8000fc6:	893b      	ldrh	r3, [r7, #8]
 8000fc8:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e012      	b.n	8000ffc <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200d      	movs	r0, #13
 8000fdc:	f7ff fe6c 	bl	8000cb8 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e009      	b.n	8000ffc <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8000fe8:	7afb      	ldrb	r3, [r7, #11]
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f7ff fe5e 	bl	8000cb8 <dwt_write8bitoffsetreg>
    }

    return retval;
 8000ffc:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000000 	.word	0x20000000

0800100c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001012:	2100      	movs	r1, #0
 8001014:	200e      	movs	r0, #14
 8001016:	f7ff fdf8 	bl	8000c0a <dwt_read32bitoffsetreg>
 800101a:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800101c:	f000 f8c0 	bl	80011a0 <decamutexon>
 8001020:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200e      	movs	r0, #14
 8001028:	f7ff fe75 	bl	8000d16 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800102c:	2240      	movs	r2, #64	; 0x40
 800102e:	2100      	movs	r1, #0
 8001030:	200d      	movs	r0, #13
 8001032:	f7ff fe41 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <dwt_forcetrxoff+0x58>)
 8001038:	2100      	movs	r1, #0
 800103a:	200f      	movs	r0, #15
 800103c:	f7ff fe6b 	bl	8000d16 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001040:	f000 f814 	bl	800106c <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	2100      	movs	r1, #0
 8001048:	200e      	movs	r0, #14
 800104a:	f7ff fe64 	bl	8000d16 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f000 f8b7 	bl	80011c2 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <dwt_forcetrxoff+0x5c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2427fff8 	.word	0x2427fff8
 8001068:	20000000 	.word	0x20000000

0800106c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001072:	2103      	movs	r1, #3
 8001074:	200f      	movs	r0, #15
 8001076:	f7ff fe0c 	bl	8000c92 <dwt_read8bitoffsetreg>
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800107e:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001084:	4053      	eors	r3, r2
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800108e:	2201      	movs	r2, #1
 8001090:	2103      	movs	r1, #3
 8001092:	200d      	movs	r0, #13
 8001094:	f7ff fe10 	bl	8000cb8 <dwt_write8bitoffsetreg>
    }
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 80010b2:	f7ff ffdb 	bl	800106c <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 80010b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ba:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 80010c6:	89fb      	ldrh	r3, [r7, #14]
 80010c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010cc:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	461a      	mov	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	200d      	movs	r0, #13
 80010d6:	f7ff fe02 	bl	8000cde <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d01a      	beq.n	800111a <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80010e4:	2103      	movs	r1, #3
 80010e6:	200f      	movs	r0, #15
 80010e8:	f7ff fdd3 	bl	8000c92 <dwt_read8bitoffsetreg>
 80010ec:	4603      	mov	r3, r0
 80010ee:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00f      	beq.n	800111a <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80010fa:	f7ff ff87 	bl	800100c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d105      	bne.n	8001114 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	2100      	movs	r1, #0
 800110e:	200d      	movs	r0, #13
 8001110:	f7ff fde5 	bl	8000cde <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	e000      	b.n	800111c <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 800111a:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001128:	f7ff ff16 	bl	8000f58 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	202c      	movs	r0, #44	; 0x2c
 8001132:	f7ff fdd4 	bl	8000cde <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001136:	2200      	movs	r2, #0
 8001138:	2106      	movs	r1, #6
 800113a:	202c      	movs	r0, #44	; 0x2c
 800113c:	f7ff fdbc 	bl	8000cb8 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001140:	f7ff fe2f 	bl	8000da2 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001144:	2200      	movs	r2, #0
 8001146:	2103      	movs	r1, #3
 8001148:	2036      	movs	r0, #54	; 0x36
 800114a:	f7ff fdb5 	bl	8000cb8 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 f844 	bl	80011dc <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001154:	22f0      	movs	r2, #240	; 0xf0
 8001156:	2103      	movs	r1, #3
 8001158:	2036      	movs	r0, #54	; 0x36
 800115a:	f7ff fdad 	bl	8000cb8 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800115e:	4b03      	ldr	r3, [pc, #12]	; (800116c <dwt_softreset+0x48>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	755a      	strb	r2, [r3, #21]
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	b25b      	sxtb	r3, r3
 8001184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001188:	b25b      	sxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	461a      	mov	r2, r3
 8001190:	210e      	movs	r1, #14
 8001192:	202b      	movs	r0, #43	; 0x2b
 8001194:	f7ff fd90 	bl	8000cb8 <dwt_write8bitoffsetreg>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80011a6:	f000 f98d 	bl	80014c4 <port_GetEXT_IRQStatus>
 80011aa:	4603      	mov	r3, r0
 80011ac:	607b      	str	r3, [r7, #4]

	if(s) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80011b4:	f000 f978 	bl	80014a8 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80011d0:	f000 f971 	bl	80014b6 <port_EnableEXT_IRQ>
	}
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f8c3 	bl	8001370 <Sleep>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80011f4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80011f8:	4683      	mov	fp, r0
 80011fa:	468a      	mov	sl, r1
 80011fc:	4690      	mov	r8, r2
 80011fe:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001200:	f7ff ffce 	bl	80011a0 <decamutexon>
 8001204:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001206:	4d13      	ldr	r5, [pc, #76]	; (8001254 <writetospi+0x60>)
 8001208:	4628      	mov	r0, r5
 800120a:	f004 fee8 	bl	8005fde <HAL_SPI_GetState>
 800120e:	2801      	cmp	r0, #1
 8001210:	4604      	mov	r4, r0
 8001212:	d1f9      	bne.n	8001208 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001214:	2200      	movs	r2, #0
 8001216:	2140      	movs	r1, #64	; 0x40
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <writetospi+0x64>)
 800121a:	f001 fc67 	bl	8002aec <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800121e:	465a      	mov	r2, fp
 8001220:	4651      	mov	r1, sl
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <writetospi+0x60>)
 8001228:	f004 fc8d 	bl	8005b46 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	4649      	mov	r1, r9
 8001232:	fa1f f288 	uxth.w	r2, r8
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <writetospi+0x60>)
 8001238:	f004 fc85 	bl	8005b46 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800123c:	4622      	mov	r2, r4
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <writetospi+0x64>)
 8001242:	f001 fc53 	bl	8002aec <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001246:	4630      	mov	r0, r6
 8001248:	f7ff ffbb 	bl	80011c2 <decamutexoff>

    return 0;
} // end writetospi()
 800124c:	2000      	movs	r0, #0
 800124e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001252:	bf00      	nop
 8001254:	200005ec 	.word	0x200005ec
 8001258:	40020400 	.word	0x40020400

0800125c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800125c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001260:	4681      	mov	r9, r0
 8001262:	460c      	mov	r4, r1
 8001264:	4690      	mov	r8, r2
 8001266:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001268:	f7ff ff9a 	bl	80011a0 <decamutexon>
 800126c:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800126e:	f8df a078 	ldr.w	sl, [pc, #120]	; 80012e8 <readfromspi+0x8c>
 8001272:	4650      	mov	r0, sl
 8001274:	f004 feb3 	bl	8005fde <HAL_SPI_GetState>
 8001278:	2801      	cmp	r0, #1
 800127a:	d1fa      	bne.n	8001272 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800127c:	2200      	movs	r2, #0
 800127e:	2140      	movs	r1, #64	; 0x40
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <readfromspi+0x90>)
 8001282:	f001 fc33 	bl	8002aec <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001286:	f1b9 0f00 	cmp.w	r9, #0
 800128a:	d00c      	beq.n	80012a6 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800128c:	f8df a058 	ldr.w	sl, [pc, #88]	; 80012e8 <readfromspi+0x8c>
 8001290:	44a1      	add	r9, r4
 8001292:	2201      	movs	r2, #1
 8001294:	4621      	mov	r1, r4
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 800129a:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800129c:	4650      	mov	r0, sl
 800129e:	f004 fc52 	bl	8005b46 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80012a2:	454c      	cmp	r4, r9
 80012a4:	d1f5      	bne.n	8001292 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80012a6:	f1b8 0f00 	cmp.w	r8, #0
 80012aa:	d012      	beq.n	80012d2 <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012ac:	2400      	movs	r4, #0
 80012ae:	f8df c038 	ldr.w	ip, [pc, #56]	; 80012e8 <readfromspi+0x8c>
 80012b2:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80012b6:	f8dc 2000 	ldr.w	r2, [ip]
 80012ba:	6891      	ldr	r1, [r2, #8]
 80012bc:	0789      	lsls	r1, r1, #30
 80012be:	d5fc      	bpl.n	80012ba <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012c0:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80012c2:	6891      	ldr	r1, [r2, #8]
 80012c4:	07cb      	lsls	r3, r1, #31
 80012c6:	d5fc      	bpl.n	80012c2 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80012c8:	68d3      	ldr	r3, [r2, #12]
 80012ca:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80012ce:	4285      	cmp	r5, r0
 80012d0:	d1f1      	bne.n	80012b6 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012d2:	2201      	movs	r2, #1
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <readfromspi+0x90>)
 80012d8:	f001 fc08 	bl	8002aec <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012dc:	4630      	mov	r0, r6
 80012de:	f7ff ff70 	bl	80011c2 <decamutexoff>

    return 0;
} // end readfromspi()
 80012e2:	2000      	movs	r0, #0
 80012e4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80012e8:	200005ec 	.word	0x200005ec
 80012ec:	40020400 	.word	0x40020400

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4906      	ldr	r1, [pc, #24]	; (8001324 <__NVIC_EnableIRQ+0x34>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db12      	blt.n	8001360 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	490a      	ldr	r1, [pc, #40]	; (800136c <__NVIC_DisableIRQ+0x44>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	3320      	adds	r3, #32
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135a:	f3bf 8f6f 	isb	sy
}
 800135e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 f83b 	bl	80023f4 <HAL_Delay>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <EXTI_GetITEnStatus+0x34>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	095b      	lsrs	r3, r3, #5
 8001396:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80013c6:	2301      	movs	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ca:	2311      	movs	r3, #17
 80013cc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <reset_DW1000+0x40>)
 80013d8:	f001 f9f8 	bl	80027cc <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <reset_DW1000+0x40>)
 80013e2:	f001 fb83 	bl	8002aec <HAL_GPIO_WritePin>

    Sleep(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff ffc2 	bl	8001370 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 f809 	bl	8001404 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff ffbc 	bl	8001370 <Sleep>
}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020000 	.word	0x40020000

08001404 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001416:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800141a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <setup_DW1000RSTnIRQ+0x70>)
 8001428:	f001 f9d0 	bl	80027cc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 800142c:	2006      	movs	r0, #6
 800142e:	f001 f91a 	bl	8002666 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2105      	movs	r1, #5
 8001436:	2006      	movs	r0, #6
 8001438:	f001 f8f9 	bl	800262e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 800143c:	e015      	b.n	800146a <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800143e:	2006      	movs	r0, #6
 8001440:	f001 f91f 	bl	8002682 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001448:	2311      	movs	r3, #17
 800144a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <setup_DW1000RSTnIRQ+0x70>)
 800145c:	f001 f9b6 	bl	80027cc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2101      	movs	r1, #1
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <setup_DW1000RSTnIRQ+0x70>)
 8001466:	f001 fb41 	bl	8002aec <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40020000 	.word	0x40020000

08001478 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <port_set_dw1000_slowrate+0x14>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <port_set_dw1000_slowrate+0x14>)
 8001484:	f004 fad6 	bl	8005a34 <HAL_SPI_Init>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200005ec 	.word	0x200005ec

08001490 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <port_set_dw1000_fastrate+0x14>)
 8001496:	2208      	movs	r2, #8
 8001498:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <port_set_dw1000_fastrate+0x14>)
 800149c:	f004 faca 	bl	8005a34 <HAL_SPI_Init>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200005ec 	.word	0x200005ec

080014a8 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80014ac:	2017      	movs	r0, #23
 80014ae:	f7ff ff3b 	bl	8001328 <__NVIC_DisableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80014ba:	2017      	movs	r0, #23
 80014bc:	f7ff ff18 	bl	80012f0 <__NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80014c8:	2017      	movs	r0, #23
 80014ca:	f7ff ff5d 	bl	8001388 <EXTI_GetITEnStatus>
 80014ce:	4603      	mov	r3, r0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014da:	f000 fa27 	bl	800192c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014e2:	2201      	movs	r2, #1
 80014e4:	2178      	movs	r1, #120	; 0x78
 80014e6:	485b      	ldr	r0, [pc, #364]	; (8001654 <SSD1306_Init+0x180>)
 80014e8:	f001 fd6e 	bl	8002fc8 <HAL_I2C_IsDeviceReady>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e0a9      	b.n	800164a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fc:	e002      	b.n	8001504 <SSD1306_Init+0x30>
		p--;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3b01      	subs	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f9      	bne.n	80014fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800150a:	22ae      	movs	r2, #174	; 0xae
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fa86 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 fa81 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800151e:	2210      	movs	r2, #16
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fa7c 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001528:	22b0      	movs	r2, #176	; 0xb0
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fa77 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001532:	22c8      	movs	r2, #200	; 0xc8
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fa72 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 fa6d 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001546:	2210      	movs	r2, #16
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fa68 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	; 0x78
 8001556:	f000 fa63 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800155a:	2281      	movs	r2, #129	; 0x81
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fa5e 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001564:	22ff      	movs	r2, #255	; 0xff
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fa59 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800156e:	22a1      	movs	r2, #161	; 0xa1
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fa54 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001578:	22a6      	movs	r2, #166	; 0xa6
 800157a:	2100      	movs	r1, #0
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 fa4f 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001582:	22a8      	movs	r2, #168	; 0xa8
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fa4a 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fa45 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001596:	22a4      	movs	r2, #164	; 0xa4
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fa40 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015a0:	22d3      	movs	r2, #211	; 0xd3
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 fa3b 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 fa36 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015b4:	22d5      	movs	r2, #213	; 0xd5
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f000 fa31 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015be:	22f0      	movs	r2, #240	; 0xf0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fa2c 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015c8:	22d9      	movs	r2, #217	; 0xd9
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 fa27 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015d2:	2222      	movs	r2, #34	; 0x22
 80015d4:	2100      	movs	r1, #0
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 fa22 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015dc:	22da      	movs	r2, #218	; 0xda
 80015de:	2100      	movs	r1, #0
 80015e0:	2078      	movs	r0, #120	; 0x78
 80015e2:	f000 fa1d 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015e6:	2212      	movs	r2, #18
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 fa18 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015f0:	22db      	movs	r2, #219	; 0xdb
 80015f2:	2100      	movs	r1, #0
 80015f4:	2078      	movs	r0, #120	; 0x78
 80015f6:	f000 fa13 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015fa:	2220      	movs	r2, #32
 80015fc:	2100      	movs	r1, #0
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f000 fa0e 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001604:	228d      	movs	r2, #141	; 0x8d
 8001606:	2100      	movs	r1, #0
 8001608:	2078      	movs	r0, #120	; 0x78
 800160a:	f000 fa09 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800160e:	2214      	movs	r2, #20
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fa04 	bl	8001a20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001618:	22af      	movs	r2, #175	; 0xaf
 800161a:	2100      	movs	r1, #0
 800161c:	2078      	movs	r0, #120	; 0x78
 800161e:	f000 f9ff 	bl	8001a20 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001622:	222e      	movs	r2, #46	; 0x2e
 8001624:	2100      	movs	r1, #0
 8001626:	2078      	movs	r0, #120	; 0x78
 8001628:	f000 f9fa 	bl	8001a20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800162c:	2000      	movs	r0, #0
 800162e:	f000 f843 	bl	80016b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001632:	f000 f813 	bl	800165c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <SSD1306_Init+0x184>)
 8001638:	2200      	movs	r2, #0
 800163a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SSD1306_Init+0x184>)
 800163e:	2200      	movs	r2, #0
 8001640:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SSD1306_Init+0x184>)
 8001644:	2201      	movs	r2, #1
 8001646:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000510 	.word	0x20000510
 8001658:	20000508 	.word	0x20000508

0800165c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	e01d      	b.n	80016a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	3b50      	subs	r3, #80	; 0x50
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f000 f9d4 	bl	8001a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	; 0x78
 800167e:	f000 f9cf 	bl	8001a20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f000 f9ca 	bl	8001a20 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <SSD1306_UpdateScreen+0x58>)
 8001692:	441a      	add	r2, r3
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	2140      	movs	r1, #64	; 0x40
 8001698:	2078      	movs	r0, #120	; 0x78
 800169a:	f000 f95b 	bl	8001954 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	3301      	adds	r3, #1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d9de      	bls.n	8001668 <SSD1306_UpdateScreen+0xc>
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000108 	.word	0x20000108

080016b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <SSD1306_Fill+0x14>
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <SSD1306_Fill+0x16>
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	4619      	mov	r1, r3
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <SSD1306_Fill+0x2c>)
 80016d6:	f005 fc11 	bl	8006efc <memset>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000108 	.word	0x20000108

080016e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
 80016f2:	460b      	mov	r3, r1
 80016f4:	80bb      	strh	r3, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	70fb      	strb	r3, [r7, #3]
	if (
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	2b7f      	cmp	r3, #127	; 0x7f
 80016fe:	d848      	bhi.n	8001792 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001700:	88bb      	ldrh	r3, [r7, #4]
 8001702:	2b3f      	cmp	r3, #63	; 0x3f
 8001704:	d845      	bhi.n	8001792 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <SSD1306_DrawPixel+0xb4>)
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d11a      	bne.n	8001758 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	b298      	uxth	r0, r3
 800172a:	4603      	mov	r3, r0
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	4413      	add	r3, r2
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <SSD1306_DrawPixel+0xb8>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	b25a      	sxtb	r2, r3
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	b25b      	sxtb	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b259      	sxtb	r1, r3
 8001748:	88fa      	ldrh	r2, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	4413      	add	r3, r2
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <SSD1306_DrawPixel+0xb8>)
 8001754:	54d1      	strb	r1, [r2, r3]
 8001756:	e01d      	b.n	8001794 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001758:	88fa      	ldrh	r2, [r7, #6]
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	b298      	uxth	r0, r3
 8001760:	4603      	mov	r3, r0
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4413      	add	r3, r2
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <SSD1306_DrawPixel+0xb8>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	b25a      	sxtb	r2, r3
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	b25b      	sxtb	r3, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4013      	ands	r3, r2
 8001780:	b259      	sxtb	r1, r3
 8001782:	88fa      	ldrh	r2, [r7, #6]
 8001784:	4603      	mov	r3, r0
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	4413      	add	r3, r2
 800178a:	b2c9      	uxtb	r1, r1
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <SSD1306_DrawPixel+0xb8>)
 800178e:	54d1      	strb	r1, [r2, r3]
 8001790:	e000      	b.n	8001794 <SSD1306_DrawPixel+0xac>
		return;
 8001792:	bf00      	nop
	}
}
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000508 	.word	0x20000508
 80017a0:	20000108 	.word	0x20000108

080017a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	80fb      	strh	r3, [r7, #6]
 80017b0:	4613      	mov	r3, r2
 80017b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <SSD1306_GotoXY+0x28>)
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <SSD1306_GotoXY+0x28>)
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	8053      	strh	r3, [r2, #2]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000508 	.word	0x20000508

080017d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <SSD1306_Putc+0xfc>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
	if (
 80017ec:	2b7f      	cmp	r3, #127	; 0x7f
 80017ee:	dc07      	bgt.n	8001800 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <SSD1306_Putc+0xfc>)
 80017f2:	885b      	ldrh	r3, [r3, #2]
 80017f4:	461a      	mov	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	785b      	ldrb	r3, [r3, #1]
 80017fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017fc:	2b3f      	cmp	r3, #63	; 0x3f
 80017fe:	dd01      	ble.n	8001804 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001800:	2300      	movs	r3, #0
 8001802:	e05e      	b.n	80018c2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e04b      	b.n	80018a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	3b20      	subs	r3, #32
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	7849      	ldrb	r1, [r1, #1]
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4619      	mov	r1, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	440b      	add	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e030      	b.n	8001890 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d010      	beq.n	8001860 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <SSD1306_Putc+0xfc>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b298      	uxth	r0, r3
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <SSD1306_Putc+0xfc>)
 800184c:	885a      	ldrh	r2, [r3, #2]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	79ba      	ldrb	r2, [r7, #6]
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff ff45 	bl	80016e8 <SSD1306_DrawPixel>
 800185e:	e014      	b.n	800188a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <SSD1306_Putc+0xfc>)
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	b29b      	uxth	r3, r3
 8001868:	4413      	add	r3, r2
 800186a:	b298      	uxth	r0, r3
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <SSD1306_Putc+0xfc>)
 800186e:	885a      	ldrh	r2, [r3, #2]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	b29b      	uxth	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b299      	uxth	r1, r3
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf0c      	ite	eq
 800187e:	2301      	moveq	r3, #1
 8001880:	2300      	movne	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	f7ff ff2f 	bl	80016e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	3301      	adds	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4293      	cmp	r3, r2
 800189a:	d3c8      	bcc.n	800182e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	461a      	mov	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d3ad      	bcc.n	800180a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <SSD1306_Putc+0xfc>)
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <SSD1306_Putc+0xfc>)
 80018be:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000508 	.word	0x20000508

080018d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018de:	e012      	b.n	8001906 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	79fa      	ldrb	r2, [r7, #7]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff71 	bl	80017d0 <SSD1306_Putc>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d002      	beq.n	8001900 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	e008      	b.n	8001912 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e8      	bne.n	80018e0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	781b      	ldrb	r3, [r3, #0]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff feca 	bl	80016b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001924:	f7ff fe9a 	bl	800165c <SSD1306_UpdateScreen>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <ssd1306_I2C_Init+0x24>)
 8001934:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001936:	e002      	b.n	800193e <ssd1306_I2C_Init+0x12>
		p--;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f9      	bne.n	8001938 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	0003d090 	.word	0x0003d090

08001954 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b0c7      	sub	sp, #284	; 0x11c
 8001958:	af02      	add	r7, sp, #8
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001962:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001966:	600a      	str	r2, [r1, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800196e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001972:	4622      	mov	r2, r4
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800197a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800197e:	4602      	mov	r2, r0
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800198a:	460a      	mov	r2, r1
 800198c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800198e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001996:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800199a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019a8:	e015      	b.n	80019d6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	441a      	add	r2, r3
 80019ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019be:	3301      	adds	r3, #1
 80019c0:	7811      	ldrb	r1, [r2, #0]
 80019c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019c6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80019ca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019cc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d0:	3301      	adds	r3, #1
 80019d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d8df      	bhi.n	80019aa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b299      	uxth	r1, r3
 80019f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f107 020c 	add.w	r2, r7, #12
 8001a08:	200a      	movs	r0, #10
 8001a0a:	9000      	str	r0, [sp, #0]
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <ssd1306_I2C_WriteMulti+0xc8>)
 8001a0e:	f001 f9dd 	bl	8002dcc <HAL_I2C_Master_Transmit>
}
 8001a12:	bf00      	nop
 8001a14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	20000510 	.word	0x20000510

08001a20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	71bb      	strb	r3, [r7, #6]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	f107 020c 	add.w	r2, r7, #12
 8001a42:	230a      	movs	r3, #10
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2302      	movs	r3, #2
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <ssd1306_I2C_Write+0x38>)
 8001a4a:	f001 f9bf 	bl	8002dcc <HAL_I2C_Master_Transmit>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000510 	.word	0x20000510

08001a5c <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1d39      	adds	r1, r7, #4
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff2d 	bl	80018d0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a76:	f7ff fdf1 	bl	800165c <SSD1306_UpdateScreen>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_GPIO_Init+0xe4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2101      	movs	r1, #1
 8001afe:	481b      	ldr	r0, [pc, #108]	; (8001b6c <MX_GPIO_Init+0xe8>)
 8001b00:	f000 fff4 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	4819      	ldr	r0, [pc, #100]	; (8001b70 <MX_GPIO_Init+0xec>)
 8001b0a:	f000 ffef 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <MX_GPIO_Init+0xe8>)
 8001b26:	f000 fe51 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <MX_GPIO_Init+0xe8>)
 8001b40:	f000 fe44 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_GPIO_Init+0xec>)
 8001b5c:	f000 fe36 	bl	80027cc <HAL_GPIO_Init>

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400

08001b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <MX_I2C1_Init+0x54>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <MX_I2C1_Init+0x58>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001bb2:	f000 ffb3 	bl	8002b1c <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 f8b6 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000510 	.word	0x20000510
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	00061a80 	.word	0x00061a80

08001bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_I2C_MspInit+0x8c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d130      	bne.n	8001c54 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_I2C_MspInit+0x90>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_I2C_MspInit+0x90>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_I2C_MspInit+0x90>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <HAL_I2C_MspInit+0x94>)
 8001c28:	f000 fdd0 	bl	80027cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_I2C_MspInit+0x90>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_I2C_MspInit+0x90>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c36:	6253      	str	r3, [r2, #36]	; 0x24
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_I2C_MspInit+0x90>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	201f      	movs	r0, #31
 8001c4a:	f000 fcf0 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c4e:	201f      	movs	r0, #31
 8001c50:	f000 fd09 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020400 	.word	0x40020400

08001c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6c:	f000 fb53 	bl	8002316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c70:	f000 f80e 	bl	8001c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c74:	f7ff ff06 	bl	8001a84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c78:	f000 f97e 	bl	8001f78 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c7c:	f000 fab0 	bl	80021e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c80:	f7ff ff78 	bl	8001b74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001c84:	f7ff fc26 	bl	80014d4 <SSD1306_Init>

//TestLines(1);

  dw_main();
 8001c88:	f000 f856 	bl	8001d38 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <main+0x24>
	...

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b092      	sub	sp, #72	; 0x48
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	2234      	movs	r2, #52	; 0x34
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f005 f92c 	bl	8006efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <SystemClock_Config+0x98>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <SystemClock_Config+0x98>)
 8001cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001cd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001cdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 f8ae 	bl	8004e48 <HAL_RCC_OscConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cf2:	f000 f81b 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fbca 	bl	80054a8 <HAL_RCC_ClockConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d1a:	f000 f807 	bl	8001d2c <Error_Handler>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	3748      	adds	r7, #72	; 0x48
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	int le6n = strlen(buff);
 8001d3e:	487d      	ldr	r0, [pc, #500]	; (8001f34 <dw_main+0x1fc>)
 8001d40:	f7fe fa1c 	bl	800017c <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	603b      	str	r3, [r7, #0]
    /* Display application name on LCD. */
	HAL_UART_Transmit(&huart2,buff, strlen(buff), 100);
 8001d48:	487a      	ldr	r0, [pc, #488]	; (8001f34 <dw_main+0x1fc>)
 8001d4a:	f7fe fa17 	bl	800017c <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	4977      	ldr	r1, [pc, #476]	; (8001f34 <dw_main+0x1fc>)
 8001d56:	4878      	ldr	r0, [pc, #480]	; (8001f38 <dw_main+0x200>)
 8001d58:	f004 fa7c 	bl	8006254 <HAL_UART_Transmit>
	ssd1306_write(buff, Font_7x10);
 8001d5c:	4875      	ldr	r0, [pc, #468]	; (8001f34 <dw_main+0x1fc>)
 8001d5e:	4b77      	ldr	r3, [pc, #476]	; (8001f3c <dw_main+0x204>)
 8001d60:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d64:	f7ff fe7a 	bl	8001a5c <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001d68:	f7ff fb2a 	bl	80013c0 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001d6c:	f7ff fb84 	bl	8001478 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7fe fb8f 	bl	8000494 <dwt_initialise>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d110      	bne.n	8001da0 <dw_main+0x68>
    {
    	HAL_UART_Transmit(&huart2,"Init failed!!!\n", 16, 100);
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	2210      	movs	r2, #16
 8001d82:	496f      	ldr	r1, [pc, #444]	; (8001f40 <dw_main+0x208>)
 8001d84:	486c      	ldr	r0, [pc, #432]	; (8001f38 <dw_main+0x200>)
 8001d86:	f004 fa65 	bl	8006254 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10);
 8001d8a:	210a      	movs	r1, #10
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fd09 	bl	80017a4 <SSD1306_GotoXY>
    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001d92:	486c      	ldr	r0, [pc, #432]	; (8001f44 <dw_main+0x20c>)
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <dw_main+0x204>)
 8001d96:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d9a:	f7ff fe5f 	bl	8001a5c <ssd1306_write>

        while (1)
 8001d9e:	e7fe      	b.n	8001d9e <dw_main+0x66>
        { };
    }
    port_set_dw1000_fastrate();
 8001da0:	f7ff fb76 	bl	8001490 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 8001da4:	4868      	ldr	r0, [pc, #416]	; (8001f48 <dw_main+0x210>)
 8001da6:	f7fe fccb 	bl	8000740 <dwt_configure>

    /* Loop forever sending and receiving frames periodically. */
    while (1)
    {
    	SSD1306_Clear ();
 8001daa:	f7ff fdb6 	bl	800191a <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8001dae:	2100      	movs	r1, #0
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff fcf7 	bl	80017a4 <SSD1306_GotoXY>
 8001db6:	4865      	ldr	r0, [pc, #404]	; (8001f4c <dw_main+0x214>)
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <dw_main+0x204>)
 8001dba:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001dbe:	f7ff fe4d 	bl	8001a5c <ssd1306_write>
    	SSD1306_GotoXY(0, 30);  ssd1306_write("Transmitted :", Font_7x10);
 8001dc2:	211e      	movs	r1, #30
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fced 	bl	80017a4 <SSD1306_GotoXY>
 8001dca:	4861      	ldr	r0, [pc, #388]	; (8001f50 <dw_main+0x218>)
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <dw_main+0x204>)
 8001dce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001dd2:	f7ff fe43 	bl	8001a5c <ssd1306_write>
        /* Activate reception immediately. See NOTE 4 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff f962 	bl	80010a0 <dwt_rxenable>

        /* Poll until a frame is properly received or an error occurs. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the events we are looking at are in the lower bytes of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001ddc:	bf00      	nop
 8001dde:	2100      	movs	r1, #0
 8001de0:	200f      	movs	r0, #15
 8001de2:	f7fe ff12 	bl	8000c0a <dwt_read32bitoffsetreg>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a5a      	ldr	r2, [pc, #360]	; (8001f54 <dw_main+0x21c>)
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <dw_main+0x21c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <dw_main+0x220>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f2      	beq.n	8001dde <dw_main+0xa6>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001df8:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <dw_main+0x21c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8091 	beq.w	8001f28 <dw_main+0x1f0>
        {
            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001e06:	2100      	movs	r1, #0
 8001e08:	2010      	movs	r0, #16
 8001e0a:	f7fe fefe 	bl	8000c0a <dwt_read32bitoffsetreg>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <dw_main+0x224>)
 8001e1a:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <dw_main+0x224>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b7f      	cmp	r3, #127	; 0x7f
 8001e22:	d806      	bhi.n	8001e32 <dw_main+0xfa>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001e24:	4b4d      	ldr	r3, [pc, #308]	; (8001f5c <dw_main+0x224>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	484c      	ldr	r0, [pc, #304]	; (8001f60 <dw_main+0x228>)
 8001e2e:	f7fe fe2f 	bl	8000a90 <dwt_readrxdata>
            }
            sprintf(buff, "Received : %s\n", rx_buffer);
 8001e32:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <dw_main+0x228>)
 8001e34:	494b      	ldr	r1, [pc, #300]	; (8001f64 <dw_main+0x22c>)
 8001e36:	483f      	ldr	r0, [pc, #252]	; (8001f34 <dw_main+0x1fc>)
 8001e38:	f005 f868 	bl	8006f0c <siprintf>
            HAL_UART_Transmit(&huart2,buff, sizeof(buff), 100);
 8001e3c:	2364      	movs	r3, #100	; 0x64
 8001e3e:	2211      	movs	r2, #17
 8001e40:	493c      	ldr	r1, [pc, #240]	; (8001f34 <dw_main+0x1fc>)
 8001e42:	483d      	ldr	r0, [pc, #244]	; (8001f38 <dw_main+0x200>)
 8001e44:	f004 fa06 	bl	8006254 <HAL_UART_Transmit>


            SSD1306_GotoXY(0, 10); ssd1306_write(rx_buffer, Font_7x10);
 8001e48:	210a      	movs	r1, #10
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fcaa 	bl	80017a4 <SSD1306_GotoXY>
 8001e50:	4843      	ldr	r0, [pc, #268]	; (8001f60 <dw_main+0x228>)
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <dw_main+0x204>)
 8001e54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e58:	f7ff fe00 	bl	8001a5c <ssd1306_write>

            /* TESTING BREAKPOINT LOCATION #1 */

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001e5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e60:	2100      	movs	r1, #0
 8001e62:	200f      	movs	r0, #15
 8001e64:	f7fe ff57 	bl	8000d16 <dwt_write32bitoffsetreg>

            /* Validate the frame is the one expected as sent by "TX then wait for a response" example. */
            if ((frame_len == 14) && (rx_buffer[0] == 0xC5) && (rx_buffer[10] == 0x43) && (rx_buffer[11] == 0x2))
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <dw_main+0x224>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b0e      	cmp	r3, #14
 8001e6e:	d19c      	bne.n	8001daa <dw_main+0x72>
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <dw_main+0x228>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2bc5      	cmp	r3, #197	; 0xc5
 8001e76:	d198      	bne.n	8001daa <dw_main+0x72>
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <dw_main+0x228>)
 8001e7a:	7a9b      	ldrb	r3, [r3, #10]
 8001e7c:	2b43      	cmp	r3, #67	; 0x43
 8001e7e:	d194      	bne.n	8001daa <dw_main+0x72>
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <dw_main+0x228>)
 8001e82:	7adb      	ldrb	r3, [r3, #11]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d190      	bne.n	8001daa <dw_main+0x72>
            {
                int i;

                /* Copy source address of blink in response destination address. */
                for (i = 0; i < 8; i++)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e00a      	b.n	8001ea4 <dw_main+0x16c>
                {
                    tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	1c9a      	adds	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3305      	adds	r3, #5
 8001e96:	4932      	ldr	r1, [pc, #200]	; (8001f60 <dw_main+0x228>)
 8001e98:	5c89      	ldrb	r1, [r1, r2]
 8001e9a:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <dw_main+0x230>)
 8001e9c:	54d1      	strb	r1, [r2, r3]
                for (i = 0; i < 8; i++)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	ddf1      	ble.n	8001e8e <dw_main+0x156>
                }

                /* Write response frame data to DW1000 and prepare transmission. See NOTE 6 below.*/
                dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001eaa:	2200      	movs	r2, #0
 8001eac:	492e      	ldr	r1, [pc, #184]	; (8001f68 <dw_main+0x230>)
 8001eae:	2015      	movs	r0, #21
 8001eb0:	f7fe fdb0 	bl	8000a14 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2015      	movs	r0, #21
 8001eba:	f7fe fdc9 	bl	8000a50 <dwt_writetxfctrl>

                /* Send the response. */
                dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f856 	bl	8000f70 <dwt_starttx>
                HAL_UART_Transmit(&huart2,"Transmitted : ", 14, 100);
 8001ec4:	2364      	movs	r3, #100	; 0x64
 8001ec6:	220e      	movs	r2, #14
 8001ec8:	4928      	ldr	r1, [pc, #160]	; (8001f6c <dw_main+0x234>)
 8001eca:	481b      	ldr	r0, [pc, #108]	; (8001f38 <dw_main+0x200>)
 8001ecc:	f004 f9c2 	bl	8006254 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,tx_msg, sizeof(tx_msg), 100);
 8001ed0:	2364      	movs	r3, #100	; 0x64
 8001ed2:	2215      	movs	r2, #21
 8001ed4:	4924      	ldr	r1, [pc, #144]	; (8001f68 <dw_main+0x230>)
 8001ed6:	4818      	ldr	r0, [pc, #96]	; (8001f38 <dw_main+0x200>)
 8001ed8:	f004 f9bc 	bl	8006254 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,"\n", 1, 100);
 8001edc:	2364      	movs	r3, #100	; 0x64
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4923      	ldr	r1, [pc, #140]	; (8001f70 <dw_main+0x238>)
 8001ee2:	4815      	ldr	r0, [pc, #84]	; (8001f38 <dw_main+0x200>)
 8001ee4:	f004 f9b6 	bl	8006254 <HAL_UART_Transmit>

                SSD1306_GotoXY(0, 40); ssd1306_write(tx_msg, Font_7x10);
 8001ee8:	2128      	movs	r1, #40	; 0x28
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fc5a 	bl	80017a4 <SSD1306_GotoXY>
 8001ef0:	481d      	ldr	r0, [pc, #116]	; (8001f68 <dw_main+0x230>)
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <dw_main+0x204>)
 8001ef4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ef8:	f7ff fdb0 	bl	8001a5c <ssd1306_write>
                /* Poll DW1000 until TX frame sent event set. */
                while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8001efc:	bf00      	nop
 8001efe:	2100      	movs	r1, #0
 8001f00:	200f      	movs	r0, #15
 8001f02:	f7fe fe82 	bl	8000c0a <dwt_read32bitoffsetreg>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f6      	beq.n	8001efe <dw_main+0x1c6>
                { };

                /* Clear TX frame sent event. */
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	2100      	movs	r1, #0
 8001f14:	200f      	movs	r0, #15
 8001f16:	f7fe fefe 	bl	8000d16 <dwt_write32bitoffsetreg>

                /* Increment the data frame sequence number (modulo 256). */
                tx_msg[DATA_FRAME_SN_IDX]++;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <dw_main+0x230>)
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <dw_main+0x230>)
 8001f24:	709a      	strb	r2, [r3, #2]
 8001f26:	e740      	b.n	8001daa <dw_main+0x72>
            }
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <dw_main+0x23c>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	200f      	movs	r0, #15
 8001f2e:	f7fe fef2 	bl	8000d16 <dwt_write32bitoffsetreg>
    	SSD1306_Clear ();
 8001f32:	e73a      	b.n	8001daa <dw_main+0x72>
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	20000648 	.word	0x20000648
 8001f3c:	20000004 	.word	0x20000004
 8001f40:	08007818 	.word	0x08007818
 8001f44:	08007828 	.word	0x08007828
 8001f48:	20000020 	.word	0x20000020
 8001f4c:	08007838 	.word	0x08007838
 8001f50:	08007844 	.word	0x08007844
 8001f54:	200005e4 	.word	0x200005e4
 8001f58:	2405d000 	.word	0x2405d000
 8001f5c:	200005e8 	.word	0x200005e8
 8001f60:	20000564 	.word	0x20000564
 8001f64:	08007854 	.word	0x08007854
 8001f68:	2000002c 	.word	0x2000002c
 8001f6c:	08007864 	.word	0x08007864
 8001f70:	08007874 	.word	0x08007874
 8001f74:	24059000 	.word	0x24059000

08001f78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <MX_SPI1_Init+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fca:	f003 fd33 	bl	8005a34 <HAL_SPI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fd4:	f7ff feaa 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200005ec 	.word	0x200005ec
 8001fe0:	40013000 	.word	0x40013000

08001fe4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_SPI_MspInit+0x8c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12f      	bne.n	8002066 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_SPI_MspInit+0x90>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_SPI_MspInit+0x90>)
 800200c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_SPI_MspInit+0x90>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_SPI_MspInit+0x90>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_SPI_MspInit+0x90>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_SPI_MspInit+0x90>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002036:	23e0      	movs	r3, #224	; 0xe0
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002046:	2305      	movs	r3, #5
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	4809      	ldr	r0, [pc, #36]	; (8002078 <HAL_SPI_MspInit+0x94>)
 8002052:	f000 fbbb 	bl	80027cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2023      	movs	r0, #35	; 0x23
 800205c:	f000 fae7 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002060:	2023      	movs	r0, #35	; 0x23
 8002062:	f000 fb00 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40013000 	.word	0x40013000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_MspInit+0x5c>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_MspInit+0x5c>)
 8002088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800208c:	6253      	str	r3, [r2, #36]	; 0x24
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_MspInit+0x5c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <HAL_MspInit+0x5c>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_MspInit+0x5c>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6213      	str	r3, [r2, #32]
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_MspInit+0x5c>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_MspInit+0x5c>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_MspInit+0x5c>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6253      	str	r3, [r2, #36]	; 0x24
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_MspInit+0x5c>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020ca:	2007      	movs	r0, #7
 80020cc:	f000 faa4 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <NMI_Handler+0x4>

080020e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <HardFault_Handler+0x4>

080020e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <MemManage_Handler+0x4>

080020ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <BusFault_Handler+0x4>

080020f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler+0x4>

080020fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002122:	f000 f94b 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <I2C1_EV_IRQHandler+0x10>)
 8002132:	f001 f877 	bl	8003224 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000510 	.word	0x20000510

08002140 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <SPI1_IRQHandler+0x10>)
 8002146:	f003 fe41 	bl	8005dcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200005ec 	.word	0x200005ec

08002154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <USART2_IRQHandler+0x10>)
 800215a:	f004 f8ff 	bl	800635c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000648 	.word	0x20000648

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f004 fe86 	bl	8006ea8 <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20014000 	.word	0x20014000
 80021c8:	00000400 	.word	0x00000400
 80021cc:	20000644 	.word	0x20000644
 80021d0:	200006a8 	.word	0x200006a8

080021d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_USART2_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <MX_USART2_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MX_USART2_UART_Init+0x4c>)
 80021ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_USART2_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_USART2_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_USART2_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_USART2_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_USART2_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_USART2_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_USART2_UART_Init+0x4c>)
 8002218:	f003 ffcc 	bl	80061b4 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002222:	f7ff fd83 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000648 	.word	0x20000648
 8002230:	40004400 	.word	0x40004400

08002234 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_UART_MspInit+0x8c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12f      	bne.n	80022b6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_UART_MspInit+0x90>)
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	6253      	str	r3, [r2, #36]	; 0x24
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <HAL_UART_MspInit+0x90>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	61d3      	str	r3, [r2, #28]
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_UART_MspInit+0x90>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002286:	230c      	movs	r3, #12
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002296:	2307      	movs	r3, #7
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <HAL_UART_MspInit+0x94>)
 80022a2:	f000 fa93 	bl	80027cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2026      	movs	r0, #38	; 0x26
 80022ac:	f000 f9bf 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022b0:	2026      	movs	r0, #38	; 0x26
 80022b2:	f000 f9d8 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40004400 	.word	0x40004400
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000

080022cc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80022cc:	f7ff ff82 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d0:	480b      	ldr	r0, [pc, #44]	; (8002300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022d2:	490c      	ldr	r1, [pc, #48]	; (8002304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022d4:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e8:	4c09      	ldr	r4, [pc, #36]	; (8002310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f6:	f004 fddd 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fa:	f7ff fcb5 	bl	8001c68 <main>
  bx lr
 80022fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002308:	08008100 	.word	0x08008100
  ldr r2, =_sbss
 800230c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002310:	200006a4 	.word	0x200006a4

08002314 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_IRQHandler>

08002316 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f979 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002326:	2000      	movs	r0, #0
 8002328:	f000 f80e 	bl	8002348 <HAL_InitTick>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	e001      	b.n	800233c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002338:	f7ff fea0 	bl	800207c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800233c:	79fb      	ldrb	r3, [r7, #7]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_InitTick+0x68>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d022      	beq.n	80023a2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_InitTick+0x6c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_InitTick+0x68>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002368:	fbb1 f3f3 	udiv	r3, r1, r3
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f994 	bl	800269e <HAL_SYSTICK_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10f      	bne.n	800239c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	d809      	bhi.n	8002396 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002382:	2200      	movs	r2, #0
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	f04f 30ff 	mov.w	r0, #4294967295
 800238a:	f000 f950 	bl	800262e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_InitTick+0x70>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e007      	b.n	80023a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e004      	b.n	80023a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2000004c 	.word	0x2000004c
 80023b4:	20000044 	.word	0x20000044
 80023b8:	20000048 	.word	0x20000048

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_IncTick+0x1c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_IncTick+0x20>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <HAL_IncTick+0x1c>)
 80023cc:	6013      	str	r3, [r2, #0]
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000690 	.word	0x20000690
 80023dc:	2000004c 	.word	0x2000004c

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <HAL_GetTick+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000690 	.word	0x20000690

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d004      	beq.n	8002418 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_Delay+0x40>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002418:	bf00      	nop
 800241a:	f7ff ffe1 	bl	80023e0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	429a      	cmp	r2, r3
 8002428:	d8f7      	bhi.n	800241a <HAL_Delay+0x26>
  {
  }
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000004c 	.word	0x2000004c

08002438 <__NVIC_SetPriorityGrouping>:
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4906      	ldr	r1, [pc, #24]	; (80024d0 <__NVIC_EnableIRQ+0x34>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_DisableIRQ>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db12      	blt.n	800250c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	490a      	ldr	r1, [pc, #40]	; (8002518 <__NVIC_DisableIRQ+0x44>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2001      	movs	r0, #1
 80024f6:	fa00 f202 	lsl.w	r2, r0, r2
 80024fa:	3320      	adds	r3, #32
 80024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002500:	f3bf 8f4f 	dsb	sy
}
 8002504:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002506:	f3bf 8f6f 	isb	sy
}
 800250a:	bf00      	nop
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	; (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	; (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	; 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff90 	bl	800251c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff09 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff1e 	bl	8002480 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff90 	bl	8002570 <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5f 	bl	800251c <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff11 	bl	800249c <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff1f 	bl	80024d4 <__NVIC_DisableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff94 	bl	80025d4 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d008      	beq.n	80026e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e022      	b.n	8002726 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 020e 	bic.w	r2, r2, #14
 80026ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f003 021c 	and.w	r2, r3, #28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d005      	beq.n	8002754 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2204      	movs	r2, #4
 800274c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e029      	b.n	80027a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020e 	bic.w	r2, r2, #14
 8002762:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f003 021c 	and.w	r2, r3, #28
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
    }
  }
  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c0:	b2db      	uxtb	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027e2:	e160      	b.n	8002aa6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8152 	beq.w	8002aa0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d005      	beq.n	8002814 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002810:	2b02      	cmp	r3, #2
 8002812:	d130      	bne.n	8002876 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800284a:	2201      	movs	r2, #1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0201 	and.w	r2, r3, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d017      	beq.n	80028b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d123      	bne.n	8002906 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	6939      	ldr	r1, [r7, #16]
 8002902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80ac 	beq.w	8002aa0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002948:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <HAL_GPIO_Init+0x2f8>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a5d      	ldr	r2, [pc, #372]	; (8002ac4 <HAL_GPIO_Init+0x2f8>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	4b5b      	ldr	r3, [pc, #364]	; (8002ac4 <HAL_GPIO_Init+0x2f8>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002960:	4a59      	ldr	r2, [pc, #356]	; (8002ac8 <HAL_GPIO_Init+0x2fc>)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_GPIO_Init+0x300>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d025      	beq.n	80029d8 <HAL_GPIO_Init+0x20c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_GPIO_Init+0x304>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d01f      	beq.n	80029d4 <HAL_GPIO_Init+0x208>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <HAL_GPIO_Init+0x308>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d019      	beq.n	80029d0 <HAL_GPIO_Init+0x204>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a4e      	ldr	r2, [pc, #312]	; (8002ad8 <HAL_GPIO_Init+0x30c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_GPIO_Init+0x200>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a4d      	ldr	r2, [pc, #308]	; (8002adc <HAL_GPIO_Init+0x310>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00d      	beq.n	80029c8 <HAL_GPIO_Init+0x1fc>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a4c      	ldr	r2, [pc, #304]	; (8002ae0 <HAL_GPIO_Init+0x314>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x1f8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <HAL_GPIO_Init+0x318>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_GPIO_Init+0x1f4>
 80029bc:	2306      	movs	r3, #6
 80029be:	e00c      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029c0:	2307      	movs	r3, #7
 80029c2:	e00a      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029c4:	2305      	movs	r3, #5
 80029c6:	e008      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029c8:	2304      	movs	r3, #4
 80029ca:	e006      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029cc:	2303      	movs	r3, #3
 80029ce:	e004      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e002      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_GPIO_Init+0x20e>
 80029d8:	2300      	movs	r3, #0
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	f002 0203 	and.w	r2, r2, #3
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	4093      	lsls	r3, r2
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ea:	4937      	ldr	r1, [pc, #220]	; (8002ac8 <HAL_GPIO_Init+0x2fc>)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4c:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a9a:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f ae97 	bne.w	80027e4 <HAL_GPIO_Init+0x18>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002b08:	e003      	b.n	8002b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	041a      	lsls	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	619a      	str	r2, [r3, #24]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e12b      	b.n	8002d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff f844 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b80:	f002 fed0 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8002b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a81      	ldr	r2, [pc, #516]	; (8002d90 <HAL_I2C_Init+0x274>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d807      	bhi.n	8002ba0 <HAL_I2C_Init+0x84>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a80      	ldr	r2, [pc, #512]	; (8002d94 <HAL_I2C_Init+0x278>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	bf94      	ite	ls
 8002b98:	2301      	movls	r3, #1
 8002b9a:	2300      	movhi	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e006      	b.n	8002bae <HAL_I2C_Init+0x92>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a7d      	ldr	r2, [pc, #500]	; (8002d98 <HAL_I2C_Init+0x27c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bf94      	ite	ls
 8002ba8:	2301      	movls	r3, #1
 8002baa:	2300      	movhi	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0e7      	b.n	8002d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4a78      	ldr	r2, [pc, #480]	; (8002d9c <HAL_I2C_Init+0x280>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0c9b      	lsrs	r3, r3, #18
 8002bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_I2C_Init+0x274>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d802      	bhi.n	8002bf0 <HAL_I2C_Init+0xd4>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3301      	adds	r3, #1
 8002bee:	e009      	b.n	8002c04 <HAL_I2C_Init+0xe8>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <HAL_I2C_Init+0x284>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	3301      	adds	r3, #1
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	495c      	ldr	r1, [pc, #368]	; (8002d90 <HAL_I2C_Init+0x274>)
 8002c20:	428b      	cmp	r3, r1
 8002c22:	d819      	bhi.n	8002c58 <HAL_I2C_Init+0x13c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e59      	subs	r1, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c32:	1c59      	adds	r1, r3, #1
 8002c34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c38:	400b      	ands	r3, r1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_I2C_Init+0x138>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1e59      	subs	r1, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c52:	e051      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002c54:	2304      	movs	r3, #4
 8002c56:	e04f      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d111      	bne.n	8002c84 <HAL_I2C_Init+0x168>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	440b      	add	r3, r1
 8002c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e012      	b.n	8002caa <HAL_I2C_Init+0x18e>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e58      	subs	r0, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	0099      	lsls	r1, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Init+0x196>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e022      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_I2C_Init+0x1bc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1e58      	subs	r0, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6859      	ldr	r1, [r3, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	440b      	add	r3, r1
 8002cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd6:	e00f      	b.n	8002cf8 <HAL_I2C_Init+0x1dc>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	0099      	lsls	r1, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	6809      	ldr	r1, [r1, #0]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6911      	ldr	r1, [r2, #16]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	4311      	orrs	r1, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	000186a0 	.word	0x000186a0
 8002d94:	001e847f 	.word	0x001e847f
 8002d98:	003d08ff 	.word	0x003d08ff
 8002d9c:	431bde83 	.word	0x431bde83
 8002da0:	10624dd3 	.word	0x10624dd3

08002da4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d103      	bne.n	8002dc2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff fafe 	bl	80023e0 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	f040 80e0 	bne.w	8002fb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2319      	movs	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4970      	ldr	r1, [pc, #448]	; (8002fc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f001 fdfe 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0d3      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_I2C_Master_Transmit+0x50>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e0cc      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d007      	beq.n	8002e42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2221      	movs	r2, #33	; 0x21
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	893a      	ldrh	r2, [r7, #8]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e84:	8979      	ldrh	r1, [r7, #10]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f001 fc8e 	bl	80047ac <I2C_MasterRequestWrite>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e08d      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002eb0:	e066      	b.n	8002f80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f001 febc 	bl	8004c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d107      	bne.n	8002eda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e06b      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	781a      	ldrb	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d11b      	bne.n	8002f54 <HAL_I2C_Master_Transmit+0x188>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d017      	beq.n	8002f54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	6a39      	ldr	r1, [r7, #32]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f001 feb3 	bl	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e01a      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d194      	bne.n	8002eb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	00100002 	.word	0x00100002
 8002fc4:	ffff0000 	.word	0xffff0000

08002fc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fa02 	bl	80023e0 <HAL_GetTick>
 8002fdc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	f040 8111 	bne.w	8003212 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4988      	ldr	r1, [pc, #544]	; (800321c <HAL_I2C_IsDeviceReady+0x254>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f001 fd00 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	e104      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_I2C_IsDeviceReady+0x50>
 8003014:	2302      	movs	r3, #2
 8003016:	e0fd      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d007      	beq.n	800303e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2224      	movs	r2, #36	; 0x24
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a70      	ldr	r2, [pc, #448]	; (8003220 <HAL_I2C_IsDeviceReady+0x258>)
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 fcbe 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d103      	bne.n	80030a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0b6      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030b6:	f7ff f993 	bl	80023e0 <HAL_GetTick>
 80030ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ea:	e025      	b.n	8003138 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ec:	f7ff f978 	bl	80023e0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <HAL_I2C_IsDeviceReady+0x13a>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	22a0      	movs	r2, #160	; 0xa0
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2ba0      	cmp	r3, #160	; 0xa0
 8003142:	d005      	beq.n	8003150 <HAL_I2C_IsDeviceReady+0x188>
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_I2C_IsDeviceReady+0x188>
 800314a:	7dbb      	ldrb	r3, [r7, #22]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0cd      	beq.n	80030ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d129      	bne.n	80031ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2319      	movs	r3, #25
 8003192:	2201      	movs	r2, #1
 8003194:	4921      	ldr	r1, [pc, #132]	; (800321c <HAL_I2C_IsDeviceReady+0x254>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f001 fc32 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e036      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e02c      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2319      	movs	r3, #25
 80031da:	2201      	movs	r2, #1
 80031dc:	490f      	ldr	r1, [pc, #60]	; (800321c <HAL_I2C_IsDeviceReady+0x254>)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f001 fc0e 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e012      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	f4ff af32 	bcc.w	8003062 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	00100002 	.word	0x00100002
 8003220:	ffff0000 	.word	0xffff0000

08003224 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003244:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b10      	cmp	r3, #16
 8003252:	d003      	beq.n	800325c <HAL_I2C_EV_IRQHandler+0x38>
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	f040 80c1 	bne.w	80033de <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <HAL_I2C_EV_IRQHandler+0x6e>
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800327c:	d003      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x62>
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003284:	d101      	bne.n	800328a <HAL_I2C_EV_IRQHandler+0x66>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_I2C_EV_IRQHandler+0x68>
 800328a:	2300      	movs	r3, #0
 800328c:	2b01      	cmp	r3, #1
 800328e:	f000 8132 	beq.w	80034f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00c      	beq.n	80032b6 <HAL_I2C_EV_IRQHandler+0x92>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0a5b      	lsrs	r3, r3, #9
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f001 fdb3 	bl	8004e14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fcd6 	bl	8003c60 <I2C_Master_SB>
 80032b4:	e092      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	0a5b      	lsrs	r3, r3, #9
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fd4b 	bl	8003d6a <I2C_Master_ADD10>
 80032d4:	e082      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	0a5b      	lsrs	r3, r3, #9
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fd64 	bl	8003dbc <I2C_Master_ADDR>
 80032f4:	e072      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03b      	beq.n	800337a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003310:	f000 80f3 	beq.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	09db      	lsrs	r3, r3, #7
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00f      	beq.n	8003340 <HAL_I2C_EV_IRQHandler+0x11c>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <HAL_I2C_EV_IRQHandler+0x11c>
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f942 	bl	80035c2 <I2C_MasterTransmit_TXE>
 800333e:	e04d      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80d6 	beq.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	0a5b      	lsrs	r3, r3, #9
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80cf 	beq.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	2b21      	cmp	r3, #33	; 0x21
 8003360:	d103      	bne.n	800336a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9c9 	bl	80036fa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003368:	e0c7      	b.n	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	f040 80c4 	bne.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa37 	bl	80037e6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003378:	e0bf      	b.n	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003388:	f000 80b7 	beq.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00f      	beq.n	80033b8 <HAL_I2C_EV_IRQHandler+0x194>
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <HAL_I2C_EV_IRQHandler+0x194>
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fab0 	bl	8003916 <I2C_MasterReceive_RXNE>
 80033b6:	e011      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 809a 	beq.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0a5b      	lsrs	r3, r3, #9
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8093 	beq.w	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb59 	bl	8003a8c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033da:	e08e      	b.n	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
 80033dc:	e08d      	b.n	80034fa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e007      	b.n	8003400 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x20e>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	0a5b      	lsrs	r3, r3, #9
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00c      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003428:	69b9      	ldr	r1, [r7, #24]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 ff12 	bl	8004254 <I2C_Slave_ADDR>
 8003430:	e066      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x22e>
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	0a5b      	lsrs	r3, r3, #9
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ff4c 	bl	80042e8 <I2C_Slave_STOPF>
 8003450:	e056      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003452:	7bbb      	ldrb	r3, [r7, #14]
 8003454:	2b21      	cmp	r3, #33	; 0x21
 8003456:	d002      	beq.n	800345e <HAL_I2C_EV_IRQHandler+0x23a>
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	2b29      	cmp	r3, #41	; 0x29
 800345c:	d125      	bne.n	80034aa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	09db      	lsrs	r3, r3, #7
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00f      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x266>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	0a9b      	lsrs	r3, r3, #10
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x266>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fe2a 	bl	80040dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003488:	e039      	b.n	80034fe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d033      	beq.n	80034fe <HAL_I2C_EV_IRQHandler+0x2da>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	0a5b      	lsrs	r3, r3, #9
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02d      	beq.n	80034fe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fe57 	bl	8004156 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034a8:	e029      	b.n	80034fe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00f      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	0a9b      	lsrs	r3, r3, #10
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fe61 	bl	8004196 <I2C_SlaveReceive_RXNE>
 80034d4:	e014      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	0a5b      	lsrs	r3, r3, #9
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fe8f 	bl	8004212 <I2C_SlaveReceive_BTF>
 80034f4:	e004      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	70fb      	strb	r3, [r7, #3]
 800355a:	4613      	mov	r3, r2
 800355c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d150      	bne.n	800368a <I2C_MasterTransmit_TXE+0xc8>
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b21      	cmp	r3, #33	; 0x21
 80035ec:	d14d      	bne.n	800368a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d01d      	beq.n	8003630 <I2C_MasterTransmit_TXE+0x6e>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d01a      	beq.n	8003630 <I2C_MasterTransmit_TXE+0x6e>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003600:	d016      	beq.n	8003630 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003610:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2211      	movs	r2, #17
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff6c 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800362e:	e060      	b.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800363e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d107      	bne.n	800367a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ff81 	bl	800357a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003678:	e03b      	b.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ff3f 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003688:	e033      	b.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b21      	cmp	r3, #33	; 0x21
 800368e:	d005      	beq.n	800369c <I2C_MasterTransmit_TXE+0xda>
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d12d      	bne.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b22      	cmp	r3, #34	; 0x22
 800369a:	d12a      	bne.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036b6:	e01c      	b.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d103      	bne.n	80036cc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f88e 	bl	80037e6 <I2C_MemoryTransmit_TXE_BTF>
}
 80036ca:	e012      	b.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036f0:	e7ff      	b.n	80036f2 <I2C_MasterTransmit_TXE+0x130>
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b21      	cmp	r3, #33	; 0x21
 8003712:	d164      	bne.n	80037de <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d012      	beq.n	8003744 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003742:	e04c      	b.n	80037de <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d01d      	beq.n	8003786 <I2C_MasterTransmit_BTF+0x8c>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b20      	cmp	r3, #32
 800374e:	d01a      	beq.n	8003786 <I2C_MasterTransmit_BTF+0x8c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003756:	d016      	beq.n	8003786 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003766:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2211      	movs	r2, #17
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fec1 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
}
 8003784:	e02b      	b.n	80037de <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003794:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d107      	bne.n	80037d0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fed6 	bl	800357a <HAL_I2C_MemTxCpltCallback>
}
 80037ce:	e006      	b.n	80037de <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fe94 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10b      	bne.n	800381e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380a:	b2da      	uxtb	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	1c9a      	adds	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800381c:	e077      	b.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003822:	b29b      	uxth	r3, r3
 8003824:	121b      	asrs	r3, r3, #8
 8003826:	b2da      	uxtb	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003838:	e069      	b.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10b      	bne.n	800385a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003858:	e059      	b.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	2b02      	cmp	r3, #2
 8003860:	d152      	bne.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b22      	cmp	r3, #34	; 0x22
 8003866:	d10d      	bne.n	8003884 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003876:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003882:	e044      	b.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b21      	cmp	r3, #33	; 0x21
 8003892:	d112      	bne.n	80038ba <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038b8:	e029      	b.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d124      	bne.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b21      	cmp	r3, #33	; 0x21
 80038c8:	d121      	bne.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe3a 	bl	800357a <HAL_I2C_MemTxCpltCallback>
}
 8003906:	e002      	b.n	800390e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fa4b 	bl	8002da4 <I2C_Flush_DR>
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b22      	cmp	r3, #34	; 0x22
 8003928:	f040 80ac 	bne.w	8003a84 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d921      	bls.n	800397e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b03      	cmp	r3, #3
 8003968:	f040 808c 	bne.w	8003a84 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800397c:	e082      	b.n	8003a84 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	2b02      	cmp	r3, #2
 8003984:	d075      	beq.n	8003a72 <I2C_MasterReceive_RXNE+0x15c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <I2C_MasterReceive_RXNE+0x7c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d16f      	bne.n	8003a72 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f001 f9de 	bl	8004d54 <I2C_WaitOnSTOPRequestThroughIT>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d142      	bne.n	8003a24 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d10a      	bne.n	8003a0e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fdc0 	bl	800358c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a0c:	e03a      	b.n	8003a84 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2212      	movs	r2, #18
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fd7b 	bl	8003518 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a22:	e02f      	b.n	8003a84 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a32:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fd97 	bl	800359e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a70:	e008      	b.n	8003a84 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	605a      	str	r2, [r3, #4]
}
 8003a82:	e7ff      	b.n	8003a84 <I2C_MasterReceive_RXNE+0x16e>
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d11b      	bne.n	8003adc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ada:	e0bd      	b.n	8003c58 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d129      	bne.n	8003b3a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00a      	beq.n	8003b12 <I2C_MasterReceive_BTF+0x86>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d007      	beq.n	8003b12 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b10:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b38:	e08e      	b.n	8003c58 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d176      	bne.n	8003c32 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d002      	beq.n	8003b50 <I2C_MasterReceive_BTF+0xc4>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d108      	bne.n	8003b62 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e019      	b.n	8003b96 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d002      	beq.n	8003b6e <I2C_MasterReceive_BTF+0xe2>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d108      	bne.n	8003b80 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e00a      	b.n	8003b96 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d007      	beq.n	8003b96 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b94:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bf0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d10a      	bne.n	8003c1c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fcb9 	bl	800358c <HAL_I2C_MemRxCpltCallback>
}
 8003c1a:	e01d      	b.n	8003c58 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2212      	movs	r2, #18
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fc74 	bl	8003518 <HAL_I2C_MasterRxCpltCallback>
}
 8003c30:	e012      	b.n	8003c58 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d117      	bne.n	8003ca4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c8c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c8e:	e067      	b.n	8003d60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]
}
 8003ca2:	e05d      	b.n	8003d60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cac:	d133      	bne.n	8003d16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b21      	cmp	r3, #33	; 0x21
 8003cb8:	d109      	bne.n	8003cce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cca:	611a      	str	r2, [r3, #16]
 8003ccc:	e008      	b.n	8003ce0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <I2C_Master_SB+0x92>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d032      	beq.n	8003d60 <I2C_Master_SB+0x100>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d02d      	beq.n	8003d60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	605a      	str	r2, [r3, #4]
}
 8003d14:	e024      	b.n	8003d60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10e      	bne.n	8003d3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	11db      	asrs	r3, r3, #7
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0306 	and.w	r3, r3, #6
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f063 030f 	orn	r3, r3, #15
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	611a      	str	r2, [r3, #16]
}
 8003d3a:	e011      	b.n	8003d60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10d      	bne.n	8003d60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	11db      	asrs	r3, r3, #7
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f063 030e 	orn	r3, r3, #14
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <I2C_Master_ADD10+0x26>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d108      	bne.n	8003da2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00c      	beq.n	8003db2 <I2C_Master_ADD10+0x48>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db0:	605a      	str	r2, [r3, #4]
  }
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b091      	sub	sp, #68	; 0x44
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b22      	cmp	r3, #34	; 0x22
 8003de4:	f040 8169 	bne.w	80040ba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10f      	bne.n	8003e10 <I2C_Master_ADDR+0x54>
 8003df0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d10b      	bne.n	8003e10 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	e160      	b.n	80040d2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11d      	bne.n	8003e54 <I2C_Master_ADDR+0x98>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e20:	d118      	bne.n	8003e54 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e46:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50
 8003e52:	e13e      	b.n	80040d2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d113      	bne.n	8003e86 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e115      	b.n	80040b2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	f040 808a 	bne.w	8003fa6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e98:	d137      	bne.n	8003f0a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb8:	d113      	bne.n	8003ee2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	e0e7      	b.n	80040b2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e0d3      	b.n	80040b2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d02e      	beq.n	8003f6e <I2C_Master_ADDR+0x1b2>
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d02b      	beq.n	8003f6e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	2b12      	cmp	r3, #18
 8003f1a:	d102      	bne.n	8003f22 <I2C_Master_ADDR+0x166>
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d125      	bne.n	8003f6e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d00e      	beq.n	8003f46 <I2C_Master_ADDR+0x18a>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d00b      	beq.n	8003f46 <I2C_Master_ADDR+0x18a>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d008      	beq.n	8003f46 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	e007      	b.n	8003f56 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	e0a1      	b.n	80040b2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e085      	b.n	80040b2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d14d      	bne.n	800404c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d016      	beq.n	8003fe4 <I2C_Master_ADDR+0x228>
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d013      	beq.n	8003fe4 <I2C_Master_ADDR+0x228>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d010      	beq.n	8003fe4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ff2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004002:	d117      	bne.n	8004034 <I2C_Master_ADDR+0x278>
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400a:	d00b      	beq.n	8004024 <I2C_Master_ADDR+0x268>
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2b01      	cmp	r3, #1
 8004010:	d008      	beq.n	8004024 <I2C_Master_ADDR+0x268>
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	2b08      	cmp	r3, #8
 8004016:	d005      	beq.n	8004024 <I2C_Master_ADDR+0x268>
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	2b10      	cmp	r3, #16
 800401c:	d002      	beq.n	8004024 <I2C_Master_ADDR+0x268>
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2b20      	cmp	r3, #32
 8004022:	d107      	bne.n	8004034 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004032:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	e032      	b.n	80040b2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800405a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406a:	d117      	bne.n	800409c <I2C_Master_ADDR+0x2e0>
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004072:	d00b      	beq.n	800408c <I2C_Master_ADDR+0x2d0>
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b01      	cmp	r3, #1
 8004078:	d008      	beq.n	800408c <I2C_Master_ADDR+0x2d0>
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b08      	cmp	r3, #8
 800407e:	d005      	beq.n	800408c <I2C_Master_ADDR+0x2d0>
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	2b10      	cmp	r3, #16
 8004084:	d002      	beq.n	800408c <I2C_Master_ADDR+0x2d0>
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b20      	cmp	r3, #32
 800408a:	d107      	bne.n	800409c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800409a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040b8:	e00b      	b.n	80040d2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	e7ff      	b.n	80040d2 <I2C_Master_ADDR+0x316>
 80040d2:	bf00      	nop
 80040d4:	3744      	adds	r7, #68	; 0x44
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02b      	beq.n	800414e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d114      	bne.n	800414e <I2C_SlaveTransmit_TXE+0x72>
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b29      	cmp	r3, #41	; 0x29
 8004128:	d111      	bne.n	800414e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004138:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2221      	movs	r2, #33	; 0x21
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2228      	movs	r2, #40	; 0x28
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff f9ee 	bl	800352a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d011      	beq.n	800418c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d02c      	beq.n	800420a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d114      	bne.n	800420a <I2C_SlaveReceive_RXNE+0x74>
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b2a      	cmp	r3, #42	; 0x2a
 80041e4:	d111      	bne.n	800420a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2222      	movs	r2, #34	; 0x22
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2228      	movs	r2, #40	; 0x28
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff f999 	bl	800353c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800426e:	2b28      	cmp	r3, #40	; 0x28
 8004270:	d127      	bne.n	80042c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	09db      	lsrs	r3, r3, #7
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	81bb      	strh	r3, [r7, #12]
 80042a4:	e002      	b.n	80042ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042b4:	89ba      	ldrh	r2, [r7, #12]
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff f947 	bl	800354e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042c0:	e00e      	b.n	80042e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004306:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004344:	d172      	bne.n	800442c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b22      	cmp	r3, #34	; 0x22
 800434a:	d002      	beq.n	8004352 <I2C_Slave_STOPF+0x6a>
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b2a      	cmp	r3, #42	; 0x2a
 8004350:	d135      	bne.n	80043be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f043 0204 	orr.w	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004384:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fa11 	bl	80027b2 <HAL_DMA_GetState>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d049      	beq.n	800442a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	4a69      	ldr	r2, [pc, #420]	; (8004540 <I2C_Slave_STOPF+0x258>)
 800439c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe f9c4 	bl	8002730 <HAL_DMA_Abort_IT>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d03d      	beq.n	800442a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b8:	4610      	mov	r0, r2
 80043ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043bc:	e035      	b.n	800442a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe f9db 	bl	80027b2 <HAL_DMA_GetState>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d014      	beq.n	800442c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <I2C_Slave_STOPF+0x258>)
 8004408:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe f98e 	bl	8002730 <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
 8004428:	e000      	b.n	800442c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800442a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d03e      	beq.n	80044b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b04      	cmp	r3, #4
 8004442:	d112      	bne.n	800446a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d112      	bne.n	800449e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f843 	bl	8004548 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044c2:	e039      	b.n	8004538 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b2a      	cmp	r3, #42	; 0x2a
 80044c8:	d109      	bne.n	80044de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2228      	movs	r2, #40	; 0x28
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff f82f 	bl	800353c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b28      	cmp	r3, #40	; 0x28
 80044e8:	d111      	bne.n	800450e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a15      	ldr	r2, [pc, #84]	; (8004544 <I2C_Slave_STOPF+0x25c>)
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff f82e 	bl	8003568 <HAL_I2C_ListenCpltCallback>
}
 800450c:	e014      	b.n	8004538 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	2b22      	cmp	r3, #34	; 0x22
 8004514:	d002      	beq.n	800451c <I2C_Slave_STOPF+0x234>
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b22      	cmp	r3, #34	; 0x22
 800451a:	d10d      	bne.n	8004538 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff f802 	bl	800353c <HAL_I2C_SlaveRxCpltCallback>
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	080048b1 	.word	0x080048b1
 8004544:	ffff0000 	.word	0xffff0000

08004548 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004560:	7bbb      	ldrb	r3, [r7, #14]
 8004562:	2b10      	cmp	r3, #16
 8004564:	d002      	beq.n	800456c <I2C_ITError+0x24>
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d10a      	bne.n	8004582 <I2C_ITError+0x3a>
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b22      	cmp	r3, #34	; 0x22
 8004570:	d107      	bne.n	8004582 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004588:	2b28      	cmp	r3, #40	; 0x28
 800458a:	d107      	bne.n	800459c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2228      	movs	r2, #40	; 0x28
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800459a:	e015      	b.n	80045c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045aa:	d00a      	beq.n	80045c2 <I2C_ITError+0x7a>
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b60      	cmp	r3, #96	; 0x60
 80045b0:	d007      	beq.n	80045c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d162      	bne.n	800469e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d020      	beq.n	8004638 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fa:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <I2C_ITError+0x25c>)
 80045fc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe f894 	bl	8002730 <HAL_DMA_Abort_IT>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8089 	beq.w	8004722 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004632:	4610      	mov	r0, r2
 8004634:	4798      	blx	r3
 8004636:	e074      	b.n	8004722 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	4a59      	ldr	r2, [pc, #356]	; (80047a4 <I2C_ITError+0x25c>)
 800463e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe f873 	bl	8002730 <HAL_DMA_Abort_IT>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d068      	beq.n	8004722 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d10b      	bne.n	8004676 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
 800469c:	e041      	b.n	8004722 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b60      	cmp	r3, #96	; 0x60
 80046a8:	d125      	bne.n	80046f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d10b      	bne.n	80046de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fe ff5e 	bl	80035b0 <HAL_I2C_AbortCpltCallback>
 80046f4:	e015      	b.n	8004722 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d10b      	bne.n	800471c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fe ff3e 	bl	800359e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10e      	bne.n	8004750 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d113      	bne.n	800479c <I2C_ITError+0x254>
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b28      	cmp	r3, #40	; 0x28
 8004778:	d110      	bne.n	800479c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a0a      	ldr	r2, [pc, #40]	; (80047a8 <I2C_ITError+0x260>)
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fe fee6 	bl	8003568 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	080048b1 	.word	0x080048b1
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d006      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d003      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d4:	d108      	bne.n	80047e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e00b      	b.n	8004800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2b12      	cmp	r3, #18
 80047ee:	d107      	bne.n	8004800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f8f7 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004826:	d103      	bne.n	8004830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e035      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	e01b      	b.n	8004888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	11db      	asrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f063 030f 	orn	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <I2C_MasterRequestWrite+0xfc>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f940 	bl	8004af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e010      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4907      	ldr	r1, [pc, #28]	; (80048ac <I2C_MasterRequestWrite+0x100>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f930 	bl	8004af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	00010008 	.word	0x00010008
 80048ac:	00010002 	.word	0x00010002

080048b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048ca:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <I2C_DMAAbort+0x148>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	08db      	lsrs	r3, r3, #3
 80048d0:	4a4a      	ldr	r2, [pc, #296]	; (80049fc <I2C_DMAAbort+0x14c>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	0a1a      	lsrs	r2, r3, #8
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	00da      	lsls	r2, r3, #3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048f6:	e00a      	b.n	800490e <I2C_DMAAbort+0x5e>
    }
    count--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490c:	d0ea      	beq.n	80048e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2200      	movs	r2, #0
 8004952:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	2200      	movs	r2, #0
 8004962:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b60      	cmp	r3, #96	; 0x60
 800497e:	d10e      	bne.n	800499e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f7fe fe0a 	bl	80035b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800499c:	e027      	b.n	80049ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049a4:	2b28      	cmp	r3, #40	; 0x28
 80049a6:	d117      	bne.n	80049d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2228      	movs	r2, #40	; 0x28
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049d6:	e007      	b.n	80049e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	f7fe fdd8 	bl	800359e <HAL_I2C_ErrorCallback>
}
 80049ee:	bf00      	nop
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000044 	.word	0x20000044
 80049fc:	14f8b589 	.word	0x14f8b589

08004a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a10:	e048      	b.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d044      	beq.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fd fce1 	bl	80023e0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d139      	bne.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d10d      	bne.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	43da      	mvns	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	e00c      	b.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d116      	bne.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	f043 0220 	orr.w	r2, r3, #32
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e023      	b.n	8004aec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	0c1b      	lsrs	r3, r3, #16
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d10d      	bne.n	8004aca <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	e00c      	b.n	8004ae4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d093      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b02:	e071      	b.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b12:	d123      	bne.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f043 0204 	orr.w	r2, r3, #4
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e067      	b.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d041      	beq.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7fd fc3c 	bl	80023e0 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d136      	bne.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10c      	bne.n	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bf14      	ite	ne
 8004b96:	2301      	movne	r3, #1
 8004b98:	2300      	moveq	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	e00b      	b.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	43da      	mvns	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f043 0220 	orr.w	r2, r3, #32
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e021      	b.n	8004c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d10c      	bne.n	8004c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e00b      	b.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf14      	ite	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	2300      	moveq	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f47f af6d 	bne.w	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c40:	e034      	b.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f8b8 	bl	8004db8 <I2C_IsAcknowledgeFailed>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e034      	b.n	8004cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d028      	beq.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fd fbc1 	bl	80023e0 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11d      	bne.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b80      	cmp	r3, #128	; 0x80
 8004c7c:	d016      	beq.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e007      	b.n	8004cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d1c3      	bne.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd0:	e034      	b.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f870 	bl	8004db8 <I2C_IsAcknowledgeFailed>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e034      	b.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d028      	beq.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fd fb79 	bl	80023e0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11d      	bne.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d016      	beq.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d1c3      	bne.n	8004cd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	0a1a      	lsrs	r2, r3, #8
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e008      	b.n	8004da4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da0:	d0e9      	beq.n	8004d76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000044 	.word	0x20000044
 8004db4:	14f8b589 	.word	0x14f8b589

08004db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d11b      	bne.n	8004e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e24:	d103      	bne.n	8004e2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e2c:	e007      	b.n	8004e3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e36:	d102      	bne.n	8004e3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e31d      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4b94      	ldr	r3, [pc, #592]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e64:	4b91      	ldr	r3, [pc, #580]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d07b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d006      	beq.n	8004e8e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d10f      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x5e>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d10b      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8e:	4b87      	ldr	r3, [pc, #540]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06a      	beq.n	8004f70 <HAL_RCC_OscConfig+0x128>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d166      	bne.n	8004f70 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e2f7      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x74>
 8004eae:	4b7f      	ldr	r3, [pc, #508]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7e      	ldr	r2, [pc, #504]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e02d      	b.n	8004f18 <HAL_RCC_OscConfig+0xd0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCC_OscConfig+0x96>
 8004ec4:	4b79      	ldr	r3, [pc, #484]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a78      	ldr	r2, [pc, #480]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	4b76      	ldr	r3, [pc, #472]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a75      	ldr	r2, [pc, #468]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	e01c      	b.n	8004f18 <HAL_RCC_OscConfig+0xd0>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCC_OscConfig+0xb8>
 8004ee6:	4b71      	ldr	r3, [pc, #452]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a70      	ldr	r2, [pc, #448]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b6e      	ldr	r3, [pc, #440]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a6d      	ldr	r2, [pc, #436]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0xd0>
 8004f00:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a69      	ldr	r2, [pc, #420]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b67      	ldr	r3, [pc, #412]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a66      	ldr	r2, [pc, #408]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fd fa5e 	bl	80023e0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd fa5a 	bl	80023e0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e2ad      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0xe0>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd fa4a 	bl	80023e0 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd fa46 	bl	80023e0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e299      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f62:	4b52      	ldr	r3, [pc, #328]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x108>
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d05a      	beq.n	8005034 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b0c      	cmp	r3, #12
 8004f88:	d119      	bne.n	8004fbe <HAL_RCC_OscConfig+0x176>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d116      	bne.n	8004fbe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f90:	4b46      	ldr	r3, [pc, #280]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x160>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e276      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	4b40      	ldr	r3, [pc, #256]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	493d      	ldr	r1, [pc, #244]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbc:	e03a      	b.n	8005034 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d020      	beq.n	8005008 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc6:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <HAL_RCC_OscConfig+0x268>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fd fa08 	bl	80023e0 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fd fa04 	bl	80023e0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e257      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fe6:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	492a      	ldr	r1, [pc, #168]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
 8005006:	e015      	b.n	8005034 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005008:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <HAL_RCC_OscConfig+0x268>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500e:	f7fd f9e7 	bl	80023e0 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005016:	f7fd f9e3 	bl	80023e0 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e236      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005028:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80b8 	beq.w	80051b2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d170      	bne.n	800512a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005048:	4b18      	ldr	r3, [pc, #96]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_OscConfig+0x218>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e21a      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800506c:	429a      	cmp	r2, r3
 800506e:	d921      	bls.n	80050b4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fc7d 	bl	8005974 <RCC_SetFlashLatencyFromMSIRange>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e208      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	4901      	ldr	r1, [pc, #4]	; (80050ac <HAL_RCC_OscConfig+0x264>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	604b      	str	r3, [r1, #4]
 80050aa:	e020      	b.n	80050ee <HAL_RCC_OscConfig+0x2a6>
 80050ac:	40023800 	.word	0x40023800
 80050b0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050b4:	4b99      	ldr	r3, [pc, #612]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4996      	ldr	r1, [pc, #600]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c6:	4b95      	ldr	r3, [pc, #596]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	4991      	ldr	r1, [pc, #580]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fc48 	bl	8005974 <RCC_SetFlashLatencyFromMSIRange>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e1d3      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	0b5b      	lsrs	r3, r3, #13
 80050f4:	3301      	adds	r3, #1
 80050f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80050fe:	4a87      	ldr	r2, [pc, #540]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005100:	6892      	ldr	r2, [r2, #8]
 8005102:	0912      	lsrs	r2, r2, #4
 8005104:	f002 020f 	and.w	r2, r2, #15
 8005108:	4985      	ldr	r1, [pc, #532]	; (8005320 <HAL_RCC_OscConfig+0x4d8>)
 800510a:	5c8a      	ldrb	r2, [r1, r2]
 800510c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800510e:	4a85      	ldr	r2, [pc, #532]	; (8005324 <HAL_RCC_OscConfig+0x4dc>)
 8005110:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005112:	4b85      	ldr	r3, [pc, #532]	; (8005328 <HAL_RCC_OscConfig+0x4e0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd f916 	bl	8002348 <HAL_InitTick>
 800511c:	4603      	mov	r3, r0
 800511e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d045      	beq.n	80051b2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	e1b5      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d029      	beq.n	8005186 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005132:	4b7e      	ldr	r3, [pc, #504]	; (800532c <HAL_RCC_OscConfig+0x4e4>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fd f952 	bl	80023e0 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005140:	f7fd f94e 	bl	80023e0 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e1a1      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005152:	4b72      	ldr	r3, [pc, #456]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800515e:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	496c      	ldr	r1, [pc, #432]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005170:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	4967      	ldr	r1, [pc, #412]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
 8005184:	e015      	b.n	80051b2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005186:	4b69      	ldr	r3, [pc, #420]	; (800532c <HAL_RCC_OscConfig+0x4e4>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fd f928 	bl	80023e0 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005194:	f7fd f924 	bl	80023e0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e177      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051a6:	4b5d      	ldr	r3, [pc, #372]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d030      	beq.n	8005220 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c6:	4b5a      	ldr	r3, [pc, #360]	; (8005330 <HAL_RCC_OscConfig+0x4e8>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051cc:	f7fd f908 	bl	80023e0 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d4:	f7fd f904 	bl	80023e0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e157      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051e6:	4b4d      	ldr	r3, [pc, #308]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x38c>
 80051f2:	e015      	b.n	8005220 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f4:	4b4e      	ldr	r3, [pc, #312]	; (8005330 <HAL_RCC_OscConfig+0x4e8>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fa:	f7fd f8f1 	bl	80023e0 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005202:	f7fd f8ed 	bl	80023e0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e140      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005214:	4b41      	ldr	r3, [pc, #260]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f0      	bne.n	8005202 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80b5 	beq.w	8005398 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005232:	4b3a      	ldr	r3, [pc, #232]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	4a36      	ldr	r2, [pc, #216]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005248:	6253      	str	r3, [r2, #36]	; 0x24
 800524a:	4b34      	ldr	r3, [pc, #208]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005256:	2301      	movs	r3, #1
 8005258:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCC_OscConfig+0x4ec>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d118      	bne.n	8005298 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005266:	4b33      	ldr	r3, [pc, #204]	; (8005334 <HAL_RCC_OscConfig+0x4ec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a32      	ldr	r2, [pc, #200]	; (8005334 <HAL_RCC_OscConfig+0x4ec>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005272:	f7fd f8b5 	bl	80023e0 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fd f8b1 	bl	80023e0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b64      	cmp	r3, #100	; 0x64
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e104      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	4b29      	ldr	r3, [pc, #164]	; (8005334 <HAL_RCC_OscConfig+0x4ec>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x466>
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052aa:	6353      	str	r3, [r2, #52]	; 0x34
 80052ac:	e02d      	b.n	800530a <HAL_RCC_OscConfig+0x4c2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x488>
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	4a18      	ldr	r2, [pc, #96]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c0:	6353      	str	r3, [r2, #52]	; 0x34
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052cc:	6353      	str	r3, [r2, #52]	; 0x34
 80052ce:	e01c      	b.n	800530a <HAL_RCC_OscConfig+0x4c2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	d10c      	bne.n	80052f2 <HAL_RCC_OscConfig+0x4aa>
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	4a0f      	ldr	r2, [pc, #60]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052e2:	6353      	str	r3, [r2, #52]	; 0x34
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	4a0c      	ldr	r2, [pc, #48]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ee:	6353      	str	r3, [r2, #52]	; 0x34
 80052f0:	e00b      	b.n	800530a <HAL_RCC_OscConfig+0x4c2>
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	6353      	str	r3, [r2, #52]	; 0x34
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	4a06      	ldr	r2, [pc, #24]	; (800531c <HAL_RCC_OscConfig+0x4d4>)
 8005304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005308:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d024      	beq.n	800535c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005312:	f7fd f865 	bl	80023e0 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005318:	e019      	b.n	800534e <HAL_RCC_OscConfig+0x506>
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	080080a4 	.word	0x080080a4
 8005324:	20000044 	.word	0x20000044
 8005328:	20000048 	.word	0x20000048
 800532c:	42470020 	.word	0x42470020
 8005330:	42470680 	.word	0x42470680
 8005334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7fd f852 	bl	80023e0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0a3      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800534e:	4b54      	ldr	r3, [pc, #336]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ee      	beq.n	8005338 <HAL_RCC_OscConfig+0x4f0>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535c:	f7fd f840 	bl	80023e0 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005362:	e00a      	b.n	800537a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005364:	f7fd f83c 	bl	80023e0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e08d      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800537a:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ee      	bne.n	8005364 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d105      	bne.n	8005398 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538c:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	4a43      	ldr	r2, [pc, #268]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 8005392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005396:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d079      	beq.n	8005494 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d056      	beq.n	8005454 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d13b      	bne.n	8005426 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b3d      	ldr	r3, [pc, #244]	; (80054a4 <HAL_RCC_OscConfig+0x65c>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd f814 	bl	80023e0 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fd f810 	bl	80023e0 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e063      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ce:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053da:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	4319      	orrs	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	430b      	orrs	r3, r1
 80053f2:	492b      	ldr	r1, [pc, #172]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f8:	4b2a      	ldr	r3, [pc, #168]	; (80054a4 <HAL_RCC_OscConfig+0x65c>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fe:	f7fc ffef 	bl	80023e0 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005406:	f7fc ffeb 	bl	80023e0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e03e      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x5be>
 8005424:	e036      	b.n	8005494 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b1f      	ldr	r3, [pc, #124]	; (80054a4 <HAL_RCC_OscConfig+0x65c>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542c:	f7fc ffd8 	bl	80023e0 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005434:	f7fc ffd4 	bl	80023e0 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e027      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_OscConfig+0x5ec>
 8005452:	e01f      	b.n	8005494 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e01a      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_RCC_OscConfig+0x658>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	429a      	cmp	r2, r3
 8005472:	d10d      	bne.n	8005490 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d106      	bne.n	8005490 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
 80054a4:	42470060 	.word	0x42470060

080054a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e11a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054bc:	4b8f      	ldr	r3, [pc, #572]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d919      	bls.n	80054fe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <HAL_RCC_ClockConfig+0x34>
 80054d0:	4b8a      	ldr	r3, [pc, #552]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a89      	ldr	r2, [pc, #548]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 80054d6:	f043 0304 	orr.w	r3, r3, #4
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b87      	ldr	r3, [pc, #540]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 0201 	bic.w	r2, r3, #1
 80054e4:	4985      	ldr	r1, [pc, #532]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ec:	4b83      	ldr	r3, [pc, #524]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0f9      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550a:	4b7d      	ldr	r3, [pc, #500]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	497a      	ldr	r1, [pc, #488]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 808e 	beq.w	8005646 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005532:	4b73      	ldr	r3, [pc, #460]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d121      	bne.n	8005582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e0d7      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b03      	cmp	r3, #3
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800554a:	4b6d      	ldr	r3, [pc, #436]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d115      	bne.n	8005582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0cb      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d107      	bne.n	8005572 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005562:	4b67      	ldr	r3, [pc, #412]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0bf      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005572:	4b63      	ldr	r3, [pc, #396]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0b7      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005582:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f023 0203 	bic.w	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	495c      	ldr	r1, [pc, #368]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005590:	4313      	orrs	r3, r2
 8005592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005594:	f7fc ff24 	bl	80023e0 <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d112      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a4:	f7fc ff1c 	bl	80023e0 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e09b      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055ba:	4b51      	ldr	r3, [pc, #324]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d1ee      	bne.n	80055a4 <HAL_RCC_ClockConfig+0xfc>
 80055c6:	e03e      	b.n	8005646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d112      	bne.n	80055f6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d2:	f7fc ff05 	bl	80023e0 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e084      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055e8:	4b45      	ldr	r3, [pc, #276]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d1ee      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x12a>
 80055f4:	e027      	b.n	8005646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d11d      	bne.n	800563a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fc feee 	bl	80023e0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e06d      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005616:	4b3a      	ldr	r3, [pc, #232]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b04      	cmp	r3, #4
 8005620:	d1ee      	bne.n	8005600 <HAL_RCC_ClockConfig+0x158>
 8005622:	e010      	b.n	8005646 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005624:	f7fc fedc 	bl	80023e0 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e05b      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800563a:	4b31      	ldr	r3, [pc, #196]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1ee      	bne.n	8005624 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005646:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d219      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d105      	bne.n	8005666 <HAL_RCC_ClockConfig+0x1be>
 800565a:	4b28      	ldr	r3, [pc, #160]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a27      	ldr	r2, [pc, #156]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	4b25      	ldr	r3, [pc, #148]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	4923      	ldr	r1, [pc, #140]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b21      	ldr	r3, [pc, #132]	; (80056fc <HAL_RCC_ClockConfig+0x254>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e034      	b.n	80056f2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005694:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4917      	ldr	r1, [pc, #92]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	490f      	ldr	r1, [pc, #60]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056c6:	f000 f823 	bl	8005710 <HAL_RCC_GetSysClockFreq>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <HAL_RCC_ClockConfig+0x258>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	490b      	ldr	r1, [pc, #44]	; (8005704 <HAL_RCC_ClockConfig+0x25c>)
 80056d8:	5ccb      	ldrb	r3, [r1, r3]
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	4a0a      	ldr	r2, [pc, #40]	; (8005708 <HAL_RCC_ClockConfig+0x260>)
 80056e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_RCC_ClockConfig+0x264>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fc fe2e 	bl	8002348 <HAL_InitTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80056f0:	7afb      	ldrb	r3, [r7, #11]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023c00 	.word	0x40023c00
 8005700:	40023800 	.word	0x40023800
 8005704:	080080a4 	.word	0x080080a4
 8005708:	20000044 	.word	0x20000044
 800570c:	20000048 	.word	0x20000048

08005710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b092      	sub	sp, #72	; 0x48
 8005716:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005718:	4b79      	ldr	r3, [pc, #484]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d00d      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x34>
 8005728:	2b0c      	cmp	r3, #12
 800572a:	f200 80d5 	bhi.w	80058d8 <HAL_RCC_GetSysClockFreq+0x1c8>
 800572e:	2b04      	cmp	r3, #4
 8005730:	d002      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0x28>
 8005732:	2b08      	cmp	r3, #8
 8005734:	d003      	beq.n	800573e <HAL_RCC_GetSysClockFreq+0x2e>
 8005736:	e0cf      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b72      	ldr	r3, [pc, #456]	; (8005904 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800573c:	e0da      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800573e:	4b72      	ldr	r3, [pc, #456]	; (8005908 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005742:	e0d7      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005746:	0c9b      	lsrs	r3, r3, #18
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	4b6f      	ldr	r3, [pc, #444]	; (800590c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800574e:	5c9b      	ldrb	r3, [r3, r2]
 8005750:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005754:	0d9b      	lsrs	r3, r3, #22
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	3301      	adds	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800575e:	4b68      	ldr	r3, [pc, #416]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d05d      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	2200      	movs	r2, #0
 800576e:	4618      	mov	r0, r3
 8005770:	4611      	mov	r1, r2
 8005772:	4604      	mov	r4, r0
 8005774:	460d      	mov	r5, r1
 8005776:	4622      	mov	r2, r4
 8005778:	462b      	mov	r3, r5
 800577a:	f04f 0000 	mov.w	r0, #0
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	0159      	lsls	r1, r3, #5
 8005784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005788:	0150      	lsls	r0, r2, #5
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4621      	mov	r1, r4
 8005790:	1a51      	subs	r1, r2, r1
 8005792:	6139      	str	r1, [r7, #16]
 8005794:	4629      	mov	r1, r5
 8005796:	eb63 0301 	sbc.w	r3, r3, r1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a8:	4659      	mov	r1, fp
 80057aa:	018b      	lsls	r3, r1, #6
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057b2:	4651      	mov	r1, sl
 80057b4:	018a      	lsls	r2, r1, #6
 80057b6:	46d4      	mov	ip, sl
 80057b8:	ebb2 080c 	subs.w	r8, r2, ip
 80057bc:	4659      	mov	r1, fp
 80057be:	eb63 0901 	sbc.w	r9, r3, r1
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d6:	4690      	mov	r8, r2
 80057d8:	4699      	mov	r9, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	eb18 0303 	adds.w	r3, r8, r3
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	462b      	mov	r3, r5
 80057e4:	eb49 0303 	adc.w	r3, r9, r3
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057f6:	4629      	mov	r1, r5
 80057f8:	024b      	lsls	r3, r1, #9
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	4604      	mov	r4, r0
 8005800:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005804:	4601      	mov	r1, r0
 8005806:	024a      	lsls	r2, r1, #9
 8005808:	4610      	mov	r0, r2
 800580a:	4619      	mov	r1, r3
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	2200      	movs	r2, #0
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
 8005812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005818:	f7fa fcb8 	bl	800018c <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	e055      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2200      	movs	r2, #0
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	627a      	str	r2, [r7, #36]	; 0x24
 800582e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005832:	4642      	mov	r2, r8
 8005834:	464b      	mov	r3, r9
 8005836:	f04f 0000 	mov.w	r0, #0
 800583a:	f04f 0100 	mov.w	r1, #0
 800583e:	0159      	lsls	r1, r3, #5
 8005840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005844:	0150      	lsls	r0, r2, #5
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	46c4      	mov	ip, r8
 800584c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	468c      	mov	ip, r1
 8005856:	eb63 0b0c 	sbc.w	fp, r3, ip
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005866:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800586a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800586e:	ebb2 040a 	subs.w	r4, r2, sl
 8005872:	eb63 050b 	sbc.w	r5, r3, fp
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	00eb      	lsls	r3, r5, #3
 8005880:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005884:	00e2      	lsls	r2, r4, #3
 8005886:	4614      	mov	r4, r2
 8005888:	461d      	mov	r5, r3
 800588a:	4603      	mov	r3, r0
 800588c:	18e3      	adds	r3, r4, r3
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	460b      	mov	r3, r1
 8005892:	eb45 0303 	adc.w	r3, r5, r3
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058a4:	4629      	mov	r1, r5
 80058a6:	028b      	lsls	r3, r1, #10
 80058a8:	4620      	mov	r0, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	4604      	mov	r4, r0
 80058ae:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80058b2:	4601      	mov	r1, r0
 80058b4:	028a      	lsls	r2, r1, #10
 80058b6:	4610      	mov	r0, r2
 80058b8:	4619      	mov	r1, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	2200      	movs	r2, #0
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	61fa      	str	r2, [r7, #28]
 80058c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058c6:	f7fa fc61 	bl	800018c <__aeabi_uldivmod>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4613      	mov	r3, r2
 80058d0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80058d6:	e00d      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	0b5b      	lsrs	r3, r3, #13
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	3301      	adds	r3, #1
 80058e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80058f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3748      	adds	r7, #72	; 0x48
 80058fa:	46bd      	mov	sp, r7
 80058fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	00f42400 	.word	0x00f42400
 8005908:	007a1200 	.word	0x007a1200
 800590c:	08008098 	.word	0x08008098

08005910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005914:	4b02      	ldr	r3, [pc, #8]	; (8005920 <HAL_RCC_GetHCLKFreq+0x10>)
 8005916:	681b      	ldr	r3, [r3, #0]
}
 8005918:	4618      	mov	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr
 8005920:	20000044 	.word	0x20000044

08005924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005928:	f7ff fff2 	bl	8005910 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	080080b4 	.word	0x080080b4

0800594c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005950:	f7ff ffde 	bl	8005910 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0adb      	lsrs	r3, r3, #11
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	080080b4 	.word	0x080080b4

08005974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005980:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d12c      	bne.n	80059e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800598c:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005998:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e016      	b.n	80059d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a4:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	4a1f      	ldr	r2, [pc, #124]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ae:	6253      	str	r3, [r2, #36]	; 0x24
 80059b0:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80059c4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80059d8:	d105      	bne.n	80059e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059e0:	d101      	bne.n	80059e6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80059e2:	2301      	movs	r3, #1
 80059e4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059f2:	f043 0304 	orr.w	r3, r3, #4
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f023 0201 	bic.w	r2, r3, #1
 8005a00:	490b      	ldr	r1, [pc, #44]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a08:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d001      	beq.n	8005a1a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	40023c00 	.word	0x40023c00

08005a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e07b      	b.n	8005b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a56:	d009      	beq.n	8005a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	61da      	str	r2, [r3, #28]
 8005a5e:	e005      	b.n	8005a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc faac 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	ea42 0103 	orr.w	r1, r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0104 	and.w	r1, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0210 	and.w	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b088      	sub	sp, #32
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	603b      	str	r3, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_SPI_Transmit+0x22>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e12d      	b.n	8005dc4 <HAL_SPI_Transmit+0x27e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b70:	f7fc fc36 	bl	80023e0 <HAL_GetTick>
 8005b74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
 8005b88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b8a:	e116      	b.n	8005dba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_Transmit+0x52>
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b9c:	e10d      	b.n	8005dba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d10f      	bne.n	8005c06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	d14f      	bne.n	8005cce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_Transmit+0xf6>
 8005c36:	8afb      	ldrh	r3, [r7, #22]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d142      	bne.n	8005cc2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c60:	e02f      	b.n	8005cc2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d112      	bne.n	8005c96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	1c9a      	adds	r2, r3, #2
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c94:	e015      	b.n	8005cc2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c96:	f7fc fba3 	bl	80023e0 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d803      	bhi.n	8005cae <HAL_SPI_Transmit+0x168>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d102      	bne.n	8005cb4 <HAL_SPI_Transmit+0x16e>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005cc0:	e07b      	b.n	8005dba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1ca      	bne.n	8005c62 <HAL_SPI_Transmit+0x11c>
 8005ccc:	e050      	b.n	8005d70 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Transmit+0x196>
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d144      	bne.n	8005d66 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d02:	e030      	b.n	8005d66 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d113      	bne.n	8005d3a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d38:	e015      	b.n	8005d66 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d3a:	f7fc fb51 	bl	80023e0 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d803      	bhi.n	8005d52 <HAL_SPI_Transmit+0x20c>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d102      	bne.n	8005d58 <HAL_SPI_Transmit+0x212>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d64:	e029      	b.n	8005dba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1c9      	bne.n	8005d04 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f9db 	bl	8006130 <SPI_EndRxTxTransaction>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e003      	b.n	8005dba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10f      	bne.n	8005e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	099b      	lsrs	r3, r3, #6
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    return;
 8005e0e:	e0d7      	b.n	8005fc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_SPI_IRQHandler+0x66>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
    return;
 8005e30:	e0c6      	b.n	8005fc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10c      	bne.n	8005e58 <HAL_SPI_IRQHandler+0x8c>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	0a1b      	lsrs	r3, r3, #8
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80b4 	beq.w	8005fc0 <HAL_SPI_IRQHandler+0x1f4>
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80ad 	beq.w	8005fc0 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	099b      	lsrs	r3, r3, #6
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d023      	beq.n	8005eba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d011      	beq.n	8005ea2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	e00b      	b.n	8005eba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	693b      	ldr	r3, [r7, #16]
        return;
 8005eb8:	e082      	b.n	8005fc0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d014      	beq.n	8005ef0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00c      	beq.n	8005f16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f043 0208 	orr.w	r2, r3, #8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d04f      	beq.n	8005fbe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_SPI_IRQHandler+0x17e>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d034      	beq.n	8005fb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0203 	bic.w	r2, r2, #3
 8005f58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d011      	beq.n	8005f86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8005f68:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fc fbde 	bl	8002730 <HAL_DMA_Abort_IT>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f92:	4a0d      	ldr	r2, [pc, #52]	; (8005fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fc fbc8 	bl	8002730 <HAL_DMA_Abort_IT>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005fb2:	e003      	b.n	8005fbc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f809 	bl	8005fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005fba:	e000      	b.n	8005fbe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005fbc:	bf00      	nop
    return;
 8005fbe:	bf00      	nop
  }
}
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	08005ff9 	.word	0x08005ff9

08005fcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fec:	b2db      	uxtb	r3, r3
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff ffda 	bl	8005fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006030:	f7fc f9d6 	bl	80023e0 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006040:	f7fc f9ce 	bl	80023e0 <HAL_GetTick>
 8006044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006046:	4b39      	ldr	r3, [pc, #228]	; (800612c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	0d1b      	lsrs	r3, r3, #20
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006056:	e054      	b.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d050      	beq.n	8006102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006060:	f7fc f9be 	bl	80023e0 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	429a      	cmp	r2, r3
 800606e:	d902      	bls.n	8006076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d13d      	bne.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608e:	d111      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	d004      	beq.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a2:	d107      	bne.n	80060b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060bc:	d10f      	bne.n	80060de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e017      	b.n	8006122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	3b01      	subs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	429a      	cmp	r2, r3
 800611e:	d19b      	bne.n	8006058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000044 	.word	0x20000044

08006130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <SPI_EndRxTxTransaction+0x7c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <SPI_EndRxTxTransaction+0x80>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0d5b      	lsrs	r3, r3, #21
 8006148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800614c:	fb02 f303 	mul.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615a:	d112      	bne.n	8006182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff ff5a 	bl	8006020 <SPI_WaitFlagStateUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00f      	b.n	80061a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	3b01      	subs	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d0f2      	beq.n	8006182 <SPI_EndRxTxTransaction+0x52>
 800619c:	e000      	b.n	80061a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800619e:	bf00      	nop
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000044 	.word	0x20000044
 80061b0:	165e9f81 	.word	0x165e9f81

080061b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e042      	b.n	800624c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fc f82a 	bl	8002234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fd71 	bl	8006ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800620c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800621c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800622c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b20      	cmp	r3, #32
 8006272:	d16d      	bne.n	8006350 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Transmit+0x2c>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e066      	b.n	8006352 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2221      	movs	r2, #33	; 0x21
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006292:	f7fc f8a5 	bl	80023e0 <HAL_GetTick>
 8006296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	88fa      	ldrh	r2, [r7, #6]
 80062a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ac:	d108      	bne.n	80062c0 <HAL_UART_Transmit+0x6c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	e003      	b.n	80062c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c8:	e02a      	b.n	8006320 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 faf9 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e036      	b.n	8006352 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	3302      	adds	r3, #2
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e007      	b.n	8006312 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3301      	adds	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1cf      	bne.n	80062ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2200      	movs	r2, #0
 8006332:	2140      	movs	r1, #64	; 0x40
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fac9 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e006      	b.n	8006352 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b0ba      	sub	sp, #232	; 0xe8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800639a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10f      	bne.n	80063c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <HAL_UART_IRQHandler+0x66>
 80063ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fbd1 	bl	8006b62 <UART_Receive_IT>
      return;
 80063c0:	e25b      	b.n	800687a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80de 	beq.w	8006588 <HAL_UART_IRQHandler+0x22c>
 80063cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d106      	bne.n	80063e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80d1 	beq.w	8006588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_UART_IRQHandler+0xae>
 80063f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_UART_IRQHandler+0xd2>
 8006416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_UART_IRQHandler+0xf6>
 800643a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d011      	beq.n	8006482 <HAL_UART_IRQHandler+0x126>
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800646a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	f043 0208 	orr.w	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 81f2 	beq.w	8006870 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800648c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_UART_IRQHandler+0x14e>
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fb5c 	bl	8006b62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <HAL_UART_IRQHandler+0x17a>
 80064ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d04f      	beq.n	8006576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa66 	bl	80069a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d141      	bne.n	800656e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3314      	adds	r3, #20
 80064f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800651a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800652e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1d9      	bne.n	80064ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d013      	beq.n	8006566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	4a7e      	ldr	r2, [pc, #504]	; (800673c <HAL_UART_IRQHandler+0x3e0>)
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	4618      	mov	r0, r3
 800654c:	f7fc f8f0 	bl	8002730 <HAL_DMA_Abort_IT>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d016      	beq.n	8006584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006560:	4610      	mov	r0, r2
 8006562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	e00e      	b.n	8006584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f99c 	bl	80068a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e00a      	b.n	8006584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f998 	bl	80068a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e006      	b.n	8006584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f994 	bl	80068a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006582:	e175      	b.n	8006870 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	bf00      	nop
    return;
 8006586:	e173      	b.n	8006870 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	2b01      	cmp	r3, #1
 800658e:	f040 814f 	bne.w	8006830 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8148 	beq.w	8006830 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8141 	beq.w	8006830 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	f040 80b6 	bne.w	8006740 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8145 	beq.w	8006874 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065f2:	429a      	cmp	r2, r3
 80065f4:	f080 813e 	bcs.w	8006874 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b20      	cmp	r3, #32
 8006608:	f000 8088 	beq.w	800671c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800662a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006638:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800663c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006644:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1d9      	bne.n	800660c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3314      	adds	r3, #20
 800665e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800667c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006680:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006684:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800668e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e1      	bne.n	8006658 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e3      	bne.n	8006694 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ec:	f023 0310 	bic.w	r3, r3, #16
 80066f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006700:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800670c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e3      	bne.n	80066da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	4618      	mov	r0, r3
 8006718:	f7fb ffcd 	bl	80026b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800672a:	b29b      	uxth	r3, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	b29b      	uxth	r3, r3
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f8bf 	bl	80068b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006738:	e09c      	b.n	8006874 <HAL_UART_IRQHandler+0x518>
 800673a:	bf00      	nop
 800673c:	08006a6d 	.word	0x08006a6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006748:	b29b      	uxth	r3, r3
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 808e 	beq.w	8006878 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800675c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8089 	beq.w	8006878 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	330c      	adds	r3, #12
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800678a:	647a      	str	r2, [r7, #68]	; 0x44
 800678c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1e3      	bne.n	8006766 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3314      	adds	r3, #20
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	623b      	str	r3, [r7, #32]
   return(result);
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	f023 0301 	bic.w	r3, r3, #1
 80067b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3314      	adds	r3, #20
 80067be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067c2:	633a      	str	r2, [r7, #48]	; 0x30
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e3      	bne.n	800679e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0310 	bic.w	r3, r3, #16
 80067fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006808:	61fa      	str	r2, [r7, #28]
 800680a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	69b9      	ldr	r1, [r7, #24]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	617b      	str	r3, [r7, #20]
   return(result);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e3      	bne.n	80067e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f844 	bl	80068b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800682e:	e023      	b.n	8006878 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <HAL_UART_IRQHandler+0x4f4>
 800683c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f923 	bl	8006a94 <UART_Transmit_IT>
    return;
 800684e:	e014      	b.n	800687a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00e      	beq.n	800687a <HAL_UART_IRQHandler+0x51e>
 800685c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f962 	bl	8006b32 <UART_EndTransmit_IT>
    return;
 800686e:	e004      	b.n	800687a <HAL_UART_IRQHandler+0x51e>
    return;
 8006870:	bf00      	nop
 8006872:	e002      	b.n	800687a <HAL_UART_IRQHandler+0x51e>
      return;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_UART_IRQHandler+0x51e>
      return;
 8006878:	bf00      	nop
  }
}
 800687a:	37e8      	adds	r7, #232	; 0xe8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b090      	sub	sp, #64	; 0x40
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068dc:	e050      	b.n	8006980 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d04c      	beq.n	8006980 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <UART_WaitOnFlagUntilTimeout+0x30>
 80068ec:	f7fb fd78 	bl	80023e0 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d241      	bcs.n	8006980 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800691c:	637a      	str	r2, [r7, #52]	; 0x34
 800691e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3314      	adds	r3, #20
 8006936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	613b      	str	r3, [r7, #16]
   return(result);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	63bb      	str	r3, [r7, #56]	; 0x38
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006950:	623a      	str	r2, [r7, #32]
 8006952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	69f9      	ldr	r1, [r7, #28]
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	61bb      	str	r3, [r7, #24]
   return(result);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e00f      	b.n	80069a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4013      	ands	r3, r2
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	429a      	cmp	r2, r3
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	429a      	cmp	r2, r3
 800699c:	d09f      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3740      	adds	r7, #64	; 0x40
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b095      	sub	sp, #84	; 0x54
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069d0:	643a      	str	r2, [r7, #64]	; 0x40
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3314      	adds	r3, #20
 80069ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f023 0301 	bic.w	r3, r3, #1
 80069fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3314      	adds	r3, #20
 8006a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e5      	bne.n	80069e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d119      	bne.n	8006a54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f023 0310 	bic.w	r3, r3, #16
 8006a36:	647b      	str	r3, [r7, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a40:	61ba      	str	r2, [r7, #24]
 8006a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6979      	ldr	r1, [r7, #20]
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e5      	bne.n	8006a20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a62:	bf00      	nop
 8006a64:	3754      	adds	r7, #84	; 0x54
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff ff0c 	bl	80068a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a8c:	bf00      	nop
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b21      	cmp	r3, #33	; 0x21
 8006aa6:	d13e      	bne.n	8006b26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab0:	d114      	bne.n	8006adc <UART_Transmit_IT+0x48>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d110      	bne.n	8006adc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ace:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	1c9a      	adds	r2, r3, #2
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	621a      	str	r2, [r3, #32]
 8006ada:	e008      	b.n	8006aee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	1c59      	adds	r1, r3, #1
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6211      	str	r1, [r2, #32]
 8006ae6:	781a      	ldrb	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4619      	mov	r1, r3
 8006afc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10f      	bne.n	8006b22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fe94 	bl	8006880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b08c      	sub	sp, #48	; 0x30
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b22      	cmp	r3, #34	; 0x22
 8006b74:	f040 80ae 	bne.w	8006cd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b80:	d117      	bne.n	8006bb2 <UART_Receive_IT+0x50>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d113      	bne.n	8006bb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	1c9a      	adds	r2, r3, #2
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb0:	e026      	b.n	8006c00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc4:	d007      	beq.n	8006bd6 <UART_Receive_IT+0x74>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <UART_Receive_IT+0x82>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e008      	b.n	8006bf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d15d      	bne.n	8006cd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0220 	bic.w	r2, r2, #32
 8006c22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695a      	ldr	r2, [r3, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d135      	bne.n	8006cc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c80:	623a      	str	r2, [r7, #32]
 8006c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	69f9      	ldr	r1, [r7, #28]
 8006c86:	6a3a      	ldr	r2, [r7, #32]
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e5      	bne.n	8006c60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d10a      	bne.n	8006cb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fdf9 	bl	80068b6 <HAL_UARTEx_RxEventCallback>
 8006cc4:	e002      	b.n	8006ccc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fde3 	bl	8006892 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e002      	b.n	8006cd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3730      	adds	r7, #48	; 0x30
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d20:	f023 030c 	bic.w	r3, r3, #12
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6812      	ldr	r2, [r2, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a55      	ldr	r2, [pc, #340]	; (8006ea0 <UART_SetConfig+0x1c0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d103      	bne.n	8006d56 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d4e:	f7fe fdfd 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	e002      	b.n	8006d5c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d56:	f7fe fde5 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8006d5a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	d14c      	bne.n	8006e00 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009a      	lsls	r2, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7c:	4a49      	ldr	r2, [pc, #292]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	0119      	lsls	r1, r3, #4
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009a      	lsls	r2, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d9c:	4b41      	ldr	r3, [pc, #260]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8006da2:	095b      	lsrs	r3, r3, #5
 8006da4:	2064      	movs	r0, #100	; 0x64
 8006da6:	fb00 f303 	mul.w	r3, r0, r3
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	3332      	adds	r3, #50	; 0x32
 8006db0:	4a3c      	ldr	r2, [pc, #240]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dbe:	4419      	add	r1, r3
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009a      	lsls	r2, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dd6:	4b33      	ldr	r3, [pc, #204]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006dd8:	fba3 0302 	umull	r0, r3, r3, r2
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	2064      	movs	r0, #100	; 0x64
 8006de0:	fb00 f303 	mul.w	r3, r0, r3
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	3332      	adds	r3, #50	; 0x32
 8006dea:	4a2e      	ldr	r2, [pc, #184]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006dec:	fba2 2303 	umull	r2, r3, r2, r3
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f003 0207 	and.w	r2, r3, #7
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dfe:	e04a      	b.n	8006e96 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009a      	lsls	r2, r3, #2
 8006e0a:	441a      	add	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e16:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006e18:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	0119      	lsls	r1, r3, #4
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009a      	lsls	r2, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e36:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006e38:	fba3 0302 	umull	r0, r3, r3, r2
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	2064      	movs	r0, #100	; 0x64
 8006e40:	fb00 f303 	mul.w	r3, r0, r3
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	3332      	adds	r3, #50	; 0x32
 8006e4a:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e56:	4419      	add	r1, r3
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009a      	lsls	r2, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006e70:	fba3 0302 	umull	r0, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2064      	movs	r0, #100	; 0x64
 8006e78:	fb00 f303 	mul.w	r3, r0, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	3332      	adds	r3, #50	; 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <UART_SetConfig+0x1c4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	440a      	add	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40013800 	.word	0x40013800
 8006ea4:	51eb851f 	.word	0x51eb851f

08006ea8 <__errno>:
 8006ea8:	4b01      	ldr	r3, [pc, #4]	; (8006eb0 <__errno+0x8>)
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000050 	.word	0x20000050

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	4d0c      	ldr	r5, [pc, #48]	; (8006eec <__libc_init_array+0x38>)
 8006eba:	4c0d      	ldr	r4, [pc, #52]	; (8006ef0 <__libc_init_array+0x3c>)
 8006ebc:	1b64      	subs	r4, r4, r5
 8006ebe:	10a4      	asrs	r4, r4, #2
 8006ec0:	42a6      	cmp	r6, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	f000 fc9c 	bl	8007800 <_init>
 8006ec8:	2600      	movs	r6, #0
 8006eca:	4d0a      	ldr	r5, [pc, #40]	; (8006ef4 <__libc_init_array+0x40>)
 8006ecc:	4c0a      	ldr	r4, [pc, #40]	; (8006ef8 <__libc_init_array+0x44>)
 8006ece:	1b64      	subs	r4, r4, r5
 8006ed0:	10a4      	asrs	r4, r4, #2
 8006ed2:	42a6      	cmp	r6, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006edc:	4798      	blx	r3
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee6:	4798      	blx	r3
 8006ee8:	3601      	adds	r6, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	080080f8 	.word	0x080080f8
 8006ef0:	080080f8 	.word	0x080080f8
 8006ef4:	080080f8 	.word	0x080080f8
 8006ef8:	080080fc 	.word	0x080080fc

08006efc <memset>:
 8006efc:	4603      	mov	r3, r0
 8006efe:	4402      	add	r2, r0
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d100      	bne.n	8006f06 <memset+0xa>
 8006f04:	4770      	bx	lr
 8006f06:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0a:	e7f9      	b.n	8006f00 <memset+0x4>

08006f0c <siprintf>:
 8006f0c:	b40e      	push	{r1, r2, r3}
 8006f0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f12:	b500      	push	{lr}
 8006f14:	b09c      	sub	sp, #112	; 0x70
 8006f16:	ab1d      	add	r3, sp, #116	; 0x74
 8006f18:	9002      	str	r0, [sp, #8]
 8006f1a:	9006      	str	r0, [sp, #24]
 8006f1c:	9107      	str	r1, [sp, #28]
 8006f1e:	9104      	str	r1, [sp, #16]
 8006f20:	4808      	ldr	r0, [pc, #32]	; (8006f44 <siprintf+0x38>)
 8006f22:	4909      	ldr	r1, [pc, #36]	; (8006f48 <siprintf+0x3c>)
 8006f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f28:	9105      	str	r1, [sp, #20]
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	a902      	add	r1, sp, #8
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	f000 f868 	bl	8007004 <_svfiprintf_r>
 8006f34:	2200      	movs	r2, #0
 8006f36:	9b02      	ldr	r3, [sp, #8]
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	b01c      	add	sp, #112	; 0x70
 8006f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f40:	b003      	add	sp, #12
 8006f42:	4770      	bx	lr
 8006f44:	20000050 	.word	0x20000050
 8006f48:	ffff0208 	.word	0xffff0208

08006f4c <__ssputs_r>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	688e      	ldr	r6, [r1, #8]
 8006f52:	4682      	mov	sl, r0
 8006f54:	429e      	cmp	r6, r3
 8006f56:	460c      	mov	r4, r1
 8006f58:	4690      	mov	r8, r2
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	d838      	bhi.n	8006fd0 <__ssputs_r+0x84>
 8006f5e:	898a      	ldrh	r2, [r1, #12]
 8006f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f64:	d032      	beq.n	8006fcc <__ssputs_r+0x80>
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6909      	ldr	r1, [r1, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	eba5 0901 	sub.w	r9, r5, r1
 8006f70:	6965      	ldr	r5, [r4, #20]
 8006f72:	444b      	add	r3, r9
 8006f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f7c:	106d      	asrs	r5, r5, #1
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf38      	it	cc
 8006f82:	461d      	movcc	r5, r3
 8006f84:	0553      	lsls	r3, r2, #21
 8006f86:	d531      	bpl.n	8006fec <__ssputs_r+0xa0>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f000 fb6f 	bl	800766c <_malloc_r>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	b950      	cbnz	r0, 8006fa8 <__ssputs_r+0x5c>
 8006f92:	230c      	movs	r3, #12
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	f8ca 3000 	str.w	r3, [sl]
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	464a      	mov	r2, r9
 8006faa:	6921      	ldr	r1, [r4, #16]
 8006fac:	f000 face 	bl	800754c <memcpy>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	6126      	str	r6, [r4, #16]
 8006fbe:	444e      	add	r6, r9
 8006fc0:	6026      	str	r6, [r4, #0]
 8006fc2:	463e      	mov	r6, r7
 8006fc4:	6165      	str	r5, [r4, #20]
 8006fc6:	eba5 0509 	sub.w	r5, r5, r9
 8006fca:	60a5      	str	r5, [r4, #8]
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	d900      	bls.n	8006fd2 <__ssputs_r+0x86>
 8006fd0:	463e      	mov	r6, r7
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	f000 fac6 	bl	8007568 <memmove>
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	2000      	movs	r0, #0
 8006fe0:	1b9b      	subs	r3, r3, r6
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	4433      	add	r3, r6
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	e7db      	b.n	8006fa4 <__ssputs_r+0x58>
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 fbb1 	bl	8007754 <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e1      	bne.n	8006fbc <__ssputs_r+0x70>
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	6921      	ldr	r1, [r4, #16]
 8006ffc:	f000 face 	bl	800759c <_free_r>
 8007000:	e7c7      	b.n	8006f92 <__ssputs_r+0x46>
	...

08007004 <_svfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	4698      	mov	r8, r3
 800700a:	898b      	ldrh	r3, [r1, #12]
 800700c:	4607      	mov	r7, r0
 800700e:	061b      	lsls	r3, r3, #24
 8007010:	460d      	mov	r5, r1
 8007012:	4614      	mov	r4, r2
 8007014:	b09d      	sub	sp, #116	; 0x74
 8007016:	d50e      	bpl.n	8007036 <_svfiprintf_r+0x32>
 8007018:	690b      	ldr	r3, [r1, #16]
 800701a:	b963      	cbnz	r3, 8007036 <_svfiprintf_r+0x32>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f000 fb25 	bl	800766c <_malloc_r>
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	6128      	str	r0, [r5, #16]
 8007026:	b920      	cbnz	r0, 8007032 <_svfiprintf_r+0x2e>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e0d1      	b.n	80071d6 <_svfiprintf_r+0x1d2>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	616b      	str	r3, [r5, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	2320      	movs	r3, #32
 800703c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007040:	2330      	movs	r3, #48	; 0x30
 8007042:	f04f 0901 	mov.w	r9, #1
 8007046:	f8cd 800c 	str.w	r8, [sp, #12]
 800704a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071f0 <_svfiprintf_r+0x1ec>
 800704e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007052:	4623      	mov	r3, r4
 8007054:	469a      	mov	sl, r3
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	b10a      	cbz	r2, 8007060 <_svfiprintf_r+0x5c>
 800705c:	2a25      	cmp	r2, #37	; 0x25
 800705e:	d1f9      	bne.n	8007054 <_svfiprintf_r+0x50>
 8007060:	ebba 0b04 	subs.w	fp, sl, r4
 8007064:	d00b      	beq.n	800707e <_svfiprintf_r+0x7a>
 8007066:	465b      	mov	r3, fp
 8007068:	4622      	mov	r2, r4
 800706a:	4629      	mov	r1, r5
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ff6d 	bl	8006f4c <__ssputs_r>
 8007072:	3001      	adds	r0, #1
 8007074:	f000 80aa 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707a:	445a      	add	r2, fp
 800707c:	9209      	str	r2, [sp, #36]	; 0x24
 800707e:	f89a 3000 	ldrb.w	r3, [sl]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007088:	2300      	movs	r3, #0
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007092:	f10a 0a01 	add.w	sl, sl, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	9307      	str	r3, [sp, #28]
 800709a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709e:	931a      	str	r3, [sp, #104]	; 0x68
 80070a0:	4654      	mov	r4, sl
 80070a2:	2205      	movs	r2, #5
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	4851      	ldr	r0, [pc, #324]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070aa:	f000 fa41 	bl	8007530 <memchr>
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	b9d8      	cbnz	r0, 80070ea <_svfiprintf_r+0xe6>
 80070b2:	06d0      	lsls	r0, r2, #27
 80070b4:	bf44      	itt	mi
 80070b6:	2320      	movmi	r3, #32
 80070b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070bc:	0711      	lsls	r1, r2, #28
 80070be:	bf44      	itt	mi
 80070c0:	232b      	movmi	r3, #43	; 0x2b
 80070c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ca:	2b2a      	cmp	r3, #42	; 0x2a
 80070cc:	d015      	beq.n	80070fa <_svfiprintf_r+0xf6>
 80070ce:	4654      	mov	r4, sl
 80070d0:	2000      	movs	r0, #0
 80070d2:	f04f 0c0a 	mov.w	ip, #10
 80070d6:	9a07      	ldr	r2, [sp, #28]
 80070d8:	4621      	mov	r1, r4
 80070da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070de:	3b30      	subs	r3, #48	; 0x30
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d94e      	bls.n	8007182 <_svfiprintf_r+0x17e>
 80070e4:	b1b0      	cbz	r0, 8007114 <_svfiprintf_r+0x110>
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	e014      	b.n	8007114 <_svfiprintf_r+0x110>
 80070ea:	eba0 0308 	sub.w	r3, r0, r8
 80070ee:	fa09 f303 	lsl.w	r3, r9, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	46a2      	mov	sl, r4
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	e7d2      	b.n	80070a0 <_svfiprintf_r+0x9c>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9103      	str	r1, [sp, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfbb      	ittet	lt
 8007106:	425b      	neglt	r3, r3
 8007108:	f042 0202 	orrlt.w	r2, r2, #2
 800710c:	9307      	strge	r3, [sp, #28]
 800710e:	9307      	strlt	r3, [sp, #28]
 8007110:	bfb8      	it	lt
 8007112:	9204      	strlt	r2, [sp, #16]
 8007114:	7823      	ldrb	r3, [r4, #0]
 8007116:	2b2e      	cmp	r3, #46	; 0x2e
 8007118:	d10c      	bne.n	8007134 <_svfiprintf_r+0x130>
 800711a:	7863      	ldrb	r3, [r4, #1]
 800711c:	2b2a      	cmp	r3, #42	; 0x2a
 800711e:	d135      	bne.n	800718c <_svfiprintf_r+0x188>
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	3402      	adds	r4, #2
 8007124:	1d1a      	adds	r2, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9203      	str	r2, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfb8      	it	lt
 800712e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80071f4 <_svfiprintf_r+0x1f0>
 8007138:	2203      	movs	r2, #3
 800713a:	4650      	mov	r0, sl
 800713c:	7821      	ldrb	r1, [r4, #0]
 800713e:	f000 f9f7 	bl	8007530 <memchr>
 8007142:	b140      	cbz	r0, 8007156 <_svfiprintf_r+0x152>
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	eba0 000a 	sub.w	r0, r0, sl
 800714a:	fa03 f000 	lsl.w	r0, r3, r0
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	3401      	adds	r4, #1
 8007152:	4303      	orrs	r3, r0
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	2206      	movs	r2, #6
 800715c:	4826      	ldr	r0, [pc, #152]	; (80071f8 <_svfiprintf_r+0x1f4>)
 800715e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007162:	f000 f9e5 	bl	8007530 <memchr>
 8007166:	2800      	cmp	r0, #0
 8007168:	d038      	beq.n	80071dc <_svfiprintf_r+0x1d8>
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <_svfiprintf_r+0x1f8>)
 800716c:	bb1b      	cbnz	r3, 80071b6 <_svfiprintf_r+0x1b2>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	3308      	adds	r3, #8
 8007178:	9303      	str	r3, [sp, #12]
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	4433      	add	r3, r6
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e767      	b.n	8007052 <_svfiprintf_r+0x4e>
 8007182:	460c      	mov	r4, r1
 8007184:	2001      	movs	r0, #1
 8007186:	fb0c 3202 	mla	r2, ip, r2, r3
 800718a:	e7a5      	b.n	80070d8 <_svfiprintf_r+0xd4>
 800718c:	2300      	movs	r3, #0
 800718e:	f04f 0c0a 	mov.w	ip, #10
 8007192:	4619      	mov	r1, r3
 8007194:	3401      	adds	r4, #1
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	4620      	mov	r0, r4
 800719a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800719e:	3a30      	subs	r2, #48	; 0x30
 80071a0:	2a09      	cmp	r2, #9
 80071a2:	d903      	bls.n	80071ac <_svfiprintf_r+0x1a8>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0c5      	beq.n	8007134 <_svfiprintf_r+0x130>
 80071a8:	9105      	str	r1, [sp, #20]
 80071aa:	e7c3      	b.n	8007134 <_svfiprintf_r+0x130>
 80071ac:	4604      	mov	r4, r0
 80071ae:	2301      	movs	r3, #1
 80071b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b4:	e7f0      	b.n	8007198 <_svfiprintf_r+0x194>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4638      	mov	r0, r7
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <_svfiprintf_r+0x1fc>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	f3af 8000 	nop.w
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	4606      	mov	r6, r0
 80071ca:	d1d6      	bne.n	800717a <_svfiprintf_r+0x176>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af2c 	bmi.w	800702c <_svfiprintf_r+0x28>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	b01d      	add	sp, #116	; 0x74
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4638      	mov	r0, r7
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_svfiprintf_r+0x1fc>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	f000 f87c 	bl	80072e4 <_printf_i>
 80071ec:	e7eb      	b.n	80071c6 <_svfiprintf_r+0x1c2>
 80071ee:	bf00      	nop
 80071f0:	080080bc 	.word	0x080080bc
 80071f4:	080080c2 	.word	0x080080c2
 80071f8:	080080c6 	.word	0x080080c6
 80071fc:	00000000 	.word	0x00000000
 8007200:	08006f4d 	.word	0x08006f4d

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4699      	mov	r9, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	4607      	mov	r7, r0
 8007212:	4293      	cmp	r3, r2
 8007214:	bfb8      	it	lt
 8007216:	4613      	movlt	r3, r2
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800721e:	460c      	mov	r4, r1
 8007220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc28      	bgt.n	800729e <_printf_common+0x9a>
 800724c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007250:	1e13      	subs	r3, r2, #0
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42d      	bmi.n	80072b8 <_printf_common+0xb4>
 800725c:	4649      	mov	r1, r9
 800725e:	4638      	mov	r0, r7
 8007260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d020      	beq.n	80072ac <_printf_common+0xa8>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	68e5      	ldr	r5, [r4, #12]
 800726e:	f003 0306 	and.w	r3, r3, #6
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf18      	it	ne
 8007276:	2500      	movne	r5, #0
 8007278:	6832      	ldr	r2, [r6, #0]
 800727a:	f04f 0600 	mov.w	r6, #0
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	bf08      	it	eq
 8007282:	1aad      	subeq	r5, r5, r2
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	bf08      	it	eq
 8007288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800728c:	4293      	cmp	r3, r2
 800728e:	bfc4      	itt	gt
 8007290:	1a9b      	subgt	r3, r3, r2
 8007292:	18ed      	addgt	r5, r5, r3
 8007294:	341a      	adds	r4, #26
 8007296:	42b5      	cmp	r5, r6
 8007298:	d11a      	bne.n	80072d0 <_printf_common+0xcc>
 800729a:	2000      	movs	r0, #0
 800729c:	e008      	b.n	80072b0 <_printf_common+0xac>
 800729e:	2301      	movs	r3, #1
 80072a0:	4652      	mov	r2, sl
 80072a2:	4649      	mov	r1, r9
 80072a4:	4638      	mov	r0, r7
 80072a6:	47c0      	blx	r8
 80072a8:	3001      	adds	r0, #1
 80072aa:	d103      	bne.n	80072b4 <_printf_common+0xb0>
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	3501      	adds	r5, #1
 80072b6:	e7c4      	b.n	8007242 <_printf_common+0x3e>
 80072b8:	2030      	movs	r0, #48	; 0x30
 80072ba:	18e1      	adds	r1, r4, r3
 80072bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c6:	4422      	add	r2, r4
 80072c8:	3302      	adds	r3, #2
 80072ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072ce:	e7c5      	b.n	800725c <_printf_common+0x58>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4622      	mov	r2, r4
 80072d4:	4649      	mov	r1, r9
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	3001      	adds	r0, #1
 80072dc:	d0e6      	beq.n	80072ac <_printf_common+0xa8>
 80072de:	3601      	adds	r6, #1
 80072e0:	e7d9      	b.n	8007296 <_printf_common+0x92>
	...

080072e4 <_printf_i>:
 80072e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	7e0f      	ldrb	r7, [r1, #24]
 80072ea:	4691      	mov	r9, r2
 80072ec:	2f78      	cmp	r7, #120	; 0x78
 80072ee:	4680      	mov	r8, r0
 80072f0:	460c      	mov	r4, r1
 80072f2:	469a      	mov	sl, r3
 80072f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072fa:	d807      	bhi.n	800730c <_printf_i+0x28>
 80072fc:	2f62      	cmp	r7, #98	; 0x62
 80072fe:	d80a      	bhi.n	8007316 <_printf_i+0x32>
 8007300:	2f00      	cmp	r7, #0
 8007302:	f000 80d9 	beq.w	80074b8 <_printf_i+0x1d4>
 8007306:	2f58      	cmp	r7, #88	; 0x58
 8007308:	f000 80a4 	beq.w	8007454 <_printf_i+0x170>
 800730c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007314:	e03a      	b.n	800738c <_printf_i+0xa8>
 8007316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800731a:	2b15      	cmp	r3, #21
 800731c:	d8f6      	bhi.n	800730c <_printf_i+0x28>
 800731e:	a101      	add	r1, pc, #4	; (adr r1, 8007324 <_printf_i+0x40>)
 8007320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007324:	0800737d 	.word	0x0800737d
 8007328:	08007391 	.word	0x08007391
 800732c:	0800730d 	.word	0x0800730d
 8007330:	0800730d 	.word	0x0800730d
 8007334:	0800730d 	.word	0x0800730d
 8007338:	0800730d 	.word	0x0800730d
 800733c:	08007391 	.word	0x08007391
 8007340:	0800730d 	.word	0x0800730d
 8007344:	0800730d 	.word	0x0800730d
 8007348:	0800730d 	.word	0x0800730d
 800734c:	0800730d 	.word	0x0800730d
 8007350:	0800749f 	.word	0x0800749f
 8007354:	080073c1 	.word	0x080073c1
 8007358:	08007481 	.word	0x08007481
 800735c:	0800730d 	.word	0x0800730d
 8007360:	0800730d 	.word	0x0800730d
 8007364:	080074c1 	.word	0x080074c1
 8007368:	0800730d 	.word	0x0800730d
 800736c:	080073c1 	.word	0x080073c1
 8007370:	0800730d 	.word	0x0800730d
 8007374:	0800730d 	.word	0x0800730d
 8007378:	08007489 	.word	0x08007489
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	602a      	str	r2, [r5, #0]
 8007384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800738c:	2301      	movs	r3, #1
 800738e:	e0a4      	b.n	80074da <_printf_i+0x1f6>
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	6829      	ldr	r1, [r5, #0]
 8007394:	0606      	lsls	r6, r0, #24
 8007396:	f101 0304 	add.w	r3, r1, #4
 800739a:	d50a      	bpl.n	80073b2 <_printf_i+0xce>
 800739c:	680e      	ldr	r6, [r1, #0]
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	2e00      	cmp	r6, #0
 80073a2:	da03      	bge.n	80073ac <_printf_i+0xc8>
 80073a4:	232d      	movs	r3, #45	; 0x2d
 80073a6:	4276      	negs	r6, r6
 80073a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ac:	230a      	movs	r3, #10
 80073ae:	485e      	ldr	r0, [pc, #376]	; (8007528 <_printf_i+0x244>)
 80073b0:	e019      	b.n	80073e6 <_printf_i+0x102>
 80073b2:	680e      	ldr	r6, [r1, #0]
 80073b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	bf18      	it	ne
 80073bc:	b236      	sxthne	r6, r6
 80073be:	e7ef      	b.n	80073a0 <_printf_i+0xbc>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	6029      	str	r1, [r5, #0]
 80073c8:	0601      	lsls	r1, r0, #24
 80073ca:	d501      	bpl.n	80073d0 <_printf_i+0xec>
 80073cc:	681e      	ldr	r6, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <_printf_i+0xf2>
 80073d0:	0646      	lsls	r6, r0, #25
 80073d2:	d5fb      	bpl.n	80073cc <_printf_i+0xe8>
 80073d4:	881e      	ldrh	r6, [r3, #0]
 80073d6:	2f6f      	cmp	r7, #111	; 0x6f
 80073d8:	bf0c      	ite	eq
 80073da:	2308      	moveq	r3, #8
 80073dc:	230a      	movne	r3, #10
 80073de:	4852      	ldr	r0, [pc, #328]	; (8007528 <_printf_i+0x244>)
 80073e0:	2100      	movs	r1, #0
 80073e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073e6:	6865      	ldr	r5, [r4, #4]
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	bfa8      	it	ge
 80073ec:	6821      	ldrge	r1, [r4, #0]
 80073ee:	60a5      	str	r5, [r4, #8]
 80073f0:	bfa4      	itt	ge
 80073f2:	f021 0104 	bicge.w	r1, r1, #4
 80073f6:	6021      	strge	r1, [r4, #0]
 80073f8:	b90e      	cbnz	r6, 80073fe <_printf_i+0x11a>
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	d04d      	beq.n	800749a <_printf_i+0x1b6>
 80073fe:	4615      	mov	r5, r2
 8007400:	fbb6 f1f3 	udiv	r1, r6, r3
 8007404:	fb03 6711 	mls	r7, r3, r1, r6
 8007408:	5dc7      	ldrb	r7, [r0, r7]
 800740a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800740e:	4637      	mov	r7, r6
 8007410:	42bb      	cmp	r3, r7
 8007412:	460e      	mov	r6, r1
 8007414:	d9f4      	bls.n	8007400 <_printf_i+0x11c>
 8007416:	2b08      	cmp	r3, #8
 8007418:	d10b      	bne.n	8007432 <_printf_i+0x14e>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	07de      	lsls	r6, r3, #31
 800741e:	d508      	bpl.n	8007432 <_printf_i+0x14e>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	6861      	ldr	r1, [r4, #4]
 8007424:	4299      	cmp	r1, r3
 8007426:	bfde      	ittt	le
 8007428:	2330      	movle	r3, #48	; 0x30
 800742a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800742e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007432:	1b52      	subs	r2, r2, r5
 8007434:	6122      	str	r2, [r4, #16]
 8007436:	464b      	mov	r3, r9
 8007438:	4621      	mov	r1, r4
 800743a:	4640      	mov	r0, r8
 800743c:	f8cd a000 	str.w	sl, [sp]
 8007440:	aa03      	add	r2, sp, #12
 8007442:	f7ff fedf 	bl	8007204 <_printf_common>
 8007446:	3001      	adds	r0, #1
 8007448:	d14c      	bne.n	80074e4 <_printf_i+0x200>
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	b004      	add	sp, #16
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	4834      	ldr	r0, [pc, #208]	; (8007528 <_printf_i+0x244>)
 8007456:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800745a:	6829      	ldr	r1, [r5, #0]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007462:	6029      	str	r1, [r5, #0]
 8007464:	061d      	lsls	r5, r3, #24
 8007466:	d514      	bpl.n	8007492 <_printf_i+0x1ae>
 8007468:	07df      	lsls	r7, r3, #31
 800746a:	bf44      	itt	mi
 800746c:	f043 0320 	orrmi.w	r3, r3, #32
 8007470:	6023      	strmi	r3, [r4, #0]
 8007472:	b91e      	cbnz	r6, 800747c <_printf_i+0x198>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	f023 0320 	bic.w	r3, r3, #32
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	2310      	movs	r3, #16
 800747e:	e7af      	b.n	80073e0 <_printf_i+0xfc>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	f043 0320 	orr.w	r3, r3, #32
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	2378      	movs	r3, #120	; 0x78
 800748a:	4828      	ldr	r0, [pc, #160]	; (800752c <_printf_i+0x248>)
 800748c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007490:	e7e3      	b.n	800745a <_printf_i+0x176>
 8007492:	0659      	lsls	r1, r3, #25
 8007494:	bf48      	it	mi
 8007496:	b2b6      	uxthmi	r6, r6
 8007498:	e7e6      	b.n	8007468 <_printf_i+0x184>
 800749a:	4615      	mov	r5, r2
 800749c:	e7bb      	b.n	8007416 <_printf_i+0x132>
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	6826      	ldr	r6, [r4, #0]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6961      	ldr	r1, [r4, #20]
 80074a6:	6028      	str	r0, [r5, #0]
 80074a8:	0635      	lsls	r5, r6, #24
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	d501      	bpl.n	80074b2 <_printf_i+0x1ce>
 80074ae:	6019      	str	r1, [r3, #0]
 80074b0:	e002      	b.n	80074b8 <_printf_i+0x1d4>
 80074b2:	0670      	lsls	r0, r6, #25
 80074b4:	d5fb      	bpl.n	80074ae <_printf_i+0x1ca>
 80074b6:	8019      	strh	r1, [r3, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	4615      	mov	r5, r2
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	e7ba      	b.n	8007436 <_printf_i+0x152>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	2100      	movs	r1, #0
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	602a      	str	r2, [r5, #0]
 80074c8:	681d      	ldr	r5, [r3, #0]
 80074ca:	6862      	ldr	r2, [r4, #4]
 80074cc:	4628      	mov	r0, r5
 80074ce:	f000 f82f 	bl	8007530 <memchr>
 80074d2:	b108      	cbz	r0, 80074d8 <_printf_i+0x1f4>
 80074d4:	1b40      	subs	r0, r0, r5
 80074d6:	6060      	str	r0, [r4, #4]
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	2300      	movs	r3, #0
 80074de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e2:	e7a8      	b.n	8007436 <_printf_i+0x152>
 80074e4:	462a      	mov	r2, r5
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	47d0      	blx	sl
 80074ee:	3001      	adds	r0, #1
 80074f0:	d0ab      	beq.n	800744a <_printf_i+0x166>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	079b      	lsls	r3, r3, #30
 80074f6:	d413      	bmi.n	8007520 <_printf_i+0x23c>
 80074f8:	68e0      	ldr	r0, [r4, #12]
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	4298      	cmp	r0, r3
 80074fe:	bfb8      	it	lt
 8007500:	4618      	movlt	r0, r3
 8007502:	e7a4      	b.n	800744e <_printf_i+0x16a>
 8007504:	2301      	movs	r3, #1
 8007506:	4632      	mov	r2, r6
 8007508:	4649      	mov	r1, r9
 800750a:	4640      	mov	r0, r8
 800750c:	47d0      	blx	sl
 800750e:	3001      	adds	r0, #1
 8007510:	d09b      	beq.n	800744a <_printf_i+0x166>
 8007512:	3501      	adds	r5, #1
 8007514:	68e3      	ldr	r3, [r4, #12]
 8007516:	9903      	ldr	r1, [sp, #12]
 8007518:	1a5b      	subs	r3, r3, r1
 800751a:	42ab      	cmp	r3, r5
 800751c:	dcf2      	bgt.n	8007504 <_printf_i+0x220>
 800751e:	e7eb      	b.n	80074f8 <_printf_i+0x214>
 8007520:	2500      	movs	r5, #0
 8007522:	f104 0619 	add.w	r6, r4, #25
 8007526:	e7f5      	b.n	8007514 <_printf_i+0x230>
 8007528:	080080cd 	.word	0x080080cd
 800752c:	080080de 	.word	0x080080de

08007530 <memchr>:
 8007530:	4603      	mov	r3, r0
 8007532:	b510      	push	{r4, lr}
 8007534:	b2c9      	uxtb	r1, r1
 8007536:	4402      	add	r2, r0
 8007538:	4293      	cmp	r3, r2
 800753a:	4618      	mov	r0, r3
 800753c:	d101      	bne.n	8007542 <memchr+0x12>
 800753e:	2000      	movs	r0, #0
 8007540:	e003      	b.n	800754a <memchr+0x1a>
 8007542:	7804      	ldrb	r4, [r0, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	428c      	cmp	r4, r1
 8007548:	d1f6      	bne.n	8007538 <memchr+0x8>
 800754a:	bd10      	pop	{r4, pc}

0800754c <memcpy>:
 800754c:	440a      	add	r2, r1
 800754e:	4291      	cmp	r1, r2
 8007550:	f100 33ff 	add.w	r3, r0, #4294967295
 8007554:	d100      	bne.n	8007558 <memcpy+0xc>
 8007556:	4770      	bx	lr
 8007558:	b510      	push	{r4, lr}
 800755a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755e:	4291      	cmp	r1, r2
 8007560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007564:	d1f9      	bne.n	800755a <memcpy+0xe>
 8007566:	bd10      	pop	{r4, pc}

08007568 <memmove>:
 8007568:	4288      	cmp	r0, r1
 800756a:	b510      	push	{r4, lr}
 800756c:	eb01 0402 	add.w	r4, r1, r2
 8007570:	d902      	bls.n	8007578 <memmove+0x10>
 8007572:	4284      	cmp	r4, r0
 8007574:	4623      	mov	r3, r4
 8007576:	d807      	bhi.n	8007588 <memmove+0x20>
 8007578:	1e43      	subs	r3, r0, #1
 800757a:	42a1      	cmp	r1, r4
 800757c:	d008      	beq.n	8007590 <memmove+0x28>
 800757e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007586:	e7f8      	b.n	800757a <memmove+0x12>
 8007588:	4601      	mov	r1, r0
 800758a:	4402      	add	r2, r0
 800758c:	428a      	cmp	r2, r1
 800758e:	d100      	bne.n	8007592 <memmove+0x2a>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800759a:	e7f7      	b.n	800758c <memmove+0x24>

0800759c <_free_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4605      	mov	r5, r0
 80075a0:	2900      	cmp	r1, #0
 80075a2:	d040      	beq.n	8007626 <_free_r+0x8a>
 80075a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a8:	1f0c      	subs	r4, r1, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfb8      	it	lt
 80075ae:	18e4      	addlt	r4, r4, r3
 80075b0:	f000 f910 	bl	80077d4 <__malloc_lock>
 80075b4:	4a1c      	ldr	r2, [pc, #112]	; (8007628 <_free_r+0x8c>)
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	b933      	cbnz	r3, 80075c8 <_free_r+0x2c>
 80075ba:	6063      	str	r3, [r4, #4]
 80075bc:	6014      	str	r4, [r2, #0]
 80075be:	4628      	mov	r0, r5
 80075c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c4:	f000 b90c 	b.w	80077e0 <__malloc_unlock>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d908      	bls.n	80075de <_free_r+0x42>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	1821      	adds	r1, r4, r0
 80075d0:	428b      	cmp	r3, r1
 80075d2:	bf01      	itttt	eq
 80075d4:	6819      	ldreq	r1, [r3, #0]
 80075d6:	685b      	ldreq	r3, [r3, #4]
 80075d8:	1809      	addeq	r1, r1, r0
 80075da:	6021      	streq	r1, [r4, #0]
 80075dc:	e7ed      	b.n	80075ba <_free_r+0x1e>
 80075de:	461a      	mov	r2, r3
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b10b      	cbz	r3, 80075e8 <_free_r+0x4c>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d9fa      	bls.n	80075de <_free_r+0x42>
 80075e8:	6811      	ldr	r1, [r2, #0]
 80075ea:	1850      	adds	r0, r2, r1
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d10b      	bne.n	8007608 <_free_r+0x6c>
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	4401      	add	r1, r0
 80075f4:	1850      	adds	r0, r2, r1
 80075f6:	4283      	cmp	r3, r0
 80075f8:	6011      	str	r1, [r2, #0]
 80075fa:	d1e0      	bne.n	80075be <_free_r+0x22>
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4401      	add	r1, r0
 8007602:	6011      	str	r1, [r2, #0]
 8007604:	6053      	str	r3, [r2, #4]
 8007606:	e7da      	b.n	80075be <_free_r+0x22>
 8007608:	d902      	bls.n	8007610 <_free_r+0x74>
 800760a:	230c      	movs	r3, #12
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	e7d6      	b.n	80075be <_free_r+0x22>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	1821      	adds	r1, r4, r0
 8007614:	428b      	cmp	r3, r1
 8007616:	bf01      	itttt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	1809      	addeq	r1, r1, r0
 800761e:	6021      	streq	r1, [r4, #0]
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	6054      	str	r4, [r2, #4]
 8007624:	e7cb      	b.n	80075be <_free_r+0x22>
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000694 	.word	0x20000694

0800762c <sbrk_aligned>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	4e0e      	ldr	r6, [pc, #56]	; (8007668 <sbrk_aligned+0x3c>)
 8007630:	460c      	mov	r4, r1
 8007632:	6831      	ldr	r1, [r6, #0]
 8007634:	4605      	mov	r5, r0
 8007636:	b911      	cbnz	r1, 800763e <sbrk_aligned+0x12>
 8007638:	f000 f8bc 	bl	80077b4 <_sbrk_r>
 800763c:	6030      	str	r0, [r6, #0]
 800763e:	4621      	mov	r1, r4
 8007640:	4628      	mov	r0, r5
 8007642:	f000 f8b7 	bl	80077b4 <_sbrk_r>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d00a      	beq.n	8007660 <sbrk_aligned+0x34>
 800764a:	1cc4      	adds	r4, r0, #3
 800764c:	f024 0403 	bic.w	r4, r4, #3
 8007650:	42a0      	cmp	r0, r4
 8007652:	d007      	beq.n	8007664 <sbrk_aligned+0x38>
 8007654:	1a21      	subs	r1, r4, r0
 8007656:	4628      	mov	r0, r5
 8007658:	f000 f8ac 	bl	80077b4 <_sbrk_r>
 800765c:	3001      	adds	r0, #1
 800765e:	d101      	bne.n	8007664 <sbrk_aligned+0x38>
 8007660:	f04f 34ff 	mov.w	r4, #4294967295
 8007664:	4620      	mov	r0, r4
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	20000698 	.word	0x20000698

0800766c <_malloc_r>:
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	1ccd      	adds	r5, r1, #3
 8007672:	f025 0503 	bic.w	r5, r5, #3
 8007676:	3508      	adds	r5, #8
 8007678:	2d0c      	cmp	r5, #12
 800767a:	bf38      	it	cc
 800767c:	250c      	movcc	r5, #12
 800767e:	2d00      	cmp	r5, #0
 8007680:	4607      	mov	r7, r0
 8007682:	db01      	blt.n	8007688 <_malloc_r+0x1c>
 8007684:	42a9      	cmp	r1, r5
 8007686:	d905      	bls.n	8007694 <_malloc_r+0x28>
 8007688:	230c      	movs	r3, #12
 800768a:	2600      	movs	r6, #0
 800768c:	603b      	str	r3, [r7, #0]
 800768e:	4630      	mov	r0, r6
 8007690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007694:	4e2e      	ldr	r6, [pc, #184]	; (8007750 <_malloc_r+0xe4>)
 8007696:	f000 f89d 	bl	80077d4 <__malloc_lock>
 800769a:	6833      	ldr	r3, [r6, #0]
 800769c:	461c      	mov	r4, r3
 800769e:	bb34      	cbnz	r4, 80076ee <_malloc_r+0x82>
 80076a0:	4629      	mov	r1, r5
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff ffc2 	bl	800762c <sbrk_aligned>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	4604      	mov	r4, r0
 80076ac:	d14d      	bne.n	800774a <_malloc_r+0xde>
 80076ae:	6834      	ldr	r4, [r6, #0]
 80076b0:	4626      	mov	r6, r4
 80076b2:	2e00      	cmp	r6, #0
 80076b4:	d140      	bne.n	8007738 <_malloc_r+0xcc>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	4631      	mov	r1, r6
 80076ba:	4638      	mov	r0, r7
 80076bc:	eb04 0803 	add.w	r8, r4, r3
 80076c0:	f000 f878 	bl	80077b4 <_sbrk_r>
 80076c4:	4580      	cmp	r8, r0
 80076c6:	d13a      	bne.n	800773e <_malloc_r+0xd2>
 80076c8:	6821      	ldr	r1, [r4, #0]
 80076ca:	3503      	adds	r5, #3
 80076cc:	1a6d      	subs	r5, r5, r1
 80076ce:	f025 0503 	bic.w	r5, r5, #3
 80076d2:	3508      	adds	r5, #8
 80076d4:	2d0c      	cmp	r5, #12
 80076d6:	bf38      	it	cc
 80076d8:	250c      	movcc	r5, #12
 80076da:	4638      	mov	r0, r7
 80076dc:	4629      	mov	r1, r5
 80076de:	f7ff ffa5 	bl	800762c <sbrk_aligned>
 80076e2:	3001      	adds	r0, #1
 80076e4:	d02b      	beq.n	800773e <_malloc_r+0xd2>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	442b      	add	r3, r5
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	e00e      	b.n	800770c <_malloc_r+0xa0>
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	1b52      	subs	r2, r2, r5
 80076f2:	d41e      	bmi.n	8007732 <_malloc_r+0xc6>
 80076f4:	2a0b      	cmp	r2, #11
 80076f6:	d916      	bls.n	8007726 <_malloc_r+0xba>
 80076f8:	1961      	adds	r1, r4, r5
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	6025      	str	r5, [r4, #0]
 80076fe:	bf18      	it	ne
 8007700:	6059      	strne	r1, [r3, #4]
 8007702:	6863      	ldr	r3, [r4, #4]
 8007704:	bf08      	it	eq
 8007706:	6031      	streq	r1, [r6, #0]
 8007708:	5162      	str	r2, [r4, r5]
 800770a:	604b      	str	r3, [r1, #4]
 800770c:	4638      	mov	r0, r7
 800770e:	f104 060b 	add.w	r6, r4, #11
 8007712:	f000 f865 	bl	80077e0 <__malloc_unlock>
 8007716:	f026 0607 	bic.w	r6, r6, #7
 800771a:	1d23      	adds	r3, r4, #4
 800771c:	1af2      	subs	r2, r6, r3
 800771e:	d0b6      	beq.n	800768e <_malloc_r+0x22>
 8007720:	1b9b      	subs	r3, r3, r6
 8007722:	50a3      	str	r3, [r4, r2]
 8007724:	e7b3      	b.n	800768e <_malloc_r+0x22>
 8007726:	6862      	ldr	r2, [r4, #4]
 8007728:	42a3      	cmp	r3, r4
 800772a:	bf0c      	ite	eq
 800772c:	6032      	streq	r2, [r6, #0]
 800772e:	605a      	strne	r2, [r3, #4]
 8007730:	e7ec      	b.n	800770c <_malloc_r+0xa0>
 8007732:	4623      	mov	r3, r4
 8007734:	6864      	ldr	r4, [r4, #4]
 8007736:	e7b2      	b.n	800769e <_malloc_r+0x32>
 8007738:	4634      	mov	r4, r6
 800773a:	6876      	ldr	r6, [r6, #4]
 800773c:	e7b9      	b.n	80076b2 <_malloc_r+0x46>
 800773e:	230c      	movs	r3, #12
 8007740:	4638      	mov	r0, r7
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	f000 f84c 	bl	80077e0 <__malloc_unlock>
 8007748:	e7a1      	b.n	800768e <_malloc_r+0x22>
 800774a:	6025      	str	r5, [r4, #0]
 800774c:	e7de      	b.n	800770c <_malloc_r+0xa0>
 800774e:	bf00      	nop
 8007750:	20000694 	.word	0x20000694

08007754 <_realloc_r>:
 8007754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007758:	4680      	mov	r8, r0
 800775a:	4614      	mov	r4, r2
 800775c:	460e      	mov	r6, r1
 800775e:	b921      	cbnz	r1, 800776a <_realloc_r+0x16>
 8007760:	4611      	mov	r1, r2
 8007762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	f7ff bf81 	b.w	800766c <_malloc_r>
 800776a:	b92a      	cbnz	r2, 8007778 <_realloc_r+0x24>
 800776c:	f7ff ff16 	bl	800759c <_free_r>
 8007770:	4625      	mov	r5, r4
 8007772:	4628      	mov	r0, r5
 8007774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007778:	f000 f838 	bl	80077ec <_malloc_usable_size_r>
 800777c:	4284      	cmp	r4, r0
 800777e:	4607      	mov	r7, r0
 8007780:	d802      	bhi.n	8007788 <_realloc_r+0x34>
 8007782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007786:	d812      	bhi.n	80077ae <_realloc_r+0x5a>
 8007788:	4621      	mov	r1, r4
 800778a:	4640      	mov	r0, r8
 800778c:	f7ff ff6e 	bl	800766c <_malloc_r>
 8007790:	4605      	mov	r5, r0
 8007792:	2800      	cmp	r0, #0
 8007794:	d0ed      	beq.n	8007772 <_realloc_r+0x1e>
 8007796:	42bc      	cmp	r4, r7
 8007798:	4622      	mov	r2, r4
 800779a:	4631      	mov	r1, r6
 800779c:	bf28      	it	cs
 800779e:	463a      	movcs	r2, r7
 80077a0:	f7ff fed4 	bl	800754c <memcpy>
 80077a4:	4631      	mov	r1, r6
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7ff fef8 	bl	800759c <_free_r>
 80077ac:	e7e1      	b.n	8007772 <_realloc_r+0x1e>
 80077ae:	4635      	mov	r5, r6
 80077b0:	e7df      	b.n	8007772 <_realloc_r+0x1e>
	...

080077b4 <_sbrk_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4d05      	ldr	r5, [pc, #20]	; (80077d0 <_sbrk_r+0x1c>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	f7fa fcd2 	bl	8002168 <_sbrk>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_sbrk_r+0x1a>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_sbrk_r+0x1a>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	2000069c 	.word	0x2000069c

080077d4 <__malloc_lock>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__malloc_lock+0x8>)
 80077d6:	f000 b811 	b.w	80077fc <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	200006a0 	.word	0x200006a0

080077e0 <__malloc_unlock>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__malloc_unlock+0x8>)
 80077e2:	f000 b80c 	b.w	80077fe <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	200006a0 	.word	0x200006a0

080077ec <_malloc_usable_size_r>:
 80077ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f0:	1f18      	subs	r0, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfbc      	itt	lt
 80077f6:	580b      	ldrlt	r3, [r1, r0]
 80077f8:	18c0      	addlt	r0, r0, r3
 80077fa:	4770      	bx	lr

080077fc <__retarget_lock_acquire_recursive>:
 80077fc:	4770      	bx	lr

080077fe <__retarget_lock_release_recursive>:
 80077fe:	4770      	bx	lr

08007800 <_init>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr

0800780c <_fini>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr
