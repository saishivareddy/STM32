
L152-RX-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd4  08007fd4  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fdc  08007fdc  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  200000b4  08008098  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  08008098  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cc9  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003846  00000000  00000000  00039da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8df  00000000  00000000  0003f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001618c  00000000  00000000  0005a0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009158d  00000000  00000000  00070283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  00101864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b4 	.word	0x200000b4
 8000158:	00000000 	.word	0x00000000
 800015c:	080076e4 	.word	0x080076e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000b8 	.word	0x200000b8
 8000178:	080076e4 	.word	0x080076e4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000494:	4b9f      	ldr	r3, [pc, #636]	; (8000714 <dwt_initialise+0x290>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2200      	movs	r2, #0
 800049a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800049c:	4b9d      	ldr	r3, [pc, #628]	; (8000714 <dwt_initialise+0x290>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2200      	movs	r2, #0
 80004a2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80004a4:	4b9b      	ldr	r3, [pc, #620]	; (8000714 <dwt_initialise+0x290>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80004ac:	4b99      	ldr	r3, [pc, #612]	; (8000714 <dwt_initialise+0x290>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2200      	movs	r2, #0
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80004b4:	4b97      	ldr	r3, [pc, #604]	; (8000714 <dwt_initialise+0x290>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2200      	movs	r2, #0
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80004bc:	4b95      	ldr	r3, [pc, #596]	; (8000714 <dwt_initialise+0x290>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2200      	movs	r2, #0
 80004c2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80004c4:	4b93      	ldr	r3, [pc, #588]	; (8000714 <dwt_initialise+0x290>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80004cc:	f000 f926 	bl	800071c <dwt_readdevid>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a91      	ldr	r2, [pc, #580]	; (8000718 <dwt_initialise+0x294>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d002      	beq.n	80004de <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	e115      	b.n	800070a <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f003 0302 	and.w	r3, r3, #2
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d101      	bne.n	80004ec <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80004e8:	f000 fe1e 	bl	8001128 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d004      	beq.n	8000500 <dwt_initialise+0x7c>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000500:	2000      	movs	r0, #0
 8000502:	f000 fc91 	bl	8000e28 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000506:	2204      	movs	r2, #4
 8000508:	2100      	movs	r1, #0
 800050a:	2024      	movs	r0, #36	; 0x24
 800050c:	f000 fbd6 	bl	8000cbc <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	2b00      	cmp	r3, #0
 8000518:	d116      	bne.n	8000548 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800051a:	2004      	movs	r0, #4
 800051c:	f000 fc24 	bl	8000d68 <_dwt_otpread>
 8000520:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d01f      	beq.n	800056a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800052a:	2202      	movs	r2, #2
 800052c:	2112      	movs	r1, #18
 800052e:	202d      	movs	r0, #45	; 0x2d
 8000530:	f000 fbc4 	bl	8000cbc <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000534:	4b77      	ldr	r3, [pc, #476]	; (8000714 <dwt_initialise+0x290>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	8ada      	ldrh	r2, [r3, #22]
 800053a:	4b76      	ldr	r3, [pc, #472]	; (8000714 <dwt_initialise+0x290>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000542:	b292      	uxth	r2, r2
 8000544:	82da      	strh	r2, [r3, #22]
 8000546:	e010      	b.n	800056a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000548:	2130      	movs	r1, #48	; 0x30
 800054a:	2028      	movs	r0, #40	; 0x28
 800054c:	f000 fb5f 	bl	8000c0e <dwt_read32bitoffsetreg>
 8000550:	4603      	mov	r3, r0
 8000552:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000556:	d008      	beq.n	800056a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000558:	4b6e      	ldr	r3, [pc, #440]	; (8000714 <dwt_initialise+0x290>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	8ada      	ldrh	r2, [r3, #22]
 800055e:	4b6d      	ldr	r3, [pc, #436]	; (8000714 <dwt_initialise+0x290>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000566:	b292      	uxth	r2, r2
 8000568:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f003 0302 	and.w	r3, r3, #2
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <dwt_initialise+0x104>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	2b00      	cmp	r3, #0
 800057c:	d011      	beq.n	80005a2 <dwt_initialise+0x11e>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00c      	beq.n	80005a2 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000588:	201e      	movs	r0, #30
 800058a:	f000 fbed 	bl	8000d68 <_dwt_otpread>
 800058e:	4603      	mov	r3, r0
 8000590:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000592:	8afb      	ldrh	r3, [r7, #22]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b5e      	ldr	r3, [pc, #376]	; (8000714 <dwt_initialise+0x290>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	72da      	strb	r2, [r3, #11]
 80005a0:	e003      	b.n	80005aa <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80005a2:	4b5c      	ldr	r3, [pc, #368]	; (8000714 <dwt_initialise+0x290>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10b      	bne.n	80005cc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80005b4:	8afb      	ldrh	r3, [r7, #22]
 80005b6:	f003 031f 	and.w	r3, r3, #31
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80005be:	2310      	movs	r3, #16
 80005c0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80005c2:	8afb      	ldrh	r3, [r7, #22]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fdd4 	bl	8001174 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d007      	beq.n	80005e6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80005d6:	4b4f      	ldr	r3, [pc, #316]	; (8000714 <dwt_initialise+0x290>)
 80005d8:	681c      	ldr	r4, [r3, #0]
 80005da:	2006      	movs	r0, #6
 80005dc:	f000 fbc4 	bl	8000d68 <_dwt_otpread>
 80005e0:	4603      	mov	r3, r0
 80005e2:	6023      	str	r3, [r4, #0]
 80005e4:	e003      	b.n	80005ee <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80005e6:	4b4b      	ldr	r3, [pc, #300]	; (8000714 <dwt_initialise+0x290>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80005f8:	4b46      	ldr	r3, [pc, #280]	; (8000714 <dwt_initialise+0x290>)
 80005fa:	681c      	ldr	r4, [r3, #0]
 80005fc:	2007      	movs	r0, #7
 80005fe:	f000 fbb3 	bl	8000d68 <_dwt_otpread>
 8000602:	4603      	mov	r3, r0
 8000604:	6063      	str	r3, [r4, #4]
 8000606:	e003      	b.n	8000610 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000608:	4b42      	ldr	r3, [pc, #264]	; (8000714 <dwt_initialise+0x290>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800061a:	2008      	movs	r0, #8
 800061c:	f000 fba4 	bl	8000d68 <_dwt_otpread>
 8000620:	4602      	mov	r2, r0
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <dwt_initialise+0x290>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	721a      	strb	r2, [r3, #8]
 800062a:	e003      	b.n	8000634 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800062c:	4b39      	ldr	r3, [pc, #228]	; (8000714 <dwt_initialise+0x290>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063a:	2b00      	cmp	r3, #0
 800063c:	d008      	beq.n	8000650 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800063e:	2009      	movs	r0, #9
 8000640:	f000 fb92 	bl	8000d68 <_dwt_otpread>
 8000644:	4602      	mov	r2, r0
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <dwt_initialise+0x290>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	725a      	strb	r2, [r3, #9]
 800064e:	e003      	b.n	8000658 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000650:	4b30      	ldr	r3, [pc, #192]	; (8000714 <dwt_initialise+0x290>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	2b00      	cmp	r3, #0
 8000660:	d121      	bne.n	80006a6 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 800066c:	f000 fbc9 	bl	8000e02 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <dwt_initialise+0x290>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	8ada      	ldrh	r2, [r3, #22]
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <dwt_initialise+0x290>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800067e:	b292      	uxth	r2, r2
 8000680:	82da      	strh	r2, [r3, #22]
 8000682:	e01e      	b.n	80006c2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000684:	2105      	movs	r1, #5
 8000686:	2036      	movs	r0, #54	; 0x36
 8000688:	f000 fae8 	bl	8000c5c <dwt_read16bitoffsetreg>
 800068c:	4603      	mov	r3, r0
 800068e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000690:	89fb      	ldrh	r3, [r7, #14]
 8000692:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000696:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	461a      	mov	r2, r3
 800069c:	2105      	movs	r1, #5
 800069e:	2036      	movs	r0, #54	; 0x36
 80006a0:	f000 fb1f 	bl	8000ce2 <dwt_write16bitoffsetreg>
 80006a4:	e00d      	b.n	80006c2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d108      	bne.n	80006c2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <dwt_initialise+0x290>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	8ada      	ldrh	r2, [r3, #22]
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <dwt_initialise+0x290>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006be:	b292      	uxth	r2, r2
 80006c0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fbb0 	bl	8000e28 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80006c8:	2200      	movs	r2, #0
 80006ca:	210a      	movs	r1, #10
 80006cc:	202c      	movs	r0, #44	; 0x2c
 80006ce:	f000 faf5 	bl	8000cbc <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <dwt_initialise+0x290>)
 80006d4:	681c      	ldr	r4, [r3, #0]
 80006d6:	2100      	movs	r1, #0
 80006d8:	2004      	movs	r0, #4
 80006da:	f000 fa98 	bl	8000c0e <dwt_read32bitoffsetreg>
 80006de:	4603      	mov	r3, r0
 80006e0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <dwt_initialise+0x290>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	0c1b      	lsrs	r3, r3, #16
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <dwt_initialise+0x290>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f002 0203 	and.w	r2, r2, #3
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <dwt_initialise+0x290>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	2100      	movs	r1, #0
 80006fe:	2008      	movs	r0, #8
 8000700:	f000 fa85 	bl	8000c0e <dwt_read32bitoffsetreg>
 8000704:	4603      	mov	r3, r0
 8000706:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000708:	2300      	movs	r3, #0

} // end dwt_initialise()
 800070a:	4618      	mov	r0, r3
 800070c:	371c      	adds	r7, #28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	deca0130 	.word	0xdeca0130

0800071c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000720:	2100      	movs	r1, #0
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fa73 	bl	8000c0e <dwt_read32bitoffsetreg>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	461a      	mov	r2, r3
 800074c:	4ba1      	ldr	r3, [pc, #644]	; (80009d4 <dwt_configure+0x2a4>)
 800074e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000752:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	3b01      	subs	r3, #1
 800075a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800075c:	7cfb      	ldrb	r3, [r7, #19]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d002      	beq.n	8000768 <dwt_configure+0x38>
 8000762:	7cfb      	ldrb	r3, [r7, #19]
 8000764:	2b07      	cmp	r3, #7
 8000766:	d101      	bne.n	800076c <dwt_configure+0x3c>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <dwt_configure+0x3e>
 800076c:	2300      	movs	r3, #0
 800076e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	79db      	ldrb	r3, [r3, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10b      	bne.n	8000790 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000778:	4b97      	ldr	r3, [pc, #604]	; (80009d8 <dwt_configure+0x2a8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	691a      	ldr	r2, [r3, #16]
 800077e:	4b96      	ldr	r3, [pc, #600]	; (80009d8 <dwt_configure+0x2a8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000786:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000788:	8abb      	ldrh	r3, [r7, #20]
 800078a:	08db      	lsrs	r3, r3, #3
 800078c:	82bb      	strh	r3, [r7, #20]
 800078e:	e007      	b.n	80007a0 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000790:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <dwt_configure+0x2a8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <dwt_configure+0x2a8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800079e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80007a0:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <dwt_configure+0x2a8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	7a12      	ldrb	r2, [r2, #8]
 80007a8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80007aa:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <dwt_configure+0x2a8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	691a      	ldr	r2, [r3, #16]
 80007b0:	4b89      	ldr	r3, [pc, #548]	; (80009d8 <dwt_configure+0x2a8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80007b8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80007ba:	4b87      	ldr	r3, [pc, #540]	; (80009d8 <dwt_configure+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6919      	ldr	r1, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	041b      	lsls	r3, r3, #16
 80007c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80007ca:	4b83      	ldr	r3, [pc, #524]	; (80009d8 <dwt_configure+0x2a8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <dwt_configure+0x2a8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	461a      	mov	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	2004      	movs	r0, #4
 80007de:	f000 fa9c 	bl	8000d1a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80007e2:	8abb      	ldrh	r3, [r7, #20]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f642 0104 	movw	r1, #10244	; 0x2804
 80007ea:	202e      	movs	r0, #46	; 0x2e
 80007ec:	f000 fa79 	bl	8000ce2 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80007f0:	7cbb      	ldrb	r3, [r7, #18]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fae5 	bl	8000dc2 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	4a78      	ldr	r2, [pc, #480]	; (80009dc <dwt_configure+0x2ac>)
 80007fc:	5cd3      	ldrb	r3, [r2, r3]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b77      	ldr	r3, [pc, #476]	; (80009e0 <dwt_configure+0x2b0>)
 8000802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000806:	461a      	mov	r2, r3
 8000808:	2107      	movs	r1, #7
 800080a:	202b      	movs	r0, #43	; 0x2b
 800080c:	f000 fa85 	bl	8000d1a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	4a72      	ldr	r2, [pc, #456]	; (80009dc <dwt_configure+0x2ac>)
 8000814:	5cd3      	ldrb	r3, [r2, r3]
 8000816:	461a      	mov	r2, r3
 8000818:	4b72      	ldr	r3, [pc, #456]	; (80009e4 <dwt_configure+0x2b4>)
 800081a:	5c9b      	ldrb	r3, [r3, r2]
 800081c:	461a      	mov	r2, r3
 800081e:	210b      	movs	r1, #11
 8000820:	202b      	movs	r0, #43	; 0x2b
 8000822:	f000 fa4b 	bl	8000cbc <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000826:	7c7b      	ldrb	r3, [r7, #17]
 8000828:	4a6f      	ldr	r2, [pc, #444]	; (80009e8 <dwt_configure+0x2b8>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	461a      	mov	r2, r3
 800082e:	210b      	movs	r1, #11
 8000830:	2028      	movs	r0, #40	; 0x28
 8000832:	f000 fa43 	bl	8000cbc <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	4a68      	ldr	r2, [pc, #416]	; (80009dc <dwt_configure+0x2ac>)
 800083a:	5cd3      	ldrb	r3, [r2, r3]
 800083c:	461a      	mov	r2, r3
 800083e:	4b6b      	ldr	r3, [pc, #428]	; (80009ec <dwt_configure+0x2bc>)
 8000840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000844:	461a      	mov	r2, r3
 8000846:	210c      	movs	r1, #12
 8000848:	2028      	movs	r0, #40	; 0x28
 800084a:	f000 fa66 	bl	8000d1a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	79db      	ldrb	r3, [r3, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	799b      	ldrb	r3, [r3, #6]
 8000858:	4619      	mov	r1, r3
 800085a:	4a65      	ldr	r2, [pc, #404]	; (80009f0 <dwt_configure+0x2c0>)
 800085c:	0043      	lsls	r3, r0, #1
 800085e:	440b      	add	r3, r1
 8000860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000864:	461a      	mov	r2, r3
 8000866:	2102      	movs	r1, #2
 8000868:	2027      	movs	r0, #39	; 0x27
 800086a:	f000 fa3a 	bl	8000ce2 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800086e:	7cbb      	ldrb	r3, [r7, #18]
 8000870:	4a60      	ldr	r2, [pc, #384]	; (80009f4 <dwt_configure+0x2c4>)
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	461a      	mov	r2, r3
 8000878:	2104      	movs	r1, #4
 800087a:	2027      	movs	r0, #39	; 0x27
 800087c:	f000 fa31 	bl	8000ce2 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	79db      	ldrb	r3, [r3, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000888:	2264      	movs	r2, #100	; 0x64
 800088a:	2106      	movs	r1, #6
 800088c:	2027      	movs	r0, #39	; 0x27
 800088e:	f000 fa28 	bl	8000ce2 <dwt_write16bitoffsetreg>
 8000892:	e018      	b.n	80008c6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	2b04      	cmp	r3, #4
 800089a:	d10a      	bne.n	80008b2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800089c:	2210      	movs	r2, #16
 800089e:	2106      	movs	r1, #6
 80008a0:	2027      	movs	r0, #39	; 0x27
 80008a2:	f000 fa1e 	bl	8000ce2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80008a6:	2210      	movs	r2, #16
 80008a8:	2126      	movs	r1, #38	; 0x26
 80008aa:	2027      	movs	r0, #39	; 0x27
 80008ac:	f000 fa06 	bl	8000cbc <dwt_write8bitoffsetreg>
 80008b0:	e009      	b.n	80008c6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80008b2:	2220      	movs	r2, #32
 80008b4:	2106      	movs	r1, #6
 80008b6:	2027      	movs	r0, #39	; 0x27
 80008b8:	f000 fa13 	bl	8000ce2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80008bc:	2228      	movs	r2, #40	; 0x28
 80008be:	2126      	movs	r1, #38	; 0x26
 80008c0:	2027      	movs	r0, #39	; 0x27
 80008c2:	f000 f9fb 	bl	8000cbc <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80008c6:	7cbb      	ldrb	r3, [r7, #18]
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	78d2      	ldrb	r2, [r2, #3]
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a4a      	ldr	r2, [pc, #296]	; (80009f8 <dwt_configure+0x2c8>)
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	461a      	mov	r2, r3
 80008da:	2108      	movs	r1, #8
 80008dc:	2027      	movs	r0, #39	; 0x27
 80008de:	f000 fa1c 	bl	8000d1a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	895b      	ldrh	r3, [r3, #10]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f241 0241 	movw	r2, #4161	; 0x1041
 80008f0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	895b      	ldrh	r3, [r3, #10]
 80008f6:	461a      	mov	r2, r3
 80008f8:	2120      	movs	r1, #32
 80008fa:	2027      	movs	r0, #39	; 0x27
 80008fc:	f000 f9f1 	bl	8000ce2 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000900:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <dwt_configure+0x2cc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	210c      	movs	r1, #12
 8000908:	2023      	movs	r0, #35	; 0x23
 800090a:	f000 fa06 	bl	8000d1a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800090e:	7cbb      	ldrb	r3, [r7, #18]
 8000910:	4a3a      	ldr	r2, [pc, #232]	; (80009fc <dwt_configure+0x2cc>)
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	889b      	ldrh	r3, [r3, #4]
 8000918:	461a      	mov	r2, r3
 800091a:	2104      	movs	r1, #4
 800091c:	2023      	movs	r0, #35	; 0x23
 800091e:	f000 f9e0 	bl	8000ce2 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00d      	beq.n	8000946 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	79db      	ldrb	r3, [r3, #7]
 800092e:	461a      	mov	r2, r3
 8000930:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <dwt_configure+0x2d0>)
 8000932:	5c9b      	ldrb	r3, [r3, r2]
 8000934:	461a      	mov	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	2021      	movs	r0, #33	; 0x21
 800093a:	f000 f9bf 	bl	8000cbc <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800093e:	2303      	movs	r3, #3
 8000940:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000942:	2301      	movs	r3, #1
 8000944:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000946:	7cfb      	ldrb	r3, [r7, #19]
 8000948:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800094c:	7cfb      	ldrb	r3, [r7, #19]
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000952:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	049b      	lsls	r3, r3, #18
 800095a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800095e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	051b      	lsls	r3, r3, #20
 8000964:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000968:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800096a:	7dbb      	ldrb	r3, [r7, #22]
 800096c:	045b      	lsls	r3, r3, #17
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000972:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	059b      	lsls	r3, r3, #22
 800097a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800097e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000986:	4313      	orrs	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	2100      	movs	r1, #0
 800098e:	201f      	movs	r0, #31
 8000990:	f000 f9c3 	bl	8000d1a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	789a      	ldrb	r2, [r3, #2]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	4313      	orrs	r3, r2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	0419      	lsls	r1, r3, #16
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	79db      	ldrb	r3, [r3, #7]
 80009a6:	035a      	lsls	r2, r3, #13
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <dwt_configure+0x2a8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <dwt_configure+0x2a8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	461a      	mov	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	2008      	movs	r0, #8
 80009bc:	f000 f9ad 	bl	8000d1a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80009c0:	2242      	movs	r2, #66	; 0x42
 80009c2:	2100      	movs	r1, #0
 80009c4:	200d      	movs	r0, #13
 80009c6:	f000 f979 	bl	8000cbc <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	080077dc 	.word	0x080077dc
 80009d8:	20000000 	.word	0x20000000
 80009dc:	0800775c 	.word	0x0800775c
 80009e0:	0800777c 	.word	0x0800777c
 80009e4:	08007794 	.word	0x08007794
 80009e8:	0800779c 	.word	0x0800779c
 80009ec:	08007764 	.word	0x08007764
 80009f0:	080077ac 	.word	0x080077ac
 80009f4:	080077b8 	.word	0x080077b8
 80009f8:	080077bc 	.word	0x080077bc
 80009fc:	080077a0 	.word	0x080077a0
 8000a00:	080077a8 	.word	0x080077a8

08000a04 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a14:	88ba      	ldrh	r2, [r7, #4]
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4413      	add	r3, r2
 8000a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a1e:	dc09      	bgt.n	8000a34 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	3b02      	subs	r3, #2
 8000a24:	461a      	mov	r2, r3
 8000a26:	88b9      	ldrh	r1, [r7, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2009      	movs	r0, #9
 8000a2c:	f000 f83a 	bl	8000aa4 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e001      	b.n	8000a38 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	603a      	str	r2, [r7, #0]
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <dwt_writetxfctrl+0x3c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	059b      	lsls	r3, r3, #22
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	03db      	lsls	r3, r3, #15
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f000 f954 	bl	8000d1a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000000 	.word	0x20000000

08000a80 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000a90:	887a      	ldrh	r2, [r7, #2]
 8000a92:	8839      	ldrh	r1, [r7, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2011      	movs	r0, #17
 8000a98:	f000 f860 	bl	8000b5c <dwt_readfromdevice>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60ba      	str	r2, [r7, #8]
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	81fb      	strh	r3, [r7, #14]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10d      	bne.n	8000adc <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	1c59      	adds	r1, r3, #1
 8000ac8:	6179      	str	r1, [r7, #20]
 8000aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	f107 0118 	add.w	r1, r7, #24
 8000ad4:	440b      	add	r3, r1
 8000ad6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000ada:	e033      	b.n	8000b44 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	1c59      	adds	r1, r3, #1
 8000ae4:	6179      	str	r1, [r7, #20]
 8000ae6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	f107 0118 	add.w	r1, r7, #24
 8000af0:	440b      	add	r3, r1
 8000af2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	2b7f      	cmp	r3, #127	; 0x7f
 8000afa:	d80a      	bhi.n	8000b12 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	617a      	str	r2, [r7, #20]
 8000b02:	89ba      	ldrh	r2, [r7, #12]
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	f107 0118 	add.w	r1, r7, #24
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b10:	e018      	b.n	8000b44 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b12:	89bb      	ldrh	r3, [r7, #12]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	1c59      	adds	r1, r3, #1
 8000b1a:	6179      	str	r1, [r7, #20]
 8000b1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	f107 0118 	add.w	r1, r7, #24
 8000b26:	440b      	add	r3, r1
 8000b28:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000b2c:	89bb      	ldrh	r3, [r7, #12]
 8000b2e:	09db      	lsrs	r3, r3, #7
 8000b30:	b299      	uxth	r1, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	617a      	str	r2, [r7, #20]
 8000b38:	b2ca      	uxtb	r2, r1
 8000b3a:	f107 0118 	add.w	r1, r7, #24
 8000b3e:	440b      	add	r3, r1
 8000b40:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	b298      	uxth	r0, r3
 8000b48:	f107 0110 	add.w	r1, r7, #16
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f000 fb52 	bl	80011f8 <writetospi>
} // end dwt_writetodevice()
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60ba      	str	r2, [r7, #8]
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4603      	mov	r3, r0
 8000b68:	81fb      	strh	r3, [r7, #14]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b72:	89bb      	ldrh	r3, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10a      	bne.n	8000b8e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	617a      	str	r2, [r7, #20]
 8000b7e:	89fa      	ldrh	r2, [r7, #14]
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	f107 0118 	add.w	r1, r7, #24
 8000b86:	440b      	add	r3, r1
 8000b88:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b8c:	e033      	b.n	8000bf6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	1c59      	adds	r1, r3, #1
 8000b96:	6179      	str	r1, [r7, #20]
 8000b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	f107 0118 	add.w	r1, r7, #24
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000ba8:	89bb      	ldrh	r3, [r7, #12]
 8000baa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bac:	d80a      	bhi.n	8000bc4 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	617a      	str	r2, [r7, #20]
 8000bb4:	89ba      	ldrh	r2, [r7, #12]
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	f107 0118 	add.w	r1, r7, #24
 8000bbc:	440b      	add	r3, r1
 8000bbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bc2:	e018      	b.n	8000bf6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000bc4:	89bb      	ldrh	r3, [r7, #12]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	1c59      	adds	r1, r3, #1
 8000bcc:	6179      	str	r1, [r7, #20]
 8000bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	f107 0118 	add.w	r1, r7, #24
 8000bd8:	440b      	add	r3, r1
 8000bda:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bde:	89bb      	ldrh	r3, [r7, #12]
 8000be0:	09db      	lsrs	r3, r3, #7
 8000be2:	b299      	uxth	r1, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	617a      	str	r2, [r7, #20]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	f107 0118 	add.w	r1, r7, #24
 8000bf0:	440b      	add	r3, r1
 8000bf2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	b298      	uxth	r0, r3
 8000bfa:	f107 0110 	add.w	r1, r7, #16
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	f000 fb2d 	bl	8001260 <readfromspi>
} // end dwt_readfromdevice()
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	b298      	uxth	r0, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b299      	uxth	r1, r3
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2204      	movs	r2, #4
 8000c2a:	f7ff ff97 	bl	8000b5c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000c2e:	2303      	movs	r3, #3
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	e00b      	b.n	8000c4c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	f107 010c 	add.w	r1, r7, #12
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	440a      	add	r2, r1
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	daf0      	bge.n	8000c34 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000c52:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000c66:	2300      	movs	r3, #0
 8000c68:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b299      	uxth	r1, r3
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2202      	movs	r2, #2
 8000c78:	f7ff ff70 	bl	8000b5c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000c7c:	7b7b      	ldrb	r3, [r7, #13]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	021b      	lsls	r3, r3, #8
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000c8c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	f107 030f 	add.w	r3, r7, #15
 8000cac:	2201      	movs	r2, #1
 8000cae:	f7ff ff55 	bl	8000b5c <dwt_readfromdevice>

    return regval ;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	b299      	uxth	r1, r3
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f7ff fee5 	bl	8000aa4 <dwt_writetodevice>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	4613      	mov	r3, r2
 8000cee:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	b298      	uxth	r0, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	b299      	uxth	r1, r3
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	f7ff fec9 	bl	8000aa4 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e00d      	b.n	8000d48 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	b2d9      	uxtb	r1, r3
 8000d30:	f107 0210 	add.w	r2, r7, #16
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	4413      	add	r3, r2
 8000d38:	460a      	mov	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	ddee      	ble.n	8000d2c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	b298      	uxth	r0, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	b299      	uxth	r1, r3
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	f7ff fea2 	bl	8000aa4 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	461a      	mov	r2, r3
 8000d76:	2104      	movs	r1, #4
 8000d78:	202d      	movs	r0, #45	; 0x2d
 8000d7a:	f7ff ffb2 	bl	8000ce2 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000d7e:	2203      	movs	r2, #3
 8000d80:	2106      	movs	r1, #6
 8000d82:	202d      	movs	r0, #45	; 0x2d
 8000d84:	f7ff ff9a 	bl	8000cbc <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2106      	movs	r1, #6
 8000d8c:	202d      	movs	r0, #45	; 0x2d
 8000d8e:	f7ff ff95 	bl	8000cbc <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000d92:	210a      	movs	r1, #10
 8000d94:	202d      	movs	r0, #45	; 0x2d
 8000d96:	f7ff ff3a 	bl	8000c0e <dwt_read32bitoffsetreg>
 8000d9a:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000daa:	2200      	movs	r2, #0
 8000dac:	2102      	movs	r1, #2
 8000dae:	202c      	movs	r0, #44	; 0x2c
 8000db0:	f7ff ff84 	bl	8000cbc <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000db4:	2202      	movs	r2, #2
 8000db6:	2102      	movs	r1, #2
 8000db8:	202c      	movs	r0, #44	; 0x2c
 8000dba:	f7ff ff7f 	bl	8000cbc <dwt_write8bitoffsetreg>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000dca:	226d      	movs	r2, #109	; 0x6d
 8000dcc:	f640 0106 	movw	r1, #2054	; 0x806
 8000dd0:	202e      	movs	r0, #46	; 0x2e
 8000dd2:	f7ff ff73 	bl	8000cbc <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d007      	beq.n	8000dec <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000ddc:	f240 6207 	movw	r2, #1543	; 0x607
 8000de0:	f641 0106 	movw	r1, #6150	; 0x1806
 8000de4:	202e      	movs	r0, #46	; 0x2e
 8000de6:	f7ff ff7c 	bl	8000ce2 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000dea:	e006      	b.n	8000dfa <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000dec:	f241 6207 	movw	r2, #5639	; 0x1607
 8000df0:	f641 0106 	movw	r1, #6150	; 0x1806
 8000df4:	202e      	movs	r0, #46	; 0x2e
 8000df6:	f7ff ff74 	bl	8000ce2 <dwt_write16bitoffsetreg>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000e06:	200e      	movs	r0, #14
 8000e08:	f000 f80e 	bl	8000e28 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000e0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e10:	2106      	movs	r1, #6
 8000e12:	202d      	movs	r0, #45	; 0x2d
 8000e14:	f7ff ff65 	bl	8000ce2 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 f9e1 	bl	80011e0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 f802 	bl	8000e28 <_dwt_enableclocks>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2202      	movs	r2, #2
 8000e36:	2100      	movs	r1, #0
 8000e38:	2036      	movs	r0, #54	; 0x36
 8000e3a:	f7ff fe8f 	bl	8000b5c <dwt_readfromdevice>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0e      	cmp	r3, #14
 8000e42:	d876      	bhi.n	8000f32 <_dwt_enableclocks+0x10a>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <_dwt_enableclocks+0x24>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e99 	.word	0x08000e99
 8000e50:	08000e89 	.word	0x08000e89
 8000e54:	08000eaf 	.word	0x08000eaf
 8000e58:	08000f33 	.word	0x08000f33
 8000e5c:	08000f33 	.word	0x08000f33
 8000e60:	08000f33 	.word	0x08000f33
 8000e64:	08000f33 	.word	0x08000f33
 8000e68:	08000ec5 	.word	0x08000ec5
 8000e6c:	08000ee5 	.word	0x08000ee5
 8000e70:	08000f33 	.word	0x08000f33
 8000e74:	08000f33 	.word	0x08000f33
 8000e78:	08000efb 	.word	0x08000efb
 8000e7c:	08000f07 	.word	0x08000f07
 8000e80:	08000f13 	.word	0x08000f13
 8000e84:	08000f29 	.word	0x08000f29
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e96:	e04d      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000e98:	7b3b      	ldrb	r3, [r7, #12]
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	f023 0303 	bic.w	r3, r3, #3
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000eac:	e042      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000eae:	7b3b      	ldrb	r3, [r7, #12]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000ec2:	e037      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000ec4:	7b3b      	ldrb	r3, [r7, #12]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000ed8:	7b7b      	ldrb	r3, [r7, #13]
 8000eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ee2:	e027      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000ee4:	7b3b      	ldrb	r3, [r7, #12]
 8000ee6:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000eee:	7b7b      	ldrb	r3, [r7, #13]
 8000ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ef8:	e01c      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f04:	e016      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	f023 0302 	bic.w	r3, r3, #2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f10:	e010      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000f12:	7b3b      	ldrb	r3, [r7, #12]
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f26:	e005      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f30:	e000      	b.n	8000f34 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000f32:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2036      	movs	r0, #54	; 0x36
 8000f3e:	f7ff fdb1 	bl	8000aa4 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	3301      	adds	r3, #1
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2036      	movs	r0, #54	; 0x36
 8000f4e:	f7ff fda9 	bl	8000aa4 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop

08000f5c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ff61 	bl	8000e28 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000f66:	2200      	movs	r2, #0
 8000f68:	2104      	movs	r1, #4
 8000f6a:	2036      	movs	r0, #54	; 0x36
 8000f6c:	f7ff feb9 	bl	8000ce2 <dwt_write16bitoffsetreg>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8000f86:	2300      	movs	r3, #0
 8000f88:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <dwt_starttx+0x98>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d020      	beq.n	8000fec <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8000faa:	7afb      	ldrb	r3, [r7, #11]
 8000fac:	f043 0306 	orr.w	r3, r3, #6
 8000fb0:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	200d      	movs	r0, #13
 8000fba:	f7ff fe7f 	bl	8000cbc <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	f7ff fe4b 	bl	8000c5c <dwt_read16bitoffsetreg>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8000fca:	893b      	ldrh	r3, [r7, #8]
 8000fcc:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e012      	b.n	8001000 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200d      	movs	r0, #13
 8000fe0:	f7ff fe6c 	bl	8000cbc <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e009      	b.n	8001000 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8000fec:	7afb      	ldrb	r3, [r7, #11]
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200d      	movs	r0, #13
 8000ffc:	f7ff fe5e 	bl	8000cbc <dwt_write8bitoffsetreg>
    }

    return retval;
 8001000:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000

08001010 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001016:	2100      	movs	r1, #0
 8001018:	200e      	movs	r0, #14
 800101a:	f7ff fdf8 	bl	8000c0e <dwt_read32bitoffsetreg>
 800101e:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001020:	f000 f8c0 	bl	80011a4 <decamutexon>
 8001024:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	200e      	movs	r0, #14
 800102c:	f7ff fe75 	bl	8000d1a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001030:	2240      	movs	r2, #64	; 0x40
 8001032:	2100      	movs	r1, #0
 8001034:	200d      	movs	r0, #13
 8001036:	f7ff fe41 	bl	8000cbc <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <dwt_forcetrxoff+0x58>)
 800103c:	2100      	movs	r1, #0
 800103e:	200f      	movs	r0, #15
 8001040:	f7ff fe6b 	bl	8000d1a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001044:	f000 f814 	bl	8001070 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	2100      	movs	r1, #0
 800104c:	200e      	movs	r0, #14
 800104e:	f7ff fe64 	bl	8000d1a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001052:	6838      	ldr	r0, [r7, #0]
 8001054:	f000 f8b7 	bl	80011c6 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <dwt_forcetrxoff+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2427fff8 	.word	0x2427fff8
 800106c:	20000000 	.word	0x20000000

08001070 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001076:	2103      	movs	r1, #3
 8001078:	200f      	movs	r0, #15
 800107a:	f7ff fe0c 	bl	8000c96 <dwt_read8bitoffsetreg>
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001082:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001088:	4053      	eors	r3, r2
 800108a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001092:	2201      	movs	r2, #1
 8001094:	2103      	movs	r1, #3
 8001096:	200d      	movs	r0, #13
 8001098:	f7ff fe10 	bl	8000cbc <dwt_write8bitoffsetreg>
    }
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 80010b6:	f7ff ffdb 	bl	8001070 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 80010ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010be:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d0:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010d2:	89fb      	ldrh	r3, [r7, #14]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	200d      	movs	r0, #13
 80010da:	f7ff fe02 	bl	8000ce2 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d01a      	beq.n	800111e <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80010e8:	2103      	movs	r1, #3
 80010ea:	200f      	movs	r0, #15
 80010ec:	f7ff fdd3 	bl	8000c96 <dwt_read8bitoffsetreg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00f      	beq.n	800111e <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80010fe:	f7ff ff87 	bl	8001010 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d105      	bne.n	8001118 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	2100      	movs	r1, #0
 8001112:	200d      	movs	r0, #13
 8001114:	f7ff fde5 	bl	8000ce2 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	e000      	b.n	8001120 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 800111e:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 800112c:	f7ff ff16 	bl	8000f5c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	202c      	movs	r0, #44	; 0x2c
 8001136:	f7ff fdd4 	bl	8000ce2 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800113a:	2200      	movs	r2, #0
 800113c:	2106      	movs	r1, #6
 800113e:	202c      	movs	r0, #44	; 0x2c
 8001140:	f7ff fdbc 	bl	8000cbc <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001144:	f7ff fe2f 	bl	8000da6 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001148:	2200      	movs	r2, #0
 800114a:	2103      	movs	r1, #3
 800114c:	2036      	movs	r0, #54	; 0x36
 800114e:	f7ff fdb5 	bl	8000cbc <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 f844 	bl	80011e0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001158:	22f0      	movs	r2, #240	; 0xf0
 800115a:	2103      	movs	r1, #3
 800115c:	2036      	movs	r0, #54	; 0x36
 800115e:	f7ff fdad 	bl	8000cbc <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001162:	4b03      	ldr	r3, [pc, #12]	; (8001170 <dwt_softreset+0x48>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2200      	movs	r2, #0
 8001168:	755a      	strb	r2, [r3, #21]
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000

08001174 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	b25b      	sxtb	r3, r3
 8001188:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800118c:	b25b      	sxtb	r3, r3
 800118e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	461a      	mov	r2, r3
 8001194:	210e      	movs	r1, #14
 8001196:	202b      	movs	r0, #43	; 0x2b
 8001198:	f7ff fd90 	bl	8000cbc <dwt_write8bitoffsetreg>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80011aa:	f000 f98d 	bl	80014c8 <port_GetEXT_IRQStatus>
 80011ae:	4603      	mov	r3, r0
 80011b0:	607b      	str	r3, [r7, #4]

	if(s) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80011b8:	f000 f978 	bl	80014ac <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80011d4:	f000 f971 	bl	80014ba <port_EnableEXT_IRQ>
	}
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8c3 	bl	8001374 <Sleep>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80011f8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80011fc:	4683      	mov	fp, r0
 80011fe:	468a      	mov	sl, r1
 8001200:	4691      	mov	r9, r2
 8001202:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001204:	f7ff ffce 	bl	80011a4 <decamutexon>
 8001208:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800120a:	4d13      	ldr	r5, [pc, #76]	; (8001258 <writetospi+0x60>)
 800120c:	4628      	mov	r0, r5
 800120e:	f004 fe98 	bl	8005f42 <HAL_SPI_GetState>
 8001212:	2801      	cmp	r0, #1
 8001214:	4604      	mov	r4, r0
 8001216:	d1f9      	bne.n	800120c <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001218:	2200      	movs	r2, #0
 800121a:	2140      	movs	r1, #64	; 0x40
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <writetospi+0x64>)
 800121e:	f001 fc49 	bl	8002ab4 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001222:	465a      	mov	r2, fp
 8001224:	4651      	mov	r1, sl
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <writetospi+0x60>)
 800122c:	f004 fc3d 	bl	8005aaa <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	4641      	mov	r1, r8
 8001236:	fa1f f289 	uxth.w	r2, r9
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <writetospi+0x60>)
 800123c:	f004 fc35 	bl	8005aaa <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001240:	4622      	mov	r2, r4
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <writetospi+0x64>)
 8001246:	f001 fc35 	bl	8002ab4 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800124a:	4630      	mov	r0, r6
 800124c:	f7ff ffbb 	bl	80011c6 <decamutexoff>

    return 0;
} // end writetospi()
 8001250:	2000      	movs	r0, #0
 8001252:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001256:	bf00      	nop
 8001258:	200005f8 	.word	0x200005f8
 800125c:	40020400 	.word	0x40020400

08001260 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001260:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001264:	4681      	mov	r9, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4690      	mov	r8, r2
 800126a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800126c:	f7ff ff9a 	bl	80011a4 <decamutexon>
 8001270:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001272:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80012f0 <readfromspi+0x90>
 8001276:	4650      	mov	r0, sl
 8001278:	f004 fe63 	bl	8005f42 <HAL_SPI_GetState>
 800127c:	2801      	cmp	r0, #1
 800127e:	d1fa      	bne.n	8001276 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001280:	2200      	movs	r2, #0
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4819      	ldr	r0, [pc, #100]	; (80012ec <readfromspi+0x8c>)
 8001286:	f001 fc15 	bl	8002ab4 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800128a:	f1b9 0f00 	cmp.w	r9, #0
 800128e:	d00c      	beq.n	80012aa <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001290:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80012f0 <readfromspi+0x90>
 8001294:	44a1      	add	r9, r4
 8001296:	2201      	movs	r2, #1
 8001298:	4621      	mov	r1, r4
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	4414      	add	r4, r2
 80012a0:	4650      	mov	r0, sl
 80012a2:	f004 fc02 	bl	8005aaa <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80012a6:	454c      	cmp	r4, r9
 80012a8:	d1f5      	bne.n	8001296 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80012aa:	f1b8 0f00 	cmp.w	r8, #0
 80012ae:	d012      	beq.n	80012d6 <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012b0:	2400      	movs	r4, #0
 80012b2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80012f0 <readfromspi+0x90>
 80012b6:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80012ba:	f8dc 2000 	ldr.w	r2, [ip]
 80012be:	6891      	ldr	r1, [r2, #8]
 80012c0:	0789      	lsls	r1, r1, #30
 80012c2:	d5fc      	bpl.n	80012be <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012c4:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80012c6:	6891      	ldr	r1, [r2, #8]
 80012c8:	07cb      	lsls	r3, r1, #31
 80012ca:	d5fc      	bpl.n	80012c6 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80012cc:	68d3      	ldr	r3, [r2, #12]
 80012ce:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80012d2:	4285      	cmp	r5, r0
 80012d4:	d1f1      	bne.n	80012ba <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012d6:	2201      	movs	r2, #1
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <readfromspi+0x8c>)
 80012dc:	f001 fbea 	bl	8002ab4 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012e0:	4630      	mov	r0, r6
 80012e2:	f7ff ff70 	bl	80011c6 <decamutexoff>

    return 0;
} // end readfromspi()
 80012e6:	2000      	movs	r0, #0
 80012e8:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80012ec:	40020400 	.word	0x40020400
 80012f0:	200005f8 	.word	0x200005f8

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <__NVIC_EnableIRQ+0x34>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db12      	blt.n	8001364 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	490a      	ldr	r1, [pc, #40]	; (8001370 <__NVIC_DisableIRQ+0x44>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	3320      	adds	r3, #32
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001358:	f3bf 8f4f 	dsb	sy
}
 800135c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800135e:	f3bf 8f6f 	isb	sy
}
 8001362:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f001 f81d 	bl	80023bc <HAL_Delay>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <EXTI_GetITEnStatus+0x34>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80013ca:	2301      	movs	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ce:	2311      	movs	r3, #17
 80013d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <reset_DW1000+0x40>)
 80013dc:	f001 f9da 	bl	8002794 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2101      	movs	r1, #1
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <reset_DW1000+0x40>)
 80013e6:	f001 fb65 	bl	8002ab4 <HAL_GPIO_WritePin>

    Sleep(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff ffc2 	bl	8001374 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 f809 	bl	8001408 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff ffbc 	bl	8001374 <Sleep>
}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40020000 	.word	0x40020000

08001408 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001416:	2301      	movs	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800141e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4813      	ldr	r0, [pc, #76]	; (8001478 <setup_DW1000RSTnIRQ+0x70>)
 800142c:	f001 f9b2 	bl	8002794 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001430:	2006      	movs	r0, #6
 8001432:	f001 f8fc 	bl	800262e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	2006      	movs	r0, #6
 800143c:	f001 f8db 	bl	80025f6 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001440:	e015      	b.n	800146e <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001442:	2006      	movs	r0, #6
 8001444:	f001 f901 	bl	800264a <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001448:	2301      	movs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800144c:	2311      	movs	r3, #17
 800144e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <setup_DW1000RSTnIRQ+0x70>)
 8001460:	f001 f998 	bl	8002794 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2101      	movs	r1, #1
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <setup_DW1000RSTnIRQ+0x70>)
 800146a:	f001 fb23 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000

0800147c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <port_set_dw1000_slowrate+0x14>)
 8001482:	2220      	movs	r2, #32
 8001484:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001486:	4802      	ldr	r0, [pc, #8]	; (8001490 <port_set_dw1000_slowrate+0x14>)
 8001488:	f004 fa86 	bl	8005998 <HAL_SPI_Init>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200005f8 	.word	0x200005f8

08001494 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <port_set_dw1000_fastrate+0x14>)
 800149a:	2208      	movs	r2, #8
 800149c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800149e:	4802      	ldr	r0, [pc, #8]	; (80014a8 <port_set_dw1000_fastrate+0x14>)
 80014a0:	f004 fa7a 	bl	8005998 <HAL_SPI_Init>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200005f8 	.word	0x200005f8

080014ac <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80014b0:	2017      	movs	r0, #23
 80014b2:	f7ff ff3b 	bl	800132c <__NVIC_DisableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80014be:	2017      	movs	r0, #23
 80014c0:	f7ff ff18 	bl	80012f4 <__NVIC_EnableIRQ>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80014cc:	2017      	movs	r0, #23
 80014ce:	f7ff ff5d 	bl	800138c <EXTI_GetITEnStatus>
 80014d2:	4603      	mov	r3, r0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014de:	f000 fa27 	bl	8001930 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014e6:	2201      	movs	r2, #1
 80014e8:	2178      	movs	r1, #120	; 0x78
 80014ea:	485b      	ldr	r0, [pc, #364]	; (8001658 <SSD1306_Init+0x180>)
 80014ec:	f001 fd50 	bl	8002f90 <HAL_I2C_IsDeviceReady>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e0a9      	b.n	800164e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001500:	e002      	b.n	8001508 <SSD1306_Init+0x30>
		p--;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3b01      	subs	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f9      	bne.n	8001502 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800150e:	22ae      	movs	r2, #174	; 0xae
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	; 0x78
 8001514:	f000 fa68 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001518:	2220      	movs	r2, #32
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	; 0x78
 800151e:	f000 fa63 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001522:	2210      	movs	r2, #16
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	; 0x78
 8001528:	f000 fa5e 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800152c:	22b0      	movs	r2, #176	; 0xb0
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	; 0x78
 8001532:	f000 fa59 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001536:	22c8      	movs	r2, #200	; 0xc8
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fa54 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	; 0x78
 8001546:	f000 fa4f 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800154a:	2210      	movs	r2, #16
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fa4a 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001554:	2240      	movs	r2, #64	; 0x40
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fa45 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800155e:	2281      	movs	r2, #129	; 0x81
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fa40 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001568:	22ff      	movs	r2, #255	; 0xff
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fa3b 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001572:	22a1      	movs	r2, #161	; 0xa1
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fa36 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800157c:	22a6      	movs	r2, #166	; 0xa6
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fa31 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001586:	22a8      	movs	r2, #168	; 0xa8
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fa2c 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001590:	223f      	movs	r2, #63	; 0x3f
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fa27 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800159a:	22a4      	movs	r2, #164	; 0xa4
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fa22 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015a4:	22d3      	movs	r2, #211	; 0xd3
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa1d 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa18 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015b8:	22d5      	movs	r2, #213	; 0xd5
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa13 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015c2:	22f0      	movs	r2, #240	; 0xf0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa0e 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015cc:	22d9      	movs	r2, #217	; 0xd9
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa09 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015d6:	2222      	movs	r2, #34	; 0x22
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fa04 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015e0:	22da      	movs	r2, #218	; 0xda
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 f9ff 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015ea:	2212      	movs	r2, #18
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 f9fa 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015f4:	22db      	movs	r2, #219	; 0xdb
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 f9f5 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 f9f0 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001608:	228d      	movs	r2, #141	; 0x8d
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f000 f9eb 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001612:	2214      	movs	r2, #20
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 f9e6 	bl	80019e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800161c:	22af      	movs	r2, #175	; 0xaf
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 f9e1 	bl	80019e8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001626:	222e      	movs	r2, #46	; 0x2e
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 f9dc 	bl	80019e8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f843 	bl	80016bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001636:	f000 f813 	bl	8001660 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <SSD1306_Init+0x184>)
 800163c:	2200      	movs	r2, #0
 800163e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SSD1306_Init+0x184>)
 8001642:	2200      	movs	r2, #0
 8001644:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <SSD1306_Init+0x184>)
 8001648:	2201      	movs	r2, #1
 800164a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200005a4 	.word	0x200005a4
 800165c:	20000508 	.word	0x20000508

08001660 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e01d      	b.n	80016a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3b50      	subs	r3, #80	; 0x50
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	2100      	movs	r1, #0
 8001676:	2078      	movs	r0, #120	; 0x78
 8001678:	f000 f9b6 	bl	80019e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2078      	movs	r0, #120	; 0x78
 8001682:	f000 f9b1 	bl	80019e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001686:	2210      	movs	r2, #16
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	; 0x78
 800168c:	f000 f9ac 	bl	80019e8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <SSD1306_UpdateScreen+0x58>)
 8001696:	441a      	add	r2, r3
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	2078      	movs	r0, #120	; 0x78
 800169e:	f000 f95b 	bl	8001958 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	3301      	adds	r3, #1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	d9de      	bls.n	800166c <SSD1306_UpdateScreen+0xc>
	}
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000108 	.word	0x20000108

080016bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <SSD1306_Fill+0x14>
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <SSD1306_Fill+0x16>
 80016d0:	23ff      	movs	r3, #255	; 0xff
 80016d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d6:	4619      	mov	r1, r3
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <SSD1306_Fill+0x2c>)
 80016da:	f005 fbc1 	bl	8006e60 <memset>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000108 	.word	0x20000108

080016ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	460b      	mov	r3, r1
 80016f8:	80bb      	strh	r3, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	70fb      	strb	r3, [r7, #3]
	if (
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2b7f      	cmp	r3, #127	; 0x7f
 8001702:	d848      	bhi.n	8001796 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	2b3f      	cmp	r3, #63	; 0x3f
 8001708:	d845      	bhi.n	8001796 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <SSD1306_DrawPixel+0xb4>)
 800170c:	791b      	ldrb	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d11a      	bne.n	800175c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	b298      	uxth	r0, r3
 800172e:	4603      	mov	r3, r0
 8001730:	01db      	lsls	r3, r3, #7
 8001732:	4413      	add	r3, r2
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <SSD1306_DrawPixel+0xb8>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	b25a      	sxtb	r2, r3
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b259      	sxtb	r1, r3
 800174c:	88fa      	ldrh	r2, [r7, #6]
 800174e:	4603      	mov	r3, r0
 8001750:	01db      	lsls	r3, r3, #7
 8001752:	4413      	add	r3, r2
 8001754:	b2c9      	uxtb	r1, r1
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <SSD1306_DrawPixel+0xb8>)
 8001758:	54d1      	strb	r1, [r2, r3]
 800175a:	e01d      	b.n	8001798 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	b298      	uxth	r0, r3
 8001764:	4603      	mov	r3, r0
 8001766:	01db      	lsls	r3, r3, #7
 8001768:	4413      	add	r3, r2
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <SSD1306_DrawPixel+0xb8>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	b25a      	sxtb	r2, r3
 8001770:	88bb      	ldrh	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	2101      	movs	r1, #1
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	b25b      	sxtb	r3, r3
 8001782:	4013      	ands	r3, r2
 8001784:	b259      	sxtb	r1, r3
 8001786:	88fa      	ldrh	r2, [r7, #6]
 8001788:	4603      	mov	r3, r0
 800178a:	01db      	lsls	r3, r3, #7
 800178c:	4413      	add	r3, r2
 800178e:	b2c9      	uxtb	r1, r1
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <SSD1306_DrawPixel+0xb8>)
 8001792:	54d1      	strb	r1, [r2, r3]
 8001794:	e000      	b.n	8001798 <SSD1306_DrawPixel+0xac>
		return;
 8001796:	bf00      	nop
	}
}
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000508 	.word	0x20000508
 80017a4:	20000108 	.word	0x20000108

080017a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	460a      	mov	r2, r1
 80017b2:	80fb      	strh	r3, [r7, #6]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SSD1306_GotoXY+0x28>)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <SSD1306_GotoXY+0x28>)
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	8053      	strh	r3, [r2, #2]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000508 	.word	0x20000508

080017d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
 80017e0:	4613      	mov	r3, r2
 80017e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <SSD1306_Putc+0xfc>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
	if (
 80017f0:	2b7f      	cmp	r3, #127	; 0x7f
 80017f2:	dc07      	bgt.n	8001804 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <SSD1306_Putc+0xfc>)
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	461a      	mov	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001800:	2b3f      	cmp	r3, #63	; 0x3f
 8001802:	dd01      	ble.n	8001808 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001804:	2300      	movs	r3, #0
 8001806:	e05e      	b.n	80018c6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e04b      	b.n	80018a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	3b20      	subs	r3, #32
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	7849      	ldrb	r1, [r1, #1]
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4619      	mov	r1, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	440b      	add	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e030      	b.n	8001894 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b298      	uxth	r0, r3
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001850:	885a      	ldrh	r2, [r3, #2]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	79ba      	ldrb	r2, [r7, #6]
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff ff45 	bl	80016ec <SSD1306_DrawPixel>
 8001862:	e014      	b.n	800188e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b298      	uxth	r0, r3
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001872:	885a      	ldrh	r2, [r3, #2]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b299      	uxth	r1, r3
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	f7ff ff2f 	bl	80016ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	3301      	adds	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4293      	cmp	r3, r2
 800189e:	d3c8      	bcc.n	8001832 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	461a      	mov	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d3ad      	bcc.n	800180e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <SSD1306_Putc+0xfc>)
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <SSD1306_Putc+0xfc>)
 80018c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000508 	.word	0x20000508

080018d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018e2:	e012      	b.n	800190a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	79fa      	ldrb	r2, [r7, #7]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff71 	bl	80017d4 <SSD1306_Putc>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d002      	beq.n	8001904 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	e008      	b.n	8001916 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e8      	bne.n	80018e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff feca 	bl	80016bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001928:	f7ff fe9a 	bl	8001660 <SSD1306_UpdateScreen>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <ssd1306_I2C_Init+0x24>)
 8001938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800193a:	e002      	b.n	8001942 <ssd1306_I2C_Init+0x12>
		p--;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	0003d090 	.word	0x0003d090

08001958 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b0c7      	sub	sp, #284	; 0x11c
 800195c:	af02      	add	r7, sp, #8
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	4639      	mov	r1, r7
 8001964:	600a      	str	r2, [r1, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	4622      	mov	r2, r4
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	1dbb      	adds	r3, r7, #6
 8001970:	4602      	mov	r2, r0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	460a      	mov	r2, r1
 8001978:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	1dba      	adds	r2, r7, #6
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001984:	2300      	movs	r3, #0
 8001986:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800198a:	e010      	b.n	80019ae <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800198c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001990:	463a      	mov	r2, r7
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	441a      	add	r2, r3
 8001996:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800199a:	3301      	adds	r3, #1
 800199c:	7811      	ldrb	r1, [r2, #0]
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019a8:	3301      	adds	r3, #1
 80019aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	1d3a      	adds	r2, r7, #4
 80019b6:	8812      	ldrh	r2, [r2, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8e7      	bhi.n	800198c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b299      	uxth	r1, r3
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f107 020c 	add.w	r2, r7, #12
 80019ce:	200a      	movs	r0, #10
 80019d0:	9000      	str	r0, [sp, #0]
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <ssd1306_I2C_WriteMulti+0x8c>)
 80019d4:	f001 f9de 	bl	8002d94 <HAL_I2C_Master_Transmit>
}
 80019d8:	bf00      	nop
 80019da:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200005a4 	.word	0x200005a4

080019e8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	460b      	mov	r3, r1
 80019f4:	71bb      	strb	r3, [r7, #6]
 80019f6:	4613      	mov	r3, r2
 80019f8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019fe:	797b      	ldrb	r3, [r7, #5]
 8001a00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	b299      	uxth	r1, r3
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2302      	movs	r3, #2
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <ssd1306_I2C_Write+0x38>)
 8001a12:	f001 f9bf 	bl	8002d94 <HAL_I2C_Master_Transmit>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200005a4 	.word	0x200005a4

08001a24 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1d39      	adds	r1, r7, #4
 8001a36:	2201      	movs	r2, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff4b 	bl	80018d4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a3e:	f7ff fe0f 	bl	8001660 <SSD1306_UpdateScreen>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a80:	f043 0320 	orr.w	r3, r3, #32
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_GPIO_Init+0xe4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	481b      	ldr	r0, [pc, #108]	; (8001b34 <MX_GPIO_Init+0xe8>)
 8001ac8:	f000 fff4 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2140      	movs	r1, #64	; 0x40
 8001ad0:	4819      	ldr	r0, [pc, #100]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001ad2:	f000 ffef 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4811      	ldr	r0, [pc, #68]	; (8001b34 <MX_GPIO_Init+0xe8>)
 8001aee:	f000 fe51 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	480b      	ldr	r0, [pc, #44]	; (8001b34 <MX_GPIO_Init+0xe8>)
 8001b08:	f000 fe44 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001b24:	f000 fe36 	bl	8002794 <HAL_GPIO_Init>

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400

08001b3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <MX_I2C1_Init+0x54>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_I2C1_Init+0x58>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b7a:	f000 ffb3 	bl	8002ae4 <HAL_I2C_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b84:	f000 f8b6 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200005a4 	.word	0x200005a4
 8001b90:	40005400 	.word	0x40005400
 8001b94:	00061a80 	.word	0x00061a80

08001b98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_I2C_MspInit+0x8c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d130      	bne.n	8001c1c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_I2C_MspInit+0x90>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_I2C_MspInit+0x90>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_I2C_MspInit+0x90>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	480f      	ldr	r0, [pc, #60]	; (8001c2c <HAL_I2C_MspInit+0x94>)
 8001bf0:	f000 fdd0 	bl	8002794 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_I2C_MspInit+0x90>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_I2C_MspInit+0x90>)
 8001bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfe:	6253      	str	r3, [r2, #36]	; 0x24
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_I2C_MspInit+0x90>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201f      	movs	r0, #31
 8001c12:	f000 fcf0 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c16:	201f      	movs	r0, #31
 8001c18:	f000 fd09 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40005400 	.word	0x40005400
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020400 	.word	0x40020400

08001c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c34:	f000 fb53 	bl	80022de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c38:	f000 f80e 	bl	8001c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3c:	f7ff ff06 	bl	8001a4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c40:	f000 f97e 	bl	8001f40 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c44:	f000 fab0 	bl	80021a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c48:	f7ff ff78 	bl	8001b3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001c4c:	f7ff fc44 	bl	80014d8 <SSD1306_Init>

//TestLines(1);

  dw_main();
 8001c50:	f000 f856 	bl	8001d00 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <main+0x24>
	...

08001c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b092      	sub	sp, #72	; 0x48
 8001c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	2234      	movs	r2, #52	; 0x34
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f005 f8fa 	bl	8006e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <SystemClock_Config+0x98>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <SystemClock_Config+0x98>)
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c88:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c92:	2310      	movs	r3, #16
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c96:	2302      	movs	r3, #2
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001ca4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 f8ae 	bl	8004e10 <HAL_RCC_OscConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cba:	f000 f81b 	bl	8001cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fbca 	bl	8005470 <HAL_RCC_ClockConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ce2:	f000 f807 	bl	8001cf4 <Error_Handler>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3748      	adds	r7, #72	; 0x48
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <Error_Handler+0x8>
	...

08001d00 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	int le6n = strlen(buff);
 8001d06:	487d      	ldr	r0, [pc, #500]	; (8001efc <dw_main+0x1fc>)
 8001d08:	f7fe fa38 	bl	800017c <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	603b      	str	r3, [r7, #0]
    /* Display application name on LCD. */
	HAL_UART_Transmit(&huart2,buff, strlen(buff), 100);
 8001d10:	487a      	ldr	r0, [pc, #488]	; (8001efc <dw_main+0x1fc>)
 8001d12:	f7fe fa33 	bl	800017c <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	2364      	movs	r3, #100	; 0x64
 8001d1c:	4977      	ldr	r1, [pc, #476]	; (8001efc <dw_main+0x1fc>)
 8001d1e:	4878      	ldr	r0, [pc, #480]	; (8001f00 <dw_main+0x200>)
 8001d20:	f004 fa4a 	bl	80061b8 <HAL_UART_Transmit>
	ssd1306_write(buff, Font_7x10);
 8001d24:	4875      	ldr	r0, [pc, #468]	; (8001efc <dw_main+0x1fc>)
 8001d26:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <dw_main+0x204>)
 8001d28:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d2c:	f7ff fe7a 	bl	8001a24 <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001d30:	f7ff fb48 	bl	80013c4 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001d34:	f7ff fba2 	bl	800147c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7fe fba3 	bl	8000484 <dwt_initialise>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d110      	bne.n	8001d68 <dw_main+0x68>
    {
    	HAL_UART_Transmit(&huart2,"Init failed!!!\n", 16, 100);
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	2210      	movs	r2, #16
 8001d4a:	496f      	ldr	r1, [pc, #444]	; (8001f08 <dw_main+0x208>)
 8001d4c:	486c      	ldr	r0, [pc, #432]	; (8001f00 <dw_main+0x200>)
 8001d4e:	f004 fa33 	bl	80061b8 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10);
 8001d52:	210a      	movs	r1, #10
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fd27 	bl	80017a8 <SSD1306_GotoXY>
    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001d5a:	486c      	ldr	r0, [pc, #432]	; (8001f0c <dw_main+0x20c>)
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <dw_main+0x204>)
 8001d5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d62:	f7ff fe5f 	bl	8001a24 <ssd1306_write>

        while (1)
 8001d66:	e7fe      	b.n	8001d66 <dw_main+0x66>
        { };
    }
    port_set_dw1000_fastrate();
 8001d68:	f7ff fb94 	bl	8001494 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 8001d6c:	4868      	ldr	r0, [pc, #416]	; (8001f10 <dw_main+0x210>)
 8001d6e:	f7fe fcdf 	bl	8000730 <dwt_configure>

    /* Loop forever sending and receiving frames periodically. */
    while (1)
    {
    	SSD1306_Clear ();
 8001d72:	f7ff fdd4 	bl	800191e <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8001d76:	2100      	movs	r1, #0
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fd15 	bl	80017a8 <SSD1306_GotoXY>
 8001d7e:	4865      	ldr	r0, [pc, #404]	; (8001f14 <dw_main+0x214>)
 8001d80:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <dw_main+0x204>)
 8001d82:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d86:	f7ff fe4d 	bl	8001a24 <ssd1306_write>
    	SSD1306_GotoXY(0, 30);  ssd1306_write("Transmitted :", Font_7x10);
 8001d8a:	211e      	movs	r1, #30
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fd0b 	bl	80017a8 <SSD1306_GotoXY>
 8001d92:	4861      	ldr	r0, [pc, #388]	; (8001f18 <dw_main+0x218>)
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <dw_main+0x204>)
 8001d96:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d9a:	f7ff fe43 	bl	8001a24 <ssd1306_write>
        /* Activate reception immediately. See NOTE 4 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff f980 	bl	80010a4 <dwt_rxenable>

        /* Poll until a frame is properly received or an error occurs. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the events we are looking at are in the lower bytes of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001da4:	bf00      	nop
 8001da6:	2100      	movs	r1, #0
 8001da8:	200f      	movs	r0, #15
 8001daa:	f7fe ff30 	bl	8000c0e <dwt_read32bitoffsetreg>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <dw_main+0x21c>)
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <dw_main+0x21c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <dw_main+0x220>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f2      	beq.n	8001da6 <dw_main+0xa6>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001dc0:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <dw_main+0x21c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8091 	beq.w	8001ef0 <dw_main+0x1f0>
        {
            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2010      	movs	r0, #16
 8001dd2:	f7fe ff1c 	bl	8000c0e <dwt_read32bitoffsetreg>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <dw_main+0x224>)
 8001de2:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <dw_main+0x224>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dea:	d806      	bhi.n	8001dfa <dw_main+0xfa>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <dw_main+0x224>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	484c      	ldr	r0, [pc, #304]	; (8001f28 <dw_main+0x228>)
 8001df6:	f7fe fe43 	bl	8000a80 <dwt_readrxdata>
            }
            sprintf(buff, "Received : %s\n", rx_buffer);
 8001dfa:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <dw_main+0x228>)
 8001dfc:	494b      	ldr	r1, [pc, #300]	; (8001f2c <dw_main+0x22c>)
 8001dfe:	483f      	ldr	r0, [pc, #252]	; (8001efc <dw_main+0x1fc>)
 8001e00:	f005 f836 	bl	8006e70 <siprintf>
            HAL_UART_Transmit(&huart2,buff, sizeof(buff), 100);
 8001e04:	2364      	movs	r3, #100	; 0x64
 8001e06:	2211      	movs	r2, #17
 8001e08:	493c      	ldr	r1, [pc, #240]	; (8001efc <dw_main+0x1fc>)
 8001e0a:	483d      	ldr	r0, [pc, #244]	; (8001f00 <dw_main+0x200>)
 8001e0c:	f004 f9d4 	bl	80061b8 <HAL_UART_Transmit>


            SSD1306_GotoXY(0, 10); ssd1306_write(rx_buffer, Font_7x10);
 8001e10:	210a      	movs	r1, #10
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fcc8 	bl	80017a8 <SSD1306_GotoXY>
 8001e18:	4843      	ldr	r0, [pc, #268]	; (8001f28 <dw_main+0x228>)
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <dw_main+0x204>)
 8001e1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e20:	f7ff fe00 	bl	8001a24 <ssd1306_write>

            /* TESTING BREAKPOINT LOCATION #1 */

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e28:	2100      	movs	r1, #0
 8001e2a:	200f      	movs	r0, #15
 8001e2c:	f7fe ff75 	bl	8000d1a <dwt_write32bitoffsetreg>

            /* Validate the frame is the one expected as sent by "TX then wait for a response" example. */
            if ((frame_len == 14) && (rx_buffer[0] == 0xC5) && (rx_buffer[10] == 0x43) && (rx_buffer[11] == 0x2))
 8001e30:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <dw_main+0x224>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b0e      	cmp	r3, #14
 8001e36:	d19c      	bne.n	8001d72 <dw_main+0x72>
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <dw_main+0x228>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2bc5      	cmp	r3, #197	; 0xc5
 8001e3e:	d198      	bne.n	8001d72 <dw_main+0x72>
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <dw_main+0x228>)
 8001e42:	7a9b      	ldrb	r3, [r3, #10]
 8001e44:	2b43      	cmp	r3, #67	; 0x43
 8001e46:	d194      	bne.n	8001d72 <dw_main+0x72>
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <dw_main+0x228>)
 8001e4a:	7adb      	ldrb	r3, [r3, #11]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d190      	bne.n	8001d72 <dw_main+0x72>
            {
                int i;

                /* Copy source address of blink in response destination address. */
                for (i = 0; i < 8; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	e00a      	b.n	8001e6c <dw_main+0x16c>
                {
                    tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	1c9a      	adds	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	4932      	ldr	r1, [pc, #200]	; (8001f28 <dw_main+0x228>)
 8001e60:	5c89      	ldrb	r1, [r1, r2]
 8001e62:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <dw_main+0x230>)
 8001e64:	54d1      	strb	r1, [r2, r3]
                for (i = 0; i < 8; i++)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b07      	cmp	r3, #7
 8001e70:	ddf1      	ble.n	8001e56 <dw_main+0x156>
                }

                /* Write response frame data to DW1000 and prepare transmission. See NOTE 6 below.*/
                dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001e72:	2200      	movs	r2, #0
 8001e74:	492e      	ldr	r1, [pc, #184]	; (8001f30 <dw_main+0x230>)
 8001e76:	2015      	movs	r0, #21
 8001e78:	f7fe fdc4 	bl	8000a04 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2015      	movs	r0, #21
 8001e82:	f7fe fddd 	bl	8000a40 <dwt_writetxfctrl>

                /* Send the response. */
                dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff f874 	bl	8000f74 <dwt_starttx>
                HAL_UART_Transmit(&huart2,"Transmitted : ", 14, 100);
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	220e      	movs	r2, #14
 8001e90:	4928      	ldr	r1, [pc, #160]	; (8001f34 <dw_main+0x234>)
 8001e92:	481b      	ldr	r0, [pc, #108]	; (8001f00 <dw_main+0x200>)
 8001e94:	f004 f990 	bl	80061b8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,tx_msg, sizeof(tx_msg), 100);
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	2215      	movs	r2, #21
 8001e9c:	4924      	ldr	r1, [pc, #144]	; (8001f30 <dw_main+0x230>)
 8001e9e:	4818      	ldr	r0, [pc, #96]	; (8001f00 <dw_main+0x200>)
 8001ea0:	f004 f98a 	bl	80061b8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,"\n", 1, 100);
 8001ea4:	2364      	movs	r3, #100	; 0x64
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4923      	ldr	r1, [pc, #140]	; (8001f38 <dw_main+0x238>)
 8001eaa:	4815      	ldr	r0, [pc, #84]	; (8001f00 <dw_main+0x200>)
 8001eac:	f004 f984 	bl	80061b8 <HAL_UART_Transmit>

                SSD1306_GotoXY(0, 40); ssd1306_write(tx_msg, Font_7x10);
 8001eb0:	2128      	movs	r1, #40	; 0x28
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fc78 	bl	80017a8 <SSD1306_GotoXY>
 8001eb8:	481d      	ldr	r0, [pc, #116]	; (8001f30 <dw_main+0x230>)
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <dw_main+0x204>)
 8001ebc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ec0:	f7ff fdb0 	bl	8001a24 <ssd1306_write>
                /* Poll DW1000 until TX frame sent event set. */
                while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8001ec4:	bf00      	nop
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	200f      	movs	r0, #15
 8001eca:	f7fe fea0 	bl	8000c0e <dwt_read32bitoffsetreg>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f6      	beq.n	8001ec6 <dw_main+0x1c6>
                { };

                /* Clear TX frame sent event. */
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	2100      	movs	r1, #0
 8001edc:	200f      	movs	r0, #15
 8001ede:	f7fe ff1c 	bl	8000d1a <dwt_write32bitoffsetreg>

                /* Increment the data frame sequence number (modulo 256). */
                tx_msg[DATA_FRAME_SN_IDX]++;
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <dw_main+0x230>)
 8001ee4:	789b      	ldrb	r3, [r3, #2]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <dw_main+0x230>)
 8001eec:	709a      	strb	r2, [r3, #2]
 8001eee:	e740      	b.n	8001d72 <dw_main+0x72>
            }
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <dw_main+0x23c>)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f7fe ff10 	bl	8000d1a <dwt_write32bitoffsetreg>
    	SSD1306_Clear ();
 8001efa:	e73a      	b.n	8001d72 <dw_main+0x72>
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20000650 	.word	0x20000650
 8001f04:	20000004 	.word	0x20000004
 8001f08:	080076fc 	.word	0x080076fc
 8001f0c:	0800770c 	.word	0x0800770c
 8001f10:	20000020 	.word	0x20000020
 8001f14:	0800771c 	.word	0x0800771c
 8001f18:	08007728 	.word	0x08007728
 8001f1c:	20000590 	.word	0x20000590
 8001f20:	2405d000 	.word	0x2405d000
 8001f24:	20000594 	.word	0x20000594
 8001f28:	20000510 	.word	0x20000510
 8001f2c:	08007738 	.word	0x08007738
 8001f30:	2000002c 	.word	0x2000002c
 8001f34:	08007748 	.word	0x08007748
 8001f38:	08007758 	.word	0x08007758
 8001f3c:	24059000 	.word	0x24059000

08001f40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <MX_SPI1_Init+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f8c:	220a      	movs	r2, #10
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_SPI1_Init+0x64>)
 8001f92:	f003 fd01 	bl	8005998 <HAL_SPI_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f9c:	f7ff feaa 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200005f8 	.word	0x200005f8
 8001fa8:	40013000 	.word	0x40013000

08001fac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <HAL_SPI_MspInit+0x8c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12f      	bne.n	800202e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_SPI_MspInit+0x90>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_SPI_MspInit+0x90>)
 8001fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_SPI_MspInit+0x90>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_SPI_MspInit+0x90>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_SPI_MspInit+0x90>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	61d3      	str	r3, [r2, #28]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_SPI_MspInit+0x90>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ffe:	23e0      	movs	r3, #224	; 0xe0
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <HAL_SPI_MspInit+0x94>)
 800201a:	f000 fbbb 	bl	8002794 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2023      	movs	r0, #35	; 0x23
 8002024:	f000 fae7 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002028:	2023      	movs	r0, #35	; 0x23
 800202a:	f000 fb00 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40013000 	.word	0x40013000
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_MspInit+0x5c>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_MspInit+0x5c>)
 8002050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002054:	6253      	str	r3, [r2, #36]	; 0x24
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_MspInit+0x5c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_MspInit+0x5c>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_MspInit+0x5c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_MspInit+0x5c>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_MspInit+0x5c>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_MspInit+0x5c>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6253      	str	r3, [r2, #36]	; 0x24
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_MspInit+0x5c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002092:	2007      	movs	r0, #7
 8002094:	f000 faa4 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ea:	f000 f94b 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <I2C1_EV_IRQHandler+0x10>)
 80020fa:	f001 f877 	bl	80031ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200005a4 	.word	0x200005a4

08002108 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <SPI1_IRQHandler+0x10>)
 800210e:	f003 fe0f 	bl	8005d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200005f8 	.word	0x200005f8

0800211c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <USART2_IRQHandler+0x10>)
 8002122:	f004 f8cd 	bl	80062c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000650 	.word	0x20000650

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f004 fe54 	bl	8006e0c <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20014000 	.word	0x20014000
 8002190:	00000400 	.word	0x00000400
 8002194:	20000598 	.word	0x20000598
 8002198:	200006b0 	.word	0x200006b0

0800219c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <MX_USART2_UART_Init+0x50>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021e0:	f003 ff9a 	bl	8006118 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ea:	f7ff fd83 	bl	8001cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000650 	.word	0x20000650
 80021f8:	40004400 	.word	0x40004400

080021fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_UART_MspInit+0x8c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12f      	bne.n	800227e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_UART_MspInit+0x90>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_UART_MspInit+0x90>)
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	6253      	str	r3, [r2, #36]	; 0x24
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_UART_MspInit+0x90>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_UART_MspInit+0x90>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a14      	ldr	r2, [pc, #80]	; (800228c <HAL_UART_MspInit+0x90>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_UART_MspInit+0x90>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800224e:	230c      	movs	r3, #12
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800225e:	2307      	movs	r3, #7
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <HAL_UART_MspInit+0x94>)
 800226a:	f000 fa93 	bl	8002794 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2026      	movs	r0, #38	; 0x26
 8002274:	f000 f9bf 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002278:	2026      	movs	r0, #38	; 0x26
 800227a:	f000 f9d8 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40004400 	.word	0x40004400
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000

08002294 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002294:	f7ff ff82 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800229a:	490c      	ldr	r1, [pc, #48]	; (80022cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022b0:	4c09      	ldr	r4, [pc, #36]	; (80022d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022be:	f004 fdab 	bl	8006e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022c2:	f7ff fcb5 	bl	8001c30 <main>
  bx lr
 80022c6:	4770      	bx	lr
  ldr r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022cc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80022d0:	08007fe4 	.word	0x08007fe4
  ldr r2, =_sbss
 80022d4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80022d8:	200006ac 	.word	0x200006ac

080022dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <ADC1_IRQHandler>

080022de <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e8:	2003      	movs	r0, #3
 80022ea:	f000 f979 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 f80e 	bl	8002310 <HAL_InitTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	e001      	b.n	8002304 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002300:	f7ff fea0 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002304:	79fb      	ldrb	r3, [r7, #7]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_InitTick+0x68>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d022      	beq.n	800236a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_InitTick+0x6c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_InitTick+0x68>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002330:	fbb1 f3f3 	udiv	r3, r1, r3
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f994 	bl	8002666 <HAL_SYSTICK_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10f      	bne.n	8002364 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d809      	bhi.n	800235e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234a:	2200      	movs	r2, #0
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	f04f 30ff 	mov.w	r0, #4294967295
 8002352:	f000 f950 	bl	80025f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <HAL_InitTick+0x70>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e007      	b.n	800236e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e004      	b.n	800236e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000004c 	.word	0x2000004c
 800237c:	20000044 	.word	0x20000044
 8002380:	20000048 	.word	0x20000048

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_IncTick+0x1c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_IncTick+0x20>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4413      	add	r3, r2
 8002392:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_IncTick+0x1c>)
 8002394:	6013      	str	r3, [r2, #0]
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000698 	.word	0x20000698
 80023a4:	2000004c 	.word	0x2000004c

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_GetTick+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000698 	.word	0x20000698

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fff0 	bl	80023a8 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d004      	beq.n	80023e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_Delay+0x40>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e0:	bf00      	nop
 80023e2:	f7ff ffe1 	bl	80023a8 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d8f7      	bhi.n	80023e2 <HAL_Delay+0x26>
  {
  }
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000004c 	.word	0x2000004c

08002400 <__NVIC_SetPriorityGrouping>:
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <__NVIC_EnableIRQ+0x34>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_DisableIRQ>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db12      	blt.n	80024d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	490a      	ldr	r1, [pc, #40]	; (80024e0 <__NVIC_DisableIRQ+0x44>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	3320      	adds	r3, #32
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80024c8:	f3bf 8f4f 	dsb	sy
}
 80024cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024ce:	f3bf 8f6f 	isb	sy
}
 80024d2:	bf00      	nop
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f1c3 0307 	rsb	r3, r3, #7
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf28      	it	cs
 8002556:	2304      	movcs	r3, #4
 8002558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d902      	bls.n	8002568 <NVIC_EncodePriority+0x30>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3b03      	subs	r3, #3
 8002566:	e000      	b.n	800256a <NVIC_EncodePriority+0x32>
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43d9      	mvns	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	4313      	orrs	r3, r2
         );
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff90 	bl	80024e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff09 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff1e 	bl	8002448 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff90 	bl	8002538 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5f 	bl	80024e4 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff11 	bl	8002464 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff1f 	bl	800249c <__NVIC_DisableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff94 	bl	800259c <SysTick_Config>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d008      	beq.n	80026a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2204      	movs	r2, #4
 800269a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e022      	b.n	80026ee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020e 	bic.w	r2, r2, #14
 80026b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f003 021c 	and.w	r2, r3, #28
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d005      	beq.n	800271c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2204      	movs	r2, #4
 8002714:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e029      	b.n	8002770 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 020e 	bic.w	r2, r2, #14
 800272a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f003 021c 	and.w	r2, r3, #28
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	2101      	movs	r1, #1
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
    }
  }
  return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002788:	b2db      	uxtb	r3, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027aa:	e160      	b.n	8002a6e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 8152 	beq.w	8002a68 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d005      	beq.n	80027dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d130      	bne.n	800283e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002812:	2201      	movs	r2, #1
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 0201 	and.w	r2, r3, #1
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b03      	cmp	r3, #3
 8002848:	d017      	beq.n	800287a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d123      	bne.n	80028ce <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	08da      	lsrs	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3208      	adds	r2, #8
 800288e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002892:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	08da      	lsrs	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3208      	adds	r2, #8
 80028c8:	6939      	ldr	r1, [r7, #16]
 80028ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0203 	and.w	r2, r3, #3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80ac 	beq.w	8002a68 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002910:	4b5e      	ldr	r3, [pc, #376]	; (8002a8c <HAL_GPIO_Init+0x2f8>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a5d      	ldr	r2, [pc, #372]	; (8002a8c <HAL_GPIO_Init+0x2f8>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <HAL_GPIO_Init+0x2f8>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002928:	4a59      	ldr	r2, [pc, #356]	; (8002a90 <HAL_GPIO_Init+0x2fc>)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002934:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d025      	beq.n	80029a0 <HAL_GPIO_Init+0x20c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a50      	ldr	r2, [pc, #320]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01f      	beq.n	800299c <HAL_GPIO_Init+0x208>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_GPIO_Init+0x308>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d019      	beq.n	8002998 <HAL_GPIO_Init+0x204>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a4e      	ldr	r2, [pc, #312]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_GPIO_Init+0x200>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a4d      	ldr	r2, [pc, #308]	; (8002aa4 <HAL_GPIO_Init+0x310>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00d      	beq.n	8002990 <HAL_GPIO_Init+0x1fc>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a4c      	ldr	r2, [pc, #304]	; (8002aa8 <HAL_GPIO_Init+0x314>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d007      	beq.n	800298c <HAL_GPIO_Init+0x1f8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <HAL_GPIO_Init+0x318>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_GPIO_Init+0x1f4>
 8002984:	2306      	movs	r3, #6
 8002986:	e00c      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002988:	2307      	movs	r3, #7
 800298a:	e00a      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 800298c:	2305      	movs	r3, #5
 800298e:	e008      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002990:	2304      	movs	r3, #4
 8002992:	e006      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002994:	2303      	movs	r3, #3
 8002996:	e004      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002998:	2302      	movs	r3, #2
 800299a:	e002      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_GPIO_Init+0x20e>
 80029a0:	2300      	movs	r3, #0
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	f002 0203 	and.w	r2, r2, #3
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029b2:	4937      	ldr	r1, [pc, #220]	; (8002a90 <HAL_GPIO_Init+0x2fc>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029e4:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a0e:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a14:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f47f ae97 	bne.w	80027ac <HAL_GPIO_Init+0x18>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40021400 	.word	0x40021400
 8002aac:	40021800 	.word	0x40021800
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e12b      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff f844 	bl	8001b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b48:	f002 fe9e 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a81      	ldr	r2, [pc, #516]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d807      	bhi.n	8002b68 <HAL_I2C_Init+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_I2C_Init+0x278>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e006      	b.n	8002b76 <HAL_I2C_Init+0x92>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	; (8002d60 <HAL_I2C_Init+0x27c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e7      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a78      	ldr	r2, [pc, #480]	; (8002d64 <HAL_I2C_Init+0x280>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_I2C_Init+0xd4>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e009      	b.n	8002bcc <HAL_I2C_Init+0xe8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <HAL_I2C_Init+0x284>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	3301      	adds	r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	495c      	ldr	r1, [pc, #368]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d819      	bhi.n	8002c20 <HAL_I2C_Init+0x13c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e59      	subs	r1, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c00:	400b      	ands	r3, r1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_I2C_Init+0x138>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e59      	subs	r1, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1a:	e051      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e04f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_I2C_Init+0x168>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e012      	b.n	8002c72 <HAL_I2C_Init+0x18e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Init+0x196>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_I2C_Init+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e58      	subs	r0, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6911      	ldr	r1, [r2, #16]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	000186a0 	.word	0x000186a0
 8002d5c:	001e847f 	.word	0x001e847f
 8002d60:	003d08ff 	.word	0x003d08ff
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d103      	bne.n	8002d8a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	460b      	mov	r3, r1
 8002da2:	817b      	strh	r3, [r7, #10]
 8002da4:	4613      	mov	r3, r2
 8002da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff fafe 	bl	80023a8 <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	f040 80e0 	bne.w	8002f7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2319      	movs	r3, #25
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4970      	ldr	r1, [pc, #448]	; (8002f88 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f001 fdfe 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e0d3      	b.n	8002f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_I2C_Master_Transmit+0x50>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0cc      	b.n	8002f7e <HAL_I2C_Master_Transmit+0x1ea>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d007      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2221      	movs	r2, #33	; 0x21
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2210      	movs	r2, #16
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	893a      	ldrh	r2, [r7, #8]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a50      	ldr	r2, [pc, #320]	; (8002f8c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e4c:	8979      	ldrh	r1, [r7, #10]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f001 fc8e 	bl	8004774 <I2C_MasterRequestWrite>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e08d      	b.n	8002f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e78:	e066      	b.n	8002f48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 febc 	bl	8004bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d107      	bne.n	8002ea2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d11b      	bne.n	8002f1c <HAL_I2C_Master_Transmit+0x188>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d017      	beq.n	8002f1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f001 feb3 	bl	8004c8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d107      	bne.n	8002f44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01a      	b.n	8002f7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d194      	bne.n	8002e7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	00100002 	.word	0x00100002
 8002f8c:	ffff0000 	.word	0xffff0000

08002f90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff fa02 	bl	80023a8 <HAL_GetTick>
 8002fa4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	f040 8111 	bne.w	80031da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2319      	movs	r3, #25
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4988      	ldr	r1, [pc, #544]	; (80031e4 <HAL_I2C_IsDeviceReady+0x254>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f001 fd00 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e104      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2C_IsDeviceReady+0x50>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0fd      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d007      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2224      	movs	r2, #36	; 0x24
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f001 fcbe 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d103      	bne.n	800306a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0b6      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800307c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800307e:	f7ff f993 	bl	80023a8 <HAL_GetTick>
 8003082:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030b2:	e025      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7ff f978 	bl	80023a8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <HAL_I2C_IsDeviceReady+0x13a>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22a0      	movs	r2, #160	; 0xa0
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2ba0      	cmp	r3, #160	; 0xa0
 800310a:	d005      	beq.n	8003118 <HAL_I2C_IsDeviceReady+0x188>
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_I2C_IsDeviceReady+0x188>
 8003112:	7dbb      	ldrb	r3, [r7, #22]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0cd      	beq.n	80030b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d129      	bne.n	8003182 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	4921      	ldr	r1, [pc, #132]	; (80031e4 <HAL_I2C_IsDeviceReady+0x254>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f001 fc32 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e036      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e02c      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800319a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	490f      	ldr	r1, [pc, #60]	; (80031e4 <HAL_I2C_IsDeviceReady+0x254>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f001 fc0e 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e012      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f4ff af32 	bcc.w	800302a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	00100002 	.word	0x00100002
 80031e8:	ffff0000 	.word	0xffff0000

080031ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800320c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b10      	cmp	r3, #16
 800321a:	d003      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x38>
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	f040 80c1 	bne.w	80033a6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_I2C_EV_IRQHandler+0x6e>
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003244:	d003      	beq.n	800324e <HAL_I2C_EV_IRQHandler+0x62>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800324c:	d101      	bne.n	8003252 <HAL_I2C_EV_IRQHandler+0x66>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_I2C_EV_IRQHandler+0x68>
 8003252:	2300      	movs	r3, #0
 8003254:	2b01      	cmp	r3, #1
 8003256:	f000 8132 	beq.w	80034be <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x92>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	0a5b      	lsrs	r3, r3, #9
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 fdb3 	bl	8004ddc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fcd6 	bl	8003c28 <I2C_Master_SB>
 800327c:	e092      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	08db      	lsrs	r3, r3, #3
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0xb2>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	0a5b      	lsrs	r3, r3, #9
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fd4b 	bl	8003d32 <I2C_Master_ADD10>
 800329c:	e082      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0xd2>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0a5b      	lsrs	r3, r3, #9
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fd64 	bl	8003d84 <I2C_Master_ADDR>
 80032bc:	e072      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d03b      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d8:	f000 80f3 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	09db      	lsrs	r3, r3, #7
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00f      	beq.n	8003308 <HAL_I2C_EV_IRQHandler+0x11c>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_I2C_EV_IRQHandler+0x11c>
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f942 	bl	800358a <I2C_MasterTransmit_TXE>
 8003306:	e04d      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80d6 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	0a5b      	lsrs	r3, r3, #9
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80cf 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003324:	7bbb      	ldrb	r3, [r7, #14]
 8003326:	2b21      	cmp	r3, #33	; 0x21
 8003328:	d103      	bne.n	8003332 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f9c9 	bl	80036c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003330:	e0c7      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	f040 80c4 	bne.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa37 	bl	80037ae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003340:	e0bf      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003350:	f000 80b7 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <HAL_I2C_EV_IRQHandler+0x194>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	0a9b      	lsrs	r3, r3, #10
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_I2C_EV_IRQHandler+0x194>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fab0 	bl	80038de <I2C_MasterReceive_RXNE>
 800337e:	e011      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 809a 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	0a5b      	lsrs	r3, r3, #9
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8093 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb59 	bl	8003a54 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a2:	e08e      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033a4:	e08d      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e007      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x20e>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	0a5b      	lsrs	r3, r3, #9
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00c      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ff12 	bl	800421c <I2C_Slave_ADDR>
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x22e>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 ff4c 	bl	80042b0 <I2C_Slave_STOPF>
 8003418:	e056      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800341a:	7bbb      	ldrb	r3, [r7, #14]
 800341c:	2b21      	cmp	r3, #33	; 0x21
 800341e:	d002      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x23a>
 8003420:	7bbb      	ldrb	r3, [r7, #14]
 8003422:	2b29      	cmp	r3, #41	; 0x29
 8003424:	d125      	bne.n	8003472 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	09db      	lsrs	r3, r3, #7
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x266>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a9b      	lsrs	r3, r3, #10
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x266>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fe2a 	bl	80040a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003450:	e039      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d033      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2da>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0a5b      	lsrs	r3, r3, #9
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d02d      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fe57 	bl	800411e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003470:	e029      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	099b      	lsrs	r3, r3, #6
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00f      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x2b2>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	0a9b      	lsrs	r3, r3, #10
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x2b2>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fe61 	bl	800415e <I2C_SlaveReceive_RXNE>
 800349c:	e014      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a5b      	lsrs	r3, r3, #9
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fe8f 	bl	80041da <I2C_SlaveReceive_BTF>
 80034bc:	e004      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
 8003522:	4613      	mov	r3, r2
 8003524:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d150      	bne.n	8003652 <I2C_MasterTransmit_TXE+0xc8>
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b21      	cmp	r3, #33	; 0x21
 80035b4:	d14d      	bne.n	8003652 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d01d      	beq.n	80035f8 <I2C_MasterTransmit_TXE+0x6e>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d01a      	beq.n	80035f8 <I2C_MasterTransmit_TXE+0x6e>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035c8:	d016      	beq.n	80035f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2211      	movs	r2, #17
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff6c 	bl	80034ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035f6:	e060      	b.n	80036ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003606:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003616:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d107      	bne.n	8003642 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ff81 	bl	8003542 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003640:	e03b      	b.n	80036ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff3f 	bl	80034ce <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003650:	e033      	b.n	80036ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b21      	cmp	r3, #33	; 0x21
 8003656:	d005      	beq.n	8003664 <I2C_MasterTransmit_TXE+0xda>
 8003658:	7bbb      	ldrb	r3, [r7, #14]
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d12d      	bne.n	80036ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b22      	cmp	r3, #34	; 0x22
 8003662:	d12a      	bne.n	80036ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800367e:	e01c      	b.n	80036ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d103      	bne.n	8003694 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f88e 	bl	80037ae <I2C_MemoryTransmit_TXE_BTF>
}
 8003692:	e012      	b.n	80036ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036b8:	e7ff      	b.n	80036ba <I2C_MasterTransmit_TXE+0x130>
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b21      	cmp	r3, #33	; 0x21
 80036da:	d164      	bne.n	80037a6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800370a:	e04c      	b.n	80037a6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b08      	cmp	r3, #8
 8003710:	d01d      	beq.n	800374e <I2C_MasterTransmit_BTF+0x8c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b20      	cmp	r3, #32
 8003716:	d01a      	beq.n	800374e <I2C_MasterTransmit_BTF+0x8c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800371e:	d016      	beq.n	800374e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800372e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2211      	movs	r2, #17
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fec1 	bl	80034ce <HAL_I2C_MasterTxCpltCallback>
}
 800374c:	e02b      	b.n	80037a6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800375c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d107      	bne.n	8003798 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff fed6 	bl	8003542 <HAL_I2C_MemTxCpltCallback>
}
 8003796:	e006      	b.n	80037a6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fe94 	bl	80034ce <HAL_I2C_MasterTxCpltCallback>
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11d      	bne.n	8003802 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d10b      	bne.n	80037e6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80037e4:	e077      	b.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	121b      	asrs	r3, r3, #8
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003800:	e069      	b.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10b      	bne.n	8003822 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	b2da      	uxtb	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003820:	e059      	b.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	2b02      	cmp	r3, #2
 8003828:	d152      	bne.n	80038d0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b22      	cmp	r3, #34	; 0x22
 800382e:	d10d      	bne.n	800384c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	651a      	str	r2, [r3, #80]	; 0x50
}
 800384a:	e044      	b.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d015      	beq.n	8003882 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b21      	cmp	r3, #33	; 0x21
 800385a:	d112      	bne.n	8003882 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003880:	e029      	b.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d124      	bne.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b21      	cmp	r3, #33	; 0x21
 8003890:	d121      	bne.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe3a 	bl	8003542 <HAL_I2C_MemTxCpltCallback>
}
 80038ce:	e002      	b.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fa4b 	bl	8002d6c <I2C_Flush_DR>
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b22      	cmp	r3, #34	; 0x22
 80038f0:	f040 80ac 	bne.w	8003a4c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d921      	bls.n	8003946 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b03      	cmp	r3, #3
 8003930:	f040 808c 	bne.w	8003a4c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003942:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003944:	e082      	b.n	8003a4c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	2b02      	cmp	r3, #2
 800394c:	d075      	beq.n	8003a3a <I2C_MasterReceive_RXNE+0x15c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d002      	beq.n	800395a <I2C_MasterReceive_RXNE+0x7c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d16f      	bne.n	8003a3a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f001 f9de 	bl	8004d1c <I2C_WaitOnSTOPRequestThroughIT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d142      	bne.n	80039ec <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003984:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d10a      	bne.n	80039d6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fdc0 	bl	8003554 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d4:	e03a      	b.n	8003a4c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2212      	movs	r2, #18
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fd7b 	bl	80034e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039ea:	e02f      	b.n	8003a4c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fd97 	bl	8003566 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a38:	e008      	b.n	8003a4c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a48:	605a      	str	r2, [r3, #4]
}
 8003a4a:	e7ff      	b.n	8003a4c <I2C_MasterReceive_RXNE+0x16e>
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11b      	bne.n	8003aa4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003aa2:	e0bd      	b.n	8003c20 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d129      	bne.n	8003b02 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d00a      	beq.n	8003ada <I2C_MasterReceive_BTF+0x86>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d007      	beq.n	8003ada <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b00:	e08e      	b.n	8003c20 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d176      	bne.n	8003bfa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d002      	beq.n	8003b18 <I2C_MasterReceive_BTF+0xc4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d108      	bne.n	8003b2a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e019      	b.n	8003b5e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d002      	beq.n	8003b36 <I2C_MasterReceive_BTF+0xe2>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d108      	bne.n	8003b48 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e00a      	b.n	8003b5e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d007      	beq.n	8003b5e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bb8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d10a      	bne.n	8003be4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fcb9 	bl	8003554 <HAL_I2C_MemRxCpltCallback>
}
 8003be2:	e01d      	b.n	8003c20 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2212      	movs	r2, #18
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fc74 	bl	80034e0 <HAL_I2C_MasterRxCpltCallback>
}
 8003bf8:	e012      	b.n	8003c20 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d117      	bne.n	8003c6c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c54:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c56:	e067      	b.n	8003d28 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]
}
 8003c6a:	e05d      	b.n	8003d28 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c74:	d133      	bne.n	8003cde <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b21      	cmp	r3, #33	; 0x21
 8003c80:	d109      	bne.n	8003c96 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	e008      	b.n	8003ca8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <I2C_Master_SB+0x92>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d032      	beq.n	8003d28 <I2C_Master_SB+0x100>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d02d      	beq.n	8003d28 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cda:	605a      	str	r2, [r3, #4]
}
 8003cdc:	e024      	b.n	8003d28 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	11db      	asrs	r3, r3, #7
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0306 	and.w	r3, r3, #6
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f063 030f 	orn	r3, r3, #15
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
}
 8003d02:	e011      	b.n	8003d28 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10d      	bne.n	8003d28 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	11db      	asrs	r3, r3, #7
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0306 	and.w	r3, r3, #6
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f063 030e 	orn	r3, r3, #14
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	611a      	str	r2, [r3, #16]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <I2C_Master_ADD10+0x26>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00c      	beq.n	8003d7a <I2C_Master_ADD10+0x48>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d78:	605a      	str	r2, [r3, #4]
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b091      	sub	sp, #68	; 0x44
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b22      	cmp	r3, #34	; 0x22
 8003dac:	f040 8169 	bne.w	8004082 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10f      	bne.n	8003dd8 <I2C_Master_ADDR+0x54>
 8003db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d10b      	bne.n	8003dd8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	e160      	b.n	800409a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <I2C_Master_ADDR+0x98>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003de8:	d118      	bne.n	8003e1c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
 8003e1a:	e13e      	b.n	800409a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e115      	b.n	800407a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f040 808a 	bne.w	8003f6e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e60:	d137      	bne.n	8003ed2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e80:	d113      	bne.n	8003eaa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	e0e7      	b.n	800407a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e0d3      	b.n	800407a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d02e      	beq.n	8003f36 <I2C_Master_ADDR+0x1b2>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d02b      	beq.n	8003f36 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d102      	bne.n	8003eea <I2C_Master_ADDR+0x166>
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d125      	bne.n	8003f36 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d00e      	beq.n	8003f0e <I2C_Master_ADDR+0x18a>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d00b      	beq.n	8003f0e <I2C_Master_ADDR+0x18a>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d008      	beq.n	8003f0e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e007      	b.n	8003f1e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	e0a1      	b.n	800407a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	61bb      	str	r3, [r7, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e085      	b.n	800407a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d14d      	bne.n	8004014 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d016      	beq.n	8003fac <I2C_Master_ADDR+0x228>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d013      	beq.n	8003fac <I2C_Master_ADDR+0x228>
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d010      	beq.n	8003fac <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e007      	b.n	8003fbc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fba:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d117      	bne.n	8003ffc <I2C_Master_ADDR+0x278>
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd2:	d00b      	beq.n	8003fec <I2C_Master_ADDR+0x268>
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d008      	beq.n	8003fec <I2C_Master_ADDR+0x268>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d005      	beq.n	8003fec <I2C_Master_ADDR+0x268>
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d002      	beq.n	8003fec <I2C_Master_ADDR+0x268>
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d107      	bne.n	8003ffc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	e032      	b.n	800407a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004022:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004032:	d117      	bne.n	8004064 <I2C_Master_ADDR+0x2e0>
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800403a:	d00b      	beq.n	8004054 <I2C_Master_ADDR+0x2d0>
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	2b01      	cmp	r3, #1
 8004040:	d008      	beq.n	8004054 <I2C_Master_ADDR+0x2d0>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b08      	cmp	r3, #8
 8004046:	d005      	beq.n	8004054 <I2C_Master_ADDR+0x2d0>
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b10      	cmp	r3, #16
 800404c:	d002      	beq.n	8004054 <I2C_Master_ADDR+0x2d0>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b20      	cmp	r3, #32
 8004052:	d107      	bne.n	8004064 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004062:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004080:	e00b      	b.n	800409a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
}
 8004098:	e7ff      	b.n	800409a <I2C_Master_ADDR+0x316>
 800409a:	bf00      	nop
 800409c:	3744      	adds	r7, #68	; 0x44
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02b      	beq.n	8004116 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d114      	bne.n	8004116 <I2C_SlaveTransmit_TXE+0x72>
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	2b29      	cmp	r3, #41	; 0x29
 80040f0:	d111      	bne.n	8004116 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004100:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2221      	movs	r2, #33	; 0x21
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2228      	movs	r2, #40	; 0x28
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff f9ee 	bl	80034f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02c      	beq.n	80041d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d114      	bne.n	80041d2 <I2C_SlaveReceive_RXNE+0x74>
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b2a      	cmp	r3, #42	; 0x2a
 80041ac:	d111      	bne.n	80041d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2222      	movs	r2, #34	; 0x22
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2228      	movs	r2, #40	; 0x28
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff f999 	bl	8003504 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004236:	2b28      	cmp	r3, #40	; 0x28
 8004238:	d127      	bne.n	800428a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004248:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004256:	2301      	movs	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	09db      	lsrs	r3, r3, #7
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	81bb      	strh	r3, [r7, #12]
 800426c:	e002      	b.n	8004274 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800427c:	89ba      	ldrh	r2, [r7, #12]
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff f947 	bl	8003516 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004288:	e00e      	b.n	80042a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430c:	d172      	bne.n	80043f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b22      	cmp	r3, #34	; 0x22
 8004312:	d002      	beq.n	800431a <I2C_Slave_STOPF+0x6a>
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b2a      	cmp	r3, #42	; 0x2a
 8004318:	d135      	bne.n	8004386 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fa11 	bl	800277a <HAL_DMA_GetState>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d049      	beq.n	80043f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	4a69      	ldr	r2, [pc, #420]	; (8004508 <I2C_Slave_STOPF+0x258>)
 8004364:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f9c4 	bl	80026f8 <HAL_DMA_Abort_IT>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03d      	beq.n	80043f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004384:	e035      	b.n	80043f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe f9db 	bl	800277a <HAL_DMA_GetState>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d014      	beq.n	80043f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	4a4e      	ldr	r2, [pc, #312]	; (8004508 <I2C_Slave_STOPF+0x258>)
 80043d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe f98e 	bl	80026f8 <HAL_DMA_Abort_IT>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ec:	4610      	mov	r0, r2
 80043ee:	4798      	blx	r3
 80043f0:	e000      	b.n	80043f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03e      	beq.n	800447c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d112      	bne.n	8004432 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d112      	bne.n	8004466 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f843 	bl	8004510 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800448a:	e039      	b.n	8004500 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b2a      	cmp	r3, #42	; 0x2a
 8004490:	d109      	bne.n	80044a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2228      	movs	r2, #40	; 0x28
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff f82f 	bl	8003504 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b28      	cmp	r3, #40	; 0x28
 80044b0:	d111      	bne.n	80044d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <I2C_Slave_STOPF+0x25c>)
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff f82e 	bl	8003530 <HAL_I2C_ListenCpltCallback>
}
 80044d4:	e014      	b.n	8004500 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	d002      	beq.n	80044e4 <I2C_Slave_STOPF+0x234>
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b22      	cmp	r3, #34	; 0x22
 80044e2:	d10d      	bne.n	8004500 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff f802 	bl	8003504 <HAL_I2C_SlaveRxCpltCallback>
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	08004879 	.word	0x08004879
 800450c:	ffff0000 	.word	0xffff0000

08004510 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004526:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004528:	7bbb      	ldrb	r3, [r7, #14]
 800452a:	2b10      	cmp	r3, #16
 800452c:	d002      	beq.n	8004534 <I2C_ITError+0x24>
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d10a      	bne.n	800454a <I2C_ITError+0x3a>
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b22      	cmp	r3, #34	; 0x22
 8004538:	d107      	bne.n	800454a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004548:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004550:	2b28      	cmp	r3, #40	; 0x28
 8004552:	d107      	bne.n	8004564 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2228      	movs	r2, #40	; 0x28
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004562:	e015      	b.n	8004590 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004572:	d00a      	beq.n	800458a <I2C_ITError+0x7a>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b60      	cmp	r3, #96	; 0x60
 8004578:	d007      	beq.n	800458a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	d162      	bne.n	8004666 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d020      	beq.n	8004600 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	4a6a      	ldr	r2, [pc, #424]	; (800476c <I2C_ITError+0x25c>)
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe f894 	bl	80026f8 <HAL_DMA_Abort_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8089 	beq.w	80046ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045fa:	4610      	mov	r0, r2
 80045fc:	4798      	blx	r3
 80045fe:	e074      	b.n	80046ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	4a59      	ldr	r2, [pc, #356]	; (800476c <I2C_ITError+0x25c>)
 8004606:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f873 	bl	80026f8 <HAL_DMA_Abort_IT>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d068      	beq.n	80046ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d10b      	bne.n	800463e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
 8004664:	e041      	b.n	80046ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b60      	cmp	r3, #96	; 0x60
 8004670:	d125      	bne.n	80046be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d10b      	bne.n	80046a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fe ff5e 	bl	8003578 <HAL_I2C_AbortCpltCallback>
 80046bc:	e015      	b.n	80046ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d10b      	bne.n	80046e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fe ff3e 	bl	8003566 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10e      	bne.n	8004718 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d113      	bne.n	8004764 <I2C_ITError+0x254>
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b28      	cmp	r3, #40	; 0x28
 8004740:	d110      	bne.n	8004764 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <I2C_ITError+0x260>)
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fee6 	bl	8003530 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	08004879 	.word	0x08004879
 8004770:	ffff0000 	.word	0xffff0000

08004774 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	460b      	mov	r3, r1
 8004782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d006      	beq.n	800479e <I2C_MasterRequestWrite+0x2a>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d003      	beq.n	800479e <I2C_MasterRequestWrite+0x2a>
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800479c:	d108      	bne.n	80047b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e00b      	b.n	80047c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	2b12      	cmp	r3, #18
 80047b6:	d107      	bne.n	80047c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f8f7 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ee:	d103      	bne.n	80047f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e035      	b.n	8004868 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004804:	d108      	bne.n	8004818 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004806:	897b      	ldrh	r3, [r7, #10]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004814:	611a      	str	r2, [r3, #16]
 8004816:	e01b      	b.n	8004850 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004818:	897b      	ldrh	r3, [r7, #10]
 800481a:	11db      	asrs	r3, r3, #7
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 0306 	and.w	r3, r3, #6
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f063 030f 	orn	r3, r3, #15
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <I2C_MasterRequestWrite+0xfc>)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f940 	bl	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e010      	b.n	8004868 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004846:	897b      	ldrh	r3, [r7, #10]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4907      	ldr	r1, [pc, #28]	; (8004874 <I2C_MasterRequestWrite+0x100>)
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f930 	bl	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	00010008 	.word	0x00010008
 8004874:	00010002 	.word	0x00010002

08004878 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <I2C_DMAAbort+0x148>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	4a4a      	ldr	r2, [pc, #296]	; (80049c4 <I2C_DMAAbort+0x14c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a1a      	lsrs	r2, r3, #8
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00da      	lsls	r2, r3, #3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0220 	orr.w	r2, r3, #32
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048be:	e00a      	b.n	80048d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d0ea      	beq.n	80048ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	2200      	movs	r2, #0
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	2200      	movs	r2, #0
 800491a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b60      	cmp	r3, #96	; 0x60
 8004946:	d10e      	bne.n	8004966 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f7fe fe0a 	bl	8003578 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004964:	e027      	b.n	80049b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800496c:	2b28      	cmp	r3, #40	; 0x28
 800496e:	d117      	bne.n	80049a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800498e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2228      	movs	r2, #40	; 0x28
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800499e:	e007      	b.n	80049b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049b0:	6978      	ldr	r0, [r7, #20]
 80049b2:	f7fe fdd8 	bl	8003566 <HAL_I2C_ErrorCallback>
}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000044 	.word	0x20000044
 80049c4:	14f8b589 	.word	0x14f8b589

080049c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d8:	e048      	b.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d044      	beq.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fd fce1 	bl	80023a8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d139      	bne.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	0c1b      	lsrs	r3, r3, #16
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10d      	bne.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	43da      	mvns	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	e00c      	b.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	43da      	mvns	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d116      	bne.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e023      	b.n	8004ab4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10d      	bne.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	e00c      	b.n	8004aac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d093      	beq.n	80049da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aca:	e071      	b.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ada:	d123      	bne.n	8004b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f043 0204 	orr.w	r2, r3, #4
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e067      	b.n	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d041      	beq.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2c:	f7fd fc3c 	bl	80023a8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d136      	bne.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10c      	bne.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	43da      	mvns	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e00b      	b.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e021      	b.n	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	0c1b      	lsrs	r3, r3, #16
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10c      	bne.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e00b      	b.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f47f af6d 	bne.w	8004acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c08:	e034      	b.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f8b8 	bl	8004d80 <I2C_IsAcknowledgeFailed>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e034      	b.n	8004c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d028      	beq.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fd fbc1 	bl	80023a8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11d      	bne.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d016      	beq.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e007      	b.n	8004c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b80      	cmp	r3, #128	; 0x80
 8004c80:	d1c3      	bne.n	8004c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c98:	e034      	b.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f870 	bl	8004d80 <I2C_IsAcknowledgeFailed>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e034      	b.n	8004d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d028      	beq.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fd fb79 	bl	80023a8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11d      	bne.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d016      	beq.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e007      	b.n	8004d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d1c3      	bne.n	8004c9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	0a1a      	lsrs	r2, r3, #8
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d107      	bne.n	8004d5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f043 0220 	orr.w	r2, r3, #32
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e008      	b.n	8004d6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d68:	d0e9      	beq.n	8004d3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000044 	.word	0x20000044
 8004d7c:	14f8b589 	.word	0x14f8b589

08004d80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d11b      	bne.n	8004dd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dec:	d103      	bne.n	8004df6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004df4:	e007      	b.n	8004e06 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004dfe:	d102      	bne.n	8004e06 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2208      	movs	r2, #8
 8004e04:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e31d      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e22:	4b94      	ldr	r3, [pc, #592]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e2c:	4b91      	ldr	r3, [pc, #580]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d07b      	beq.n	8004f3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d006      	beq.n	8004e56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b0c      	cmp	r3, #12
 8004e4c:	d10f      	bne.n	8004e6e <HAL_RCC_OscConfig+0x5e>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d10b      	bne.n	8004e6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e56:	4b87      	ldr	r3, [pc, #540]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d06a      	beq.n	8004f38 <HAL_RCC_OscConfig+0x128>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d166      	bne.n	8004f38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e2f7      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x74>
 8004e76:	4b7f      	ldr	r3, [pc, #508]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a7e      	ldr	r2, [pc, #504]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e02d      	b.n	8004ee0 <HAL_RCC_OscConfig+0xd0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x96>
 8004e8c:	4b79      	ldr	r3, [pc, #484]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a78      	ldr	r2, [pc, #480]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a75      	ldr	r2, [pc, #468]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e01c      	b.n	8004ee0 <HAL_RCC_OscConfig+0xd0>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xb8>
 8004eae:	4b71      	ldr	r3, [pc, #452]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a70      	ldr	r2, [pc, #448]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b6e      	ldr	r3, [pc, #440]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6d      	ldr	r2, [pc, #436]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0xd0>
 8004ec8:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a69      	ldr	r2, [pc, #420]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b67      	ldr	r3, [pc, #412]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a66      	ldr	r2, [pc, #408]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fd fa5e 	bl	80023a8 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fd fa5a 	bl	80023a8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e2ad      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xe0>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fd fa4a 	bl	80023a8 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fd fa46 	bl	80023a8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e299      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f2a:	4b52      	ldr	r3, [pc, #328]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x108>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d05a      	beq.n	8004ffc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d119      	bne.n	8004f86 <HAL_RCC_OscConfig+0x176>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d116      	bne.n	8004f86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f58:	4b46      	ldr	r3, [pc, #280]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_OscConfig+0x160>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e276      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b40      	ldr	r3, [pc, #256]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	493d      	ldr	r1, [pc, #244]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f84:	e03a      	b.n	8004ffc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d020      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f8e:	4b3a      	ldr	r3, [pc, #232]	; (8005078 <HAL_RCC_OscConfig+0x268>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd fa08 	bl	80023a8 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9c:	f7fd fa04 	bl	80023a8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e257      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	492a      	ldr	r1, [pc, #168]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
 8004fce:	e015      	b.n	8004ffc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd0:	4b29      	ldr	r3, [pc, #164]	; (8005078 <HAL_RCC_OscConfig+0x268>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fd f9e7 	bl	80023a8 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fd f9e3 	bl	80023a8 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e236      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ff0:	4b20      	ldr	r3, [pc, #128]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80b8 	beq.w	800517a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d170      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005010:	4b18      	ldr	r3, [pc, #96]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_OscConfig+0x218>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e21a      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	4b11      	ldr	r3, [pc, #68]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005034:	429a      	cmp	r2, r3
 8005036:	d921      	bls.n	800507c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fc4b 	bl	80058d8 <RCC_SetFlashLatencyFromMSIRange>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e208      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4906      	ldr	r1, [pc, #24]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 800505a:	4313      	orrs	r3, r2
 800505c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	061b      	lsls	r3, r3, #24
 800506c:	4901      	ldr	r1, [pc, #4]	; (8005074 <HAL_RCC_OscConfig+0x264>)
 800506e:	4313      	orrs	r3, r2
 8005070:	604b      	str	r3, [r1, #4]
 8005072:	e020      	b.n	80050b6 <HAL_RCC_OscConfig+0x2a6>
 8005074:	40023800 	.word	0x40023800
 8005078:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800507c:	4ba4      	ldr	r3, [pc, #656]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	49a1      	ldr	r1, [pc, #644]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800508a:	4313      	orrs	r3, r2
 800508c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800508e:	4ba0      	ldr	r3, [pc, #640]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	061b      	lsls	r3, r3, #24
 800509c:	499c      	ldr	r1, [pc, #624]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fc16 	bl	80058d8 <RCC_SetFlashLatencyFromMSIRange>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e1d3      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	0b5b      	lsrs	r3, r3, #13
 80050bc:	3301      	adds	r3, #1
 80050be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80050c6:	4a92      	ldr	r2, [pc, #584]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80050c8:	6892      	ldr	r2, [r2, #8]
 80050ca:	0912      	lsrs	r2, r2, #4
 80050cc:	f002 020f 	and.w	r2, r2, #15
 80050d0:	4990      	ldr	r1, [pc, #576]	; (8005314 <HAL_RCC_OscConfig+0x504>)
 80050d2:	5c8a      	ldrb	r2, [r1, r2]
 80050d4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050d6:	4a90      	ldr	r2, [pc, #576]	; (8005318 <HAL_RCC_OscConfig+0x508>)
 80050d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050da:	4b90      	ldr	r3, [pc, #576]	; (800531c <HAL_RCC_OscConfig+0x50c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd f916 	bl	8002310 <HAL_InitTick>
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d045      	beq.n	800517a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	e1b5      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d029      	beq.n	800514e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050fa:	4b89      	ldr	r3, [pc, #548]	; (8005320 <HAL_RCC_OscConfig+0x510>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005100:	f7fd f952 	bl	80023a8 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005108:	f7fd f94e 	bl	80023a8 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e1a1      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800511a:	4b7d      	ldr	r3, [pc, #500]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005126:	4b7a      	ldr	r3, [pc, #488]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	4977      	ldr	r1, [pc, #476]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005138:	4b75      	ldr	r3, [pc, #468]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	4972      	ldr	r1, [pc, #456]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
 800514c:	e015      	b.n	800517a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800514e:	4b74      	ldr	r3, [pc, #464]	; (8005320 <HAL_RCC_OscConfig+0x510>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fd f928 	bl	80023a8 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515c:	f7fd f924 	bl	80023a8 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e177      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800516e:	4b68      	ldr	r3, [pc, #416]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d030      	beq.n	80051e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d016      	beq.n	80051bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCC_OscConfig+0x514>)
 8005190:	2201      	movs	r2, #1
 8005192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fd f908 	bl	80023a8 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519c:	f7fd f904 	bl	80023a8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e157      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ae:	4b58      	ldr	r3, [pc, #352]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0x38c>
 80051ba:	e015      	b.n	80051e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051bc:	4b59      	ldr	r3, [pc, #356]	; (8005324 <HAL_RCC_OscConfig+0x514>)
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c2:	f7fd f8f1 	bl	80023a8 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ca:	f7fd f8ed 	bl	80023a8 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e140      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051dc:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f0      	bne.n	80051ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80b5 	beq.w	8005360 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10d      	bne.n	8005222 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b42      	ldr	r3, [pc, #264]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	4a41      	ldr	r2, [pc, #260]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	6253      	str	r3, [r2, #36]	; 0x24
 8005212:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005222:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_RCC_OscConfig+0x518>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d118      	bne.n	8005260 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522e:	4b3e      	ldr	r3, [pc, #248]	; (8005328 <HAL_RCC_OscConfig+0x518>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3d      	ldr	r2, [pc, #244]	; (8005328 <HAL_RCC_OscConfig+0x518>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523a:	f7fd f8b5 	bl	80023a8 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fd f8b1 	bl	80023a8 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b64      	cmp	r3, #100	; 0x64
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e104      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <HAL_RCC_OscConfig+0x518>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x466>
 8005268:	4b29      	ldr	r3, [pc, #164]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	4a28      	ldr	r2, [pc, #160]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800526e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005272:	6353      	str	r3, [r2, #52]	; 0x34
 8005274:	e02d      	b.n	80052d2 <HAL_RCC_OscConfig+0x4c2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x488>
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	4a23      	ldr	r2, [pc, #140]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005288:	6353      	str	r3, [r2, #52]	; 0x34
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	4a20      	ldr	r2, [pc, #128]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 8005290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005294:	6353      	str	r3, [r2, #52]	; 0x34
 8005296:	e01c      	b.n	80052d2 <HAL_RCC_OscConfig+0x4c2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b05      	cmp	r3, #5
 800529e:	d10c      	bne.n	80052ba <HAL_RCC_OscConfig+0x4aa>
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052aa:	6353      	str	r3, [r2, #52]	; 0x34
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6353      	str	r3, [r2, #52]	; 0x34
 80052b8:	e00b      	b.n	80052d2 <HAL_RCC_OscConfig+0x4c2>
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	4a14      	ldr	r2, [pc, #80]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c4:	6353      	str	r3, [r2, #52]	; 0x34
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	4a11      	ldr	r2, [pc, #68]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d015      	beq.n	8005306 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052da:	f7fd f865 	bl	80023a8 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fd f861 	bl	80023a8 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e0b2      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_OscConfig+0x500>)
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ee      	beq.n	80052e2 <HAL_RCC_OscConfig+0x4d2>
 8005304:	e023      	b.n	800534e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fd f84f 	bl	80023a8 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800530c:	e019      	b.n	8005342 <HAL_RCC_OscConfig+0x532>
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800
 8005314:	08007f88 	.word	0x08007f88
 8005318:	20000044 	.word	0x20000044
 800531c:	20000048 	.word	0x20000048
 8005320:	42470020 	.word	0x42470020
 8005324:	42470680 	.word	0x42470680
 8005328:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fd f83c 	bl	80023a8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e08d      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005342:	4b49      	ldr	r3, [pc, #292]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1ee      	bne.n	800532c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800534e:	7ffb      	ldrb	r3, [r7, #31]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005354:	4b44      	ldr	r3, [pc, #272]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	4a43      	ldr	r2, [pc, #268]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 800535a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d079      	beq.n	800545c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	d056      	beq.n	800541c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2b02      	cmp	r3, #2
 8005374:	d13b      	bne.n	80053ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b3d      	ldr	r3, [pc, #244]	; (800546c <HAL_RCC_OscConfig+0x65c>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd f814 	bl	80023a8 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fd f810 	bl	80023a8 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e063      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005396:	4b34      	ldr	r3, [pc, #208]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a2:	4b31      	ldr	r3, [pc, #196]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	4319      	orrs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	430b      	orrs	r3, r1
 80053ba:	492b      	ldr	r1, [pc, #172]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c0:	4b2a      	ldr	r3, [pc, #168]	; (800546c <HAL_RCC_OscConfig+0x65c>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fc ffef 	bl	80023a8 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ce:	f7fc ffeb 	bl	80023a8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e03e      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053e0:	4b21      	ldr	r3, [pc, #132]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0f0      	beq.n	80053ce <HAL_RCC_OscConfig+0x5be>
 80053ec:	e036      	b.n	800545c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ee:	4b1f      	ldr	r3, [pc, #124]	; (800546c <HAL_RCC_OscConfig+0x65c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fc ffd8 	bl	80023a8 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053fc:	f7fc ffd4 	bl	80023a8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e027      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x5ec>
 800541a:	e01f      	b.n	800545c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e01a      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <HAL_RCC_OscConfig+0x658>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	429a      	cmp	r2, r3
 800543a:	d10d      	bne.n	8005458 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d106      	bne.n	8005458 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	42470060 	.word	0x42470060

08005470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e11a      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005484:	4b8f      	ldr	r3, [pc, #572]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d919      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d105      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x34>
 8005498:	4b8a      	ldr	r3, [pc, #552]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a89      	ldr	r2, [pc, #548]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 800549e:	f043 0304 	orr.w	r3, r3, #4
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	4b87      	ldr	r3, [pc, #540]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 0201 	bic.w	r2, r3, #1
 80054ac:	4985      	ldr	r1, [pc, #532]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b4:	4b83      	ldr	r3, [pc, #524]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0f9      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d2:	4b7d      	ldr	r3, [pc, #500]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	497a      	ldr	r1, [pc, #488]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 808e 	beq.w	800560e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d107      	bne.n	800550a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054fa:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d121      	bne.n	800554a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e0d7      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b03      	cmp	r3, #3
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005512:	4b6d      	ldr	r3, [pc, #436]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d115      	bne.n	800554a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0cb      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800552a:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0bf      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800553a:	4b63      	ldr	r3, [pc, #396]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e0b7      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554a:	4b5f      	ldr	r3, [pc, #380]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0203 	bic.w	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	495c      	ldr	r1, [pc, #368]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 8005558:	4313      	orrs	r3, r2
 800555a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800555c:	f7fc ff24 	bl	80023a8 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d112      	bne.n	8005590 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800556c:	f7fc ff1c 	bl	80023a8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e09b      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005582:	4b51      	ldr	r3, [pc, #324]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b08      	cmp	r3, #8
 800558c:	d1ee      	bne.n	800556c <HAL_RCC_ClockConfig+0xfc>
 800558e:	e03e      	b.n	800560e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d112      	bne.n	80055be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005598:	e00a      	b.n	80055b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559a:	f7fc ff05 	bl	80023a8 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e084      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b0:	4b45      	ldr	r3, [pc, #276]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d1ee      	bne.n	800559a <HAL_RCC_ClockConfig+0x12a>
 80055bc:	e027      	b.n	800560e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d11d      	bne.n	8005602 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fc feee 	bl	80023a8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e06d      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055de:	4b3a      	ldr	r3, [pc, #232]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d1ee      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x158>
 80055ea:	e010      	b.n	800560e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ec:	f7fc fedc 	bl	80023a8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e05b      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ee      	bne.n	80055ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800560e:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d219      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <HAL_RCC_ClockConfig+0x1be>
 8005622:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 0201 	bic.w	r2, r3, #1
 8005636:	4923      	ldr	r1, [pc, #140]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <HAL_RCC_ClockConfig+0x254>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e034      	b.n	80056ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4917      	ldr	r1, [pc, #92]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	490f      	ldr	r1, [pc, #60]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568e:	f000 f823 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_RCC_ClockConfig+0x258>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	490b      	ldr	r1, [pc, #44]	; (80056cc <HAL_RCC_ClockConfig+0x25c>)
 80056a0:	5ccb      	ldrb	r3, [r1, r3]
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <HAL_RCC_ClockConfig+0x260>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <HAL_RCC_ClockConfig+0x264>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fc fe2e 	bl	8002310 <HAL_InitTick>
 80056b4:	4603      	mov	r3, r0
 80056b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80056b8:	7afb      	ldrb	r3, [r7, #11]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00
 80056c8:	40023800 	.word	0x40023800
 80056cc:	08007f88 	.word	0x08007f88
 80056d0:	20000044 	.word	0x20000044
 80056d4:	20000048 	.word	0x20000048

080056d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	b5b0      	push	{r4, r5, r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80056de:	4b61      	ldr	r3, [pc, #388]	; (8005864 <HAL_RCC_GetSysClockFreq+0x18c>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d00d      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0x32>
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	f200 80a4 	bhi.w	800583c <HAL_RCC_GetSysClockFreq+0x164>
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d002      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0x26>
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d003      	beq.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c>
 80056fc:	e09e      	b.n	800583c <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056fe:	4b5a      	ldr	r3, [pc, #360]	; (8005868 <HAL_RCC_GetSysClockFreq+0x190>)
 8005700:	613b      	str	r3, [r7, #16]
      break;
 8005702:	e0a9      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <HAL_RCC_GetSysClockFreq+0x194>)
 8005706:	613b      	str	r3, [r7, #16]
      break;
 8005708:	e0a6      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	0c9b      	lsrs	r3, r3, #18
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	4a57      	ldr	r2, [pc, #348]	; (8005870 <HAL_RCC_GetSysClockFreq+0x198>)
 8005714:	5cd3      	ldrb	r3, [r2, r3]
 8005716:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	0d9b      	lsrs	r3, r3, #22
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	3301      	adds	r3, #1
 8005722:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005724:	4b4f      	ldr	r3, [pc, #316]	; (8005864 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d041      	beq.n	80057b4 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	461c      	mov	r4, r3
 8005734:	f04f 0500 	mov.w	r5, #0
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	014b      	lsls	r3, r1, #5
 8005746:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800574a:	0142      	lsls	r2, r0, #5
 800574c:	4610      	mov	r0, r2
 800574e:	4619      	mov	r1, r3
 8005750:	1b00      	subs	r0, r0, r4
 8005752:	eb61 0105 	sbc.w	r1, r1, r5
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	018b      	lsls	r3, r1, #6
 8005760:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005764:	0182      	lsls	r2, r0, #6
 8005766:	1a12      	subs	r2, r2, r0
 8005768:	eb63 0301 	sbc.w	r3, r3, r1
 800576c:	f04f 0000 	mov.w	r0, #0
 8005770:	f04f 0100 	mov.w	r1, #0
 8005774:	00d9      	lsls	r1, r3, #3
 8005776:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800577a:	00d0      	lsls	r0, r2, #3
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	1912      	adds	r2, r2, r4
 8005782:	eb45 0303 	adc.w	r3, r5, r3
 8005786:	f04f 0000 	mov.w	r0, #0
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	0259      	lsls	r1, r3, #9
 8005790:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005794:	0250      	lsls	r0, r2, #9
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	461a      	mov	r2, r3
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	f7fa fcf1 	bl	800018c <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4613      	mov	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e040      	b.n	8005836 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	461c      	mov	r4, r3
 80057b8:	f04f 0500 	mov.w	r5, #0
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	014b      	lsls	r3, r1, #5
 80057ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057ce:	0142      	lsls	r2, r0, #5
 80057d0:	4610      	mov	r0, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	1b00      	subs	r0, r0, r4
 80057d6:	eb61 0105 	sbc.w	r1, r1, r5
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	018b      	lsls	r3, r1, #6
 80057e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057e8:	0182      	lsls	r2, r0, #6
 80057ea:	1a12      	subs	r2, r2, r0
 80057ec:	eb63 0301 	sbc.w	r3, r3, r1
 80057f0:	f04f 0000 	mov.w	r0, #0
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	00d9      	lsls	r1, r3, #3
 80057fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057fe:	00d0      	lsls	r0, r2, #3
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	1912      	adds	r2, r2, r4
 8005806:	eb45 0303 	adc.w	r3, r5, r3
 800580a:	f04f 0000 	mov.w	r0, #0
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	0299      	lsls	r1, r3, #10
 8005814:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005818:	0290      	lsls	r0, r2, #10
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	461a      	mov	r2, r3
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	f7fa fcaf 	bl	800018c <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4613      	mov	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	613b      	str	r3, [r7, #16]
      break;
 800583a:	e00d      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_GetSysClockFreq+0x18c>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	0b5b      	lsrs	r3, r3, #13
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	3301      	adds	r3, #1
 800584c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	613b      	str	r3, [r7, #16]
      break;
 8005856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005858:	693b      	ldr	r3, [r7, #16]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bdb0      	pop	{r4, r5, r7, pc}
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	00f42400 	.word	0x00f42400
 800586c:	007a1200 	.word	0x007a1200
 8005870:	08007f7c 	.word	0x08007f7c

08005874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <HAL_RCC_GetHCLKFreq+0x10>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	20000044 	.word	0x20000044

08005888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800588c:	f7ff fff2 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	; (80058ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40023800 	.word	0x40023800
 80058ac:	08007f98 	.word	0x08007f98

080058b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058b4:	f7ff ffde 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0adb      	lsrs	r3, r3, #11
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40023800 	.word	0x40023800
 80058d4:	08007f98 	.word	0x08007f98

080058d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058e4:	4b29      	ldr	r3, [pc, #164]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d12c      	bne.n	800594a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80058f0:	4b26      	ldr	r3, [pc, #152]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80058fc:	4b24      	ldr	r3, [pc, #144]	; (8005990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e016      	b.n	8005936 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	4a1f      	ldr	r2, [pc, #124]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800590e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005912:	6253      	str	r3, [r2, #36]	; 0x24
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005920:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005928:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800592a:	4b18      	ldr	r3, [pc, #96]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005934:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800593c:	d105      	bne.n	800594a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005944:	d101      	bne.n	800594a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005946:	2301      	movs	r3, #1
 8005948:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005956:	f043 0304 	orr.w	r3, r3, #4
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f023 0201 	bic.w	r2, r3, #1
 8005964:	490b      	ldr	r1, [pc, #44]	; (8005994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	429a      	cmp	r2, r3
 8005978:	d001      	beq.n	800597e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	40007000 	.word	0x40007000
 8005994:	40023c00 	.word	0x40023c00

08005998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e07b      	b.n	8005aa2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ba:	d009      	beq.n	80059d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	61da      	str	r2, [r3, #28]
 80059c2:	e005      	b.n	80059d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fade 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	ea42 0103 	orr.w	r1, r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0104 	and.w	r1, r3, #4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f003 0210 	and.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b088      	sub	sp, #32
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_SPI_Transmit+0x22>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e12d      	b.n	8005d28 <HAL_SPI_Transmit+0x27e>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ad4:	f7fc fc68 	bl	80023a8 <HAL_GetTick>
 8005ad8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d002      	beq.n	8005af0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
 8005aec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aee:	e116      	b.n	8005d1e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_Transmit+0x52>
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b00:	e10d      	b.n	8005d1e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2203      	movs	r2, #3
 8005b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b48:	d10f      	bne.n	8005b6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b40      	cmp	r3, #64	; 0x40
 8005b76:	d007      	beq.n	8005b88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b90:	d14f      	bne.n	8005c32 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0xf6>
 8005b9a:	8afb      	ldrh	r3, [r7, #22]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d142      	bne.n	8005c26 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	1c9a      	adds	r2, r3, #2
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bc4:	e02f      	b.n	8005c26 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d112      	bne.n	8005bfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	881a      	ldrh	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	1c9a      	adds	r2, r3, #2
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bf8:	e015      	b.n	8005c26 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfa:	f7fc fbd5 	bl	80023a8 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d803      	bhi.n	8005c12 <HAL_SPI_Transmit+0x168>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d102      	bne.n	8005c18 <HAL_SPI_Transmit+0x16e>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c24:	e07b      	b.n	8005d1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ca      	bne.n	8005bc6 <HAL_SPI_Transmit+0x11c>
 8005c30:	e050      	b.n	8005cd4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_Transmit+0x196>
 8005c3a:	8afb      	ldrh	r3, [r7, #22]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d144      	bne.n	8005cca <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c66:	e030      	b.n	8005cca <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d113      	bne.n	8005c9e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c9c:	e015      	b.n	8005cca <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9e:	f7fc fb83 	bl	80023a8 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d803      	bhi.n	8005cb6 <HAL_SPI_Transmit+0x20c>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_Transmit+0x212>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005cc8:	e029      	b.n	8005d1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1c9      	bne.n	8005c68 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f9db 	bl	8006094 <SPI_EndRxTxTransaction>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e003      	b.n	8005d1e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	099b      	lsrs	r3, r3, #6
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10f      	bne.n	8005d74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	099b      	lsrs	r3, r3, #6
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
    return;
 8005d72:	e0d7      	b.n	8005f24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_SPI_IRQHandler+0x66>
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	09db      	lsrs	r3, r3, #7
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
    return;
 8005d94:	e0c6      	b.n	8005f24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10c      	bne.n	8005dbc <HAL_SPI_IRQHandler+0x8c>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	099b      	lsrs	r3, r3, #6
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	0a1b      	lsrs	r3, r3, #8
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80b4 	beq.w	8005f24 <HAL_SPI_IRQHandler+0x1f4>
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80ad 	beq.w	8005f24 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	099b      	lsrs	r3, r3, #6
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d023      	beq.n	8005e1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d011      	beq.n	8005e06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	f043 0204 	orr.w	r2, r3, #4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	e00b      	b.n	8005e1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
        return;
 8005e1c:	e082      	b.n	8005f24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d014      	beq.n	8005e54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00c      	beq.n	8005e7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	f043 0208 	orr.w	r2, r3, #8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d04f      	beq.n	8005f22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <HAL_SPI_IRQHandler+0x17e>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d034      	beq.n	8005f18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0203 	bic.w	r2, r2, #3
 8005ebc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <HAL_SPI_IRQHandler+0x1fc>)
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fc fc10 	bl	80026f8 <HAL_DMA_Abort_IT>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	4a0d      	ldr	r2, [pc, #52]	; (8005f2c <HAL_SPI_IRQHandler+0x1fc>)
 8005ef8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fc fbfa 	bl	80026f8 <HAL_DMA_Abort_IT>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f16:	e003      	b.n	8005f20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f809 	bl	8005f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f1e:	e000      	b.n	8005f22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f20:	bf00      	nop
    return;
 8005f22:	bf00      	nop
  }
}
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	08005f5d 	.word	0x08005f5d

08005f30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f50:	b2db      	uxtb	r3, r3
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff ffda 	bl	8005f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f94:	f7fc fa08 	bl	80023a8 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fa4:	f7fc fa00 	bl	80023a8 <HAL_GetTick>
 8005fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005faa:	4b39      	ldr	r3, [pc, #228]	; (8006090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	015b      	lsls	r3, r3, #5
 8005fb0:	0d1b      	lsrs	r3, r3, #20
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
 8005fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fba:	e054      	b.n	8006066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc2:	d050      	beq.n	8006066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fc4:	f7fc f9f0 	bl	80023a8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d902      	bls.n	8005fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d13d      	bne.n	8006056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff2:	d111      	bne.n	8006018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffc:	d004      	beq.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006006:	d107      	bne.n	8006018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006020:	d10f      	bne.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e017      	b.n	8006086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	3b01      	subs	r3, #1
 8006064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	429a      	cmp	r2, r3
 8006074:	bf0c      	ite	eq
 8006076:	2301      	moveq	r3, #1
 8006078:	2300      	movne	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	429a      	cmp	r2, r3
 8006082:	d19b      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000044 	.word	0x20000044

08006094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <SPI_EndRxTxTransaction+0x7c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	; (8006114 <SPI_EndRxTxTransaction+0x80>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0d5b      	lsrs	r3, r3, #21
 80060ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060be:	d112      	bne.n	80060e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff ff5a 	bl	8005f84 <SPI_WaitFlagStateUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e00f      	b.n	8006106 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fc:	2b80      	cmp	r3, #128	; 0x80
 80060fe:	d0f2      	beq.n	80060e6 <SPI_EndRxTxTransaction+0x52>
 8006100:	e000      	b.n	8006104 <SPI_EndRxTxTransaction+0x70>
        break;
 8006102:	bf00      	nop
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000044 	.word	0x20000044
 8006114:	165e9f81 	.word	0x165e9f81

08006118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e042      	b.n	80061b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fc f85c 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2224      	movs	r2, #36	; 0x24
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800615a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fd71 	bl	8006c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d16d      	bne.n	80062b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <HAL_UART_Transmit+0x2c>
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e066      	b.n	80062b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2221      	movs	r2, #33	; 0x21
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061f6:	f7fc f8d7 	bl	80023a8 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006210:	d108      	bne.n	8006224 <HAL_UART_Transmit+0x6c>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e003      	b.n	800622c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800622c:	e02a      	b.n	8006284 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 faf9 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e036      	b.n	80062b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800625c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	3302      	adds	r3, #2
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e007      	b.n	8006276 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1cf      	bne.n	800622e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	; 0x40
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fac9 	bl	8006830 <UART_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e006      	b.n	80062b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b0ba      	sub	sp, #232	; 0xe8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <HAL_UART_IRQHandler+0x66>
 8006312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fbd1 	bl	8006ac6 <UART_Receive_IT>
      return;
 8006324:	e25b      	b.n	80067de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80de 	beq.w	80064ec <HAL_UART_IRQHandler+0x22c>
 8006330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006340:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80d1 	beq.w	80064ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <HAL_UART_IRQHandler+0xae>
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <HAL_UART_IRQHandler+0xd2>
 800637a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	f043 0202 	orr.w	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <HAL_UART_IRQHandler+0xf6>
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f043 0204 	orr.w	r2, r3, #4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d011      	beq.n	80063e6 <HAL_UART_IRQHandler+0x126>
 80063c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f043 0208 	orr.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 81f2 	beq.w	80067d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_UART_IRQHandler+0x14e>
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fb5c 	bl	8006ac6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	bf0c      	ite	eq
 800641c:	2301      	moveq	r3, #1
 800641e:	2300      	movne	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <HAL_UART_IRQHandler+0x17a>
 8006432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d04f      	beq.n	80064da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa66 	bl	800690c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b40      	cmp	r3, #64	; 0x40
 800644c:	d141      	bne.n	80064d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3314      	adds	r3, #20
 8006454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3314      	adds	r3, #20
 8006476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800647a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800647e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d9      	bne.n	800644e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d013      	beq.n	80064ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	4a7e      	ldr	r2, [pc, #504]	; (80066a0 <HAL_UART_IRQHandler+0x3e0>)
 80064a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fc f922 	bl	80026f8 <HAL_DMA_Abort_IT>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d016      	beq.n	80064e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c8:	e00e      	b.n	80064e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f99c 	bl	8006808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	e00a      	b.n	80064e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f998 	bl	8006808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	e006      	b.n	80064e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f994 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80064e6:	e175      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	bf00      	nop
    return;
 80064ea:	e173      	b.n	80067d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 814f 	bne.w	8006794 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8148 	beq.w	8006794 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8141 	beq.w	8006794 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	f040 80b6 	bne.w	80066a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006544:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8145 	beq.w	80067d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006556:	429a      	cmp	r2, r3
 8006558:	f080 813e 	bcs.w	80067d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006562:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b20      	cmp	r3, #32
 800656c:	f000 8088 	beq.w	8006680 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800658e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800659c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1d9      	bne.n	8006570 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3314      	adds	r3, #20
 80065c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e1      	bne.n	80065bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3314      	adds	r3, #20
 80065fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800661c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800661e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006622:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800662a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e3      	bne.n	80065f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	f023 0310 	bic.w	r3, r3, #16
 8006654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006662:	65ba      	str	r2, [r7, #88]	; 0x58
 8006664:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e3      	bne.n	800663e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	4618      	mov	r0, r3
 800667c:	f7fb ffff 	bl	800267e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800668e:	b29b      	uxth	r3, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	b29b      	uxth	r3, r3
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8bf 	bl	800681a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800669c:	e09c      	b.n	80067d8 <HAL_UART_IRQHandler+0x518>
 800669e:	bf00      	nop
 80066a0:	080069d1 	.word	0x080069d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 808e 	beq.w	80067dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8089 	beq.w	80067dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066ee:	647a      	str	r2, [r7, #68]	; 0x44
 80066f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e3      	bne.n	80066ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3314      	adds	r3, #20
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	623b      	str	r3, [r7, #32]
   return(result);
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006726:	633a      	str	r2, [r7, #48]	; 0x30
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e3      	bne.n	8006702 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	60fb      	str	r3, [r7, #12]
   return(result);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0310 	bic.w	r3, r3, #16
 800675e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800676c:	61fa      	str	r2, [r7, #28]
 800676e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	69b9      	ldr	r1, [r7, #24]
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	617b      	str	r3, [r7, #20]
   return(result);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e3      	bne.n	8006748 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006786:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f844 	bl	800681a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006792:	e023      	b.n	80067dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <HAL_UART_IRQHandler+0x4f4>
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f923 	bl	80069f8 <UART_Transmit_IT>
    return;
 80067b2:	e014      	b.n	80067de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_UART_IRQHandler+0x51e>
 80067c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f962 	bl	8006a96 <UART_EndTransmit_IT>
    return;
 80067d2:	e004      	b.n	80067de <HAL_UART_IRQHandler+0x51e>
    return;
 80067d4:	bf00      	nop
 80067d6:	e002      	b.n	80067de <HAL_UART_IRQHandler+0x51e>
      return;
 80067d8:	bf00      	nop
 80067da:	e000      	b.n	80067de <HAL_UART_IRQHandler+0x51e>
      return;
 80067dc:	bf00      	nop
  }
}
 80067de:	37e8      	adds	r7, #232	; 0xe8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b090      	sub	sp, #64	; 0x40
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006840:	e050      	b.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d04c      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <UART_WaitOnFlagUntilTimeout+0x30>
 8006850:	f7fb fdaa 	bl	80023a8 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685c:	429a      	cmp	r2, r3
 800685e:	d241      	bcs.n	80068e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006880:	637a      	str	r2, [r7, #52]	; 0x34
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3314      	adds	r3, #20
 800689a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	613b      	str	r3, [r7, #16]
   return(result);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b4:	623a      	str	r2, [r7, #32]
 80068b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	69f9      	ldr	r1, [r7, #28]
 80068ba:	6a3a      	ldr	r2, [r7, #32]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e00f      	b.n	8006904 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4013      	ands	r3, r2
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d09f      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3740      	adds	r7, #64	; 0x40
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b095      	sub	sp, #84	; 0x54
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006934:	643a      	str	r2, [r7, #64]	; 0x40
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800693a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	61fb      	str	r3, [r7, #28]
   return(result);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e5      	bne.n	8006948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60bb      	str	r3, [r7, #8]
   return(result);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	647b      	str	r3, [r7, #68]	; 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069c6:	bf00      	nop
 80069c8:	3754      	adds	r7, #84	; 0x54
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff ff0c 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b21      	cmp	r3, #33	; 0x21
 8006a0a:	d13e      	bne.n	8006a8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a14:	d114      	bne.n	8006a40 <UART_Transmit_IT+0x48>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d110      	bne.n	8006a40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	1c9a      	adds	r2, r3, #2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]
 8006a3e:	e008      	b.n	8006a52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6211      	str	r1, [r2, #32]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10f      	bne.n	8006a86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc80      	pop	{r7}
 8006a94:	4770      	bx	lr

08006a96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fe94 	bl	80067e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08c      	sub	sp, #48	; 0x30
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b22      	cmp	r3, #34	; 0x22
 8006ad8:	f040 80ae 	bne.w	8006c38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d117      	bne.n	8006b16 <UART_Receive_IT+0x50>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d113      	bne.n	8006b16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0e:	1c9a      	adds	r2, r3, #2
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	629a      	str	r2, [r3, #40]	; 0x28
 8006b14:	e026      	b.n	8006b64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b28:	d007      	beq.n	8006b3a <UART_Receive_IT+0x74>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <UART_Receive_IT+0x82>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e008      	b.n	8006b5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4619      	mov	r1, r3
 8006b72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d15d      	bne.n	8006c34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0220 	bic.w	r2, r2, #32
 8006b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695a      	ldr	r2, [r3, #20]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d135      	bne.n	8006c2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f023 0310 	bic.w	r3, r3, #16
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be4:	623a      	str	r2, [r7, #32]
 8006be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d10a      	bne.n	8006c1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fdf9 	bl	800681a <HAL_UARTEx_RxEventCallback>
 8006c28:	e002      	b.n	8006c30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fde3 	bl	80067f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e002      	b.n	8006c3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e000      	b.n	8006c3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c38:	2302      	movs	r3, #2
  }
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c84:	f023 030c 	bic.w	r3, r3, #12
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a55      	ldr	r2, [pc, #340]	; (8006e04 <UART_SetConfig+0x1c0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d103      	bne.n	8006cba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cb2:	f7fe fdfd 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	e002      	b.n	8006cc0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cba:	f7fe fde5 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8006cbe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc8:	d14c      	bne.n	8006d64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009a      	lsls	r2, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	4a49      	ldr	r2, [pc, #292]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	0119      	lsls	r1, r3, #4
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009a      	lsls	r2, r3, #2
 8006cf4:	441a      	add	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d00:	4b41      	ldr	r3, [pc, #260]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006d02:	fba3 0302 	umull	r0, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2064      	movs	r0, #100	; 0x64
 8006d0a:	fb00 f303 	mul.w	r3, r0, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	3332      	adds	r3, #50	; 0x32
 8006d14:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d22:	4419      	add	r1, r3
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009a      	lsls	r2, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d3a:	4b33      	ldr	r3, [pc, #204]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006d3c:	fba3 0302 	umull	r0, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	2064      	movs	r0, #100	; 0x64
 8006d44:	fb00 f303 	mul.w	r3, r0, r3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	3332      	adds	r3, #50	; 0x32
 8006d4e:	4a2e      	ldr	r2, [pc, #184]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f003 0207 	and.w	r2, r3, #7
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	440a      	add	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d62:	e04a      	b.n	8006dfa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009a      	lsls	r2, r3, #2
 8006d6e:	441a      	add	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	0119      	lsls	r1, r3, #4
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009a      	lsls	r2, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006d9c:	fba3 0302 	umull	r0, r3, r3, r2
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	2064      	movs	r0, #100	; 0x64
 8006da4:	fb00 f303 	mul.w	r3, r0, r3
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	3332      	adds	r3, #50	; 0x32
 8006dae:	4a16      	ldr	r2, [pc, #88]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dba:	4419      	add	r1, r3
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009a      	lsls	r2, r3, #2
 8006dc6:	441a      	add	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006dd4:	fba3 0302 	umull	r0, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	2064      	movs	r0, #100	; 0x64
 8006ddc:	fb00 f303 	mul.w	r3, r0, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	3332      	adds	r3, #50	; 0x32
 8006de6:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <UART_SetConfig+0x1c4>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	095b      	lsrs	r3, r3, #5
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	440a      	add	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40013800 	.word	0x40013800
 8006e08:	51eb851f 	.word	0x51eb851f

08006e0c <__errno>:
 8006e0c:	4b01      	ldr	r3, [pc, #4]	; (8006e14 <__errno+0x8>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000050 	.word	0x20000050

08006e18 <__libc_init_array>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	4d0c      	ldr	r5, [pc, #48]	; (8006e50 <__libc_init_array+0x38>)
 8006e1e:	4c0d      	ldr	r4, [pc, #52]	; (8006e54 <__libc_init_array+0x3c>)
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	42a6      	cmp	r6, r4
 8006e26:	d109      	bne.n	8006e3c <__libc_init_array+0x24>
 8006e28:	f000 fc5c 	bl	80076e4 <_init>
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4d0a      	ldr	r5, [pc, #40]	; (8006e58 <__libc_init_array+0x40>)
 8006e30:	4c0a      	ldr	r4, [pc, #40]	; (8006e5c <__libc_init_array+0x44>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	42a6      	cmp	r6, r4
 8006e38:	d105      	bne.n	8006e46 <__libc_init_array+0x2e>
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e40:	4798      	blx	r3
 8006e42:	3601      	adds	r6, #1
 8006e44:	e7ee      	b.n	8006e24 <__libc_init_array+0xc>
 8006e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4a:	4798      	blx	r3
 8006e4c:	3601      	adds	r6, #1
 8006e4e:	e7f2      	b.n	8006e36 <__libc_init_array+0x1e>
 8006e50:	08007fdc 	.word	0x08007fdc
 8006e54:	08007fdc 	.word	0x08007fdc
 8006e58:	08007fdc 	.word	0x08007fdc
 8006e5c:	08007fe0 	.word	0x08007fe0

08006e60 <memset>:
 8006e60:	4603      	mov	r3, r0
 8006e62:	4402      	add	r2, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d100      	bne.n	8006e6a <memset+0xa>
 8006e68:	4770      	bx	lr
 8006e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e6e:	e7f9      	b.n	8006e64 <memset+0x4>

08006e70 <siprintf>:
 8006e70:	b40e      	push	{r1, r2, r3}
 8006e72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e76:	b500      	push	{lr}
 8006e78:	b09c      	sub	sp, #112	; 0x70
 8006e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e7c:	9002      	str	r0, [sp, #8]
 8006e7e:	9006      	str	r0, [sp, #24]
 8006e80:	9107      	str	r1, [sp, #28]
 8006e82:	9104      	str	r1, [sp, #16]
 8006e84:	4808      	ldr	r0, [pc, #32]	; (8006ea8 <siprintf+0x38>)
 8006e86:	4909      	ldr	r1, [pc, #36]	; (8006eac <siprintf+0x3c>)
 8006e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8c:	9105      	str	r1, [sp, #20]
 8006e8e:	6800      	ldr	r0, [r0, #0]
 8006e90:	a902      	add	r1, sp, #8
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	f000 f868 	bl	8006f68 <_svfiprintf_r>
 8006e98:	2200      	movs	r2, #0
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	b01c      	add	sp, #112	; 0x70
 8006ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ea4:	b003      	add	sp, #12
 8006ea6:	4770      	bx	lr
 8006ea8:	20000050 	.word	0x20000050
 8006eac:	ffff0208 	.word	0xffff0208

08006eb0 <__ssputs_r>:
 8006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	688e      	ldr	r6, [r1, #8]
 8006eb6:	4682      	mov	sl, r0
 8006eb8:	429e      	cmp	r6, r3
 8006eba:	460c      	mov	r4, r1
 8006ebc:	4690      	mov	r8, r2
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	d838      	bhi.n	8006f34 <__ssputs_r+0x84>
 8006ec2:	898a      	ldrh	r2, [r1, #12]
 8006ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ec8:	d032      	beq.n	8006f30 <__ssputs_r+0x80>
 8006eca:	6825      	ldr	r5, [r4, #0]
 8006ecc:	6909      	ldr	r1, [r1, #16]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	eba5 0901 	sub.w	r9, r5, r1
 8006ed4:	6965      	ldr	r5, [r4, #20]
 8006ed6:	444b      	add	r3, r9
 8006ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ee0:	106d      	asrs	r5, r5, #1
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	bf38      	it	cc
 8006ee6:	461d      	movcc	r5, r3
 8006ee8:	0553      	lsls	r3, r2, #21
 8006eea:	d531      	bpl.n	8006f50 <__ssputs_r+0xa0>
 8006eec:	4629      	mov	r1, r5
 8006eee:	f000 fb53 	bl	8007598 <_malloc_r>
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	b950      	cbnz	r0, 8006f0c <__ssputs_r+0x5c>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	f8ca 3000 	str.w	r3, [sl]
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	464a      	mov	r2, r9
 8006f0e:	6921      	ldr	r1, [r4, #16]
 8006f10:	f000 face 	bl	80074b0 <memcpy>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	6126      	str	r6, [r4, #16]
 8006f22:	444e      	add	r6, r9
 8006f24:	6026      	str	r6, [r4, #0]
 8006f26:	463e      	mov	r6, r7
 8006f28:	6165      	str	r5, [r4, #20]
 8006f2a:	eba5 0509 	sub.w	r5, r5, r9
 8006f2e:	60a5      	str	r5, [r4, #8]
 8006f30:	42be      	cmp	r6, r7
 8006f32:	d900      	bls.n	8006f36 <__ssputs_r+0x86>
 8006f34:	463e      	mov	r6, r7
 8006f36:	4632      	mov	r2, r6
 8006f38:	4641      	mov	r1, r8
 8006f3a:	6820      	ldr	r0, [r4, #0]
 8006f3c:	f000 fac6 	bl	80074cc <memmove>
 8006f40:	68a3      	ldr	r3, [r4, #8]
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	1b9b      	subs	r3, r3, r6
 8006f46:	4432      	add	r2, r6
 8006f48:	2000      	movs	r0, #0
 8006f4a:	60a3      	str	r3, [r4, #8]
 8006f4c:	6022      	str	r2, [r4, #0]
 8006f4e:	e7db      	b.n	8006f08 <__ssputs_r+0x58>
 8006f50:	462a      	mov	r2, r5
 8006f52:	f000 fb7b 	bl	800764c <_realloc_r>
 8006f56:	4606      	mov	r6, r0
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1e1      	bne.n	8006f20 <__ssputs_r+0x70>
 8006f5c:	4650      	mov	r0, sl
 8006f5e:	6921      	ldr	r1, [r4, #16]
 8006f60:	f000 face 	bl	8007500 <_free_r>
 8006f64:	e7c7      	b.n	8006ef6 <__ssputs_r+0x46>
	...

08006f68 <_svfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	4698      	mov	r8, r3
 8006f6e:	898b      	ldrh	r3, [r1, #12]
 8006f70:	4607      	mov	r7, r0
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	460d      	mov	r5, r1
 8006f76:	4614      	mov	r4, r2
 8006f78:	b09d      	sub	sp, #116	; 0x74
 8006f7a:	d50e      	bpl.n	8006f9a <_svfiprintf_r+0x32>
 8006f7c:	690b      	ldr	r3, [r1, #16]
 8006f7e:	b963      	cbnz	r3, 8006f9a <_svfiprintf_r+0x32>
 8006f80:	2140      	movs	r1, #64	; 0x40
 8006f82:	f000 fb09 	bl	8007598 <_malloc_r>
 8006f86:	6028      	str	r0, [r5, #0]
 8006f88:	6128      	str	r0, [r5, #16]
 8006f8a:	b920      	cbnz	r0, 8006f96 <_svfiprintf_r+0x2e>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	e0d1      	b.n	800713a <_svfiprintf_r+0x1d2>
 8006f96:	2340      	movs	r3, #64	; 0x40
 8006f98:	616b      	str	r3, [r5, #20]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9e:	2320      	movs	r3, #32
 8006fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fa4:	2330      	movs	r3, #48	; 0x30
 8006fa6:	f04f 0901 	mov.w	r9, #1
 8006faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007154 <_svfiprintf_r+0x1ec>
 8006fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fb6:	4623      	mov	r3, r4
 8006fb8:	469a      	mov	sl, r3
 8006fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fbe:	b10a      	cbz	r2, 8006fc4 <_svfiprintf_r+0x5c>
 8006fc0:	2a25      	cmp	r2, #37	; 0x25
 8006fc2:	d1f9      	bne.n	8006fb8 <_svfiprintf_r+0x50>
 8006fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc8:	d00b      	beq.n	8006fe2 <_svfiprintf_r+0x7a>
 8006fca:	465b      	mov	r3, fp
 8006fcc:	4622      	mov	r2, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff ff6d 	bl	8006eb0 <__ssputs_r>
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f000 80aa 	beq.w	8007130 <_svfiprintf_r+0x1c8>
 8006fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fde:	445a      	add	r2, fp
 8006fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80a2 	beq.w	8007130 <_svfiprintf_r+0x1c8>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff6:	f10a 0a01 	add.w	sl, sl, #1
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	9307      	str	r3, [sp, #28]
 8006ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007002:	931a      	str	r3, [sp, #104]	; 0x68
 8007004:	4654      	mov	r4, sl
 8007006:	2205      	movs	r2, #5
 8007008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700c:	4851      	ldr	r0, [pc, #324]	; (8007154 <_svfiprintf_r+0x1ec>)
 800700e:	f000 fa41 	bl	8007494 <memchr>
 8007012:	9a04      	ldr	r2, [sp, #16]
 8007014:	b9d8      	cbnz	r0, 800704e <_svfiprintf_r+0xe6>
 8007016:	06d0      	lsls	r0, r2, #27
 8007018:	bf44      	itt	mi
 800701a:	2320      	movmi	r3, #32
 800701c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007020:	0711      	lsls	r1, r2, #28
 8007022:	bf44      	itt	mi
 8007024:	232b      	movmi	r3, #43	; 0x2b
 8007026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800702a:	f89a 3000 	ldrb.w	r3, [sl]
 800702e:	2b2a      	cmp	r3, #42	; 0x2a
 8007030:	d015      	beq.n	800705e <_svfiprintf_r+0xf6>
 8007032:	4654      	mov	r4, sl
 8007034:	2000      	movs	r0, #0
 8007036:	f04f 0c0a 	mov.w	ip, #10
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	4621      	mov	r1, r4
 800703e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007042:	3b30      	subs	r3, #48	; 0x30
 8007044:	2b09      	cmp	r3, #9
 8007046:	d94e      	bls.n	80070e6 <_svfiprintf_r+0x17e>
 8007048:	b1b0      	cbz	r0, 8007078 <_svfiprintf_r+0x110>
 800704a:	9207      	str	r2, [sp, #28]
 800704c:	e014      	b.n	8007078 <_svfiprintf_r+0x110>
 800704e:	eba0 0308 	sub.w	r3, r0, r8
 8007052:	fa09 f303 	lsl.w	r3, r9, r3
 8007056:	4313      	orrs	r3, r2
 8007058:	46a2      	mov	sl, r4
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	e7d2      	b.n	8007004 <_svfiprintf_r+0x9c>
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	1d19      	adds	r1, r3, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	9103      	str	r1, [sp, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	bfbb      	ittet	lt
 800706a:	425b      	neglt	r3, r3
 800706c:	f042 0202 	orrlt.w	r2, r2, #2
 8007070:	9307      	strge	r3, [sp, #28]
 8007072:	9307      	strlt	r3, [sp, #28]
 8007074:	bfb8      	it	lt
 8007076:	9204      	strlt	r2, [sp, #16]
 8007078:	7823      	ldrb	r3, [r4, #0]
 800707a:	2b2e      	cmp	r3, #46	; 0x2e
 800707c:	d10c      	bne.n	8007098 <_svfiprintf_r+0x130>
 800707e:	7863      	ldrb	r3, [r4, #1]
 8007080:	2b2a      	cmp	r3, #42	; 0x2a
 8007082:	d135      	bne.n	80070f0 <_svfiprintf_r+0x188>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	3402      	adds	r4, #2
 8007088:	1d1a      	adds	r2, r3, #4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	9203      	str	r2, [sp, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	f04f 33ff 	movlt.w	r3, #4294967295
 8007096:	9305      	str	r3, [sp, #20]
 8007098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007164 <_svfiprintf_r+0x1fc>
 800709c:	2203      	movs	r2, #3
 800709e:	4650      	mov	r0, sl
 80070a0:	7821      	ldrb	r1, [r4, #0]
 80070a2:	f000 f9f7 	bl	8007494 <memchr>
 80070a6:	b140      	cbz	r0, 80070ba <_svfiprintf_r+0x152>
 80070a8:	2340      	movs	r3, #64	; 0x40
 80070aa:	eba0 000a 	sub.w	r0, r0, sl
 80070ae:	fa03 f000 	lsl.w	r0, r3, r0
 80070b2:	9b04      	ldr	r3, [sp, #16]
 80070b4:	3401      	adds	r4, #1
 80070b6:	4303      	orrs	r3, r0
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070be:	2206      	movs	r2, #6
 80070c0:	4825      	ldr	r0, [pc, #148]	; (8007158 <_svfiprintf_r+0x1f0>)
 80070c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070c6:	f000 f9e5 	bl	8007494 <memchr>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d038      	beq.n	8007140 <_svfiprintf_r+0x1d8>
 80070ce:	4b23      	ldr	r3, [pc, #140]	; (800715c <_svfiprintf_r+0x1f4>)
 80070d0:	bb1b      	cbnz	r3, 800711a <_svfiprintf_r+0x1b2>
 80070d2:	9b03      	ldr	r3, [sp, #12]
 80070d4:	3307      	adds	r3, #7
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	3308      	adds	r3, #8
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e0:	4433      	add	r3, r6
 80070e2:	9309      	str	r3, [sp, #36]	; 0x24
 80070e4:	e767      	b.n	8006fb6 <_svfiprintf_r+0x4e>
 80070e6:	460c      	mov	r4, r1
 80070e8:	2001      	movs	r0, #1
 80070ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ee:	e7a5      	b.n	800703c <_svfiprintf_r+0xd4>
 80070f0:	2300      	movs	r3, #0
 80070f2:	f04f 0c0a 	mov.w	ip, #10
 80070f6:	4619      	mov	r1, r3
 80070f8:	3401      	adds	r4, #1
 80070fa:	9305      	str	r3, [sp, #20]
 80070fc:	4620      	mov	r0, r4
 80070fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007102:	3a30      	subs	r2, #48	; 0x30
 8007104:	2a09      	cmp	r2, #9
 8007106:	d903      	bls.n	8007110 <_svfiprintf_r+0x1a8>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0c5      	beq.n	8007098 <_svfiprintf_r+0x130>
 800710c:	9105      	str	r1, [sp, #20]
 800710e:	e7c3      	b.n	8007098 <_svfiprintf_r+0x130>
 8007110:	4604      	mov	r4, r0
 8007112:	2301      	movs	r3, #1
 8007114:	fb0c 2101 	mla	r1, ip, r1, r2
 8007118:	e7f0      	b.n	80070fc <_svfiprintf_r+0x194>
 800711a:	ab03      	add	r3, sp, #12
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	462a      	mov	r2, r5
 8007120:	4638      	mov	r0, r7
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <_svfiprintf_r+0x1f8>)
 8007124:	a904      	add	r1, sp, #16
 8007126:	f3af 8000 	nop.w
 800712a:	1c42      	adds	r2, r0, #1
 800712c:	4606      	mov	r6, r0
 800712e:	d1d6      	bne.n	80070de <_svfiprintf_r+0x176>
 8007130:	89ab      	ldrh	r3, [r5, #12]
 8007132:	065b      	lsls	r3, r3, #25
 8007134:	f53f af2c 	bmi.w	8006f90 <_svfiprintf_r+0x28>
 8007138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800713a:	b01d      	add	sp, #116	; 0x74
 800713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007140:	ab03      	add	r3, sp, #12
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	462a      	mov	r2, r5
 8007146:	4638      	mov	r0, r7
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <_svfiprintf_r+0x1f8>)
 800714a:	a904      	add	r1, sp, #16
 800714c:	f000 f87c 	bl	8007248 <_printf_i>
 8007150:	e7eb      	b.n	800712a <_svfiprintf_r+0x1c2>
 8007152:	bf00      	nop
 8007154:	08007fa0 	.word	0x08007fa0
 8007158:	08007faa 	.word	0x08007faa
 800715c:	00000000 	.word	0x00000000
 8007160:	08006eb1 	.word	0x08006eb1
 8007164:	08007fa6 	.word	0x08007fa6

08007168 <_printf_common>:
 8007168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	4616      	mov	r6, r2
 800716e:	4699      	mov	r9, r3
 8007170:	688a      	ldr	r2, [r1, #8]
 8007172:	690b      	ldr	r3, [r1, #16]
 8007174:	4607      	mov	r7, r0
 8007176:	4293      	cmp	r3, r2
 8007178:	bfb8      	it	lt
 800717a:	4613      	movlt	r3, r2
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007182:	460c      	mov	r4, r1
 8007184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007188:	b10a      	cbz	r2, 800718e <_printf_common+0x26>
 800718a:	3301      	adds	r3, #1
 800718c:	6033      	str	r3, [r6, #0]
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	0699      	lsls	r1, r3, #26
 8007192:	bf42      	ittt	mi
 8007194:	6833      	ldrmi	r3, [r6, #0]
 8007196:	3302      	addmi	r3, #2
 8007198:	6033      	strmi	r3, [r6, #0]
 800719a:	6825      	ldr	r5, [r4, #0]
 800719c:	f015 0506 	ands.w	r5, r5, #6
 80071a0:	d106      	bne.n	80071b0 <_printf_common+0x48>
 80071a2:	f104 0a19 	add.w	sl, r4, #25
 80071a6:	68e3      	ldr	r3, [r4, #12]
 80071a8:	6832      	ldr	r2, [r6, #0]
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	42ab      	cmp	r3, r5
 80071ae:	dc28      	bgt.n	8007202 <_printf_common+0x9a>
 80071b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071b4:	1e13      	subs	r3, r2, #0
 80071b6:	6822      	ldr	r2, [r4, #0]
 80071b8:	bf18      	it	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	0692      	lsls	r2, r2, #26
 80071be:	d42d      	bmi.n	800721c <_printf_common+0xb4>
 80071c0:	4649      	mov	r1, r9
 80071c2:	4638      	mov	r0, r7
 80071c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071c8:	47c0      	blx	r8
 80071ca:	3001      	adds	r0, #1
 80071cc:	d020      	beq.n	8007210 <_printf_common+0xa8>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	68e5      	ldr	r5, [r4, #12]
 80071d2:	f003 0306 	and.w	r3, r3, #6
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	bf18      	it	ne
 80071da:	2500      	movne	r5, #0
 80071dc:	6832      	ldr	r2, [r6, #0]
 80071de:	f04f 0600 	mov.w	r6, #0
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	bf08      	it	eq
 80071e6:	1aad      	subeq	r5, r5, r2
 80071e8:	6922      	ldr	r2, [r4, #16]
 80071ea:	bf08      	it	eq
 80071ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071f0:	4293      	cmp	r3, r2
 80071f2:	bfc4      	itt	gt
 80071f4:	1a9b      	subgt	r3, r3, r2
 80071f6:	18ed      	addgt	r5, r5, r3
 80071f8:	341a      	adds	r4, #26
 80071fa:	42b5      	cmp	r5, r6
 80071fc:	d11a      	bne.n	8007234 <_printf_common+0xcc>
 80071fe:	2000      	movs	r0, #0
 8007200:	e008      	b.n	8007214 <_printf_common+0xac>
 8007202:	2301      	movs	r3, #1
 8007204:	4652      	mov	r2, sl
 8007206:	4649      	mov	r1, r9
 8007208:	4638      	mov	r0, r7
 800720a:	47c0      	blx	r8
 800720c:	3001      	adds	r0, #1
 800720e:	d103      	bne.n	8007218 <_printf_common+0xb0>
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007218:	3501      	adds	r5, #1
 800721a:	e7c4      	b.n	80071a6 <_printf_common+0x3e>
 800721c:	2030      	movs	r0, #48	; 0x30
 800721e:	18e1      	adds	r1, r4, r3
 8007220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800722a:	4422      	add	r2, r4
 800722c:	3302      	adds	r3, #2
 800722e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007232:	e7c5      	b.n	80071c0 <_printf_common+0x58>
 8007234:	2301      	movs	r3, #1
 8007236:	4622      	mov	r2, r4
 8007238:	4649      	mov	r1, r9
 800723a:	4638      	mov	r0, r7
 800723c:	47c0      	blx	r8
 800723e:	3001      	adds	r0, #1
 8007240:	d0e6      	beq.n	8007210 <_printf_common+0xa8>
 8007242:	3601      	adds	r6, #1
 8007244:	e7d9      	b.n	80071fa <_printf_common+0x92>
	...

08007248 <_printf_i>:
 8007248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	460c      	mov	r4, r1
 800724e:	7e27      	ldrb	r7, [r4, #24]
 8007250:	4691      	mov	r9, r2
 8007252:	2f78      	cmp	r7, #120	; 0x78
 8007254:	4680      	mov	r8, r0
 8007256:	469a      	mov	sl, r3
 8007258:	990c      	ldr	r1, [sp, #48]	; 0x30
 800725a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800725e:	d807      	bhi.n	8007270 <_printf_i+0x28>
 8007260:	2f62      	cmp	r7, #98	; 0x62
 8007262:	d80a      	bhi.n	800727a <_printf_i+0x32>
 8007264:	2f00      	cmp	r7, #0
 8007266:	f000 80d9 	beq.w	800741c <_printf_i+0x1d4>
 800726a:	2f58      	cmp	r7, #88	; 0x58
 800726c:	f000 80a4 	beq.w	80073b8 <_printf_i+0x170>
 8007270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007278:	e03a      	b.n	80072f0 <_printf_i+0xa8>
 800727a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800727e:	2b15      	cmp	r3, #21
 8007280:	d8f6      	bhi.n	8007270 <_printf_i+0x28>
 8007282:	a001      	add	r0, pc, #4	; (adr r0, 8007288 <_printf_i+0x40>)
 8007284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007288:	080072e1 	.word	0x080072e1
 800728c:	080072f5 	.word	0x080072f5
 8007290:	08007271 	.word	0x08007271
 8007294:	08007271 	.word	0x08007271
 8007298:	08007271 	.word	0x08007271
 800729c:	08007271 	.word	0x08007271
 80072a0:	080072f5 	.word	0x080072f5
 80072a4:	08007271 	.word	0x08007271
 80072a8:	08007271 	.word	0x08007271
 80072ac:	08007271 	.word	0x08007271
 80072b0:	08007271 	.word	0x08007271
 80072b4:	08007403 	.word	0x08007403
 80072b8:	08007325 	.word	0x08007325
 80072bc:	080073e5 	.word	0x080073e5
 80072c0:	08007271 	.word	0x08007271
 80072c4:	08007271 	.word	0x08007271
 80072c8:	08007425 	.word	0x08007425
 80072cc:	08007271 	.word	0x08007271
 80072d0:	08007325 	.word	0x08007325
 80072d4:	08007271 	.word	0x08007271
 80072d8:	08007271 	.word	0x08007271
 80072dc:	080073ed 	.word	0x080073ed
 80072e0:	680b      	ldr	r3, [r1, #0]
 80072e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	600a      	str	r2, [r1, #0]
 80072ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072f0:	2301      	movs	r3, #1
 80072f2:	e0a4      	b.n	800743e <_printf_i+0x1f6>
 80072f4:	6825      	ldr	r5, [r4, #0]
 80072f6:	6808      	ldr	r0, [r1, #0]
 80072f8:	062e      	lsls	r6, r5, #24
 80072fa:	f100 0304 	add.w	r3, r0, #4
 80072fe:	d50a      	bpl.n	8007316 <_printf_i+0xce>
 8007300:	6805      	ldr	r5, [r0, #0]
 8007302:	600b      	str	r3, [r1, #0]
 8007304:	2d00      	cmp	r5, #0
 8007306:	da03      	bge.n	8007310 <_printf_i+0xc8>
 8007308:	232d      	movs	r3, #45	; 0x2d
 800730a:	426d      	negs	r5, r5
 800730c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007310:	230a      	movs	r3, #10
 8007312:	485e      	ldr	r0, [pc, #376]	; (800748c <_printf_i+0x244>)
 8007314:	e019      	b.n	800734a <_printf_i+0x102>
 8007316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800731a:	6805      	ldr	r5, [r0, #0]
 800731c:	600b      	str	r3, [r1, #0]
 800731e:	bf18      	it	ne
 8007320:	b22d      	sxthne	r5, r5
 8007322:	e7ef      	b.n	8007304 <_printf_i+0xbc>
 8007324:	680b      	ldr	r3, [r1, #0]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	1d18      	adds	r0, r3, #4
 800732a:	6008      	str	r0, [r1, #0]
 800732c:	0628      	lsls	r0, r5, #24
 800732e:	d501      	bpl.n	8007334 <_printf_i+0xec>
 8007330:	681d      	ldr	r5, [r3, #0]
 8007332:	e002      	b.n	800733a <_printf_i+0xf2>
 8007334:	0669      	lsls	r1, r5, #25
 8007336:	d5fb      	bpl.n	8007330 <_printf_i+0xe8>
 8007338:	881d      	ldrh	r5, [r3, #0]
 800733a:	2f6f      	cmp	r7, #111	; 0x6f
 800733c:	bf0c      	ite	eq
 800733e:	2308      	moveq	r3, #8
 8007340:	230a      	movne	r3, #10
 8007342:	4852      	ldr	r0, [pc, #328]	; (800748c <_printf_i+0x244>)
 8007344:	2100      	movs	r1, #0
 8007346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800734a:	6866      	ldr	r6, [r4, #4]
 800734c:	2e00      	cmp	r6, #0
 800734e:	bfa8      	it	ge
 8007350:	6821      	ldrge	r1, [r4, #0]
 8007352:	60a6      	str	r6, [r4, #8]
 8007354:	bfa4      	itt	ge
 8007356:	f021 0104 	bicge.w	r1, r1, #4
 800735a:	6021      	strge	r1, [r4, #0]
 800735c:	b90d      	cbnz	r5, 8007362 <_printf_i+0x11a>
 800735e:	2e00      	cmp	r6, #0
 8007360:	d04d      	beq.n	80073fe <_printf_i+0x1b6>
 8007362:	4616      	mov	r6, r2
 8007364:	fbb5 f1f3 	udiv	r1, r5, r3
 8007368:	fb03 5711 	mls	r7, r3, r1, r5
 800736c:	5dc7      	ldrb	r7, [r0, r7]
 800736e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007372:	462f      	mov	r7, r5
 8007374:	42bb      	cmp	r3, r7
 8007376:	460d      	mov	r5, r1
 8007378:	d9f4      	bls.n	8007364 <_printf_i+0x11c>
 800737a:	2b08      	cmp	r3, #8
 800737c:	d10b      	bne.n	8007396 <_printf_i+0x14e>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	07df      	lsls	r7, r3, #31
 8007382:	d508      	bpl.n	8007396 <_printf_i+0x14e>
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	6861      	ldr	r1, [r4, #4]
 8007388:	4299      	cmp	r1, r3
 800738a:	bfde      	ittt	le
 800738c:	2330      	movle	r3, #48	; 0x30
 800738e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007392:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007396:	1b92      	subs	r2, r2, r6
 8007398:	6122      	str	r2, [r4, #16]
 800739a:	464b      	mov	r3, r9
 800739c:	4621      	mov	r1, r4
 800739e:	4640      	mov	r0, r8
 80073a0:	f8cd a000 	str.w	sl, [sp]
 80073a4:	aa03      	add	r2, sp, #12
 80073a6:	f7ff fedf 	bl	8007168 <_printf_common>
 80073aa:	3001      	adds	r0, #1
 80073ac:	d14c      	bne.n	8007448 <_printf_i+0x200>
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295
 80073b2:	b004      	add	sp, #16
 80073b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b8:	4834      	ldr	r0, [pc, #208]	; (800748c <_printf_i+0x244>)
 80073ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073be:	680e      	ldr	r6, [r1, #0]
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80073c6:	061f      	lsls	r7, r3, #24
 80073c8:	600e      	str	r6, [r1, #0]
 80073ca:	d514      	bpl.n	80073f6 <_printf_i+0x1ae>
 80073cc:	07d9      	lsls	r1, r3, #31
 80073ce:	bf44      	itt	mi
 80073d0:	f043 0320 	orrmi.w	r3, r3, #32
 80073d4:	6023      	strmi	r3, [r4, #0]
 80073d6:	b91d      	cbnz	r5, 80073e0 <_printf_i+0x198>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	f023 0320 	bic.w	r3, r3, #32
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	2310      	movs	r3, #16
 80073e2:	e7af      	b.n	8007344 <_printf_i+0xfc>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	f043 0320 	orr.w	r3, r3, #32
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	2378      	movs	r3, #120	; 0x78
 80073ee:	4828      	ldr	r0, [pc, #160]	; (8007490 <_printf_i+0x248>)
 80073f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073f4:	e7e3      	b.n	80073be <_printf_i+0x176>
 80073f6:	065e      	lsls	r6, r3, #25
 80073f8:	bf48      	it	mi
 80073fa:	b2ad      	uxthmi	r5, r5
 80073fc:	e7e6      	b.n	80073cc <_printf_i+0x184>
 80073fe:	4616      	mov	r6, r2
 8007400:	e7bb      	b.n	800737a <_printf_i+0x132>
 8007402:	680b      	ldr	r3, [r1, #0]
 8007404:	6826      	ldr	r6, [r4, #0]
 8007406:	1d1d      	adds	r5, r3, #4
 8007408:	6960      	ldr	r0, [r4, #20]
 800740a:	600d      	str	r5, [r1, #0]
 800740c:	0635      	lsls	r5, r6, #24
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	d501      	bpl.n	8007416 <_printf_i+0x1ce>
 8007412:	6018      	str	r0, [r3, #0]
 8007414:	e002      	b.n	800741c <_printf_i+0x1d4>
 8007416:	0671      	lsls	r1, r6, #25
 8007418:	d5fb      	bpl.n	8007412 <_printf_i+0x1ca>
 800741a:	8018      	strh	r0, [r3, #0]
 800741c:	2300      	movs	r3, #0
 800741e:	4616      	mov	r6, r2
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	e7ba      	b.n	800739a <_printf_i+0x152>
 8007424:	680b      	ldr	r3, [r1, #0]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	600a      	str	r2, [r1, #0]
 800742a:	681e      	ldr	r6, [r3, #0]
 800742c:	2100      	movs	r1, #0
 800742e:	4630      	mov	r0, r6
 8007430:	6862      	ldr	r2, [r4, #4]
 8007432:	f000 f82f 	bl	8007494 <memchr>
 8007436:	b108      	cbz	r0, 800743c <_printf_i+0x1f4>
 8007438:	1b80      	subs	r0, r0, r6
 800743a:	6060      	str	r0, [r4, #4]
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	2300      	movs	r3, #0
 8007442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007446:	e7a8      	b.n	800739a <_printf_i+0x152>
 8007448:	4632      	mov	r2, r6
 800744a:	4649      	mov	r1, r9
 800744c:	4640      	mov	r0, r8
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	47d0      	blx	sl
 8007452:	3001      	adds	r0, #1
 8007454:	d0ab      	beq.n	80073ae <_printf_i+0x166>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	079b      	lsls	r3, r3, #30
 800745a:	d413      	bmi.n	8007484 <_printf_i+0x23c>
 800745c:	68e0      	ldr	r0, [r4, #12]
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	4298      	cmp	r0, r3
 8007462:	bfb8      	it	lt
 8007464:	4618      	movlt	r0, r3
 8007466:	e7a4      	b.n	80073b2 <_printf_i+0x16a>
 8007468:	2301      	movs	r3, #1
 800746a:	4632      	mov	r2, r6
 800746c:	4649      	mov	r1, r9
 800746e:	4640      	mov	r0, r8
 8007470:	47d0      	blx	sl
 8007472:	3001      	adds	r0, #1
 8007474:	d09b      	beq.n	80073ae <_printf_i+0x166>
 8007476:	3501      	adds	r5, #1
 8007478:	68e3      	ldr	r3, [r4, #12]
 800747a:	9903      	ldr	r1, [sp, #12]
 800747c:	1a5b      	subs	r3, r3, r1
 800747e:	42ab      	cmp	r3, r5
 8007480:	dcf2      	bgt.n	8007468 <_printf_i+0x220>
 8007482:	e7eb      	b.n	800745c <_printf_i+0x214>
 8007484:	2500      	movs	r5, #0
 8007486:	f104 0619 	add.w	r6, r4, #25
 800748a:	e7f5      	b.n	8007478 <_printf_i+0x230>
 800748c:	08007fb1 	.word	0x08007fb1
 8007490:	08007fc2 	.word	0x08007fc2

08007494 <memchr>:
 8007494:	4603      	mov	r3, r0
 8007496:	b510      	push	{r4, lr}
 8007498:	b2c9      	uxtb	r1, r1
 800749a:	4402      	add	r2, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	d101      	bne.n	80074a6 <memchr+0x12>
 80074a2:	2000      	movs	r0, #0
 80074a4:	e003      	b.n	80074ae <memchr+0x1a>
 80074a6:	7804      	ldrb	r4, [r0, #0]
 80074a8:	3301      	adds	r3, #1
 80074aa:	428c      	cmp	r4, r1
 80074ac:	d1f6      	bne.n	800749c <memchr+0x8>
 80074ae:	bd10      	pop	{r4, pc}

080074b0 <memcpy>:
 80074b0:	440a      	add	r2, r1
 80074b2:	4291      	cmp	r1, r2
 80074b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80074b8:	d100      	bne.n	80074bc <memcpy+0xc>
 80074ba:	4770      	bx	lr
 80074bc:	b510      	push	{r4, lr}
 80074be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c2:	4291      	cmp	r1, r2
 80074c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074c8:	d1f9      	bne.n	80074be <memcpy+0xe>
 80074ca:	bd10      	pop	{r4, pc}

080074cc <memmove>:
 80074cc:	4288      	cmp	r0, r1
 80074ce:	b510      	push	{r4, lr}
 80074d0:	eb01 0402 	add.w	r4, r1, r2
 80074d4:	d902      	bls.n	80074dc <memmove+0x10>
 80074d6:	4284      	cmp	r4, r0
 80074d8:	4623      	mov	r3, r4
 80074da:	d807      	bhi.n	80074ec <memmove+0x20>
 80074dc:	1e43      	subs	r3, r0, #1
 80074de:	42a1      	cmp	r1, r4
 80074e0:	d008      	beq.n	80074f4 <memmove+0x28>
 80074e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074ea:	e7f8      	b.n	80074de <memmove+0x12>
 80074ec:	4601      	mov	r1, r0
 80074ee:	4402      	add	r2, r0
 80074f0:	428a      	cmp	r2, r1
 80074f2:	d100      	bne.n	80074f6 <memmove+0x2a>
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074fe:	e7f7      	b.n	80074f0 <memmove+0x24>

08007500 <_free_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4605      	mov	r5, r0
 8007504:	2900      	cmp	r1, #0
 8007506:	d043      	beq.n	8007590 <_free_r+0x90>
 8007508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750c:	1f0c      	subs	r4, r1, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	bfb8      	it	lt
 8007512:	18e4      	addlt	r4, r4, r3
 8007514:	f000 f8d0 	bl	80076b8 <__malloc_lock>
 8007518:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <_free_r+0x94>)
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	4610      	mov	r0, r2
 800751e:	b933      	cbnz	r3, 800752e <_free_r+0x2e>
 8007520:	6063      	str	r3, [r4, #4]
 8007522:	6014      	str	r4, [r2, #0]
 8007524:	4628      	mov	r0, r5
 8007526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800752a:	f000 b8cb 	b.w	80076c4 <__malloc_unlock>
 800752e:	42a3      	cmp	r3, r4
 8007530:	d90a      	bls.n	8007548 <_free_r+0x48>
 8007532:	6821      	ldr	r1, [r4, #0]
 8007534:	1862      	adds	r2, r4, r1
 8007536:	4293      	cmp	r3, r2
 8007538:	bf01      	itttt	eq
 800753a:	681a      	ldreq	r2, [r3, #0]
 800753c:	685b      	ldreq	r3, [r3, #4]
 800753e:	1852      	addeq	r2, r2, r1
 8007540:	6022      	streq	r2, [r4, #0]
 8007542:	6063      	str	r3, [r4, #4]
 8007544:	6004      	str	r4, [r0, #0]
 8007546:	e7ed      	b.n	8007524 <_free_r+0x24>
 8007548:	461a      	mov	r2, r3
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	b10b      	cbz	r3, 8007552 <_free_r+0x52>
 800754e:	42a3      	cmp	r3, r4
 8007550:	d9fa      	bls.n	8007548 <_free_r+0x48>
 8007552:	6811      	ldr	r1, [r2, #0]
 8007554:	1850      	adds	r0, r2, r1
 8007556:	42a0      	cmp	r0, r4
 8007558:	d10b      	bne.n	8007572 <_free_r+0x72>
 800755a:	6820      	ldr	r0, [r4, #0]
 800755c:	4401      	add	r1, r0
 800755e:	1850      	adds	r0, r2, r1
 8007560:	4283      	cmp	r3, r0
 8007562:	6011      	str	r1, [r2, #0]
 8007564:	d1de      	bne.n	8007524 <_free_r+0x24>
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4401      	add	r1, r0
 800756c:	6011      	str	r1, [r2, #0]
 800756e:	6053      	str	r3, [r2, #4]
 8007570:	e7d8      	b.n	8007524 <_free_r+0x24>
 8007572:	d902      	bls.n	800757a <_free_r+0x7a>
 8007574:	230c      	movs	r3, #12
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	e7d4      	b.n	8007524 <_free_r+0x24>
 800757a:	6820      	ldr	r0, [r4, #0]
 800757c:	1821      	adds	r1, r4, r0
 800757e:	428b      	cmp	r3, r1
 8007580:	bf01      	itttt	eq
 8007582:	6819      	ldreq	r1, [r3, #0]
 8007584:	685b      	ldreq	r3, [r3, #4]
 8007586:	1809      	addeq	r1, r1, r0
 8007588:	6021      	streq	r1, [r4, #0]
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	6054      	str	r4, [r2, #4]
 800758e:	e7c9      	b.n	8007524 <_free_r+0x24>
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	bf00      	nop
 8007594:	2000059c 	.word	0x2000059c

08007598 <_malloc_r>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	1ccd      	adds	r5, r1, #3
 800759c:	f025 0503 	bic.w	r5, r5, #3
 80075a0:	3508      	adds	r5, #8
 80075a2:	2d0c      	cmp	r5, #12
 80075a4:	bf38      	it	cc
 80075a6:	250c      	movcc	r5, #12
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	4606      	mov	r6, r0
 80075ac:	db01      	blt.n	80075b2 <_malloc_r+0x1a>
 80075ae:	42a9      	cmp	r1, r5
 80075b0:	d903      	bls.n	80075ba <_malloc_r+0x22>
 80075b2:	230c      	movs	r3, #12
 80075b4:	6033      	str	r3, [r6, #0]
 80075b6:	2000      	movs	r0, #0
 80075b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ba:	f000 f87d 	bl	80076b8 <__malloc_lock>
 80075be:	4921      	ldr	r1, [pc, #132]	; (8007644 <_malloc_r+0xac>)
 80075c0:	680a      	ldr	r2, [r1, #0]
 80075c2:	4614      	mov	r4, r2
 80075c4:	b99c      	cbnz	r4, 80075ee <_malloc_r+0x56>
 80075c6:	4f20      	ldr	r7, [pc, #128]	; (8007648 <_malloc_r+0xb0>)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	b923      	cbnz	r3, 80075d6 <_malloc_r+0x3e>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4630      	mov	r0, r6
 80075d0:	f000 f862 	bl	8007698 <_sbrk_r>
 80075d4:	6038      	str	r0, [r7, #0]
 80075d6:	4629      	mov	r1, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 f85d 	bl	8007698 <_sbrk_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d123      	bne.n	800762a <_malloc_r+0x92>
 80075e2:	230c      	movs	r3, #12
 80075e4:	4630      	mov	r0, r6
 80075e6:	6033      	str	r3, [r6, #0]
 80075e8:	f000 f86c 	bl	80076c4 <__malloc_unlock>
 80075ec:	e7e3      	b.n	80075b6 <_malloc_r+0x1e>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	1b5b      	subs	r3, r3, r5
 80075f2:	d417      	bmi.n	8007624 <_malloc_r+0x8c>
 80075f4:	2b0b      	cmp	r3, #11
 80075f6:	d903      	bls.n	8007600 <_malloc_r+0x68>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	441c      	add	r4, r3
 80075fc:	6025      	str	r5, [r4, #0]
 80075fe:	e004      	b.n	800760a <_malloc_r+0x72>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	42a2      	cmp	r2, r4
 8007604:	bf0c      	ite	eq
 8007606:	600b      	streq	r3, [r1, #0]
 8007608:	6053      	strne	r3, [r2, #4]
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f85a 	bl	80076c4 <__malloc_unlock>
 8007610:	f104 000b 	add.w	r0, r4, #11
 8007614:	1d23      	adds	r3, r4, #4
 8007616:	f020 0007 	bic.w	r0, r0, #7
 800761a:	1ac2      	subs	r2, r0, r3
 800761c:	d0cc      	beq.n	80075b8 <_malloc_r+0x20>
 800761e:	1a1b      	subs	r3, r3, r0
 8007620:	50a3      	str	r3, [r4, r2]
 8007622:	e7c9      	b.n	80075b8 <_malloc_r+0x20>
 8007624:	4622      	mov	r2, r4
 8007626:	6864      	ldr	r4, [r4, #4]
 8007628:	e7cc      	b.n	80075c4 <_malloc_r+0x2c>
 800762a:	1cc4      	adds	r4, r0, #3
 800762c:	f024 0403 	bic.w	r4, r4, #3
 8007630:	42a0      	cmp	r0, r4
 8007632:	d0e3      	beq.n	80075fc <_malloc_r+0x64>
 8007634:	1a21      	subs	r1, r4, r0
 8007636:	4630      	mov	r0, r6
 8007638:	f000 f82e 	bl	8007698 <_sbrk_r>
 800763c:	3001      	adds	r0, #1
 800763e:	d1dd      	bne.n	80075fc <_malloc_r+0x64>
 8007640:	e7cf      	b.n	80075e2 <_malloc_r+0x4a>
 8007642:	bf00      	nop
 8007644:	2000059c 	.word	0x2000059c
 8007648:	200005a0 	.word	0x200005a0

0800764c <_realloc_r>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	4607      	mov	r7, r0
 8007650:	4614      	mov	r4, r2
 8007652:	460e      	mov	r6, r1
 8007654:	b921      	cbnz	r1, 8007660 <_realloc_r+0x14>
 8007656:	4611      	mov	r1, r2
 8007658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800765c:	f7ff bf9c 	b.w	8007598 <_malloc_r>
 8007660:	b922      	cbnz	r2, 800766c <_realloc_r+0x20>
 8007662:	f7ff ff4d 	bl	8007500 <_free_r>
 8007666:	4625      	mov	r5, r4
 8007668:	4628      	mov	r0, r5
 800766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766c:	f000 f830 	bl	80076d0 <_malloc_usable_size_r>
 8007670:	42a0      	cmp	r0, r4
 8007672:	d20f      	bcs.n	8007694 <_realloc_r+0x48>
 8007674:	4621      	mov	r1, r4
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff ff8e 	bl	8007598 <_malloc_r>
 800767c:	4605      	mov	r5, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	d0f2      	beq.n	8007668 <_realloc_r+0x1c>
 8007682:	4631      	mov	r1, r6
 8007684:	4622      	mov	r2, r4
 8007686:	f7ff ff13 	bl	80074b0 <memcpy>
 800768a:	4631      	mov	r1, r6
 800768c:	4638      	mov	r0, r7
 800768e:	f7ff ff37 	bl	8007500 <_free_r>
 8007692:	e7e9      	b.n	8007668 <_realloc_r+0x1c>
 8007694:	4635      	mov	r5, r6
 8007696:	e7e7      	b.n	8007668 <_realloc_r+0x1c>

08007698 <_sbrk_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	2300      	movs	r3, #0
 800769c:	4d05      	ldr	r5, [pc, #20]	; (80076b4 <_sbrk_r+0x1c>)
 800769e:	4604      	mov	r4, r0
 80076a0:	4608      	mov	r0, r1
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	f7fa fd44 	bl	8002130 <_sbrk>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_sbrk_r+0x1a>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_sbrk_r+0x1a>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	2000069c 	.word	0x2000069c

080076b8 <__malloc_lock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_lock+0x8>)
 80076ba:	f000 b811 	b.w	80076e0 <__retarget_lock_acquire_recursive>
 80076be:	bf00      	nop
 80076c0:	200006a4 	.word	0x200006a4

080076c4 <__malloc_unlock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_unlock+0x8>)
 80076c6:	f000 b80c 	b.w	80076e2 <__retarget_lock_release_recursive>
 80076ca:	bf00      	nop
 80076cc:	200006a4 	.word	0x200006a4

080076d0 <_malloc_usable_size_r>:
 80076d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d4:	1f18      	subs	r0, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfbc      	itt	lt
 80076da:	580b      	ldrlt	r3, [r1, r0]
 80076dc:	18c0      	addlt	r0, r0, r3
 80076de:	4770      	bx	lr

080076e0 <__retarget_lock_acquire_recursive>:
 80076e0:	4770      	bx	lr

080076e2 <__retarget_lock_release_recursive>:
 80076e2:	4770      	bx	lr

080076e4 <_init>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	bf00      	nop
 80076e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ea:	bc08      	pop	{r3}
 80076ec:	469e      	mov	lr, r3
 80076ee:	4770      	bx	lr

080076f0 <_fini>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr
