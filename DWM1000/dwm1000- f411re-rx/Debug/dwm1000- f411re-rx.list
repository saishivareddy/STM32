
dwm1000- f411re-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e6c  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc8  08006cc8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc8  08006cc8  00016cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd0  08006cd0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000090  08006d68  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  08006d68  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b0b  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003497  00000000  00000000  00032c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e11  00000000  00000000  00037308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3d2  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018189  00000000  00000000  000534eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093895  00000000  00000000  0006b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005298  00000000  00000000  000fef0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001041a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e44 	.word	0x08005e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08005e44 	.word	0x08005e44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800059c:	4ba1      	ldr	r3, [pc, #644]	; (8000824 <dwt_initialise+0x298>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80005a4:	4b9f      	ldr	r3, [pc, #636]	; (8000824 <dwt_initialise+0x298>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80005ac:	4b9d      	ldr	r3, [pc, #628]	; (8000824 <dwt_initialise+0x298>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005b4:	4b9b      	ldr	r3, [pc, #620]	; (8000824 <dwt_initialise+0x298>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005bc:	4b99      	ldr	r3, [pc, #612]	; (8000824 <dwt_initialise+0x298>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005c4:	4b97      	ldr	r3, [pc, #604]	; (8000824 <dwt_initialise+0x298>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005cc:	4b95      	ldr	r3, [pc, #596]	; (8000824 <dwt_initialise+0x298>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34

#ifdef DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
 80005d4:	4b93      	ldr	r3, [pc, #588]	; (8000824 <dwt_initialise+0x298>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	b292      	uxth	r2, r2
 80005dc:	831a      	strh	r2, [r3, #24]
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005de:	f000 f925 	bl	800082c <dwt_readdevid>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a90      	ldr	r2, [pc, #576]	; (8000828 <dwt_initialise+0x29c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d002      	beq.n	80005f0 <dwt_initialise+0x64>
    {
        return DWT_ERROR ;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e115      	b.n	800081c <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <dwt_initialise+0x72>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005fa:	f000 fe7d 	bl	80012f8 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d004      	beq.n	8000612 <dwt_initialise+0x86>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800060e:	2b00      	cmp	r3, #0
 8000610:	d102      	bne.n	8000618 <dwt_initialise+0x8c>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fd3e 	bl	8001094 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000618:	2204      	movs	r2, #4
 800061a:	2100      	movs	r1, #0
 800061c:	2024      	movs	r0, #36	; 0x24
 800061e:	f000 fc82 	bl	8000f26 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	2b00      	cmp	r3, #0
 800062a:	d116      	bne.n	800065a <dwt_initialise+0xce>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800062c:	2004      	movs	r0, #4
 800062e:	f000 fcd0 	bl	8000fd2 <_dwt_otpread>
 8000632:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d01f      	beq.n	800067c <dwt_initialise+0xf0>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800063c:	2202      	movs	r2, #2
 800063e:	2112      	movs	r1, #18
 8000640:	202d      	movs	r0, #45	; 0x2d
 8000642:	f000 fc70 	bl	8000f26 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000646:	4b77      	ldr	r3, [pc, #476]	; (8000824 <dwt_initialise+0x298>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	8ada      	ldrh	r2, [r3, #22]
 800064c:	4b75      	ldr	r3, [pc, #468]	; (8000824 <dwt_initialise+0x298>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000654:	b292      	uxth	r2, r2
 8000656:	82da      	strh	r2, [r3, #22]
 8000658:	e010      	b.n	800067c <dwt_initialise+0xf0>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800065a:	2130      	movs	r1, #48	; 0x30
 800065c:	2028      	movs	r0, #40	; 0x28
 800065e:	f000 fc0b 	bl	8000e78 <dwt_read32bitoffsetreg>
 8000662:	4603      	mov	r3, r0
 8000664:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000668:	d008      	beq.n	800067c <dwt_initialise+0xf0>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800066a:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <dwt_initialise+0x298>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	8ada      	ldrh	r2, [r3, #22]
 8000670:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <dwt_initialise+0x298>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000678:	b292      	uxth	r2, r2
 800067a:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	2b00      	cmp	r3, #0
 8000684:	d009      	beq.n	800069a <dwt_initialise+0x10e>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	2b00      	cmp	r3, #0
 800068e:	d011      	beq.n	80006b4 <dwt_initialise+0x128>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00c      	beq.n	80006b4 <dwt_initialise+0x128>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800069a:	201e      	movs	r0, #30
 800069c:	f000 fc99 	bl	8000fd2 <_dwt_otpread>
 80006a0:	4603      	mov	r3, r0
 80006a2:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <dwt_initialise+0x298>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	72da      	strb	r2, [r3, #11]
 80006b2:	e003      	b.n	80006bc <dwt_initialise+0x130>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80006b4:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <dwt_initialise+0x298>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10b      	bne.n	80006de <dwt_initialise+0x152>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	f003 031f 	and.w	r3, r3, #31
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <dwt_initialise+0x148>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006d0:	2310      	movs	r3, #16
 80006d2:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006d4:	8afb      	ldrh	r3, [r7, #22]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fe33 	bl	8001344 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d007      	beq.n	80006f8 <dwt_initialise+0x16c>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <dwt_initialise+0x298>)
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 fc70 	bl	8000fd2 <_dwt_otpread>
 80006f2:	4603      	mov	r3, r0
 80006f4:	6023      	str	r3, [r4, #0]
 80006f6:	e003      	b.n	8000700 <dwt_initialise+0x174>
    }
    else
    {
        pdw1000local->partID = 0;
 80006f8:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <dwt_initialise+0x298>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	2b00      	cmp	r3, #0
 8000708:	d007      	beq.n	800071a <dwt_initialise+0x18e>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800070a:	4b46      	ldr	r3, [pc, #280]	; (8000824 <dwt_initialise+0x298>)
 800070c:	681c      	ldr	r4, [r3, #0]
 800070e:	2007      	movs	r0, #7
 8000710:	f000 fc5f 	bl	8000fd2 <_dwt_otpread>
 8000714:	4603      	mov	r3, r0
 8000716:	6063      	str	r3, [r4, #4]
 8000718:	e003      	b.n	8000722 <dwt_initialise+0x196>
    }
    else
    {
        pdw1000local->lotID = 0;
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <dwt_initialise+0x298>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <dwt_initialise+0x1b2>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800072c:	2008      	movs	r0, #8
 800072e:	f000 fc50 	bl	8000fd2 <_dwt_otpread>
 8000732:	4602      	mov	r2, r0
 8000734:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <dwt_initialise+0x298>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	721a      	strb	r2, [r3, #8]
 800073c:	e003      	b.n	8000746 <dwt_initialise+0x1ba>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <dwt_initialise+0x298>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074c:	2b00      	cmp	r3, #0
 800074e:	d008      	beq.n	8000762 <dwt_initialise+0x1d6>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000750:	2009      	movs	r0, #9
 8000752:	f000 fc3e 	bl	8000fd2 <_dwt_otpread>
 8000756:	4602      	mov	r2, r0
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <dwt_initialise+0x298>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	725a      	strb	r2, [r3, #9]
 8000760:	e003      	b.n	800076a <dwt_initialise+0x1de>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <dwt_initialise+0x298>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2200      	movs	r2, #0
 8000768:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d121      	bne.n	80007b8 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00b      	beq.n	8000796 <dwt_initialise+0x20a>
        {
            _dwt_loaducodefromrom();
 800077e:	f000 fc75 	bl	800106c <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <dwt_initialise+0x298>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	8ada      	ldrh	r2, [r3, #22]
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <dwt_initialise+0x298>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000790:	b292      	uxth	r2, r2
 8000792:	82da      	strh	r2, [r3, #22]
 8000794:	e01e      	b.n	80007d4 <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000796:	2105      	movs	r1, #5
 8000798:	2036      	movs	r0, #54	; 0x36
 800079a:	f000 fb94 	bl	8000ec6 <dwt_read16bitoffsetreg>
 800079e:	4603      	mov	r3, r0
 80007a0:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007a8:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80007aa:	89fb      	ldrh	r3, [r7, #14]
 80007ac:	461a      	mov	r2, r3
 80007ae:	2105      	movs	r1, #5
 80007b0:	2036      	movs	r0, #54	; 0x36
 80007b2:	f000 fbcb 	bl	8000f4c <dwt_write16bitoffsetreg>
 80007b6:	e00d      	b.n	80007d4 <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d108      	bne.n	80007d4 <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <dwt_initialise+0x298>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	8ada      	ldrh	r2, [r3, #22]
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <dwt_initialise+0x298>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007d0:	b292      	uxth	r2, r2
 80007d2:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fc5d 	bl	8001094 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007da:	2200      	movs	r2, #0
 80007dc:	210a      	movs	r1, #10
 80007de:	202c      	movs	r0, #44	; 0x2c
 80007e0:	f000 fba1 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <dwt_initialise+0x298>)
 80007e6:	681c      	ldr	r4, [r3, #0]
 80007e8:	2100      	movs	r1, #0
 80007ea:	2004      	movs	r0, #4
 80007ec:	f000 fb44 	bl	8000e78 <dwt_read32bitoffsetreg>
 80007f0:	4603      	mov	r3, r0
 80007f2:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <dwt_initialise+0x298>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	0c1b      	lsrs	r3, r3, #16
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <dwt_initialise+0x298>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f002 0203 	and.w	r2, r2, #3
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <dwt_initialise+0x298>)
 800080c:	681c      	ldr	r4, [r3, #0]
 800080e:	2100      	movs	r1, #0
 8000810:	2008      	movs	r0, #8
 8000812:	f000 fb31 	bl	8000e78 <dwt_read32bitoffsetreg>
 8000816:	4603      	mov	r3, r0
 8000818:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800081a:	2300      	movs	r3, #0

} // end dwt_initialise()
 800081c:	4618      	mov	r0, r3
 800081e:	371c      	adds	r7, #28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	deca0130 	.word	0xdeca0130

0800082c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000830:	2100      	movs	r1, #0
 8000832:	2000      	movs	r0, #0
 8000834:	f000 fb20 	bl	8000e78 <dwt_read32bitoffsetreg>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	461a      	mov	r2, r3
 800085c:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <dwt_configure+0x194>)
 800085e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000862:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	3b01      	subs	r3, #1
 800086a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d002      	beq.n	8000878 <dwt_configure+0x38>
 8000872:	7cfb      	ldrb	r3, [r7, #19]
 8000874:	2b07      	cmp	r3, #7
 8000876:	d101      	bne.n	800087c <dwt_configure+0x3c>
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <dwt_configure+0x3e>
 800087c:	2300      	movs	r3, #0
 800087e:	747b      	strb	r3, [r7, #17]

#ifdef DWT_API_ERROR_CHECK
    assert(config->dataRate <= DWT_BR_6M8);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	79db      	ldrb	r3, [r3, #7]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d906      	bls.n	8000896 <dwt_configure+0x56>
 8000888:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <dwt_configure+0x198>)
 800088a:	4a54      	ldr	r2, [pc, #336]	; (80009dc <dwt_configure+0x19c>)
 800088c:	f240 219f 	movw	r1, #671	; 0x29f
 8000890:	4853      	ldr	r0, [pc, #332]	; (80009e0 <dwt_configure+0x1a0>)
 8000892:	f004 fb37 	bl	8004f04 <__assert_func>
    assert(config->rxPAC <= DWT_PAC64);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	78db      	ldrb	r3, [r3, #3]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d906      	bls.n	80008ac <dwt_configure+0x6c>
 800089e:	4b51      	ldr	r3, [pc, #324]	; (80009e4 <dwt_configure+0x1a4>)
 80008a0:	4a4e      	ldr	r2, [pc, #312]	; (80009dc <dwt_configure+0x19c>)
 80008a2:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80008a6:	484e      	ldr	r0, [pc, #312]	; (80009e0 <dwt_configure+0x1a0>)
 80008a8:	f004 fb2c 	bl	8004f04 <__assert_func>
    assert((chan >= 1) && (chan <= 7) && (chan != 6));
 80008ac:	7cfb      	ldrb	r3, [r7, #19]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <dwt_configure+0x7e>
 80008b2:	7cfb      	ldrb	r3, [r7, #19]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	d802      	bhi.n	80008be <dwt_configure+0x7e>
 80008b8:	7cfb      	ldrb	r3, [r7, #19]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d106      	bne.n	80008cc <dwt_configure+0x8c>
 80008be:	4b4a      	ldr	r3, [pc, #296]	; (80009e8 <dwt_configure+0x1a8>)
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <dwt_configure+0x19c>)
 80008c2:	f240 21a1 	movw	r1, #673	; 0x2a1
 80008c6:	4846      	ldr	r0, [pc, #280]	; (80009e0 <dwt_configure+0x1a0>)
 80008c8:	f004 fb1c 	bl	8004f04 <__assert_func>
    assert(((config->prf == DWT_PRF_64M) && (config->txCode >= 9) && (config->txCode <= 24))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d107      	bne.n	80008e4 <dwt_configure+0xa4>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b08      	cmp	r3, #8
 80008da:	d903      	bls.n	80008e4 <dwt_configure+0xa4>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	2b18      	cmp	r3, #24
 80008e2:	d912      	bls.n	800090a <dwt_configure+0xca>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d107      	bne.n	80008fc <dwt_configure+0xbc>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <dwt_configure+0xbc>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d906      	bls.n	800090a <dwt_configure+0xca>
 80008fc:	4b3b      	ldr	r3, [pc, #236]	; (80009ec <dwt_configure+0x1ac>)
 80008fe:	4a37      	ldr	r2, [pc, #220]	; (80009dc <dwt_configure+0x19c>)
 8000900:	f240 21a2 	movw	r1, #674	; 0x2a2
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <dwt_configure+0x1a0>)
 8000906:	f004 fafd 	bl	8004f04 <__assert_func>
           || ((config->prf == DWT_PRF_16M) && (config->txCode >= 1) && (config->txCode <= 8)));
    assert(((config->prf == DWT_PRF_64M) && (config->rxCode >= 9) && (config->rxCode <= 24))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d107      	bne.n	8000922 <dwt_configure+0xe2>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	2b08      	cmp	r3, #8
 8000918:	d903      	bls.n	8000922 <dwt_configure+0xe2>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b18      	cmp	r3, #24
 8000920:	d912      	bls.n	8000948 <dwt_configure+0x108>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d107      	bne.n	800093a <dwt_configure+0xfa>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	795b      	ldrb	r3, [r3, #5]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <dwt_configure+0xfa>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b08      	cmp	r3, #8
 8000938:	d906      	bls.n	8000948 <dwt_configure+0x108>
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <dwt_configure+0x1b0>)
 800093c:	4a27      	ldr	r2, [pc, #156]	; (80009dc <dwt_configure+0x19c>)
 800093e:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8000942:	4827      	ldr	r0, [pc, #156]	; (80009e0 <dwt_configure+0x1a0>)
 8000944:	f004 fade 	bl	8004f04 <__assert_func>
           || ((config->prf == DWT_PRF_16M) && (config->rxCode >= 1) && (config->rxCode <= 8)));
    assert((config->txPreambLength == DWT_PLEN_64) || (config->txPreambLength == DWT_PLEN_128) || (config->txPreambLength == DWT_PLEN_256)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d022      	beq.n	8000996 <dwt_configure+0x156>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b14      	cmp	r3, #20
 8000956:	d01e      	beq.n	8000996 <dwt_configure+0x156>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	2b24      	cmp	r3, #36	; 0x24
 800095e:	d01a      	beq.n	8000996 <dwt_configure+0x156>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	2b34      	cmp	r3, #52	; 0x34
 8000966:	d016      	beq.n	8000996 <dwt_configure+0x156>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	2b08      	cmp	r3, #8
 800096e:	d012      	beq.n	8000996 <dwt_configure+0x156>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	789b      	ldrb	r3, [r3, #2]
 8000974:	2b18      	cmp	r3, #24
 8000976:	d00e      	beq.n	8000996 <dwt_configure+0x156>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	2b28      	cmp	r3, #40	; 0x28
 800097e:	d00a      	beq.n	8000996 <dwt_configure+0x156>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	2b0c      	cmp	r3, #12
 8000986:	d006      	beq.n	8000996 <dwt_configure+0x156>
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <dwt_configure+0x1b4>)
 800098a:	4a14      	ldr	r2, [pc, #80]	; (80009dc <dwt_configure+0x19c>)
 800098c:	f240 21a6 	movw	r1, #678	; 0x2a6
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <dwt_configure+0x1a0>)
 8000992:	f004 fab7 	bl	8004f04 <__assert_func>
           || (config->txPreambLength == DWT_PLEN_512) || (config->txPreambLength == DWT_PLEN_1024) || (config->txPreambLength == DWT_PLEN_1536)
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7a1b      	ldrb	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <dwt_configure+0x174>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7a1b      	ldrb	r3, [r3, #8]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d006      	beq.n	80009b4 <dwt_configure+0x174>
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <dwt_configure+0x1b8>)
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <dwt_configure+0x19c>)
 80009aa:	f240 21a9 	movw	r1, #681	; 0x2a9
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <dwt_configure+0x1a0>)
 80009b0:	f004 faa8 	bl	8004f04 <__assert_func>
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	79db      	ldrb	r3, [r3, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d121      	bne.n	8000a00 <dwt_configure+0x1c0>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <dwt_configure+0x1bc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	691a      	ldr	r2, [r3, #16]
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <dwt_configure+0x1bc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009ca:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80009cc:	8abb      	ldrh	r3, [r7, #20]
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	82bb      	strh	r3, [r7, #20]
 80009d2:	e01d      	b.n	8000a10 <dwt_configure+0x1d0>
 80009d4:	080064a0 	.word	0x080064a0
 80009d8:	08005f34 	.word	0x08005f34
 80009dc:	080063e8 	.word	0x080063e8
 80009e0:	08005e88 	.word	0x08005e88
 80009e4:	08005f54 	.word	0x08005f54
 80009e8:	08005f70 	.word	0x08005f70
 80009ec:	08005f9c 	.word	0x08005f9c
 80009f0:	08006044 	.word	0x08006044
 80009f4:	080060ec 	.word	0x080060ec
 80009f8:	0800624c 	.word	0x0800624c
 80009fc:	20000000 	.word	0x20000000
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000a00:	4b90      	ldr	r3, [pc, #576]	; (8000c44 <dwt_configure+0x404>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	691a      	ldr	r2, [r3, #16]
 8000a06:	4b8f      	ldr	r3, [pc, #572]	; (8000c44 <dwt_configure+0x404>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000a0e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000a10:	4b8c      	ldr	r3, [pc, #560]	; (8000c44 <dwt_configure+0x404>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	7a12      	ldrb	r2, [r2, #8]
 8000a18:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000a1a:	4b8a      	ldr	r3, [pc, #552]	; (8000c44 <dwt_configure+0x404>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	4b88      	ldr	r3, [pc, #544]	; (8000c44 <dwt_configure+0x404>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000a28:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000a2a:	4b86      	ldr	r3, [pc, #536]	; (8000c44 <dwt_configure+0x404>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6919      	ldr	r1, [r3, #16]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7a1b      	ldrb	r3, [r3, #8]
 8000a34:	041b      	lsls	r3, r3, #16
 8000a36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000a3a:	4b82      	ldr	r3, [pc, #520]	; (8000c44 <dwt_configure+0x404>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8000a42:	4b80      	ldr	r3, [pc, #512]	; (8000c44 <dwt_configure+0x404>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2004      	movs	r0, #4
 8000a4e:	f000 fa99 	bl	8000f84 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8000a52:	8abb      	ldrh	r3, [r7, #20]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f642 0104 	movw	r1, #10244	; 0x2804
 8000a5a:	202e      	movs	r0, #46	; 0x2e
 8000a5c:	f000 fa76 	bl	8000f4c <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000a60:	7cbb      	ldrb	r3, [r7, #18]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fae2 	bl	800102c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000a68:	7cfb      	ldrb	r3, [r7, #19]
 8000a6a:	4a77      	ldr	r2, [pc, #476]	; (8000c48 <dwt_configure+0x408>)
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <dwt_configure+0x40c>)
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	461a      	mov	r2, r3
 8000a78:	2107      	movs	r1, #7
 8000a7a:	202b      	movs	r0, #43	; 0x2b
 8000a7c:	f000 fa82 	bl	8000f84 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000a80:	7cfb      	ldrb	r3, [r7, #19]
 8000a82:	4a71      	ldr	r2, [pc, #452]	; (8000c48 <dwt_configure+0x408>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b71      	ldr	r3, [pc, #452]	; (8000c50 <dwt_configure+0x410>)
 8000a8a:	5c9b      	ldrb	r3, [r3, r2]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	210b      	movs	r1, #11
 8000a90:	202b      	movs	r0, #43	; 0x2b
 8000a92:	f000 fa48 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000a96:	7c7b      	ldrb	r3, [r7, #17]
 8000a98:	4a6e      	ldr	r2, [pc, #440]	; (8000c54 <dwt_configure+0x414>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	210b      	movs	r1, #11
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f000 fa40 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000aa6:	7cfb      	ldrb	r3, [r7, #19]
 8000aa8:	4a67      	ldr	r2, [pc, #412]	; (8000c48 <dwt_configure+0x408>)
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b6a      	ldr	r3, [pc, #424]	; (8000c58 <dwt_configure+0x418>)
 8000ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	210c      	movs	r1, #12
 8000ab8:	2028      	movs	r0, #40	; 0x28
 8000aba:	f000 fa63 	bl	8000f84 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	79db      	ldrb	r3, [r3, #7]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	799b      	ldrb	r3, [r3, #6]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4a64      	ldr	r2, [pc, #400]	; (8000c5c <dwt_configure+0x41c>)
 8000acc:	0043      	lsls	r3, r0, #1
 8000ace:	440b      	add	r3, r1
 8000ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	2027      	movs	r0, #39	; 0x27
 8000ada:	f000 fa37 	bl	8000f4c <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000ade:	7cbb      	ldrb	r3, [r7, #18]
 8000ae0:	4a5f      	ldr	r2, [pc, #380]	; (8000c60 <dwt_configure+0x420>)
 8000ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2104      	movs	r1, #4
 8000aea:	2027      	movs	r0, #39	; 0x27
 8000aec:	f000 fa2e 	bl	8000f4c <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	79db      	ldrb	r3, [r3, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <dwt_configure+0x2c4>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000af8:	2264      	movs	r2, #100	; 0x64
 8000afa:	2106      	movs	r1, #6
 8000afc:	2027      	movs	r0, #39	; 0x27
 8000afe:	f000 fa25 	bl	8000f4c <dwt_write16bitoffsetreg>
 8000b02:	e018      	b.n	8000b36 <dwt_configure+0x2f6>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d10a      	bne.n	8000b22 <dwt_configure+0x2e2>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2027      	movs	r0, #39	; 0x27
 8000b12:	f000 fa1b 	bl	8000f4c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000b16:	2210      	movs	r2, #16
 8000b18:	2126      	movs	r1, #38	; 0x26
 8000b1a:	2027      	movs	r0, #39	; 0x27
 8000b1c:	f000 fa03 	bl	8000f26 <dwt_write8bitoffsetreg>
 8000b20:	e009      	b.n	8000b36 <dwt_configure+0x2f6>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000b22:	2220      	movs	r2, #32
 8000b24:	2106      	movs	r1, #6
 8000b26:	2027      	movs	r0, #39	; 0x27
 8000b28:	f000 fa10 	bl	8000f4c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000b2c:	2228      	movs	r2, #40	; 0x28
 8000b2e:	2126      	movs	r1, #38	; 0x26
 8000b30:	2027      	movs	r0, #39	; 0x27
 8000b32:	f000 f9f8 	bl	8000f26 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000b36:	7cbb      	ldrb	r3, [r7, #18]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	78d2      	ldrb	r2, [r2, #3]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4a49      	ldr	r2, [pc, #292]	; (8000c64 <dwt_configure+0x424>)
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	2108      	movs	r1, #8
 8000b4c:	2027      	movs	r0, #39	; 0x27
 8000b4e:	f000 fa19 	bl	8000f84 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	895b      	ldrh	r3, [r3, #10]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <dwt_configure+0x322>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f241 0241 	movw	r2, #4161	; 0x1041
 8000b60:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	895b      	ldrh	r3, [r3, #10]
 8000b66:	461a      	mov	r2, r3
 8000b68:	2120      	movs	r1, #32
 8000b6a:	2027      	movs	r0, #39	; 0x27
 8000b6c:	f000 f9ee 	bl	8000f4c <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000b70:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <dwt_configure+0x428>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	210c      	movs	r1, #12
 8000b78:	2023      	movs	r0, #35	; 0x23
 8000b7a:	f000 fa03 	bl	8000f84 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000b7e:	7cbb      	ldrb	r3, [r7, #18]
 8000b80:	4a39      	ldr	r2, [pc, #228]	; (8000c68 <dwt_configure+0x428>)
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	889b      	ldrh	r3, [r3, #4]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	2023      	movs	r0, #35	; 0x23
 8000b8e:	f000 f9dd 	bl	8000f4c <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	799b      	ldrb	r3, [r3, #6]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00d      	beq.n	8000bb6 <dwt_configure+0x376>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	79db      	ldrb	r3, [r3, #7]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <dwt_configure+0x42c>)
 8000ba2:	5c9b      	ldrb	r3, [r3, r2]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2021      	movs	r0, #33	; 0x21
 8000baa:	f000 f9bc 	bl	8000f26 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bb6:	7cfb      	ldrb	r3, [r7, #19]
 8000bb8:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000bbc:	7cfb      	ldrb	r3, [r7, #19]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bc2:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	049b      	lsls	r3, r3, #18
 8000bca:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000bce:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	051b      	lsls	r3, r3, #20
 8000bd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000bd8:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	045b      	lsls	r3, r3, #17
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000be2:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	059b      	lsls	r3, r3, #22
 8000bea:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000bee:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201f      	movs	r0, #31
 8000c00:	f000 f9c0 	bl	8000f84 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	789a      	ldrb	r2, [r3, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	0419      	lsls	r1, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	79db      	ldrb	r3, [r3, #7]
 8000c16:	035a      	lsls	r2, r3, #13
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <dwt_configure+0x404>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <dwt_configure+0x404>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	461a      	mov	r2, r3
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2008      	movs	r0, #8
 8000c2c:	f000 f9aa 	bl	8000f84 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000c30:	2242      	movs	r2, #66	; 0x42
 8000c32:	2100      	movs	r1, #0
 8000c34:	200d      	movs	r0, #13
 8000c36:	f000 f976 	bl	8000f26 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000000 	.word	0x20000000
 8000c48:	08006420 	.word	0x08006420
 8000c4c:	08006440 	.word	0x08006440
 8000c50:	08006458 	.word	0x08006458
 8000c54:	08006460 	.word	0x08006460
 8000c58:	08006428 	.word	0x08006428
 8000c5c:	08006470 	.word	0x08006470
 8000c60:	0800647c 	.word	0x0800647c
 8000c64:	08006480 	.word	0x08006480
 8000c68:	08006464 	.word	0x08006464
 8000c6c:	0800646c 	.word	0x0800646c

08000c70 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	8839      	ldrh	r1, [r7, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2011      	movs	r0, #17
 8000c88:	f000 f87e 	bl	8000d88 <dwt_readfromdevice>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60ba      	str	r2, [r7, #8]
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	81fb      	strh	r3, [r7, #14]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	2b3f      	cmp	r3, #63	; 0x3f
 8000cae:	d906      	bls.n	8000cbe <dwt_writetodevice+0x2a>
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <dwt_writetodevice+0xe4>)
 8000cb2:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <dwt_writetodevice+0xe8>)
 8000cb4:	f240 4197 	movw	r1, #1175	; 0x497
 8000cb8:	4831      	ldr	r0, [pc, #196]	; (8000d80 <dwt_writetodevice+0xec>)
 8000cba:	f004 f923 	bl	8004f04 <__assert_func>
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000cbe:	89bb      	ldrh	r3, [r7, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10c      	bne.n	8000cde <dwt_writetodevice+0x4a>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000cc4:	89fb      	ldrh	r3, [r7, #14]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	1c59      	adds	r1, r3, #1
 8000ccc:	6179      	str	r1, [r7, #20]
 8000cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	3318      	adds	r3, #24
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cdc:	e040      	b.n	8000d60 <dwt_writetodevice+0xcc>
    }
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
 8000cde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db05      	blt.n	8000cf2 <dwt_writetodevice+0x5e>
 8000ce6:	89ba      	ldrh	r2, [r7, #12]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4413      	add	r3, r2
 8000cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cf0:	d306      	bcc.n	8000d00 <dwt_writetodevice+0x6c>
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <dwt_writetodevice+0xf0>)
 8000cf4:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <dwt_writetodevice+0xe8>)
 8000cf6:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8000cfa:	4821      	ldr	r0, [pc, #132]	; (8000d80 <dwt_writetodevice+0xec>)
 8000cfc:	f004 f902 	bl	8004f04 <__assert_func>
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	1c59      	adds	r1, r3, #1
 8000d08:	6179      	str	r1, [r7, #20]
 8000d0a:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	3318      	adds	r3, #24
 8000d12:	443b      	add	r3, r7
 8000d14:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000d18:	89bb      	ldrh	r3, [r7, #12]
 8000d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d1c:	d809      	bhi.n	8000d32 <dwt_writetodevice+0x9e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	617a      	str	r2, [r7, #20]
 8000d24:	89ba      	ldrh	r2, [r7, #12]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	3318      	adds	r3, #24
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d30:	e016      	b.n	8000d60 <dwt_writetodevice+0xcc>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000d32:	89bb      	ldrh	r3, [r7, #12]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	1c59      	adds	r1, r3, #1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	3318      	adds	r3, #24
 8000d44:	443b      	add	r3, r7
 8000d46:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	09db      	lsrs	r3, r3, #7
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	617a      	str	r2, [r7, #20]
 8000d56:	b2ca      	uxtb	r2, r1
 8000d58:	3318      	adds	r3, #24
 8000d5a:	443b      	add	r3, r7
 8000d5c:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	b298      	uxth	r0, r3
 8000d64:	f107 0110 	add.w	r1, r7, #16
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f000 fb2c 	bl	80013c8 <writetospi>
} // end dwt_writetodevice()
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08006350 	.word	0x08006350
 8000d7c:	080063f8 	.word	0x080063f8
 8000d80:	08005e88 	.word	0x08005e88
 8000d84:	08006368 	.word	0x08006368

08000d88 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60ba      	str	r2, [r7, #8]
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4603      	mov	r3, r0
 8000d94:	81fb      	strh	r3, [r7, #14]
 8000d96:	460b      	mov	r3, r1
 8000d98:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	2b3f      	cmp	r3, #63	; 0x3f
 8000da2:	d906      	bls.n	8000db2 <dwt_readfromdevice+0x2a>
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <dwt_readfromdevice+0xe0>)
 8000da6:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <dwt_readfromdevice+0xe4>)
 8000da8:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8000dac:	4830      	ldr	r0, [pc, #192]	; (8000e70 <dwt_readfromdevice+0xe8>)
 8000dae:	f004 f8a9 	bl	8004f04 <__assert_func>
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000db2:	89bb      	ldrh	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <dwt_readfromdevice+0x44>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	617a      	str	r2, [r7, #20]
 8000dbe:	89fa      	ldrh	r2, [r7, #14]
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	3318      	adds	r3, #24
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000dca:	e040      	b.n	8000e4e <dwt_readfromdevice+0xc6>
    }
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
 8000dcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db05      	blt.n	8000de0 <dwt_readfromdevice+0x58>
 8000dd4:	89ba      	ldrh	r2, [r7, #12]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	4413      	add	r3, r2
 8000dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dde:	d306      	bcc.n	8000dee <dwt_readfromdevice+0x66>
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <dwt_readfromdevice+0xec>)
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <dwt_readfromdevice+0xe4>)
 8000de4:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <dwt_readfromdevice+0xe8>)
 8000dea:	f004 f88b 	bl	8004f04 <__assert_func>
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000dee:	89fb      	ldrh	r3, [r7, #14]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	1c59      	adds	r1, r3, #1
 8000df6:	6179      	str	r1, [r7, #20]
 8000df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	3318      	adds	r3, #24
 8000e00:	443b      	add	r3, r7
 8000e02:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	2b7f      	cmp	r3, #127	; 0x7f
 8000e0a:	d809      	bhi.n	8000e20 <dwt_readfromdevice+0x98>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	617a      	str	r2, [r7, #20]
 8000e12:	89ba      	ldrh	r2, [r7, #12]
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	3318      	adds	r3, #24
 8000e18:	443b      	add	r3, r7
 8000e1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000e1e:	e016      	b.n	8000e4e <dwt_readfromdevice+0xc6>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000e20:	89bb      	ldrh	r3, [r7, #12]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	1c59      	adds	r1, r3, #1
 8000e28:	6179      	str	r1, [r7, #20]
 8000e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	3318      	adds	r3, #24
 8000e32:	443b      	add	r3, r7
 8000e34:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000e38:	89bb      	ldrh	r3, [r7, #12]
 8000e3a:	09db      	lsrs	r3, r3, #7
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	617a      	str	r2, [r7, #20]
 8000e44:	b2ca      	uxtb	r2, r1
 8000e46:	3318      	adds	r3, #24
 8000e48:	443b      	add	r3, r7
 8000e4a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	b298      	uxth	r0, r3
 8000e52:	f107 0110 	add.w	r1, r7, #16
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	f000 fae9 	bl	8001430 <readfromspi>
} // end dwt_readfromdevice()
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08006350 	.word	0x08006350
 8000e6c:	0800640c 	.word	0x0800640c
 8000e70:	08005e88 	.word	0x08005e88
 8000e74:	08006368 	.word	0x08006368

08000e78 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b299      	uxth	r1, r3
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2204      	movs	r2, #4
 8000e94:	f7ff ff78 	bl	8000d88 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000e98:	2303      	movs	r3, #3
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	e00b      	b.n	8000eb6 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	f107 010c 	add.w	r1, r7, #12
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	440a      	add	r2, r1
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	daf0      	bge.n	8000e9e <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000ebc:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	b298      	uxth	r0, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b299      	uxth	r1, r3
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	f7ff ff51 	bl	8000d88 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	7b3b      	ldrb	r3, [r7, #12]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000ef6:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	f107 030f 	add.w	r3, r7, #15
 8000f16:	2201      	movs	r2, #1
 8000f18:	f7ff ff36 	bl	8000d88 <dwt_readfromdevice>

    return regval ;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	b298      	uxth	r0, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f7ff fea8 	bl	8000c94 <dwt_writetodevice>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b298      	uxth	r0, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2202      	movs	r2, #2
 8000f78:	f7ff fe8c 	bl	8000c94 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00d      	b.n	8000fb2 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	f107 0210 	add.w	r2, r7, #16
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	ddee      	ble.n	8000f96 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	f7ff fe65 	bl	8000c94 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	202d      	movs	r0, #45	; 0x2d
 8000fe4:	f7ff ffb2 	bl	8000f4c <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000fe8:	2203      	movs	r2, #3
 8000fea:	2106      	movs	r1, #6
 8000fec:	202d      	movs	r0, #45	; 0x2d
 8000fee:	f7ff ff9a 	bl	8000f26 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2106      	movs	r1, #6
 8000ff6:	202d      	movs	r0, #45	; 0x2d
 8000ff8:	f7ff ff95 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000ffc:	210a      	movs	r1, #10
 8000ffe:	202d      	movs	r0, #45	; 0x2d
 8001000:	f7ff ff3a 	bl	8000e78 <dwt_read32bitoffsetreg>
 8001004:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	202c      	movs	r0, #44	; 0x2c
 800101a:	f7ff ff84 	bl	8000f26 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800101e:	2202      	movs	r2, #2
 8001020:	2102      	movs	r1, #2
 8001022:	202c      	movs	r0, #44	; 0x2c
 8001024:	f7ff ff7f 	bl	8000f26 <dwt_write8bitoffsetreg>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8001034:	226d      	movs	r2, #109	; 0x6d
 8001036:	f640 0106 	movw	r1, #2054	; 0x806
 800103a:	202e      	movs	r0, #46	; 0x2e
 800103c:	f7ff ff73 	bl	8000f26 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8001046:	f240 6207 	movw	r2, #1543	; 0x607
 800104a:	f641 0106 	movw	r1, #6150	; 0x1806
 800104e:	202e      	movs	r0, #46	; 0x2e
 8001050:	f7ff ff7c 	bl	8000f4c <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8001054:	e006      	b.n	8001064 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8001056:	f241 6207 	movw	r2, #5639	; 0x1607
 800105a:	f641 0106 	movw	r1, #6150	; 0x1806
 800105e:	202e      	movs	r0, #46	; 0x2e
 8001060:	f7ff ff74 	bl	8000f4c <dwt_write16bitoffsetreg>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8001070:	200e      	movs	r0, #14
 8001072:	f000 f80f 	bl	8001094 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001076:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800107a:	2106      	movs	r1, #6
 800107c:	202d      	movs	r0, #45	; 0x2d
 800107e:	f7ff ff65 	bl	8000f4c <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001082:	2001      	movs	r0, #1
 8001084:	f000 f994 	bl	80013b0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001088:	2001      	movs	r0, #1
 800108a:	f000 f803 	bl	8001094 <_dwt_enableclocks>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2202      	movs	r2, #2
 80010a2:	2100      	movs	r1, #0
 80010a4:	2036      	movs	r0, #54	; 0x36
 80010a6:	f7ff fe6f 	bl	8000d88 <dwt_readfromdevice>
    switch(clocks)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0e      	cmp	r3, #14
 80010ae:	d876      	bhi.n	800119e <_dwt_enableclocks+0x10a>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <_dwt_enableclocks+0x24>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	08001105 	.word	0x08001105
 80010bc:	080010f5 	.word	0x080010f5
 80010c0:	0800111b 	.word	0x0800111b
 80010c4:	0800119f 	.word	0x0800119f
 80010c8:	0800119f 	.word	0x0800119f
 80010cc:	0800119f 	.word	0x0800119f
 80010d0:	0800119f 	.word	0x0800119f
 80010d4:	08001131 	.word	0x08001131
 80010d8:	08001151 	.word	0x08001151
 80010dc:	0800119f 	.word	0x0800119f
 80010e0:	0800119f 	.word	0x0800119f
 80010e4:	08001167 	.word	0x08001167
 80010e8:	08001173 	.word	0x08001173
 80010ec:	0800117f 	.word	0x0800117f
 80010f0:	08001195 	.word	0x08001195
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80010f4:	2300      	movs	r3, #0
 80010f6:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001102:	e04d      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	f023 0303 	bic.w	r3, r3, #3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	b25b      	sxtb	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001118:	e042      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800111a:	7b3b      	ldrb	r3, [r7, #12]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	b25b      	sxtb	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	733b      	strb	r3, [r7, #12]
        }
        break;
 800112e:	e037      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001130:	7b3b      	ldrb	r3, [r7, #12]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001138:	b25b      	sxtb	r3, r3
 800113a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800113e:	b25b      	sxtb	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800114a:	b2db      	uxtb	r3, r3
 800114c:	737b      	strb	r3, [r7, #13]
        }
        break;
 800114e:	e027      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001156:	b2db      	uxtb	r3, r3
 8001158:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 800115a:	7b7b      	ldrb	r3, [r7, #13]
 800115c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001164:	e01c      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001166:	7b7b      	ldrb	r3, [r7, #13]
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001170:	e016      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	f023 0302 	bic.w	r3, r3, #2
 8001178:	b2db      	uxtb	r3, r3
 800117a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800117c:	e010      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001186:	b25b      	sxtb	r3, r3
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001192:	e005      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001194:	2301      	movs	r3, #1
 8001196:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001198:	2303      	movs	r3, #3
 800119a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800119c:	e000      	b.n	80011a0 <_dwt_enableclocks+0x10c>
        default:
        break;
 800119e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2201      	movs	r2, #1
 80011a6:	2100      	movs	r1, #0
 80011a8:	2036      	movs	r0, #54	; 0x36
 80011aa:	f7ff fd73 	bl	8000c94 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	3301      	adds	r3, #1
 80011b4:	2201      	movs	r2, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	2036      	movs	r0, #54	; 0x36
 80011ba:	f7ff fd6b 	bl	8000c94 <dwt_writetodevice>

} // end _dwt_enableclocks()
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop

080011c8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff61 	bl	8001094 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	2036      	movs	r0, #54	; 0x36
 80011d8:	f7ff feb8 	bl	8000f4c <dwt_write16bitoffsetreg>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 80011e6:	2100      	movs	r1, #0
 80011e8:	200e      	movs	r0, #14
 80011ea:	f7ff fe45 	bl	8000e78 <dwt_read32bitoffsetreg>
 80011ee:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 80011f0:	f000 f8c0 	bl	8001374 <decamutexon>
 80011f4:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200e      	movs	r0, #14
 80011fc:	f7ff fec2 	bl	8000f84 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	2100      	movs	r1, #0
 8001204:	200d      	movs	r0, #13
 8001206:	f7ff fe8e 	bl	8000f26 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <dwt_forcetrxoff+0x58>)
 800120c:	2100      	movs	r1, #0
 800120e:	200f      	movs	r0, #15
 8001210:	f7ff feb8 	bl	8000f84 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001214:	f000 f814 	bl	8001240 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	2100      	movs	r1, #0
 800121c:	200e      	movs	r0, #14
 800121e:	f7ff feb1 	bl	8000f84 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f000 f8b7 	bl	8001396 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <dwt_forcetrxoff+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2427fff8 	.word	0x2427fff8
 800123c:	20000000 	.word	0x20000000

08001240 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001246:	2103      	movs	r1, #3
 8001248:	200f      	movs	r0, #15
 800124a:	f7ff fe59 	bl	8000f00 <dwt_read8bitoffsetreg>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001252:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001258:	4053      	eors	r3, r2
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001262:	2201      	movs	r2, #1
 8001264:	2103      	movs	r1, #3
 8001266:	200d      	movs	r0, #13
 8001268:	f7ff fe5d 	bl	8000f26 <dwt_write8bitoffsetreg>
    }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001286:	f7ff ffdb 	bl	8001240 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 800128a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128e:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a0:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	461a      	mov	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	200d      	movs	r0, #13
 80012aa:	f7ff fe4f 	bl	8000f4c <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01a      	beq.n	80012ee <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80012b8:	2103      	movs	r1, #3
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fe20 	bl	8000f00 <dwt_read8bitoffsetreg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80012c4:	7b7b      	ldrb	r3, [r7, #13]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00f      	beq.n	80012ee <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80012ce:	f7ff ff87 	bl	80011e0 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 80012dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e0:	2100      	movs	r1, #0
 80012e2:	200d      	movs	r0, #13
 80012e4:	f7ff fe32 	bl	8000f4c <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e000      	b.n	80012f0 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 80012ee:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80012fc:	f7ff ff64 	bl	80011c8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	202c      	movs	r0, #44	; 0x2c
 8001306:	f7ff fe21 	bl	8000f4c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800130a:	2200      	movs	r2, #0
 800130c:	2106      	movs	r1, #6
 800130e:	202c      	movs	r0, #44	; 0x2c
 8001310:	f7ff fe09 	bl	8000f26 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001314:	f7ff fe7c 	bl	8001010 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001318:	2200      	movs	r2, #0
 800131a:	2103      	movs	r1, #3
 800131c:	2036      	movs	r0, #54	; 0x36
 800131e:	f7ff fe02 	bl	8000f26 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f844 	bl	80013b0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001328:	22f0      	movs	r2, #240	; 0xf0
 800132a:	2103      	movs	r1, #3
 800132c:	2036      	movs	r0, #54	; 0x36
 800132e:	f7ff fdfa 	bl	8000f26 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <dwt_softreset+0x48>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	755a      	strb	r2, [r3, #21]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000

08001344 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	b25b      	sxtb	r3, r3
 8001358:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135c:	b25b      	sxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	461a      	mov	r2, r3
 8001364:	210e      	movs	r1, #14
 8001366:	202b      	movs	r0, #43	; 0x2b
 8001368:	f7ff fddd 	bl	8000f26 <dwt_write8bitoffsetreg>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800137a:	f000 f991 	bl	80016a0 <port_GetEXT_IRQStatus>
 800137e:	4603      	mov	r3, r0
 8001380:	607b      	str	r3, [r7, #4]

	if(s) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001388:	f000 f97c 	bl	8001684 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80013a4:	f000 f975 	bl	8001692 <port_EnableEXT_IRQ>
	}
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f8c5 	bl	8001548 <Sleep>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80013c8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80013cc:	4683      	mov	fp, r0
 80013ce:	468a      	mov	sl, r1
 80013d0:	4690      	mov	r8, r2
 80013d2:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80013d4:	f7ff ffce 	bl	8001374 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d8:	4d13      	ldr	r5, [pc, #76]	; (8001428 <writetospi+0x60>)
    stat = decamutexon() ;
 80013da:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013dc:	4628      	mov	r0, r5
 80013de:	f003 f8e3 	bl	80045a8 <HAL_SPI_GetState>
 80013e2:	2801      	cmp	r0, #1
 80013e4:	4604      	mov	r4, r0
 80013e6:	d1f9      	bne.n	80013dc <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <writetospi+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	f001 fc2b 	bl	8002c48 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80013f2:	465a      	mov	r2, fp
 80013f4:	4651      	mov	r1, sl
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <writetospi+0x60>)
 80013fc:	f002 fe99 	bl	8004132 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	4649      	mov	r1, r9
 8001406:	fa1f f288 	uxth.w	r2, r8
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <writetospi+0x60>)
 800140c:	f002 fe91 	bl	8004132 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001410:	4622      	mov	r2, r4
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <writetospi+0x64>)
 8001416:	f001 fc17 	bl	8002c48 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff ffbb 	bl	8001396 <decamutexoff>

    return 0;
} // end writetospi()
 8001420:	2000      	movs	r0, #0
 8001422:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001426:	bf00      	nop
 8001428:	200005c8 	.word	0x200005c8
 800142c:	40020400 	.word	0x40020400

08001430 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001430:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001434:	4681      	mov	r9, r0
 8001436:	460c      	mov	r4, r1
 8001438:	4690      	mov	r8, r2
 800143a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800143c:	f7ff ff9a 	bl	8001374 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001440:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80014c0 <readfromspi+0x90>
    stat = decamutexon() ;
 8001444:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001446:	4650      	mov	r0, sl
 8001448:	f003 f8ae 	bl	80045a8 <HAL_SPI_GetState>
 800144c:	2801      	cmp	r0, #1
 800144e:	d1fa      	bne.n	8001446 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <readfromspi+0x8c>)
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	f001 fbf7 	bl	8002c48 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800145a:	f1b9 0f00 	cmp.w	r9, #0
 800145e:	d00c      	beq.n	800147a <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001460:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80014c0 <readfromspi+0x90>
 8001464:	44a1      	add	r9, r4
 8001466:	2201      	movs	r2, #1
 8001468:	4621      	mov	r1, r4
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 800146e:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001470:	4650      	mov	r0, sl
 8001472:	f002 fe5e 	bl	8004132 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001476:	45a1      	cmp	r9, r4
 8001478:	d1f5      	bne.n	8001466 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800147a:	f1b8 0f00 	cmp.w	r8, #0
 800147e:	d012      	beq.n	80014a6 <readfromspi+0x76>
 8001480:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80014c0 <readfromspi+0x90>
 8001484:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001488:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800148a:	f8dc 1000 	ldr.w	r1, [ip]
 800148e:	688a      	ldr	r2, [r1, #8]
 8001490:	0792      	lsls	r2, r2, #30
 8001492:	d5fc      	bpl.n	800148e <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001494:	60cc      	str	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001496:	688a      	ldr	r2, [r1, #8]
 8001498:	07d3      	lsls	r3, r2, #31
 800149a:	d5fc      	bpl.n	8001496 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800149c:	68cb      	ldr	r3, [r1, #12]
 800149e:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80014a2:	4285      	cmp	r5, r0
 80014a4:	d1f1      	bne.n	800148a <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80014a6:	2201      	movs	r2, #1
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <readfromspi+0x8c>)
 80014ac:	f001 fbcc 	bl	8002c48 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80014b0:	4630      	mov	r0, r6
 80014b2:	f7ff ff70 	bl	8001396 <decamutexoff>

    return 0;
} // end readfromspi()
 80014b6:	2000      	movs	r0, #0
 80014b8:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80014bc:	40020400 	.word	0x40020400
 80014c0:	200005c8 	.word	0x200005c8

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db12      	blt.n	8001538 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	490a      	ldr	r1, [pc, #40]	; (8001544 <__NVIC_DisableIRQ+0x44>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	3320      	adds	r3, #32
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001532:	f3bf 8f6f 	isb	sy
}
 8001536:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100

08001548 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f001 f86b 	bl	800262c <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <EXTI_GetITEnStatus+0x38>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf14      	ite	ne
 8001584:	2301      	movne	r3, #1
 8001586:	2300      	moveq	r3, #0
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015a6:	2311      	movs	r3, #17
 80015a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <reset_DW1000+0x40>)
 80015b4:	f001 f9c4 	bl	8002940 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <reset_DW1000+0x40>)
 80015be:	f001 fb43 	bl	8002c48 <HAL_GPIO_WritePin>

    Sleep(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff ffc0 	bl	8001548 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f809 	bl	80015e0 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ffba 	bl	8001548 <Sleep>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020000 	.word	0x40020000

080015e0 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015f6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <setup_DW1000RSTnIRQ+0x70>)
 8001604:	f001 f99c 	bl	8002940 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001608:	2006      	movs	r0, #6
 800160a:	f001 f94e 	bl	80028aa <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	2006      	movs	r0, #6
 8001614:	f001 f92d 	bl	8002872 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001618:	e015      	b.n	8001646 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800161a:	2006      	movs	r0, #6
 800161c:	f001 f953 	bl	80028c6 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001620:	2301      	movs	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001624:	2311      	movs	r3, #17
 8001626:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <setup_DW1000RSTnIRQ+0x70>)
 8001638:	f001 f982 	bl	8002940 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2101      	movs	r1, #1
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <setup_DW1000RSTnIRQ+0x70>)
 8001642:	f001 fb01 	bl	8002c48 <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020000 	.word	0x40020000

08001654 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <port_set_dw1000_slowrate+0x14>)
 800165a:	2220      	movs	r2, #32
 800165c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800165e:	4802      	ldr	r0, [pc, #8]	; (8001668 <port_set_dw1000_slowrate+0x14>)
 8001660:	f002 fcde 	bl	8004020 <HAL_SPI_Init>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200005c8 	.word	0x200005c8

0800166c <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <port_set_dw1000_fastrate+0x14>)
 8001672:	2208      	movs	r2, #8
 8001674:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001676:	4802      	ldr	r0, [pc, #8]	; (8001680 <port_set_dw1000_fastrate+0x14>)
 8001678:	f002 fcd2 	bl	8004020 <HAL_SPI_Init>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200005c8 	.word	0x200005c8

08001684 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001688:	2017      	movs	r0, #23
 800168a:	f7ff ff39 	bl	8001500 <__NVIC_DisableIRQ>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001696:	2017      	movs	r0, #23
 8001698:	f7ff ff14 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80016a4:	2017      	movs	r0, #23
 80016a6:	f7ff ff5b 	bl	8001560 <EXTI_GetITEnStatus>
 80016aa:	4603      	mov	r3, r0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <SSD1306_InvertDisplay+0x1a>
 80016be:	22a7      	movs	r2, #167	; 0xa7
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f000 faac 	bl	8001c20 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80016c8:	e004      	b.n	80016d4 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80016ca:	22a6      	movs	r2, #166	; 0xa6
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f000 faa6 	bl	8001c20 <ssd1306_I2C_Write>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80016e2:	f000 fa21 	bl	8001b28 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80016e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80016ea:	2201      	movs	r2, #1
 80016ec:	2178      	movs	r1, #120	; 0x78
 80016ee:	485b      	ldr	r0, [pc, #364]	; (800185c <SSD1306_Init+0x180>)
 80016f0:	f001 fd06 	bl	8003100 <HAL_I2C_IsDeviceReady>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e0a9      	b.n	8001852 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80016fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001702:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001704:	e002      	b.n	800170c <SSD1306_Init+0x30>
		p--;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3b01      	subs	r3, #1
 800170a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001712:	22ae      	movs	r2, #174	; 0xae
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	; 0x78
 8001718:	f000 fa82 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	2078      	movs	r0, #120	; 0x78
 8001722:	f000 fa7d 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001726:	2210      	movs	r2, #16
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fa78 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001730:	22b0      	movs	r2, #176	; 0xb0
 8001732:	2100      	movs	r1, #0
 8001734:	2078      	movs	r0, #120	; 0x78
 8001736:	f000 fa73 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800173a:	22c8      	movs	r2, #200	; 0xc8
 800173c:	2100      	movs	r1, #0
 800173e:	2078      	movs	r0, #120	; 0x78
 8001740:	f000 fa6e 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2078      	movs	r0, #120	; 0x78
 800174a:	f000 fa69 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800174e:	2210      	movs	r2, #16
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 fa64 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	; 0x78
 800175e:	f000 fa5f 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001762:	2281      	movs	r2, #129	; 0x81
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	; 0x78
 8001768:	f000 fa5a 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	; 0x78
 8001772:	f000 fa55 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001776:	22a1      	movs	r2, #161	; 0xa1
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fa50 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001780:	22a6      	movs	r2, #166	; 0xa6
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 fa4b 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800178a:	22a8      	movs	r2, #168	; 0xa8
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fa46 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001794:	223f      	movs	r2, #63	; 0x3f
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	; 0x78
 800179a:	f000 fa41 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800179e:	22a4      	movs	r2, #164	; 0xa4
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f000 fa3c 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017a8:	22d3      	movs	r2, #211	; 0xd3
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	; 0x78
 80017ae:	f000 fa37 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f000 fa32 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017bc:	22d5      	movs	r2, #213	; 0xd5
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	; 0x78
 80017c2:	f000 fa2d 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017c6:	22f0      	movs	r2, #240	; 0xf0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 fa28 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017d0:	22d9      	movs	r2, #217	; 0xd9
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f000 fa23 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017da:	2222      	movs	r2, #34	; 0x22
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	; 0x78
 80017e0:	f000 fa1e 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017e4:	22da      	movs	r2, #218	; 0xda
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	; 0x78
 80017ea:	f000 fa19 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017ee:	2212      	movs	r2, #18
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 fa14 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017f8:	22db      	movs	r2, #219	; 0xdb
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f000 fa0f 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001802:	2220      	movs	r2, #32
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	; 0x78
 8001808:	f000 fa0a 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800180c:	228d      	movs	r2, #141	; 0x8d
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	; 0x78
 8001812:	f000 fa05 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001816:	2214      	movs	r2, #20
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 fa00 	bl	8001c20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001820:	22af      	movs	r2, #175	; 0xaf
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 f9fb 	bl	8001c20 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800182a:	222e      	movs	r2, #46	; 0x2e
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 f9f6 	bl	8001c20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f843 	bl	80018c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800183a:	f000 f813 	bl	8001864 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <SSD1306_Init+0x184>)
 8001840:	2200      	movs	r2, #0
 8001842:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SSD1306_Init+0x184>)
 8001846:	2200      	movs	r2, #0
 8001848:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SSD1306_Init+0x184>)
 800184c:	2201      	movs	r2, #1
 800184e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200004ec 	.word	0x200004ec
 8001860:	200004e4 	.word	0x200004e4

08001864 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	e01d      	b.n	80018ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	3b50      	subs	r3, #80	; 0x50
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	; 0x78
 800187c:	f000 f9d0 	bl	8001c20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	; 0x78
 8001886:	f000 f9cb 	bl	8001c20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800188a:	2210      	movs	r2, #16
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	; 0x78
 8001890:	f000 f9c6 	bl	8001c20 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <SSD1306_UpdateScreen+0x58>)
 800189a:	441a      	add	r2, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	2140      	movs	r1, #64	; 0x40
 80018a0:	2078      	movs	r0, #120	; 0x78
 80018a2:	f000 f957 	bl	8001b54 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	3301      	adds	r3, #1
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d9de      	bls.n	8001870 <SSD1306_UpdateScreen+0xc>
	}
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200000e4 	.word	0x200000e4

080018c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <SSD1306_Fill+0x14>
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <SSD1306_Fill+0x16>
 80018d4:	23ff      	movs	r3, #255	; 0xff
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	4619      	mov	r1, r3
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <SSD1306_Fill+0x2c>)
 80018de:	f003 fc46 	bl	800516e <memset>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200000e4 	.word	0x200000e4

080018f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	460b      	mov	r3, r1
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	70fb      	strb	r3, [r7, #3]
	if (
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b7f      	cmp	r3, #127	; 0x7f
 8001906:	d848      	bhi.n	800199a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	2b3f      	cmp	r3, #63	; 0x3f
 800190c:	d845      	bhi.n	800199a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <SSD1306_DrawPixel+0xb8>)
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d11a      	bne.n	8001960 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	b298      	uxth	r0, r3
 8001932:	4603      	mov	r3, r0
 8001934:	01db      	lsls	r3, r3, #7
 8001936:	4413      	add	r3, r2
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	b25a      	sxtb	r2, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	b25b      	sxtb	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b259      	sxtb	r1, r3
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	4603      	mov	r3, r0
 8001954:	01db      	lsls	r3, r3, #7
 8001956:	4413      	add	r3, r2
 8001958:	b2c9      	uxtb	r1, r1
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 800195c:	54d1      	strb	r1, [r2, r3]
 800195e:	e01d      	b.n	800199c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	b298      	uxth	r0, r3
 8001968:	4603      	mov	r3, r0
 800196a:	01db      	lsls	r3, r3, #7
 800196c:	4413      	add	r3, r2
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	b25a      	sxtb	r2, r3
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	b25b      	sxtb	r3, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	b25b      	sxtb	r3, r3
 8001986:	4013      	ands	r3, r2
 8001988:	b259      	sxtb	r1, r3
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	4603      	mov	r3, r0
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	4413      	add	r3, r2
 8001992:	b2c9      	uxtb	r1, r1
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SSD1306_DrawPixel+0xbc>)
 8001996:	54d1      	strb	r1, [r2, r3]
 8001998:	e000      	b.n	800199c <SSD1306_DrawPixel+0xac>
		return;
 800199a:	bf00      	nop
	}
}
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200004e4 	.word	0x200004e4
 80019ac:	200000e4 	.word	0x200000e4

080019b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	4613      	mov	r3, r2
 80019be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <SSD1306_GotoXY+0x28>)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <SSD1306_GotoXY+0x28>)
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	8053      	strh	r3, [r2, #2]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	200004e4 	.word	0x200004e4

080019dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019ec:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <SSD1306_Putc+0xfc>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
	if (
 80019f8:	2b7f      	cmp	r3, #127	; 0x7f
 80019fa:	dc07      	bgt.n	8001a0c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <SSD1306_Putc+0xfc>)
 80019fe:	885b      	ldrh	r3, [r3, #2]
 8001a00:	461a      	mov	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	785b      	ldrb	r3, [r3, #1]
 8001a06:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a08:	2b3f      	cmp	r3, #63	; 0x3f
 8001a0a:	dd01      	ble.n	8001a10 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e05e      	b.n	8001ace <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e04b      	b.n	8001aae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	3b20      	subs	r3, #32
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	7849      	ldrb	r1, [r1, #1]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	440b      	add	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e030      	b.n	8001a9c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a4c:	881a      	ldrh	r2, [r3, #0]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b298      	uxth	r0, r3
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a58:	885a      	ldrh	r2, [r3, #2]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	79ba      	ldrb	r2, [r7, #6]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff ff43 	bl	80018f0 <SSD1306_DrawPixel>
 8001a6a:	e014      	b.n	8001a96 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a6e:	881a      	ldrh	r2, [r3, #0]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b298      	uxth	r0, r3
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001a7a:	885a      	ldrh	r2, [r3, #2]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b299      	uxth	r1, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff ff2d 	bl	80018f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d3c8      	bcc.n	8001a3a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	785b      	ldrb	r3, [r3, #1]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d3ad      	bcc.n	8001a16 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <SSD1306_Putc+0xfc>)
 8001aca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200004e4 	.word	0x200004e4

08001adc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001aea:	e012      	b.n	8001b12 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff71 	bl	80019dc <SSD1306_Putc>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d002      	beq.n	8001b0c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	e008      	b.n	8001b1e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e8      	bne.n	8001aec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <ssd1306_I2C_Init+0x28>)
 8001b30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b32:	e002      	b.n	8001b3a <ssd1306_I2C_Init+0x12>
		p--;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f9      	bne.n	8001b34 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	0003d090 	.word	0x0003d090

08001b54 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b0c7      	sub	sp, #284	; 0x11c
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001b62:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001b66:	600a      	str	r2, [r1, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b6e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b72:	4622      	mov	r2, r4
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b7a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001b7e:	4602      	mov	r2, r0
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b96:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b9a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ba8:	e015      	b.n	8001bd6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001baa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bb2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	441a      	add	r2, r3
 8001bba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	7811      	ldrb	r1, [r2, #0]
 8001bc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bc6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001bca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001bcc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001bd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001be0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001be4:	8812      	ldrh	r2, [r2, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d8df      	bhi.n	8001baa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	200a      	movs	r0, #10
 8001c0a:	9000      	str	r0, [sp, #0]
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c0e:	f001 f979 	bl	8002f04 <HAL_I2C_Master_Transmit>
}
 8001c12:	bf00      	nop
 8001c14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	200004ec 	.word	0x200004ec

08001c20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	71bb      	strb	r3, [r7, #6]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	b299      	uxth	r1, r3
 8001c3e:	f107 020c 	add.w	r2, r7, #12
 8001c42:	230a      	movs	r3, #10
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2302      	movs	r3, #2
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <ssd1306_I2C_Write+0x38>)
 8001c4a:	f001 f95b 	bl	8002f04 <HAL_I2C_Master_Transmit>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200004ec 	.word	0x200004ec

08001c5c <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1d39      	adds	r1, r7, #4
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff33 	bl	8001adc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c76:	f7ff fdf5 	bl	8001864 <SSD1306_UpdateScreen>
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_GPIO_Init+0xdc>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	4815      	ldr	r0, [pc, #84]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001d10:	f000 ff9a 	bl	8002c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	4813      	ldr	r0, [pc, #76]	; (8001d68 <MX_GPIO_Init+0xe4>)
 8001d1a:	f000 ff95 	bl	8002c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	480b      	ldr	r0, [pc, #44]	; (8001d64 <MX_GPIO_Init+0xe0>)
 8001d36:	f000 fe03 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_GPIO_Init+0xe4>)
 8001d52:	f000 fdf5 	bl	8002940 <HAL_GPIO_Init>

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400

08001d6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <MX_I2C1_Init+0x54>)
 8001d74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <MX_I2C1_Init+0x58>)
 8001d7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <MX_I2C1_Init+0x50>)
 8001daa:	f000 ff67 	bl	8002c7c <HAL_I2C_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001db4:	f000 f8ce 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200004ec 	.word	0x200004ec
 8001dc0:	40005400 	.word	0x40005400
 8001dc4:	00061a80 	.word	0x00061a80

08001dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_I2C_MspInit+0x84>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12c      	bne.n	8001e44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0c:	2312      	movs	r3, #18
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <HAL_I2C_MspInit+0x8c>)
 8001e24:	f000 fd8c 	bl	8002940 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e36:	6413      	str	r3, [r2, #64]	; 0x40
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_I2C_MspInit+0x88>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40005400 	.word	0x40005400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e5c:	f000 fb74 	bl	8002548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e60:	f000 f810 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e64:	f7ff ff0e 	bl	8001c84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e68:	f000 f918 	bl	800209c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e6c:	f000 fad0 	bl	8002410 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e70:	f7ff ff7c 	bl	8001d6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fbb3 	bl	80015e0 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8001e7a:	f7ff fc2f 	bl	80016dc <SSD1306_Init>
  dw_main();
 8001e7e:	f000 f86f 	bl	8001f60 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <main+0x2a>

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b094      	sub	sp, #80	; 0x50
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	2230      	movs	r2, #48	; 0x30
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f96b 	bl	800516e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <SystemClock_Config+0xc8>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <SystemClock_Config+0xc8>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <SystemClock_Config+0xc8>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <SystemClock_Config+0xcc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <SystemClock_Config+0xcc>)
 8001ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <SystemClock_Config+0xcc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ee8:	2310      	movs	r3, #16
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eec:	2302      	movs	r3, #2
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ef8:	2364      	movs	r3, #100	; 0x64
 8001efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f00:	2304      	movs	r3, #4
 8001f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f001 fc31 	bl	8003770 <HAL_RCC_OscConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f14:	f000 f81e 	bl	8001f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f18:	230f      	movs	r3, #15
 8001f1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f2e:	f107 030c 	add.w	r3, r7, #12
 8001f32:	2103      	movs	r1, #3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 fe93 	bl	8003c60 <HAL_RCC_ClockConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f40:	f000 f808 	bl	8001f54 <Error_Handler>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3750      	adds	r7, #80	; 0x50
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <Error_Handler+0x8>
	...

08001f60 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    ssd1306_write(buff, Font_7x10);
 8001f66:	4842      	ldr	r0, [pc, #264]	; (8002070 <dw_main+0x110>)
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <dw_main+0x114>)
 8001f6a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f6e:	f7ff fe75 	bl	8001c5c <ssd1306_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001f72:	f7ff fb13 	bl	800159c <reset_DW1000>
    port_set_dw1000_slowrate();
 8001f76:	f7ff fb6d 	bl	8001654 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7fe fb06 	bl	800058c <dwt_initialise>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d110      	bne.n	8001faa <dw_main+0x4a>
    {
        printf("INIT FAILED");
 8001f88:	483b      	ldr	r0, [pc, #236]	; (8002078 <dw_main+0x118>)
 8001f8a:	f003 f89b 	bl	80050c4 <iprintf>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8001f8e:	210a      	movs	r1, #10
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fd0d 	bl	80019b0 <SSD1306_GotoXY>
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff fb8a 	bl	80016b0 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 8001f9c:	4837      	ldr	r0, [pc, #220]	; (800207c <dw_main+0x11c>)
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <dw_main+0x114>)
 8001fa0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fa4:	f7ff fe5a 	bl	8001c5c <ssd1306_write>
        while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <dw_main+0x48>
        { };
    }
    port_set_dw1000_fastrate();
 8001faa:	f7ff fb5f 	bl	800166c <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 8001fae:	4834      	ldr	r0, [pc, #208]	; (8002080 <dw_main+0x120>)
 8001fb0:	f7fe fc46 	bl	8000840 <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	e007      	b.n	8001fca <dw_main+0x6a>
        {
            rx_buffer[i] = 0;
 8001fba:	4a32      	ldr	r2, [pc, #200]	; (8002084 <dw_main+0x124>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8001fce:	ddf4      	ble.n	8001fba <dw_main+0x5a>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff f94f 	bl	8001274 <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001fd6:	bf00      	nop
 8001fd8:	2100      	movs	r1, #0
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f7fe ff4c 	bl	8000e78 <dwt_read32bitoffsetreg>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <dw_main+0x128>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <dw_main+0x128>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b28      	ldr	r3, [pc, #160]	; (800208c <dw_main+0x12c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f2      	beq.n	8001fd8 <dw_main+0x78>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <dw_main+0x128>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d031      	beq.n	8002062 <dw_main+0x102>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001ffe:	2100      	movs	r1, #0
 8002000:	2010      	movs	r0, #16
 8002002:	f7fe ff39 	bl	8000e78 <dwt_read32bitoffsetreg>
 8002006:	4603      	mov	r3, r0
 8002008:	b29b      	uxth	r3, r3
 800200a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <dw_main+0x130>)
 8002012:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <dw_main+0x130>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	2b7f      	cmp	r3, #127	; 0x7f
 800201a:	d806      	bhi.n	800202a <dw_main+0xca>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <dw_main+0x130>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <dw_main+0x124>)
 8002026:	f7fe fe23 	bl	8000c70 <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 30);
 800202a:	211e      	movs	r1, #30
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fcbf 	bl	80019b0 <SSD1306_GotoXY>
            ssd1306_write(rx_buffer, Font_7x10);
 8002032:	4814      	ldr	r0, [pc, #80]	; (8002084 <dw_main+0x124>)
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <dw_main+0x114>)
 8002036:	e893 0006 	ldmia.w	r3, {r1, r2}
 800203a:	f7ff fe0f 	bl	8001c5c <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, strlen(rx_buffer), HAL_MAX_DELAY);
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <dw_main+0x124>)
 8002040:	f7fe f8ce 	bl	80001e0 <strlen>
 8002044:	4603      	mov	r3, r0
 8002046:	b29a      	uxth	r2, r3
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	490d      	ldr	r1, [pc, #52]	; (8002084 <dw_main+0x124>)
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <dw_main+0x134>)
 8002050:	f002 fbe3 	bl	800481a <HAL_UART_Transmit>
            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002054:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002058:	2100      	movs	r1, #0
 800205a:	200f      	movs	r0, #15
 800205c:	f7fe ff92 	bl	8000f84 <dwt_write32bitoffsetreg>
 8002060:	e7a8      	b.n	8001fb4 <dw_main+0x54>

        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <dw_main+0x138>)
 8002064:	2100      	movs	r1, #0
 8002066:	200f      	movs	r0, #15
 8002068:	f7fe ff8c 	bl	8000f84 <dwt_write32bitoffsetreg>
    {
 800206c:	e7a2      	b.n	8001fb4 <dw_main+0x54>
 800206e:	bf00      	nop
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000004 	.word	0x20000004
 8002078:	080063cc 	.word	0x080063cc
 800207c:	080063d8 	.word	0x080063d8
 8002080:	2000001c 	.word	0x2000001c
 8002084:	20000540 	.word	0x20000540
 8002088:	200005c0 	.word	0x200005c0
 800208c:	2405d000 	.word	0x2405d000
 8002090:	200005c4 	.word	0x200005c4
 8002094:	20000624 	.word	0x20000624
 8002098:	24059000 	.word	0x24059000

0800209c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <MX_SPI1_Init+0x64>)
 80020a2:	4a18      	ldr	r2, [pc, #96]	; (8002104 <MX_SPI1_Init+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_SPI1_Init+0x64>)
 80020a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <MX_SPI1_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_SPI1_Init+0x64>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <MX_SPI1_Init+0x64>)
 80020c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_SPI1_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <MX_SPI1_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_SPI1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <MX_SPI1_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_SPI1_Init+0x64>)
 80020e8:	220a      	movs	r2, #10
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <MX_SPI1_Init+0x64>)
 80020ee:	f001 ff97 	bl	8004020 <HAL_SPI_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020f8:	f7ff ff2c 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200005c8 	.word	0x200005c8
 8002104:	40013000 	.word	0x40013000

08002108 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_SPI_MspInit+0x94>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d133      	bne.n	8002192 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a1b      	ldr	r2, [pc, #108]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_SPI_MspInit+0x98>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002162:	23e0      	movs	r3, #224	; 0xe0
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002172:	2305      	movs	r3, #5
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <HAL_SPI_MspInit+0x9c>)
 800217e:	f000 fbdf 	bl	8002940 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2023      	movs	r0, #35	; 0x23
 8002188:	f000 fb73 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800218c:	2023      	movs	r0, #35	; 0x23
 800218e:	f000 fb8c 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	; 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40013000 	.word	0x40013000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <HAL_MspInit+0x4c>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_MspInit+0x4c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_MspInit+0x4c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_MspInit+0x4c>)
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_MspInit+0x4c>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <NMI_Handler+0x4>

080021fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <MemManage_Handler+0x4>

0800220a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>

08002216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f000 f9d2 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <SPI1_IRQHandler+0x10>)
 8002252:	f002 f8ab 	bl	80043ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200005c8 	.word	0x200005c8

08002260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
	return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:

int _kill(int pid, int sig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800227a:	f002 ffc7 	bl	800520c <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
	return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022a2:	e7fe      	b.n	80022a2 <_exit+0x12>

080022a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e00a      	b.n	80022cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022b6:	f3af 8000 	nop.w
 80022ba:	4601      	mov	r1, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbf0      	blt.n	80022b6 <_read+0x12>
	}

return len;
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e009      	b.n	8002304 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	dbf1      	blt.n	80022f0 <_write+0x12>
	}
	return len;
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_close>:

int _close(int file)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
	return -1;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233e:	605a      	str	r2, [r3, #4]
	return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_isatty>:

int _isatty(int file)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
	return 1;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f002 ff2c 	bl	800520c <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20020000 	.word	0x20020000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	20000620 	.word	0x20000620
 80023e8:	200007b8 	.word	0x200007b8

080023ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_USART2_UART_Init+0x4c>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <MX_USART2_UART_Init+0x50>)
 8002418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <MX_USART2_UART_Init+0x4c>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_USART2_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_USART2_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <MX_USART2_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_USART2_UART_Init+0x4c>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MX_USART2_UART_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_USART2_UART_Init+0x4c>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_USART2_UART_Init+0x4c>)
 8002448:	f002 f99a 	bl	8004780 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002452:	f7ff fd7f 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000624 	.word	0x20000624
 8002460:	40004400 	.word	0x40004400

08002464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0x84>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d12b      	bne.n	80024de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_UART_MspInit+0x88>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_UART_MspInit+0x88>)
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_UART_MspInit+0x88>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_UART_MspInit+0x88>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_UART_MspInit+0x88>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_UART_MspInit+0x88>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024be:	230c      	movs	r3, #12
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ce:	2307      	movs	r3, #7
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <HAL_UART_MspInit+0x8c>)
 80024da:	f000 fa31 	bl	8002940 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024de:	bf00      	nop
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40004400 	.word	0x40004400
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020000 	.word	0x40020000

080024f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800252c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002510:	4c0b      	ldr	r4, [pc, #44]	; (8002540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800251e:	f7ff ff65 	bl	80023ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002522:	f002 fe79 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002526:	f7ff fc97 	bl	8001e58 <main>
  bx  lr    
 800252a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800252c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002538:	08006cd8 	.word	0x08006cd8
  ldr r2, =_sbss
 800253c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002540:	200007b8 	.word	0x200007b8

08002544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC_IRQHandler>
	...

08002548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_Init+0x40>)
 8002552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_Init+0x40>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x40>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 f973 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	200f      	movs	r0, #15
 8002578:	f000 f808 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff fe14 	bl	80021a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f999 	bl	80028e2 <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f000 f953 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000028 	.word	0x20000028
 80025e4:	20000030 	.word	0x20000030
 80025e8:	2000002c 	.word	0x2000002c

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000030 	.word	0x20000030
 8002610:	20000668 	.word	0x20000668

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000668 	.word	0x20000668

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff ffee 	bl	8002614 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffde 	bl	8002614 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000030 	.word	0x20000030

08002674 <__NVIC_SetPriorityGrouping>:
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_DisableIRQ>:
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db12      	blt.n	800274c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	490a      	ldr	r1, [pc, #40]	; (8002758 <__NVIC_DisableIRQ+0x44>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	3320      	adds	r3, #32
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002740:	f3bf 8f4f 	dsb	sy
}
 8002744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002746:	f3bf 8f6f 	isb	sy
}
 800274a:	bf00      	nop
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff05 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff1a 	bl	80026bc <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff8e 	bl	80027b0 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5d 	bl	800275c <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff0d 	bl	80026d8 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff1d 	bl	8002714 <__NVIC_DisableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff94 	bl	8002818 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d004      	beq.n	8002918 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e00c      	b.n	8002932 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2205      	movs	r2, #5
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e159      	b.n	8002c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8148 	bne.w	8002c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a2 	beq.w	8002c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	4a56      	ldr	r2, [pc, #344]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_GPIO_Init+0x2e8>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <HAL_GPIO_Init+0x2f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <HAL_GPIO_Init+0x202>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <HAL_GPIO_Init+0x2f4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0x1fe>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a47      	ldr	r2, [pc, #284]	; (8002c38 <HAL_GPIO_Init+0x2f8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_GPIO_Init+0x1fa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a46      	ldr	r2, [pc, #280]	; (8002c3c <HAL_GPIO_Init+0x2fc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x1f6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <HAL_GPIO_Init+0x300>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_GPIO_Init+0x1f2>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e008      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e004      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_GPIO_Init+0x204>
 8002b42:	2300      	movs	r3, #0
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f002 0203 	and.w	r2, r2, #3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b54:	4935      	ldr	r1, [pc, #212]	; (8002c2c <HAL_GPIO_Init+0x2ec>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b86:	4a2f      	ldr	r2, [pc, #188]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb0:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bda:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c04:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b0f      	cmp	r3, #15
 8002c14:	f67f aea2 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40013c00 	.word	0x40013c00

08002c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
 8002c54:	4613      	mov	r3, r2
 8002c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c58:	787b      	ldrb	r3, [r7, #1]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c64:	e003      	b.n	8002c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	041a      	lsls	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e12b      	b.n	8002ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff f890 	bl	8001dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	; 0x24
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f001 f976 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a81      	ldr	r2, [pc, #516]	; (8002ef0 <HAL_I2C_Init+0x274>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d807      	bhi.n	8002d00 <HAL_I2C_Init+0x84>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a80      	ldr	r2, [pc, #512]	; (8002ef4 <HAL_I2C_Init+0x278>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	bf94      	ite	ls
 8002cf8:	2301      	movls	r3, #1
 8002cfa:	2300      	movhi	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e006      	b.n	8002d0e <HAL_I2C_Init+0x92>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a7d      	ldr	r2, [pc, #500]	; (8002ef8 <HAL_I2C_Init+0x27c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	bf94      	ite	ls
 8002d08:	2301      	movls	r3, #1
 8002d0a:	2300      	movhi	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0e7      	b.n	8002ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a78      	ldr	r2, [pc, #480]	; (8002efc <HAL_I2C_Init+0x280>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4a6a      	ldr	r2, [pc, #424]	; (8002ef0 <HAL_I2C_Init+0x274>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d802      	bhi.n	8002d50 <HAL_I2C_Init+0xd4>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	e009      	b.n	8002d64 <HAL_I2C_Init+0xe8>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_I2C_Init+0x284>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	3301      	adds	r3, #1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	495c      	ldr	r1, [pc, #368]	; (8002ef0 <HAL_I2C_Init+0x274>)
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d819      	bhi.n	8002db8 <HAL_I2C_Init+0x13c>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e59      	subs	r1, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d92:	1c59      	adds	r1, r3, #1
 8002d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d98:	400b      	ands	r3, r1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_I2C_Init+0x138>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e59      	subs	r1, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db2:	e051      	b.n	8002e58 <HAL_I2C_Init+0x1dc>
 8002db4:	2304      	movs	r3, #4
 8002db6:	e04f      	b.n	8002e58 <HAL_I2C_Init+0x1dc>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d111      	bne.n	8002de4 <HAL_I2C_Init+0x168>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e58      	subs	r0, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	440b      	add	r3, r1
 8002dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e012      	b.n	8002e0a <HAL_I2C_Init+0x18e>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	0099      	lsls	r1, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Init+0x196>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e022      	b.n	8002e58 <HAL_I2C_Init+0x1dc>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <HAL_I2C_Init+0x1bc>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1e58      	subs	r0, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	440b      	add	r3, r1
 8002e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	e00f      	b.n	8002e58 <HAL_I2C_Init+0x1dc>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e58      	subs	r0, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	0099      	lsls	r1, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	6809      	ldr	r1, [r1, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6911      	ldr	r1, [r2, #16]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68d2      	ldr	r2, [r2, #12]
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	000186a0 	.word	0x000186a0
 8002ef4:	001e847f 	.word	0x001e847f
 8002ef8:	003d08ff 	.word	0x003d08ff
 8002efc:	431bde83 	.word	0x431bde83
 8002f00:	10624dd3 	.word	0x10624dd3

08002f04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	460b      	mov	r3, r1
 8002f12:	817b      	strh	r3, [r7, #10]
 8002f14:	4613      	mov	r3, r2
 8002f16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff fb7c 	bl	8002614 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	f040 80e0 	bne.w	80030ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	4970      	ldr	r1, [pc, #448]	; (80030f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa92 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0d3      	b.n	80030ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_I2C_Master_Transmit+0x50>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e0cc      	b.n	80030ee <HAL_I2C_Master_Transmit+0x1ea>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d007      	beq.n	8002f7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2221      	movs	r2, #33	; 0x21
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2210      	movs	r2, #16
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	893a      	ldrh	r2, [r7, #8]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a50      	ldr	r2, [pc, #320]	; (80030fc <HAL_I2C_Master_Transmit+0x1f8>)
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6a3a      	ldr	r2, [r7, #32]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f9ca 	bl	800335c <I2C_MasterRequestWrite>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e08d      	b.n	80030ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fe8:	e066      	b.n	80030b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	6a39      	ldr	r1, [r7, #32]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fb0c 	bl	800360c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00d      	beq.n	8003016 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d107      	bne.n	8003012 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e06b      	b.n	80030ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	781a      	ldrb	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d11b      	bne.n	800308c <HAL_I2C_Master_Transmit+0x188>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d017      	beq.n	800308c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	6a39      	ldr	r1, [r7, #32]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fafc 	bl	800368e <I2C_WaitOnBTFFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d107      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e01a      	b.n	80030ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d194      	bne.n	8002fea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	00100002 	.word	0x00100002
 80030fc:	ffff0000 	.word	0xffff0000

08003100 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	460b      	mov	r3, r1
 800310e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff fa80 	bl	8002614 <HAL_GetTick>
 8003114:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003116:	2301      	movs	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	f040 8111 	bne.w	800334a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2319      	movs	r3, #25
 800312e:	2201      	movs	r2, #1
 8003130:	4988      	ldr	r1, [pc, #544]	; (8003354 <HAL_I2C_IsDeviceReady+0x254>)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f994 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	e104      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2C_IsDeviceReady+0x50>
 800314c:	2302      	movs	r3, #2
 800314e:	e0fd      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d007      	beq.n	8003176 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2224      	movs	r2, #36	; 0x24
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a70      	ldr	r2, [pc, #448]	; (8003358 <HAL_I2C_IsDeviceReady+0x258>)
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f952 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d0:	d103      	bne.n	80031da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0b6      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031ee:	f7ff fa11 	bl	8002614 <HAL_GetTick>
 80031f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003222:	e025      	b.n	8003270 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003224:	f7ff f9f6 	bl	8002614 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <HAL_I2C_IsDeviceReady+0x13a>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22a0      	movs	r2, #160	; 0xa0
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2ba0      	cmp	r3, #160	; 0xa0
 800327a:	d005      	beq.n	8003288 <HAL_I2C_IsDeviceReady+0x188>
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_I2C_IsDeviceReady+0x188>
 8003282:	7dbb      	ldrb	r3, [r7, #22]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0cd      	beq.n	8003224 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d129      	bne.n	80032f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2319      	movs	r3, #25
 80032ca:	2201      	movs	r2, #1
 80032cc:	4921      	ldr	r1, [pc, #132]	; (8003354 <HAL_I2C_IsDeviceReady+0x254>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f8c6 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e036      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e02c      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800330a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	490f      	ldr	r1, [pc, #60]	; (8003354 <HAL_I2C_IsDeviceReady+0x254>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8a2 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e012      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	3301      	adds	r3, #1
 800332a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	f4ff af32 	bcc.w	800319a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	00100002 	.word	0x00100002
 8003358:	ffff0000 	.word	0xffff0000

0800335c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d006      	beq.n	8003386 <I2C_MasterRequestWrite+0x2a>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d003      	beq.n	8003386 <I2C_MasterRequestWrite+0x2a>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003384:	d108      	bne.n	8003398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00b      	b.n	80033b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	2b12      	cmp	r3, #18
 800339e:	d107      	bne.n	80033b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f84f 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d103      	bne.n	80033e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e035      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ec:	d108      	bne.n	8003400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e01b      	b.n	8003438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	11db      	asrs	r3, r3, #7
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0306 	and.w	r3, r3, #6
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f063 030f 	orn	r3, r3, #15
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	490e      	ldr	r1, [pc, #56]	; (8003458 <I2C_MasterRequestWrite+0xfc>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f875 	bl	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e010      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <I2C_MasterRequestWrite+0x100>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f865 	bl	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00010008 	.word	0x00010008
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	e025      	b.n	80034be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d021      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7ff f8cb 	bl	8002614 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d116      	bne.n	80034be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e023      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10d      	bne.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	e00c      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d0b6      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351c:	e051      	b.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352c:	d123      	bne.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0204 	orr.w	r2, r3, #4
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e046      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d021      	beq.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7ff f849 	bl	8002614 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e020      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10c      	bne.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	e00b      	b.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d18d      	bne.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003618:	e02d      	b.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f878 	bl	8003710 <I2C_IsAcknowledgeFailed>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e02d      	b.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d021      	beq.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe ffef 	bl	8002614 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d116      	bne.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e007      	b.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d1ca      	bne.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369a:	e02d      	b.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f837 	bl	8003710 <I2C_IsAcknowledgeFailed>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e02d      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d021      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fe ffae 	bl	8002614 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d116      	bne.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e007      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d1ca      	bne.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d11b      	bne.n	8003760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e267      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d075      	beq.n	800387a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378e:	4b88      	ldr	r3, [pc, #544]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b04      	cmp	r3, #4
 8003798:	d00c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379a:	4b85      	ldr	r3, [pc, #532]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d112      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a6:	4b82      	ldr	r3, [pc, #520]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4b7e      	ldr	r3, [pc, #504]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d05b      	beq.n	8003878 <HAL_RCC_OscConfig+0x108>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d157      	bne.n	8003878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e242      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x74>
 80037d6:	4b76      	ldr	r3, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a75      	ldr	r2, [pc, #468]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01d      	b.n	8003820 <HAL_RCC_OscConfig+0xb0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x98>
 80037ee:	4b70      	ldr	r3, [pc, #448]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6f      	ldr	r2, [pc, #444]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b6d      	ldr	r3, [pc, #436]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6c      	ldr	r2, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0xb0>
 8003808:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a68      	ldr	r2, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b66      	ldr	r3, [pc, #408]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a65      	ldr	r2, [pc, #404]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe fef4 	bl	8002614 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe fef0 	bl	8002614 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e207      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0xc0>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fe fee0 	bl	8002614 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe fedc 	bl	8002614 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1f3      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0xe8>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d063      	beq.n	800394e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003886:	4b4a      	ldr	r3, [pc, #296]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389a:	2b08      	cmp	r3, #8
 800389c:	d11c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389e:	4b44      	ldr	r3, [pc, #272]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_RCC_OscConfig+0x152>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e1c7      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4937      	ldr	r1, [pc, #220]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	e03a      	b.n	800394e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e0:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCC_OscConfig+0x244>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fe fe95 	bl	8002614 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe fe91 	bl	8002614 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e1a8      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4925      	ldr	r1, [pc, #148]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	e015      	b.n	800394e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_RCC_OscConfig+0x244>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe fe74 	bl	8002614 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003930:	f7fe fe70 	bl	8002614 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e187      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d036      	beq.n	80039c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_RCC_OscConfig+0x248>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fe fe54 	bl	8002614 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe fe50 	bl	8002614 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e167      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x200>
 800398e:	e01b      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_OscConfig+0x248>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003996:	f7fe fe3d 	bl	8002614 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	e00e      	b.n	80039bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399e:	f7fe fe39 	bl	8002614 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d907      	bls.n	80039bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e150      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
 80039b0:	40023800 	.word	0x40023800
 80039b4:	42470000 	.word	0x42470000
 80039b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ea      	bne.n	800399e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8097 	beq.w	8003b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	4b7d      	ldr	r3, [pc, #500]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a7c      	ldr	r2, [pc, #496]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b7a      	ldr	r3, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b77      	ldr	r3, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a12:	4b74      	ldr	r3, [pc, #464]	; (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a73      	ldr	r2, [pc, #460]	; (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fdf9 	bl	8002614 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fe fdf5 	bl	8002614 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e10c      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2ea>
 8003a4c:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a63      	ldr	r2, [pc, #396]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x324>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x30c>
 8003a62:	4b5f      	ldr	r3, [pc, #380]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a5e      	ldr	r2, [pc, #376]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6e:	4b5c      	ldr	r3, [pc, #368]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a5b      	ldr	r2, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x324>
 8003a7c:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4a57      	ldr	r2, [pc, #348]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6713      	str	r3, [r2, #112]	; 0x70
 8003a88:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a54      	ldr	r2, [pc, #336]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f023 0304 	bic.w	r3, r3, #4
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fdba 	bl	8002614 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fdb6 	bl	8002614 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e0cb      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ee      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x334>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac8:	f7fe fda4 	bl	8002614 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fda0 	bl	8002614 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0b5      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	4a38      	ldr	r2, [pc, #224]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a1 	beq.w	8003c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b0e:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d05c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d141      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b22:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <HAL_RCC_OscConfig+0x478>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe fd74 	bl	8002614 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b30:	f7fe fd70 	bl	8002614 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e087      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	3b01      	subs	r3, #1
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	491b      	ldr	r1, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_RCC_OscConfig+0x478>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fd49 	bl	8002614 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe fd45 	bl	8002614 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e05c      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x416>
 8003ba4:	e054      	b.n	8003c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_OscConfig+0x478>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fd32 	bl	8002614 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fe fd2e 	bl	8002614 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e045      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x444>
 8003bd2:	e03d      	b.n	8003c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e038      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40007000 	.word	0x40007000
 8003be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <HAL_RCC_OscConfig+0x4ec>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d028      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d121      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d11a      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d111      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	3b01      	subs	r3, #1
 8003c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0cc      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d90c      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b65      	ldr	r3, [pc, #404]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b8      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494d      	ldr	r1, [pc, #308]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d044      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d119      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e06f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e067      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4934      	ldr	r1, [pc, #208]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fe fc60 	bl	8002614 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d58:	f7fe fc5c 	bl	8002614 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e04f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 020c 	and.w	r2, r3, #12
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1eb      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d20c      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e032      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4916      	ldr	r1, [pc, #88]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	490a      	ldr	r1, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	5ccb      	ldrb	r3, [r1, r3]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fbc0 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	08006c40 	.word	0x08006c40
 8003e24:	20000028 	.word	0x20000028
 8003e28:	2000002c 	.word	0x2000002c

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e30:	b090      	sub	sp, #64	; 0x40
 8003e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
 8003e38:	2300      	movs	r3, #0
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d00d      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x40>
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	f200 80a1 	bhi.w	8003f98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5e:	e09b      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e64:	e09b      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e66:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e6a:	e098      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	; (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e76:	4b4d      	ldr	r3, [pc, #308]	; (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d028      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	2200      	movs	r2, #0
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e94:	2100      	movs	r1, #0
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e98:	fb03 f201 	mul.w	r2, r3, r1
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a43      	ldr	r2, [pc, #268]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ea6:	fba0 1202 	umull	r1, r2, r0, r2
 8003eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eac:	460a      	mov	r2, r1
 8003eae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb2:	4413      	add	r3, r2
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	2200      	movs	r2, #0
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ec6:	f7fc f9e3 	bl	8000290 <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4613      	mov	r3, r2
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed2:	e053      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	2200      	movs	r2, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	617a      	str	r2, [r7, #20]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ee6:	f04f 0b00 	mov.w	fp, #0
 8003eea:	4652      	mov	r2, sl
 8003eec:	465b      	mov	r3, fp
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0159      	lsls	r1, r3, #5
 8003ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003efc:	0150      	lsls	r0, r2, #5
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	ebb2 080a 	subs.w	r8, r2, sl
 8003f06:	eb63 090b 	sbc.w	r9, r3, fp
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f22:	eb63 0509 	sbc.w	r5, r3, r9
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	00eb      	lsls	r3, r5, #3
 8003f30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f34:	00e2      	lsls	r2, r4, #3
 8003f36:	4614      	mov	r4, r2
 8003f38:	461d      	mov	r5, r3
 8003f3a:	eb14 030a 	adds.w	r3, r4, sl
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	eb45 030b 	adc.w	r3, r5, fp
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f52:	4629      	mov	r1, r5
 8003f54:	028b      	lsls	r3, r1, #10
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	028a      	lsls	r2, r1, #10
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	2200      	movs	r2, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f70:	f7fc f98e 	bl	8000290 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3740      	adds	r7, #64	; 0x40
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	017d7840 	.word	0x017d7840

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000028 	.word	0x20000028

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a9b      	lsrs	r3, r3, #10
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	08006c50 	.word	0x08006c50

08003ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ffc:	f7ff ffdc 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0b5b      	lsrs	r3, r3, #13
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCC_GetPCLK2Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	08006c50 	.word	0x08006c50

08004020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e07b      	b.n	800412a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004042:	d009      	beq.n	8004058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
 800404a:	e005      	b.n	8004058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fe f848 	bl	8002108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	ea42 0103 	orr.w	r1, r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	f003 0104 	and.w	r1, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	f003 0210 	and.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004118:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b088      	sub	sp, #32
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_SPI_Transmit+0x22>
 8004150:	2302      	movs	r3, #2
 8004152:	e126      	b.n	80043a2 <HAL_SPI_Transmit+0x270>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415c:	f7fe fa5a 	bl	8002614 <HAL_GetTick>
 8004160:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004176:	e10b      	b.n	8004390 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Transmit+0x52>
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004188:	e102      	b.n	8004390 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d10f      	bne.n	80041f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d007      	beq.n	8004210 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004218:	d14b      	bne.n	80042b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_SPI_Transmit+0xf6>
 8004222:	8afb      	ldrh	r3, [r7, #22]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d13e      	bne.n	80042a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800424c:	e02b      	b.n	80042a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d112      	bne.n	8004282 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	881a      	ldrh	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004280:	e011      	b.n	80042a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004282:	f7fe f9c7 	bl	8002614 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d803      	bhi.n	800429a <HAL_SPI_Transmit+0x168>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d102      	bne.n	80042a0 <HAL_SPI_Transmit+0x16e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042a4:	e074      	b.n	8004390 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ce      	bne.n	800424e <HAL_SPI_Transmit+0x11c>
 80042b0:	e04c      	b.n	800434c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_SPI_Transmit+0x18e>
 80042ba:	8afb      	ldrh	r3, [r7, #22]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d140      	bne.n	8004342 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	7812      	ldrb	r2, [r2, #0]
 80042cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042e6:	e02c      	b.n	8004342 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d113      	bne.n	800431e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	86da      	strh	r2, [r3, #54]	; 0x36
 800431c:	e011      	b.n	8004342 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800431e:	f7fe f979 	bl	8002614 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d803      	bhi.n	8004336 <HAL_SPI_Transmit+0x204>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d102      	bne.n	800433c <HAL_SPI_Transmit+0x20a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d102      	bne.n	8004342 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004340:	e026      	b.n	8004390 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1cd      	bne.n	80042e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f9d3 	bl	80046fc <SPI_EndRxTxTransaction>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e000      	b.n	8004390 <HAL_SPI_Transmit+0x25e>
  }

error:
 800438e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10e      	bne.n	80043ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
    return;
 80043ea:	e0ce      	b.n	800458a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_SPI_IRQHandler+0x5e>
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
    return;
 8004408:	e0bf      	b.n	800458a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10a      	bne.n	800442a <HAL_SPI_IRQHandler+0x7e>
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80b0 	beq.w	800458a <HAL_SPI_IRQHandler+0x1de>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80aa 	beq.w	800458a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b03      	cmp	r3, #3
 800444a:	d011      	beq.n	8004470 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	f043 0204 	orr.w	r2, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	e00b      	b.n	8004488 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
        return;
 8004486:	e080      	b.n	800458a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d014      	beq.n	80044bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f043 0208 	orr.w	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d04f      	beq.n	8004588 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_SPI_IRQHandler+0x168>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d034      	beq.n	800457e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0203 	bic.w	r2, r2, #3
 8004522:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004530:	4a17      	ldr	r2, [pc, #92]	; (8004590 <HAL_SPI_IRQHandler+0x1e4>)
 8004532:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f9de 	bl	80028fa <HAL_DMA_Abort_IT>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004554:	2b00      	cmp	r3, #0
 8004556:	d016      	beq.n	8004586 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <HAL_SPI_IRQHandler+0x1e4>)
 800455e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe f9c8 	bl	80028fa <HAL_DMA_Abort_IT>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800457c:	e003      	b.n	8004586 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f808 	bl	8004594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004584:	e000      	b.n	8004588 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004586:	bf00      	nop
    return;
 8004588:	bf00      	nop
  }
}
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	080045c5 	.word	0x080045c5

08004594 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b6:	b2db      	uxtb	r3, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff ffd8 	bl	8004594 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045fc:	f7fe f80a 	bl	8002614 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	4413      	add	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800460c:	f7fe f802 	bl	8002614 <HAL_GetTick>
 8004610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	0d1b      	lsrs	r3, r3, #20
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	e054      	b.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d050      	beq.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800462c:	f7fd fff2 	bl	8002614 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	429a      	cmp	r2, r3
 800463a:	d902      	bls.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d111      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d004      	beq.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d107      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d10f      	bne.n	80046aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e017      	b.n	80046ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4013      	ands	r3, r2
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d19b      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000028 	.word	0x20000028

080046fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <SPI_EndRxTxTransaction+0x7c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	; (800477c <SPI_EndRxTxTransaction+0x80>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0d5b      	lsrs	r3, r3, #21
 8004714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d112      	bne.n	800474e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff ff5a 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3b01      	subs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d0f2      	beq.n	800474e <SPI_EndRxTxTransaction+0x52>
 8004768:	e000      	b.n	800476c <SPI_EndRxTxTransaction+0x70>
        break;
 800476a:	bf00      	nop
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000028 	.word	0x20000028
 800477c:	165e9f81 	.word	0x165e9f81

08004780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e03f      	b.n	8004812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd fe5c 	bl	8002464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f929 	bl	8004a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b08a      	sub	sp, #40	; 0x28
 800481e:	af02      	add	r7, sp, #8
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	d17c      	bne.n	8004934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_UART_Transmit+0x2c>
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e075      	b.n	8004936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_UART_Transmit+0x3e>
 8004854:	2302      	movs	r3, #2
 8004856:	e06e      	b.n	8004936 <HAL_UART_Transmit+0x11c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2221      	movs	r2, #33	; 0x21
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486e:	f7fd fed1 	bl	8002614 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004888:	d108      	bne.n	800489c <HAL_UART_Transmit+0x82>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e003      	b.n	80048a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048ac:	e02a      	b.n	8004904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f840 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e036      	b.n	8004936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	3302      	adds	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	e007      	b.n	80048f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1cf      	bne.n	80048ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f810 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e006      	b.n	8004936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b090      	sub	sp, #64	; 0x40
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494e:	e050      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d04c      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <UART_WaitOnFlagUntilTimeout+0x30>
 800495e:	f7fd fe59 	bl	8002614 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800496a:	429a      	cmp	r2, r3
 800496c:	d241      	bcs.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800498e:	637a      	str	r2, [r7, #52]	; 0x34
 8004990:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	613b      	str	r3, [r7, #16]
   return(result);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c2:	623a      	str	r2, [r7, #32]
 80049c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	69f9      	ldr	r1, [r7, #28]
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e00f      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4013      	ands	r3, r2
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d09f      	beq.n	8004950 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3740      	adds	r7, #64	; 0x40
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b0c0      	sub	sp, #256	; 0x100
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	ea40 0301 	orr.w	r3, r0, r1
 8004a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a74:	f021 010c 	bic.w	r1, r1, #12
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a82:	430b      	orrs	r3, r1
 8004a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	6999      	ldr	r1, [r3, #24]
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	ea40 0301 	orr.w	r3, r0, r1
 8004aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b8f      	ldr	r3, [pc, #572]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d005      	beq.n	8004abc <UART_SetConfig+0xa0>
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <UART_SetConfig+0x2d0>)
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d104      	bne.n	8004ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7ff fa9c 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ac4:	e003      	b.n	8004ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ac6:	f7ff fa83 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8004aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	f040 810c 	bne.w	8004cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	1891      	adds	r1, r2, r2
 8004af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004af6:	415b      	adcs	r3, r3
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004afe:	4621      	mov	r1, r4
 8004b00:	eb12 0801 	adds.w	r8, r2, r1
 8004b04:	4629      	mov	r1, r5
 8004b06:	eb43 0901 	adc.w	r9, r3, r1
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b1e:	4690      	mov	r8, r2
 8004b20:	4699      	mov	r9, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	eb18 0303 	adds.w	r3, r8, r3
 8004b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	eb49 0303 	adc.w	r3, r9, r3
 8004b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	18db      	adds	r3, r3, r3
 8004b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b50:	4613      	mov	r3, r2
 8004b52:	eb42 0303 	adc.w	r3, r2, r3
 8004b56:	657b      	str	r3, [r7, #84]	; 0x54
 8004b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b60:	f7fb fb96 	bl	8000290 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	011c      	lsls	r4, r3, #4
 8004b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	1891      	adds	r1, r2, r2
 8004b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b8c:	415b      	adcs	r3, r3
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b94:	4641      	mov	r1, r8
 8004b96:	eb12 0a01 	adds.w	sl, r2, r1
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb4:	4692      	mov	sl, r2
 8004bb6:	469b      	mov	fp, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	eb1a 0303 	adds.w	r3, sl, r3
 8004bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004be0:	460b      	mov	r3, r1
 8004be2:	18db      	adds	r3, r3, r3
 8004be4:	643b      	str	r3, [r7, #64]	; 0x40
 8004be6:	4613      	mov	r3, r2
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	647b      	str	r3, [r7, #68]	; 0x44
 8004bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bf6:	f7fb fb4b 	bl	8000290 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004c02:	fba3 2301 	umull	r2, r3, r3, r1
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2264      	movs	r2, #100	; 0x64
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	1acb      	subs	r3, r1, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c16:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004c18:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c24:	441c      	add	r4, r3
 8004c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	1891      	adds	r1, r2, r2
 8004c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c40:	415b      	adcs	r3, r3
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c48:	4641      	mov	r1, r8
 8004c4a:	1851      	adds	r1, r2, r1
 8004c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c4e:	4649      	mov	r1, r9
 8004c50:	414b      	adcs	r3, r1
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c60:	4659      	mov	r1, fp
 8004c62:	00cb      	lsls	r3, r1, #3
 8004c64:	4651      	mov	r1, sl
 8004c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	00ca      	lsls	r2, r1, #3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	4642      	mov	r2, r8
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	460a      	mov	r2, r1
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cb2:	f7fb faed 	bl	8000290 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	2164      	movs	r1, #100	; 0x64
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	3332      	adds	r3, #50	; 0x32
 8004cce:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f003 0207 	and.w	r2, r3, #7
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4422      	add	r2, r4
 8004ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ce4:	e106      	b.n	8004ef4 <UART_SetConfig+0x4d8>
 8004ce6:	bf00      	nop
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d06:	4642      	mov	r2, r8
 8004d08:	464b      	mov	r3, r9
 8004d0a:	1891      	adds	r1, r2, r2
 8004d0c:	6239      	str	r1, [r7, #32]
 8004d0e:	415b      	adcs	r3, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d16:	4641      	mov	r1, r8
 8004d18:	1854      	adds	r4, r2, r1
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	eb43 0501 	adc.w	r5, r3, r1
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	00eb      	lsls	r3, r5, #3
 8004d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	4614      	mov	r4, r2
 8004d32:	461d      	mov	r5, r3
 8004d34:	4643      	mov	r3, r8
 8004d36:	18e3      	adds	r3, r4, r3
 8004d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	eb45 0303 	adc.w	r3, r5, r3
 8004d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d62:	4629      	mov	r1, r5
 8004d64:	008b      	lsls	r3, r1, #2
 8004d66:	4621      	mov	r1, r4
 8004d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	008a      	lsls	r2, r1, #2
 8004d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d74:	f7fb fa8c 	bl	8000290 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4b60      	ldr	r3, [pc, #384]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	011c      	lsls	r4, r3, #4
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	61b9      	str	r1, [r7, #24]
 8004da0:	415b      	adcs	r3, r3
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da8:	4641      	mov	r1, r8
 8004daa:	1851      	adds	r1, r2, r1
 8004dac:	6139      	str	r1, [r7, #16]
 8004dae:	4649      	mov	r1, r9
 8004db0:	414b      	adcs	r3, r1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	00cb      	lsls	r3, r1, #3
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dca:	4651      	mov	r1, sl
 8004dcc:	00ca      	lsls	r2, r1, #3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ddc:	464b      	mov	r3, r9
 8004dde:	460a      	mov	r2, r1
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e00:	4649      	mov	r1, r9
 8004e02:	008b      	lsls	r3, r1, #2
 8004e04:	4641      	mov	r1, r8
 8004e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	008a      	lsls	r2, r1, #2
 8004e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e12:	f7fb fa3d 	bl	8000290 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2264      	movs	r2, #100	; 0x64
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	1acb      	subs	r3, r1, r3
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	3332      	adds	r3, #50	; 0x32
 8004e30:	4a33      	ldr	r2, [pc, #204]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3c:	441c      	add	r4, r3
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	673b      	str	r3, [r7, #112]	; 0x70
 8004e46:	677a      	str	r2, [r7, #116]	; 0x74
 8004e48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	1891      	adds	r1, r2, r2
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	415b      	adcs	r3, r3
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	1851      	adds	r1, r2, r1
 8004e60:	6039      	str	r1, [r7, #0]
 8004e62:	4649      	mov	r1, r9
 8004e64:	414b      	adcs	r3, r1
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e74:	4659      	mov	r1, fp
 8004e76:	00cb      	lsls	r3, r1, #3
 8004e78:	4651      	mov	r1, sl
 8004e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7e:	4651      	mov	r1, sl
 8004e80:	00ca      	lsls	r2, r1, #3
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	4642      	mov	r2, r8
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8e:	464b      	mov	r3, r9
 8004e90:	460a      	mov	r2, r1
 8004e92:	eb42 0303 	adc.w	r3, r2, r3
 8004e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea2:	667a      	str	r2, [r7, #100]	; 0x64
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	008b      	lsls	r3, r1, #2
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eba:	4641      	mov	r1, r8
 8004ebc:	008a      	lsls	r2, r1, #2
 8004ebe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ec2:	f7fb f9e5 	bl	8000290 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2164      	movs	r1, #100	; 0x64
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	3332      	adds	r3, #50	; 0x32
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 020f 	and.w	r2, r3, #15
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4422      	add	r2, r4
 8004ef2:	609a      	str	r2, [r3, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004efa:	46bd      	mov	sp, r7
 8004efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f00:	51eb851f 	.word	0x51eb851f

08004f04 <__assert_func>:
 8004f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f06:	4614      	mov	r4, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <__assert_func+0x2c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4605      	mov	r5, r0
 8004f10:	68d8      	ldr	r0, [r3, #12]
 8004f12:	b14c      	cbz	r4, 8004f28 <__assert_func+0x24>
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <__assert_func+0x30>)
 8004f16:	9100      	str	r1, [sp, #0]
 8004f18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f1c:	4906      	ldr	r1, [pc, #24]	; (8004f38 <__assert_func+0x34>)
 8004f1e:	462b      	mov	r3, r5
 8004f20:	f000 f8a0 	bl	8005064 <fiprintf>
 8004f24:	f000 f99e 	bl	8005264 <abort>
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <__assert_func+0x38>)
 8004f2a:	461c      	mov	r4, r3
 8004f2c:	e7f3      	b.n	8004f16 <__assert_func+0x12>
 8004f2e:	bf00      	nop
 8004f30:	2000008c 	.word	0x2000008c
 8004f34:	08006c58 	.word	0x08006c58
 8004f38:	08006c65 	.word	0x08006c65
 8004f3c:	08006c93 	.word	0x08006c93

08004f40 <std>:
 8004f40:	2300      	movs	r3, #0
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	e9c0 3300 	strd	r3, r3, [r0]
 8004f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f4e:	6083      	str	r3, [r0, #8]
 8004f50:	8181      	strh	r1, [r0, #12]
 8004f52:	6643      	str	r3, [r0, #100]	; 0x64
 8004f54:	81c2      	strh	r2, [r0, #14]
 8004f56:	6183      	str	r3, [r0, #24]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	305c      	adds	r0, #92	; 0x5c
 8004f5e:	f000 f906 	bl	800516e <memset>
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <std+0x38>)
 8004f64:	6263      	str	r3, [r4, #36]	; 0x24
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <std+0x3c>)
 8004f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <std+0x40>)
 8004f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <std+0x44>)
 8004f70:	6224      	str	r4, [r4, #32]
 8004f72:	6323      	str	r3, [r4, #48]	; 0x30
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	080050e9 	.word	0x080050e9
 8004f7c:	0800510b 	.word	0x0800510b
 8004f80:	08005143 	.word	0x08005143
 8004f84:	08005167 	.word	0x08005167

08004f88 <stdio_exit_handler>:
 8004f88:	4a02      	ldr	r2, [pc, #8]	; (8004f94 <stdio_exit_handler+0xc>)
 8004f8a:	4903      	ldr	r1, [pc, #12]	; (8004f98 <stdio_exit_handler+0x10>)
 8004f8c:	4803      	ldr	r0, [pc, #12]	; (8004f9c <stdio_exit_handler+0x14>)
 8004f8e:	f000 b87b 	b.w	8005088 <_fwalk_sglue>
 8004f92:	bf00      	nop
 8004f94:	20000034 	.word	0x20000034
 8004f98:	08005b19 	.word	0x08005b19
 8004f9c:	20000040 	.word	0x20000040

08004fa0 <cleanup_stdio>:
 8004fa0:	6841      	ldr	r1, [r0, #4]
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <cleanup_stdio+0x34>)
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	d001      	beq.n	8004fb0 <cleanup_stdio+0x10>
 8004fac:	f000 fdb4 	bl	8005b18 <_fflush_r>
 8004fb0:	68a1      	ldr	r1, [r4, #8]
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <cleanup_stdio+0x38>)
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	d002      	beq.n	8004fbe <cleanup_stdio+0x1e>
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f000 fdad 	bl	8005b18 <_fflush_r>
 8004fbe:	68e1      	ldr	r1, [r4, #12]
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <cleanup_stdio+0x3c>)
 8004fc2:	4299      	cmp	r1, r3
 8004fc4:	d004      	beq.n	8004fd0 <cleanup_stdio+0x30>
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fcc:	f000 bda4 	b.w	8005b18 <_fflush_r>
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000066c 	.word	0x2000066c
 8004fd8:	200006d4 	.word	0x200006d4
 8004fdc:	2000073c 	.word	0x2000073c

08004fe0 <global_stdio_init.part.0>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <global_stdio_init.part.0+0x30>)
 8004fe4:	4c0b      	ldr	r4, [pc, #44]	; (8005014 <global_stdio_init.part.0+0x34>)
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <global_stdio_init.part.0+0x38>)
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	4620      	mov	r0, r4
 8004fec:	2200      	movs	r2, #0
 8004fee:	2104      	movs	r1, #4
 8004ff0:	f7ff ffa6 	bl	8004f40 <std>
 8004ff4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2109      	movs	r1, #9
 8004ffc:	f7ff ffa0 	bl	8004f40 <std>
 8005000:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005004:	2202      	movs	r2, #2
 8005006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500a:	2112      	movs	r1, #18
 800500c:	f7ff bf98 	b.w	8004f40 <std>
 8005010:	200007a4 	.word	0x200007a4
 8005014:	2000066c 	.word	0x2000066c
 8005018:	08004f89 	.word	0x08004f89

0800501c <__sfp_lock_acquire>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__sfp_lock_acquire+0x8>)
 800501e:	f000 b91f 	b.w	8005260 <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	200007ad 	.word	0x200007ad

08005028 <__sfp_lock_release>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__sfp_lock_release+0x8>)
 800502a:	f000 b91a 	b.w	8005262 <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	200007ad 	.word	0x200007ad

08005034 <__sinit>:
 8005034:	b510      	push	{r4, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	f7ff fff0 	bl	800501c <__sfp_lock_acquire>
 800503c:	6a23      	ldr	r3, [r4, #32]
 800503e:	b11b      	cbz	r3, 8005048 <__sinit+0x14>
 8005040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005044:	f7ff bff0 	b.w	8005028 <__sfp_lock_release>
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <__sinit+0x28>)
 800504a:	6223      	str	r3, [r4, #32]
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <__sinit+0x2c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f5      	bne.n	8005040 <__sinit+0xc>
 8005054:	f7ff ffc4 	bl	8004fe0 <global_stdio_init.part.0>
 8005058:	e7f2      	b.n	8005040 <__sinit+0xc>
 800505a:	bf00      	nop
 800505c:	08004fa1 	.word	0x08004fa1
 8005060:	200007a4 	.word	0x200007a4

08005064 <fiprintf>:
 8005064:	b40e      	push	{r1, r2, r3}
 8005066:	b503      	push	{r0, r1, lr}
 8005068:	4601      	mov	r1, r0
 800506a:	ab03      	add	r3, sp, #12
 800506c:	4805      	ldr	r0, [pc, #20]	; (8005084 <fiprintf+0x20>)
 800506e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005072:	6800      	ldr	r0, [r0, #0]
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	f000 fa1f 	bl	80054b8 <_vfiprintf_r>
 800507a:	b002      	add	sp, #8
 800507c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005080:	b003      	add	sp, #12
 8005082:	4770      	bx	lr
 8005084:	2000008c 	.word	0x2000008c

08005088 <_fwalk_sglue>:
 8005088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800508c:	4607      	mov	r7, r0
 800508e:	4688      	mov	r8, r1
 8005090:	4614      	mov	r4, r2
 8005092:	2600      	movs	r6, #0
 8005094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005098:	f1b9 0901 	subs.w	r9, r9, #1
 800509c:	d505      	bpl.n	80050aa <_fwalk_sglue+0x22>
 800509e:	6824      	ldr	r4, [r4, #0]
 80050a0:	2c00      	cmp	r4, #0
 80050a2:	d1f7      	bne.n	8005094 <_fwalk_sglue+0xc>
 80050a4:	4630      	mov	r0, r6
 80050a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050aa:	89ab      	ldrh	r3, [r5, #12]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d907      	bls.n	80050c0 <_fwalk_sglue+0x38>
 80050b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050b4:	3301      	adds	r3, #1
 80050b6:	d003      	beq.n	80050c0 <_fwalk_sglue+0x38>
 80050b8:	4629      	mov	r1, r5
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c0      	blx	r8
 80050be:	4306      	orrs	r6, r0
 80050c0:	3568      	adds	r5, #104	; 0x68
 80050c2:	e7e9      	b.n	8005098 <_fwalk_sglue+0x10>

080050c4 <iprintf>:
 80050c4:	b40f      	push	{r0, r1, r2, r3}
 80050c6:	b507      	push	{r0, r1, r2, lr}
 80050c8:	4906      	ldr	r1, [pc, #24]	; (80050e4 <iprintf+0x20>)
 80050ca:	ab04      	add	r3, sp, #16
 80050cc:	6808      	ldr	r0, [r1, #0]
 80050ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80050d2:	6881      	ldr	r1, [r0, #8]
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	f000 f9ef 	bl	80054b8 <_vfiprintf_r>
 80050da:	b003      	add	sp, #12
 80050dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e0:	b004      	add	sp, #16
 80050e2:	4770      	bx	lr
 80050e4:	2000008c 	.word	0x2000008c

080050e8 <__sread>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f0:	f000 f868 	bl	80051c4 <_read_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	bfab      	itete	ge
 80050f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050fa:	89a3      	ldrhlt	r3, [r4, #12]
 80050fc:	181b      	addge	r3, r3, r0
 80050fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005102:	bfac      	ite	ge
 8005104:	6563      	strge	r3, [r4, #84]	; 0x54
 8005106:	81a3      	strhlt	r3, [r4, #12]
 8005108:	bd10      	pop	{r4, pc}

0800510a <__swrite>:
 800510a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	461f      	mov	r7, r3
 8005110:	898b      	ldrh	r3, [r1, #12]
 8005112:	05db      	lsls	r3, r3, #23
 8005114:	4605      	mov	r5, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4616      	mov	r6, r2
 800511a:	d505      	bpl.n	8005128 <__swrite+0x1e>
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	2302      	movs	r3, #2
 8005122:	2200      	movs	r2, #0
 8005124:	f000 f83c 	bl	80051a0 <_lseek_r>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800512e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	4632      	mov	r2, r6
 8005136:	463b      	mov	r3, r7
 8005138:	4628      	mov	r0, r5
 800513a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800513e:	f000 b853 	b.w	80051e8 <_write_r>

08005142 <__sseek>:
 8005142:	b510      	push	{r4, lr}
 8005144:	460c      	mov	r4, r1
 8005146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514a:	f000 f829 	bl	80051a0 <_lseek_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	bf15      	itete	ne
 8005154:	6560      	strne	r0, [r4, #84]	; 0x54
 8005156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800515a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800515e:	81a3      	strheq	r3, [r4, #12]
 8005160:	bf18      	it	ne
 8005162:	81a3      	strhne	r3, [r4, #12]
 8005164:	bd10      	pop	{r4, pc}

08005166 <__sclose>:
 8005166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516a:	f000 b809 	b.w	8005180 <_close_r>

0800516e <memset>:
 800516e:	4402      	add	r2, r0
 8005170:	4603      	mov	r3, r0
 8005172:	4293      	cmp	r3, r2
 8005174:	d100      	bne.n	8005178 <memset+0xa>
 8005176:	4770      	bx	lr
 8005178:	f803 1b01 	strb.w	r1, [r3], #1
 800517c:	e7f9      	b.n	8005172 <memset+0x4>
	...

08005180 <_close_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d06      	ldr	r5, [pc, #24]	; (800519c <_close_r+0x1c>)
 8005184:	2300      	movs	r3, #0
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	f7fd f8c3 	bl	8002316 <_close>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_close_r+0x1a>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_close_r+0x1a>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	200007a8 	.word	0x200007a8

080051a0 <_lseek_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d07      	ldr	r5, [pc, #28]	; (80051c0 <_lseek_r+0x20>)
 80051a4:	4604      	mov	r4, r0
 80051a6:	4608      	mov	r0, r1
 80051a8:	4611      	mov	r1, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	602a      	str	r2, [r5, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f7fd f8d8 	bl	8002364 <_lseek>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_lseek_r+0x1e>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_lseek_r+0x1e>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	200007a8 	.word	0x200007a8

080051c4 <_read_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	; (80051e4 <_read_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fd f866 	bl	80022a4 <_read>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_read_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_read_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200007a8 	.word	0x200007a8

080051e8 <_write_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	; (8005208 <_write_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fd f871 	bl	80022de <_write>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_write_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_write_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200007a8 	.word	0x200007a8

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000008c 	.word	0x2000008c

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4d0d      	ldr	r5, [pc, #52]	; (8005250 <__libc_init_array+0x38>)
 800521c:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 800521e:	1b64      	subs	r4, r4, r5
 8005220:	10a4      	asrs	r4, r4, #2
 8005222:	2600      	movs	r6, #0
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	4d0b      	ldr	r5, [pc, #44]	; (8005258 <__libc_init_array+0x40>)
 800522a:	4c0c      	ldr	r4, [pc, #48]	; (800525c <__libc_init_array+0x44>)
 800522c:	f000 fe0a 	bl	8005e44 <_init>
 8005230:	1b64      	subs	r4, r4, r5
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	2600      	movs	r6, #0
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f855 3b04 	ldr.w	r3, [r5], #4
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	08006cd0 	.word	0x08006cd0
 8005254:	08006cd0 	.word	0x08006cd0
 8005258:	08006cd0 	.word	0x08006cd0
 800525c:	08006cd4 	.word	0x08006cd4

08005260 <__retarget_lock_acquire_recursive>:
 8005260:	4770      	bx	lr

08005262 <__retarget_lock_release_recursive>:
 8005262:	4770      	bx	lr

08005264 <abort>:
 8005264:	b508      	push	{r3, lr}
 8005266:	2006      	movs	r0, #6
 8005268:	f000 fd3c 	bl	8005ce4 <raise>
 800526c:	2001      	movs	r0, #1
 800526e:	f7fd f80f 	bl	8002290 <_exit>
	...

08005274 <_free_r>:
 8005274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005276:	2900      	cmp	r1, #0
 8005278:	d044      	beq.n	8005304 <_free_r+0x90>
 800527a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800527e:	9001      	str	r0, [sp, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f1a1 0404 	sub.w	r4, r1, #4
 8005286:	bfb8      	it	lt
 8005288:	18e4      	addlt	r4, r4, r3
 800528a:	f000 f8df 	bl	800544c <__malloc_lock>
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <_free_r+0x94>)
 8005290:	9801      	ldr	r0, [sp, #4]
 8005292:	6813      	ldr	r3, [r2, #0]
 8005294:	b933      	cbnz	r3, 80052a4 <_free_r+0x30>
 8005296:	6063      	str	r3, [r4, #4]
 8005298:	6014      	str	r4, [r2, #0]
 800529a:	b003      	add	sp, #12
 800529c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052a0:	f000 b8da 	b.w	8005458 <__malloc_unlock>
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d908      	bls.n	80052ba <_free_r+0x46>
 80052a8:	6825      	ldr	r5, [r4, #0]
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	428b      	cmp	r3, r1
 80052ae:	bf01      	itttt	eq
 80052b0:	6819      	ldreq	r1, [r3, #0]
 80052b2:	685b      	ldreq	r3, [r3, #4]
 80052b4:	1949      	addeq	r1, r1, r5
 80052b6:	6021      	streq	r1, [r4, #0]
 80052b8:	e7ed      	b.n	8005296 <_free_r+0x22>
 80052ba:	461a      	mov	r2, r3
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b10b      	cbz	r3, 80052c4 <_free_r+0x50>
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d9fa      	bls.n	80052ba <_free_r+0x46>
 80052c4:	6811      	ldr	r1, [r2, #0]
 80052c6:	1855      	adds	r5, r2, r1
 80052c8:	42a5      	cmp	r5, r4
 80052ca:	d10b      	bne.n	80052e4 <_free_r+0x70>
 80052cc:	6824      	ldr	r4, [r4, #0]
 80052ce:	4421      	add	r1, r4
 80052d0:	1854      	adds	r4, r2, r1
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	d1e0      	bne.n	800529a <_free_r+0x26>
 80052d8:	681c      	ldr	r4, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	6053      	str	r3, [r2, #4]
 80052de:	440c      	add	r4, r1
 80052e0:	6014      	str	r4, [r2, #0]
 80052e2:	e7da      	b.n	800529a <_free_r+0x26>
 80052e4:	d902      	bls.n	80052ec <_free_r+0x78>
 80052e6:	230c      	movs	r3, #12
 80052e8:	6003      	str	r3, [r0, #0]
 80052ea:	e7d6      	b.n	800529a <_free_r+0x26>
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	428b      	cmp	r3, r1
 80052f2:	bf04      	itt	eq
 80052f4:	6819      	ldreq	r1, [r3, #0]
 80052f6:	685b      	ldreq	r3, [r3, #4]
 80052f8:	6063      	str	r3, [r4, #4]
 80052fa:	bf04      	itt	eq
 80052fc:	1949      	addeq	r1, r1, r5
 80052fe:	6021      	streq	r1, [r4, #0]
 8005300:	6054      	str	r4, [r2, #4]
 8005302:	e7ca      	b.n	800529a <_free_r+0x26>
 8005304:	b003      	add	sp, #12
 8005306:	bd30      	pop	{r4, r5, pc}
 8005308:	200007b0 	.word	0x200007b0

0800530c <sbrk_aligned>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4e0e      	ldr	r6, [pc, #56]	; (8005348 <sbrk_aligned+0x3c>)
 8005310:	460c      	mov	r4, r1
 8005312:	6831      	ldr	r1, [r6, #0]
 8005314:	4605      	mov	r5, r0
 8005316:	b911      	cbnz	r1, 800531e <sbrk_aligned+0x12>
 8005318:	f000 fd00 	bl	8005d1c <_sbrk_r>
 800531c:	6030      	str	r0, [r6, #0]
 800531e:	4621      	mov	r1, r4
 8005320:	4628      	mov	r0, r5
 8005322:	f000 fcfb 	bl	8005d1c <_sbrk_r>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	d00a      	beq.n	8005340 <sbrk_aligned+0x34>
 800532a:	1cc4      	adds	r4, r0, #3
 800532c:	f024 0403 	bic.w	r4, r4, #3
 8005330:	42a0      	cmp	r0, r4
 8005332:	d007      	beq.n	8005344 <sbrk_aligned+0x38>
 8005334:	1a21      	subs	r1, r4, r0
 8005336:	4628      	mov	r0, r5
 8005338:	f000 fcf0 	bl	8005d1c <_sbrk_r>
 800533c:	3001      	adds	r0, #1
 800533e:	d101      	bne.n	8005344 <sbrk_aligned+0x38>
 8005340:	f04f 34ff 	mov.w	r4, #4294967295
 8005344:	4620      	mov	r0, r4
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	200007b4 	.word	0x200007b4

0800534c <_malloc_r>:
 800534c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005350:	1ccd      	adds	r5, r1, #3
 8005352:	f025 0503 	bic.w	r5, r5, #3
 8005356:	3508      	adds	r5, #8
 8005358:	2d0c      	cmp	r5, #12
 800535a:	bf38      	it	cc
 800535c:	250c      	movcc	r5, #12
 800535e:	2d00      	cmp	r5, #0
 8005360:	4607      	mov	r7, r0
 8005362:	db01      	blt.n	8005368 <_malloc_r+0x1c>
 8005364:	42a9      	cmp	r1, r5
 8005366:	d905      	bls.n	8005374 <_malloc_r+0x28>
 8005368:	230c      	movs	r3, #12
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	2600      	movs	r6, #0
 800536e:	4630      	mov	r0, r6
 8005370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005374:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005448 <_malloc_r+0xfc>
 8005378:	f000 f868 	bl	800544c <__malloc_lock>
 800537c:	f8d8 3000 	ldr.w	r3, [r8]
 8005380:	461c      	mov	r4, r3
 8005382:	bb5c      	cbnz	r4, 80053dc <_malloc_r+0x90>
 8005384:	4629      	mov	r1, r5
 8005386:	4638      	mov	r0, r7
 8005388:	f7ff ffc0 	bl	800530c <sbrk_aligned>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	4604      	mov	r4, r0
 8005390:	d155      	bne.n	800543e <_malloc_r+0xf2>
 8005392:	f8d8 4000 	ldr.w	r4, [r8]
 8005396:	4626      	mov	r6, r4
 8005398:	2e00      	cmp	r6, #0
 800539a:	d145      	bne.n	8005428 <_malloc_r+0xdc>
 800539c:	2c00      	cmp	r4, #0
 800539e:	d048      	beq.n	8005432 <_malloc_r+0xe6>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	4631      	mov	r1, r6
 80053a4:	4638      	mov	r0, r7
 80053a6:	eb04 0903 	add.w	r9, r4, r3
 80053aa:	f000 fcb7 	bl	8005d1c <_sbrk_r>
 80053ae:	4581      	cmp	r9, r0
 80053b0:	d13f      	bne.n	8005432 <_malloc_r+0xe6>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	1a6d      	subs	r5, r5, r1
 80053b6:	4629      	mov	r1, r5
 80053b8:	4638      	mov	r0, r7
 80053ba:	f7ff ffa7 	bl	800530c <sbrk_aligned>
 80053be:	3001      	adds	r0, #1
 80053c0:	d037      	beq.n	8005432 <_malloc_r+0xe6>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	442b      	add	r3, r5
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	f8d8 3000 	ldr.w	r3, [r8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d038      	beq.n	8005442 <_malloc_r+0xf6>
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	42a2      	cmp	r2, r4
 80053d4:	d12b      	bne.n	800542e <_malloc_r+0xe2>
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
 80053da:	e00f      	b.n	80053fc <_malloc_r+0xb0>
 80053dc:	6822      	ldr	r2, [r4, #0]
 80053de:	1b52      	subs	r2, r2, r5
 80053e0:	d41f      	bmi.n	8005422 <_malloc_r+0xd6>
 80053e2:	2a0b      	cmp	r2, #11
 80053e4:	d917      	bls.n	8005416 <_malloc_r+0xca>
 80053e6:	1961      	adds	r1, r4, r5
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	6025      	str	r5, [r4, #0]
 80053ec:	bf18      	it	ne
 80053ee:	6059      	strne	r1, [r3, #4]
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	bf08      	it	eq
 80053f4:	f8c8 1000 	streq.w	r1, [r8]
 80053f8:	5162      	str	r2, [r4, r5]
 80053fa:	604b      	str	r3, [r1, #4]
 80053fc:	4638      	mov	r0, r7
 80053fe:	f104 060b 	add.w	r6, r4, #11
 8005402:	f000 f829 	bl	8005458 <__malloc_unlock>
 8005406:	f026 0607 	bic.w	r6, r6, #7
 800540a:	1d23      	adds	r3, r4, #4
 800540c:	1af2      	subs	r2, r6, r3
 800540e:	d0ae      	beq.n	800536e <_malloc_r+0x22>
 8005410:	1b9b      	subs	r3, r3, r6
 8005412:	50a3      	str	r3, [r4, r2]
 8005414:	e7ab      	b.n	800536e <_malloc_r+0x22>
 8005416:	42a3      	cmp	r3, r4
 8005418:	6862      	ldr	r2, [r4, #4]
 800541a:	d1dd      	bne.n	80053d8 <_malloc_r+0x8c>
 800541c:	f8c8 2000 	str.w	r2, [r8]
 8005420:	e7ec      	b.n	80053fc <_malloc_r+0xb0>
 8005422:	4623      	mov	r3, r4
 8005424:	6864      	ldr	r4, [r4, #4]
 8005426:	e7ac      	b.n	8005382 <_malloc_r+0x36>
 8005428:	4634      	mov	r4, r6
 800542a:	6876      	ldr	r6, [r6, #4]
 800542c:	e7b4      	b.n	8005398 <_malloc_r+0x4c>
 800542e:	4613      	mov	r3, r2
 8005430:	e7cc      	b.n	80053cc <_malloc_r+0x80>
 8005432:	230c      	movs	r3, #12
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	4638      	mov	r0, r7
 8005438:	f000 f80e 	bl	8005458 <__malloc_unlock>
 800543c:	e797      	b.n	800536e <_malloc_r+0x22>
 800543e:	6025      	str	r5, [r4, #0]
 8005440:	e7dc      	b.n	80053fc <_malloc_r+0xb0>
 8005442:	605b      	str	r3, [r3, #4]
 8005444:	deff      	udf	#255	; 0xff
 8005446:	bf00      	nop
 8005448:	200007b0 	.word	0x200007b0

0800544c <__malloc_lock>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__malloc_lock+0x8>)
 800544e:	f7ff bf07 	b.w	8005260 <__retarget_lock_acquire_recursive>
 8005452:	bf00      	nop
 8005454:	200007ac 	.word	0x200007ac

08005458 <__malloc_unlock>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__malloc_unlock+0x8>)
 800545a:	f7ff bf02 	b.w	8005262 <__retarget_lock_release_recursive>
 800545e:	bf00      	nop
 8005460:	200007ac 	.word	0x200007ac

08005464 <__sfputc_r>:
 8005464:	6893      	ldr	r3, [r2, #8]
 8005466:	3b01      	subs	r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	b410      	push	{r4}
 800546c:	6093      	str	r3, [r2, #8]
 800546e:	da08      	bge.n	8005482 <__sfputc_r+0x1e>
 8005470:	6994      	ldr	r4, [r2, #24]
 8005472:	42a3      	cmp	r3, r4
 8005474:	db01      	blt.n	800547a <__sfputc_r+0x16>
 8005476:	290a      	cmp	r1, #10
 8005478:	d103      	bne.n	8005482 <__sfputc_r+0x1e>
 800547a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547e:	f000 bb73 	b.w	8005b68 <__swbuf_r>
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	1c58      	adds	r0, r3, #1
 8005486:	6010      	str	r0, [r2, #0]
 8005488:	7019      	strb	r1, [r3, #0]
 800548a:	4608      	mov	r0, r1
 800548c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005490:	4770      	bx	lr

08005492 <__sfputs_r>:
 8005492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005494:	4606      	mov	r6, r0
 8005496:	460f      	mov	r7, r1
 8005498:	4614      	mov	r4, r2
 800549a:	18d5      	adds	r5, r2, r3
 800549c:	42ac      	cmp	r4, r5
 800549e:	d101      	bne.n	80054a4 <__sfputs_r+0x12>
 80054a0:	2000      	movs	r0, #0
 80054a2:	e007      	b.n	80054b4 <__sfputs_r+0x22>
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	463a      	mov	r2, r7
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7ff ffda 	bl	8005464 <__sfputc_r>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d1f3      	bne.n	800549c <__sfputs_r+0xa>
 80054b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054b8 <_vfiprintf_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	460d      	mov	r5, r1
 80054be:	b09d      	sub	sp, #116	; 0x74
 80054c0:	4614      	mov	r4, r2
 80054c2:	4698      	mov	r8, r3
 80054c4:	4606      	mov	r6, r0
 80054c6:	b118      	cbz	r0, 80054d0 <_vfiprintf_r+0x18>
 80054c8:	6a03      	ldr	r3, [r0, #32]
 80054ca:	b90b      	cbnz	r3, 80054d0 <_vfiprintf_r+0x18>
 80054cc:	f7ff fdb2 	bl	8005034 <__sinit>
 80054d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d2:	07d9      	lsls	r1, r3, #31
 80054d4:	d405      	bmi.n	80054e2 <_vfiprintf_r+0x2a>
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	059a      	lsls	r2, r3, #22
 80054da:	d402      	bmi.n	80054e2 <_vfiprintf_r+0x2a>
 80054dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054de:	f7ff febf 	bl	8005260 <__retarget_lock_acquire_recursive>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	d501      	bpl.n	80054ec <_vfiprintf_r+0x34>
 80054e8:	692b      	ldr	r3, [r5, #16]
 80054ea:	b99b      	cbnz	r3, 8005514 <_vfiprintf_r+0x5c>
 80054ec:	4629      	mov	r1, r5
 80054ee:	4630      	mov	r0, r6
 80054f0:	f000 fb78 	bl	8005be4 <__swsetup_r>
 80054f4:	b170      	cbz	r0, 8005514 <_vfiprintf_r+0x5c>
 80054f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f8:	07dc      	lsls	r4, r3, #31
 80054fa:	d504      	bpl.n	8005506 <_vfiprintf_r+0x4e>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	b01d      	add	sp, #116	; 0x74
 8005502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	0598      	lsls	r0, r3, #22
 800550a:	d4f7      	bmi.n	80054fc <_vfiprintf_r+0x44>
 800550c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550e:	f7ff fea8 	bl	8005262 <__retarget_lock_release_recursive>
 8005512:	e7f3      	b.n	80054fc <_vfiprintf_r+0x44>
 8005514:	2300      	movs	r3, #0
 8005516:	9309      	str	r3, [sp, #36]	; 0x24
 8005518:	2320      	movs	r3, #32
 800551a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800551e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005522:	2330      	movs	r3, #48	; 0x30
 8005524:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80056d8 <_vfiprintf_r+0x220>
 8005528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800552c:	f04f 0901 	mov.w	r9, #1
 8005530:	4623      	mov	r3, r4
 8005532:	469a      	mov	sl, r3
 8005534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005538:	b10a      	cbz	r2, 800553e <_vfiprintf_r+0x86>
 800553a:	2a25      	cmp	r2, #37	; 0x25
 800553c:	d1f9      	bne.n	8005532 <_vfiprintf_r+0x7a>
 800553e:	ebba 0b04 	subs.w	fp, sl, r4
 8005542:	d00b      	beq.n	800555c <_vfiprintf_r+0xa4>
 8005544:	465b      	mov	r3, fp
 8005546:	4622      	mov	r2, r4
 8005548:	4629      	mov	r1, r5
 800554a:	4630      	mov	r0, r6
 800554c:	f7ff ffa1 	bl	8005492 <__sfputs_r>
 8005550:	3001      	adds	r0, #1
 8005552:	f000 80a9 	beq.w	80056a8 <_vfiprintf_r+0x1f0>
 8005556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005558:	445a      	add	r2, fp
 800555a:	9209      	str	r2, [sp, #36]	; 0x24
 800555c:	f89a 3000 	ldrb.w	r3, [sl]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80a1 	beq.w	80056a8 <_vfiprintf_r+0x1f0>
 8005566:	2300      	movs	r3, #0
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005570:	f10a 0a01 	add.w	sl, sl, #1
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	9307      	str	r3, [sp, #28]
 8005578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800557c:	931a      	str	r3, [sp, #104]	; 0x68
 800557e:	4654      	mov	r4, sl
 8005580:	2205      	movs	r2, #5
 8005582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005586:	4854      	ldr	r0, [pc, #336]	; (80056d8 <_vfiprintf_r+0x220>)
 8005588:	f7fa fe32 	bl	80001f0 <memchr>
 800558c:	9a04      	ldr	r2, [sp, #16]
 800558e:	b9d8      	cbnz	r0, 80055c8 <_vfiprintf_r+0x110>
 8005590:	06d1      	lsls	r1, r2, #27
 8005592:	bf44      	itt	mi
 8005594:	2320      	movmi	r3, #32
 8005596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800559a:	0713      	lsls	r3, r2, #28
 800559c:	bf44      	itt	mi
 800559e:	232b      	movmi	r3, #43	; 0x2b
 80055a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a4:	f89a 3000 	ldrb.w	r3, [sl]
 80055a8:	2b2a      	cmp	r3, #42	; 0x2a
 80055aa:	d015      	beq.n	80055d8 <_vfiprintf_r+0x120>
 80055ac:	9a07      	ldr	r2, [sp, #28]
 80055ae:	4654      	mov	r4, sl
 80055b0:	2000      	movs	r0, #0
 80055b2:	f04f 0c0a 	mov.w	ip, #10
 80055b6:	4621      	mov	r1, r4
 80055b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055bc:	3b30      	subs	r3, #48	; 0x30
 80055be:	2b09      	cmp	r3, #9
 80055c0:	d94d      	bls.n	800565e <_vfiprintf_r+0x1a6>
 80055c2:	b1b0      	cbz	r0, 80055f2 <_vfiprintf_r+0x13a>
 80055c4:	9207      	str	r2, [sp, #28]
 80055c6:	e014      	b.n	80055f2 <_vfiprintf_r+0x13a>
 80055c8:	eba0 0308 	sub.w	r3, r0, r8
 80055cc:	fa09 f303 	lsl.w	r3, r9, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	9304      	str	r3, [sp, #16]
 80055d4:	46a2      	mov	sl, r4
 80055d6:	e7d2      	b.n	800557e <_vfiprintf_r+0xc6>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	1d19      	adds	r1, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	9103      	str	r1, [sp, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bfbb      	ittet	lt
 80055e4:	425b      	neglt	r3, r3
 80055e6:	f042 0202 	orrlt.w	r2, r2, #2
 80055ea:	9307      	strge	r3, [sp, #28]
 80055ec:	9307      	strlt	r3, [sp, #28]
 80055ee:	bfb8      	it	lt
 80055f0:	9204      	strlt	r2, [sp, #16]
 80055f2:	7823      	ldrb	r3, [r4, #0]
 80055f4:	2b2e      	cmp	r3, #46	; 0x2e
 80055f6:	d10c      	bne.n	8005612 <_vfiprintf_r+0x15a>
 80055f8:	7863      	ldrb	r3, [r4, #1]
 80055fa:	2b2a      	cmp	r3, #42	; 0x2a
 80055fc:	d134      	bne.n	8005668 <_vfiprintf_r+0x1b0>
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	9203      	str	r2, [sp, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfb8      	it	lt
 800560a:	f04f 33ff 	movlt.w	r3, #4294967295
 800560e:	3402      	adds	r4, #2
 8005610:	9305      	str	r3, [sp, #20]
 8005612:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056e8 <_vfiprintf_r+0x230>
 8005616:	7821      	ldrb	r1, [r4, #0]
 8005618:	2203      	movs	r2, #3
 800561a:	4650      	mov	r0, sl
 800561c:	f7fa fde8 	bl	80001f0 <memchr>
 8005620:	b138      	cbz	r0, 8005632 <_vfiprintf_r+0x17a>
 8005622:	9b04      	ldr	r3, [sp, #16]
 8005624:	eba0 000a 	sub.w	r0, r0, sl
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	4082      	lsls	r2, r0
 800562c:	4313      	orrs	r3, r2
 800562e:	3401      	adds	r4, #1
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005636:	4829      	ldr	r0, [pc, #164]	; (80056dc <_vfiprintf_r+0x224>)
 8005638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800563c:	2206      	movs	r2, #6
 800563e:	f7fa fdd7 	bl	80001f0 <memchr>
 8005642:	2800      	cmp	r0, #0
 8005644:	d03f      	beq.n	80056c6 <_vfiprintf_r+0x20e>
 8005646:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <_vfiprintf_r+0x228>)
 8005648:	bb1b      	cbnz	r3, 8005692 <_vfiprintf_r+0x1da>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	3307      	adds	r3, #7
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	3308      	adds	r3, #8
 8005654:	9303      	str	r3, [sp, #12]
 8005656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005658:	443b      	add	r3, r7
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
 800565c:	e768      	b.n	8005530 <_vfiprintf_r+0x78>
 800565e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005662:	460c      	mov	r4, r1
 8005664:	2001      	movs	r0, #1
 8005666:	e7a6      	b.n	80055b6 <_vfiprintf_r+0xfe>
 8005668:	2300      	movs	r3, #0
 800566a:	3401      	adds	r4, #1
 800566c:	9305      	str	r3, [sp, #20]
 800566e:	4619      	mov	r1, r3
 8005670:	f04f 0c0a 	mov.w	ip, #10
 8005674:	4620      	mov	r0, r4
 8005676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800567a:	3a30      	subs	r2, #48	; 0x30
 800567c:	2a09      	cmp	r2, #9
 800567e:	d903      	bls.n	8005688 <_vfiprintf_r+0x1d0>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0c6      	beq.n	8005612 <_vfiprintf_r+0x15a>
 8005684:	9105      	str	r1, [sp, #20]
 8005686:	e7c4      	b.n	8005612 <_vfiprintf_r+0x15a>
 8005688:	fb0c 2101 	mla	r1, ip, r1, r2
 800568c:	4604      	mov	r4, r0
 800568e:	2301      	movs	r3, #1
 8005690:	e7f0      	b.n	8005674 <_vfiprintf_r+0x1bc>
 8005692:	ab03      	add	r3, sp, #12
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	462a      	mov	r2, r5
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <_vfiprintf_r+0x22c>)
 800569a:	a904      	add	r1, sp, #16
 800569c:	4630      	mov	r0, r6
 800569e:	f3af 8000 	nop.w
 80056a2:	4607      	mov	r7, r0
 80056a4:	1c78      	adds	r0, r7, #1
 80056a6:	d1d6      	bne.n	8005656 <_vfiprintf_r+0x19e>
 80056a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056aa:	07d9      	lsls	r1, r3, #31
 80056ac:	d405      	bmi.n	80056ba <_vfiprintf_r+0x202>
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	059a      	lsls	r2, r3, #22
 80056b2:	d402      	bmi.n	80056ba <_vfiprintf_r+0x202>
 80056b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056b6:	f7ff fdd4 	bl	8005262 <__retarget_lock_release_recursive>
 80056ba:	89ab      	ldrh	r3, [r5, #12]
 80056bc:	065b      	lsls	r3, r3, #25
 80056be:	f53f af1d 	bmi.w	80054fc <_vfiprintf_r+0x44>
 80056c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056c4:	e71c      	b.n	8005500 <_vfiprintf_r+0x48>
 80056c6:	ab03      	add	r3, sp, #12
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	462a      	mov	r2, r5
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <_vfiprintf_r+0x22c>)
 80056ce:	a904      	add	r1, sp, #16
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 f879 	bl	80057c8 <_printf_i>
 80056d6:	e7e4      	b.n	80056a2 <_vfiprintf_r+0x1ea>
 80056d8:	08006c94 	.word	0x08006c94
 80056dc:	08006c9e 	.word	0x08006c9e
 80056e0:	00000000 	.word	0x00000000
 80056e4:	08005493 	.word	0x08005493
 80056e8:	08006c9a 	.word	0x08006c9a

080056ec <_printf_common>:
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	4616      	mov	r6, r2
 80056f2:	4699      	mov	r9, r3
 80056f4:	688a      	ldr	r2, [r1, #8]
 80056f6:	690b      	ldr	r3, [r1, #16]
 80056f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bfb8      	it	lt
 8005700:	4613      	movlt	r3, r2
 8005702:	6033      	str	r3, [r6, #0]
 8005704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005708:	4607      	mov	r7, r0
 800570a:	460c      	mov	r4, r1
 800570c:	b10a      	cbz	r2, 8005712 <_printf_common+0x26>
 800570e:	3301      	adds	r3, #1
 8005710:	6033      	str	r3, [r6, #0]
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	0699      	lsls	r1, r3, #26
 8005716:	bf42      	ittt	mi
 8005718:	6833      	ldrmi	r3, [r6, #0]
 800571a:	3302      	addmi	r3, #2
 800571c:	6033      	strmi	r3, [r6, #0]
 800571e:	6825      	ldr	r5, [r4, #0]
 8005720:	f015 0506 	ands.w	r5, r5, #6
 8005724:	d106      	bne.n	8005734 <_printf_common+0x48>
 8005726:	f104 0a19 	add.w	sl, r4, #25
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	6832      	ldr	r2, [r6, #0]
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	42ab      	cmp	r3, r5
 8005732:	dc26      	bgt.n	8005782 <_printf_common+0x96>
 8005734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005738:	1e13      	subs	r3, r2, #0
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	bf18      	it	ne
 800573e:	2301      	movne	r3, #1
 8005740:	0692      	lsls	r2, r2, #26
 8005742:	d42b      	bmi.n	800579c <_printf_common+0xb0>
 8005744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005748:	4649      	mov	r1, r9
 800574a:	4638      	mov	r0, r7
 800574c:	47c0      	blx	r8
 800574e:	3001      	adds	r0, #1
 8005750:	d01e      	beq.n	8005790 <_printf_common+0xa4>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	6922      	ldr	r2, [r4, #16]
 8005756:	f003 0306 	and.w	r3, r3, #6
 800575a:	2b04      	cmp	r3, #4
 800575c:	bf02      	ittt	eq
 800575e:	68e5      	ldreq	r5, [r4, #12]
 8005760:	6833      	ldreq	r3, [r6, #0]
 8005762:	1aed      	subeq	r5, r5, r3
 8005764:	68a3      	ldr	r3, [r4, #8]
 8005766:	bf0c      	ite	eq
 8005768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800576c:	2500      	movne	r5, #0
 800576e:	4293      	cmp	r3, r2
 8005770:	bfc4      	itt	gt
 8005772:	1a9b      	subgt	r3, r3, r2
 8005774:	18ed      	addgt	r5, r5, r3
 8005776:	2600      	movs	r6, #0
 8005778:	341a      	adds	r4, #26
 800577a:	42b5      	cmp	r5, r6
 800577c:	d11a      	bne.n	80057b4 <_printf_common+0xc8>
 800577e:	2000      	movs	r0, #0
 8005780:	e008      	b.n	8005794 <_printf_common+0xa8>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4649      	mov	r1, r9
 8005788:	4638      	mov	r0, r7
 800578a:	47c0      	blx	r8
 800578c:	3001      	adds	r0, #1
 800578e:	d103      	bne.n	8005798 <_printf_common+0xac>
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	3501      	adds	r5, #1
 800579a:	e7c6      	b.n	800572a <_printf_common+0x3e>
 800579c:	18e1      	adds	r1, r4, r3
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	2030      	movs	r0, #48	; 0x30
 80057a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057a6:	4422      	add	r2, r4
 80057a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057b0:	3302      	adds	r3, #2
 80057b2:	e7c7      	b.n	8005744 <_printf_common+0x58>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4622      	mov	r2, r4
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d0e6      	beq.n	8005790 <_printf_common+0xa4>
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7d9      	b.n	800577a <_printf_common+0x8e>
	...

080057c8 <_printf_i>:
 80057c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	7e0f      	ldrb	r7, [r1, #24]
 80057ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057d0:	2f78      	cmp	r7, #120	; 0x78
 80057d2:	4691      	mov	r9, r2
 80057d4:	4680      	mov	r8, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	469a      	mov	sl, r3
 80057da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057de:	d807      	bhi.n	80057f0 <_printf_i+0x28>
 80057e0:	2f62      	cmp	r7, #98	; 0x62
 80057e2:	d80a      	bhi.n	80057fa <_printf_i+0x32>
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	f000 80d4 	beq.w	8005992 <_printf_i+0x1ca>
 80057ea:	2f58      	cmp	r7, #88	; 0x58
 80057ec:	f000 80c0 	beq.w	8005970 <_printf_i+0x1a8>
 80057f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057f8:	e03a      	b.n	8005870 <_printf_i+0xa8>
 80057fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057fe:	2b15      	cmp	r3, #21
 8005800:	d8f6      	bhi.n	80057f0 <_printf_i+0x28>
 8005802:	a101      	add	r1, pc, #4	; (adr r1, 8005808 <_printf_i+0x40>)
 8005804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005808:	08005861 	.word	0x08005861
 800580c:	08005875 	.word	0x08005875
 8005810:	080057f1 	.word	0x080057f1
 8005814:	080057f1 	.word	0x080057f1
 8005818:	080057f1 	.word	0x080057f1
 800581c:	080057f1 	.word	0x080057f1
 8005820:	08005875 	.word	0x08005875
 8005824:	080057f1 	.word	0x080057f1
 8005828:	080057f1 	.word	0x080057f1
 800582c:	080057f1 	.word	0x080057f1
 8005830:	080057f1 	.word	0x080057f1
 8005834:	08005979 	.word	0x08005979
 8005838:	080058a1 	.word	0x080058a1
 800583c:	08005933 	.word	0x08005933
 8005840:	080057f1 	.word	0x080057f1
 8005844:	080057f1 	.word	0x080057f1
 8005848:	0800599b 	.word	0x0800599b
 800584c:	080057f1 	.word	0x080057f1
 8005850:	080058a1 	.word	0x080058a1
 8005854:	080057f1 	.word	0x080057f1
 8005858:	080057f1 	.word	0x080057f1
 800585c:	0800593b 	.word	0x0800593b
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	602a      	str	r2, [r5, #0]
 8005868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800586c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005870:	2301      	movs	r3, #1
 8005872:	e09f      	b.n	80059b4 <_printf_i+0x1ec>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	682b      	ldr	r3, [r5, #0]
 8005878:	0607      	lsls	r7, r0, #24
 800587a:	f103 0104 	add.w	r1, r3, #4
 800587e:	6029      	str	r1, [r5, #0]
 8005880:	d501      	bpl.n	8005886 <_printf_i+0xbe>
 8005882:	681e      	ldr	r6, [r3, #0]
 8005884:	e003      	b.n	800588e <_printf_i+0xc6>
 8005886:	0646      	lsls	r6, r0, #25
 8005888:	d5fb      	bpl.n	8005882 <_printf_i+0xba>
 800588a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800588e:	2e00      	cmp	r6, #0
 8005890:	da03      	bge.n	800589a <_printf_i+0xd2>
 8005892:	232d      	movs	r3, #45	; 0x2d
 8005894:	4276      	negs	r6, r6
 8005896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589a:	485a      	ldr	r0, [pc, #360]	; (8005a04 <_printf_i+0x23c>)
 800589c:	230a      	movs	r3, #10
 800589e:	e012      	b.n	80058c6 <_printf_i+0xfe>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	6820      	ldr	r0, [r4, #0]
 80058a4:	1d19      	adds	r1, r3, #4
 80058a6:	6029      	str	r1, [r5, #0]
 80058a8:	0605      	lsls	r5, r0, #24
 80058aa:	d501      	bpl.n	80058b0 <_printf_i+0xe8>
 80058ac:	681e      	ldr	r6, [r3, #0]
 80058ae:	e002      	b.n	80058b6 <_printf_i+0xee>
 80058b0:	0641      	lsls	r1, r0, #25
 80058b2:	d5fb      	bpl.n	80058ac <_printf_i+0xe4>
 80058b4:	881e      	ldrh	r6, [r3, #0]
 80058b6:	4853      	ldr	r0, [pc, #332]	; (8005a04 <_printf_i+0x23c>)
 80058b8:	2f6f      	cmp	r7, #111	; 0x6f
 80058ba:	bf0c      	ite	eq
 80058bc:	2308      	moveq	r3, #8
 80058be:	230a      	movne	r3, #10
 80058c0:	2100      	movs	r1, #0
 80058c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058c6:	6865      	ldr	r5, [r4, #4]
 80058c8:	60a5      	str	r5, [r4, #8]
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	bfa2      	ittt	ge
 80058ce:	6821      	ldrge	r1, [r4, #0]
 80058d0:	f021 0104 	bicge.w	r1, r1, #4
 80058d4:	6021      	strge	r1, [r4, #0]
 80058d6:	b90e      	cbnz	r6, 80058dc <_printf_i+0x114>
 80058d8:	2d00      	cmp	r5, #0
 80058da:	d04b      	beq.n	8005974 <_printf_i+0x1ac>
 80058dc:	4615      	mov	r5, r2
 80058de:	fbb6 f1f3 	udiv	r1, r6, r3
 80058e2:	fb03 6711 	mls	r7, r3, r1, r6
 80058e6:	5dc7      	ldrb	r7, [r0, r7]
 80058e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058ec:	4637      	mov	r7, r6
 80058ee:	42bb      	cmp	r3, r7
 80058f0:	460e      	mov	r6, r1
 80058f2:	d9f4      	bls.n	80058de <_printf_i+0x116>
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d10b      	bne.n	8005910 <_printf_i+0x148>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	07de      	lsls	r6, r3, #31
 80058fc:	d508      	bpl.n	8005910 <_printf_i+0x148>
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	6861      	ldr	r1, [r4, #4]
 8005902:	4299      	cmp	r1, r3
 8005904:	bfde      	ittt	le
 8005906:	2330      	movle	r3, #48	; 0x30
 8005908:	f805 3c01 	strble.w	r3, [r5, #-1]
 800590c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005910:	1b52      	subs	r2, r2, r5
 8005912:	6122      	str	r2, [r4, #16]
 8005914:	f8cd a000 	str.w	sl, [sp]
 8005918:	464b      	mov	r3, r9
 800591a:	aa03      	add	r2, sp, #12
 800591c:	4621      	mov	r1, r4
 800591e:	4640      	mov	r0, r8
 8005920:	f7ff fee4 	bl	80056ec <_printf_common>
 8005924:	3001      	adds	r0, #1
 8005926:	d14a      	bne.n	80059be <_printf_i+0x1f6>
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	b004      	add	sp, #16
 800592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f043 0320 	orr.w	r3, r3, #32
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	4833      	ldr	r0, [pc, #204]	; (8005a08 <_printf_i+0x240>)
 800593c:	2778      	movs	r7, #120	; 0x78
 800593e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	6829      	ldr	r1, [r5, #0]
 8005946:	061f      	lsls	r7, r3, #24
 8005948:	f851 6b04 	ldr.w	r6, [r1], #4
 800594c:	d402      	bmi.n	8005954 <_printf_i+0x18c>
 800594e:	065f      	lsls	r7, r3, #25
 8005950:	bf48      	it	mi
 8005952:	b2b6      	uxthmi	r6, r6
 8005954:	07df      	lsls	r7, r3, #31
 8005956:	bf48      	it	mi
 8005958:	f043 0320 	orrmi.w	r3, r3, #32
 800595c:	6029      	str	r1, [r5, #0]
 800595e:	bf48      	it	mi
 8005960:	6023      	strmi	r3, [r4, #0]
 8005962:	b91e      	cbnz	r6, 800596c <_printf_i+0x1a4>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	f023 0320 	bic.w	r3, r3, #32
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	2310      	movs	r3, #16
 800596e:	e7a7      	b.n	80058c0 <_printf_i+0xf8>
 8005970:	4824      	ldr	r0, [pc, #144]	; (8005a04 <_printf_i+0x23c>)
 8005972:	e7e4      	b.n	800593e <_printf_i+0x176>
 8005974:	4615      	mov	r5, r2
 8005976:	e7bd      	b.n	80058f4 <_printf_i+0x12c>
 8005978:	682b      	ldr	r3, [r5, #0]
 800597a:	6826      	ldr	r6, [r4, #0]
 800597c:	6961      	ldr	r1, [r4, #20]
 800597e:	1d18      	adds	r0, r3, #4
 8005980:	6028      	str	r0, [r5, #0]
 8005982:	0635      	lsls	r5, r6, #24
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	d501      	bpl.n	800598c <_printf_i+0x1c4>
 8005988:	6019      	str	r1, [r3, #0]
 800598a:	e002      	b.n	8005992 <_printf_i+0x1ca>
 800598c:	0670      	lsls	r0, r6, #25
 800598e:	d5fb      	bpl.n	8005988 <_printf_i+0x1c0>
 8005990:	8019      	strh	r1, [r3, #0]
 8005992:	2300      	movs	r3, #0
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	4615      	mov	r5, r2
 8005998:	e7bc      	b.n	8005914 <_printf_i+0x14c>
 800599a:	682b      	ldr	r3, [r5, #0]
 800599c:	1d1a      	adds	r2, r3, #4
 800599e:	602a      	str	r2, [r5, #0]
 80059a0:	681d      	ldr	r5, [r3, #0]
 80059a2:	6862      	ldr	r2, [r4, #4]
 80059a4:	2100      	movs	r1, #0
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7fa fc22 	bl	80001f0 <memchr>
 80059ac:	b108      	cbz	r0, 80059b2 <_printf_i+0x1ea>
 80059ae:	1b40      	subs	r0, r0, r5
 80059b0:	6060      	str	r0, [r4, #4]
 80059b2:	6863      	ldr	r3, [r4, #4]
 80059b4:	6123      	str	r3, [r4, #16]
 80059b6:	2300      	movs	r3, #0
 80059b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059bc:	e7aa      	b.n	8005914 <_printf_i+0x14c>
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	462a      	mov	r2, r5
 80059c2:	4649      	mov	r1, r9
 80059c4:	4640      	mov	r0, r8
 80059c6:	47d0      	blx	sl
 80059c8:	3001      	adds	r0, #1
 80059ca:	d0ad      	beq.n	8005928 <_printf_i+0x160>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	079b      	lsls	r3, r3, #30
 80059d0:	d413      	bmi.n	80059fa <_printf_i+0x232>
 80059d2:	68e0      	ldr	r0, [r4, #12]
 80059d4:	9b03      	ldr	r3, [sp, #12]
 80059d6:	4298      	cmp	r0, r3
 80059d8:	bfb8      	it	lt
 80059da:	4618      	movlt	r0, r3
 80059dc:	e7a6      	b.n	800592c <_printf_i+0x164>
 80059de:	2301      	movs	r3, #1
 80059e0:	4632      	mov	r2, r6
 80059e2:	4649      	mov	r1, r9
 80059e4:	4640      	mov	r0, r8
 80059e6:	47d0      	blx	sl
 80059e8:	3001      	adds	r0, #1
 80059ea:	d09d      	beq.n	8005928 <_printf_i+0x160>
 80059ec:	3501      	adds	r5, #1
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	9903      	ldr	r1, [sp, #12]
 80059f2:	1a5b      	subs	r3, r3, r1
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dcf2      	bgt.n	80059de <_printf_i+0x216>
 80059f8:	e7eb      	b.n	80059d2 <_printf_i+0x20a>
 80059fa:	2500      	movs	r5, #0
 80059fc:	f104 0619 	add.w	r6, r4, #25
 8005a00:	e7f5      	b.n	80059ee <_printf_i+0x226>
 8005a02:	bf00      	nop
 8005a04:	08006ca5 	.word	0x08006ca5
 8005a08:	08006cb6 	.word	0x08006cb6

08005a0c <__sflush_r>:
 8005a0c:	898a      	ldrh	r2, [r1, #12]
 8005a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	4605      	mov	r5, r0
 8005a14:	0710      	lsls	r0, r2, #28
 8005a16:	460c      	mov	r4, r1
 8005a18:	d458      	bmi.n	8005acc <__sflush_r+0xc0>
 8005a1a:	684b      	ldr	r3, [r1, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dc05      	bgt.n	8005a2c <__sflush_r+0x20>
 8005a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dc02      	bgt.n	8005a2c <__sflush_r+0x20>
 8005a26:	2000      	movs	r0, #0
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	d0f9      	beq.n	8005a26 <__sflush_r+0x1a>
 8005a32:	2300      	movs	r3, #0
 8005a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a38:	682f      	ldr	r7, [r5, #0]
 8005a3a:	6a21      	ldr	r1, [r4, #32]
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	d032      	beq.n	8005aa6 <__sflush_r+0x9a>
 8005a40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	075a      	lsls	r2, r3, #29
 8005a46:	d505      	bpl.n	8005a54 <__sflush_r+0x48>
 8005a48:	6863      	ldr	r3, [r4, #4]
 8005a4a:	1ac0      	subs	r0, r0, r3
 8005a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a4e:	b10b      	cbz	r3, 8005a54 <__sflush_r+0x48>
 8005a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a52:	1ac0      	subs	r0, r0, r3
 8005a54:	2300      	movs	r3, #0
 8005a56:	4602      	mov	r2, r0
 8005a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a5a:	6a21      	ldr	r1, [r4, #32]
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b0      	blx	r6
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	d106      	bne.n	8005a74 <__sflush_r+0x68>
 8005a66:	6829      	ldr	r1, [r5, #0]
 8005a68:	291d      	cmp	r1, #29
 8005a6a:	d82b      	bhi.n	8005ac4 <__sflush_r+0xb8>
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <__sflush_r+0x108>)
 8005a6e:	410a      	asrs	r2, r1
 8005a70:	07d6      	lsls	r6, r2, #31
 8005a72:	d427      	bmi.n	8005ac4 <__sflush_r+0xb8>
 8005a74:	2200      	movs	r2, #0
 8005a76:	6062      	str	r2, [r4, #4]
 8005a78:	04d9      	lsls	r1, r3, #19
 8005a7a:	6922      	ldr	r2, [r4, #16]
 8005a7c:	6022      	str	r2, [r4, #0]
 8005a7e:	d504      	bpl.n	8005a8a <__sflush_r+0x7e>
 8005a80:	1c42      	adds	r2, r0, #1
 8005a82:	d101      	bne.n	8005a88 <__sflush_r+0x7c>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b903      	cbnz	r3, 8005a8a <__sflush_r+0x7e>
 8005a88:	6560      	str	r0, [r4, #84]	; 0x54
 8005a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a8c:	602f      	str	r7, [r5, #0]
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	d0c9      	beq.n	8005a26 <__sflush_r+0x1a>
 8005a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a96:	4299      	cmp	r1, r3
 8005a98:	d002      	beq.n	8005aa0 <__sflush_r+0x94>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f7ff fbea 	bl	8005274 <_free_r>
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	6360      	str	r0, [r4, #52]	; 0x34
 8005aa4:	e7c0      	b.n	8005a28 <__sflush_r+0x1c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b0      	blx	r6
 8005aac:	1c41      	adds	r1, r0, #1
 8005aae:	d1c8      	bne.n	8005a42 <__sflush_r+0x36>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0c5      	beq.n	8005a42 <__sflush_r+0x36>
 8005ab6:	2b1d      	cmp	r3, #29
 8005ab8:	d001      	beq.n	8005abe <__sflush_r+0xb2>
 8005aba:	2b16      	cmp	r3, #22
 8005abc:	d101      	bne.n	8005ac2 <__sflush_r+0xb6>
 8005abe:	602f      	str	r7, [r5, #0]
 8005ac0:	e7b1      	b.n	8005a26 <__sflush_r+0x1a>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	e7ad      	b.n	8005a28 <__sflush_r+0x1c>
 8005acc:	690f      	ldr	r7, [r1, #16]
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	d0a9      	beq.n	8005a26 <__sflush_r+0x1a>
 8005ad2:	0793      	lsls	r3, r2, #30
 8005ad4:	680e      	ldr	r6, [r1, #0]
 8005ad6:	bf08      	it	eq
 8005ad8:	694b      	ldreq	r3, [r1, #20]
 8005ada:	600f      	str	r7, [r1, #0]
 8005adc:	bf18      	it	ne
 8005ade:	2300      	movne	r3, #0
 8005ae0:	eba6 0807 	sub.w	r8, r6, r7
 8005ae4:	608b      	str	r3, [r1, #8]
 8005ae6:	f1b8 0f00 	cmp.w	r8, #0
 8005aea:	dd9c      	ble.n	8005a26 <__sflush_r+0x1a>
 8005aec:	6a21      	ldr	r1, [r4, #32]
 8005aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005af0:	4643      	mov	r3, r8
 8005af2:	463a      	mov	r2, r7
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b0      	blx	r6
 8005af8:	2800      	cmp	r0, #0
 8005afa:	dc06      	bgt.n	8005b0a <__sflush_r+0xfe>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	e78e      	b.n	8005a28 <__sflush_r+0x1c>
 8005b0a:	4407      	add	r7, r0
 8005b0c:	eba8 0800 	sub.w	r8, r8, r0
 8005b10:	e7e9      	b.n	8005ae6 <__sflush_r+0xda>
 8005b12:	bf00      	nop
 8005b14:	dfbffffe 	.word	0xdfbffffe

08005b18 <_fflush_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	690b      	ldr	r3, [r1, #16]
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	b913      	cbnz	r3, 8005b28 <_fflush_r+0x10>
 8005b22:	2500      	movs	r5, #0
 8005b24:	4628      	mov	r0, r5
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	b118      	cbz	r0, 8005b32 <_fflush_r+0x1a>
 8005b2a:	6a03      	ldr	r3, [r0, #32]
 8005b2c:	b90b      	cbnz	r3, 8005b32 <_fflush_r+0x1a>
 8005b2e:	f7ff fa81 	bl	8005034 <__sinit>
 8005b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f3      	beq.n	8005b22 <_fflush_r+0xa>
 8005b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b3c:	07d0      	lsls	r0, r2, #31
 8005b3e:	d404      	bmi.n	8005b4a <_fflush_r+0x32>
 8005b40:	0599      	lsls	r1, r3, #22
 8005b42:	d402      	bmi.n	8005b4a <_fflush_r+0x32>
 8005b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b46:	f7ff fb8b 	bl	8005260 <__retarget_lock_acquire_recursive>
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	f7ff ff5d 	bl	8005a0c <__sflush_r>
 8005b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b54:	07da      	lsls	r2, r3, #31
 8005b56:	4605      	mov	r5, r0
 8005b58:	d4e4      	bmi.n	8005b24 <_fflush_r+0xc>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	059b      	lsls	r3, r3, #22
 8005b5e:	d4e1      	bmi.n	8005b24 <_fflush_r+0xc>
 8005b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b62:	f7ff fb7e 	bl	8005262 <__retarget_lock_release_recursive>
 8005b66:	e7dd      	b.n	8005b24 <_fflush_r+0xc>

08005b68 <__swbuf_r>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	460e      	mov	r6, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	4605      	mov	r5, r0
 8005b70:	b118      	cbz	r0, 8005b7a <__swbuf_r+0x12>
 8005b72:	6a03      	ldr	r3, [r0, #32]
 8005b74:	b90b      	cbnz	r3, 8005b7a <__swbuf_r+0x12>
 8005b76:	f7ff fa5d 	bl	8005034 <__sinit>
 8005b7a:	69a3      	ldr	r3, [r4, #24]
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	071a      	lsls	r2, r3, #28
 8005b82:	d525      	bpl.n	8005bd0 <__swbuf_r+0x68>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b31b      	cbz	r3, 8005bd0 <__swbuf_r+0x68>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	6922      	ldr	r2, [r4, #16]
 8005b8c:	1a98      	subs	r0, r3, r2
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	b2f6      	uxtb	r6, r6
 8005b92:	4283      	cmp	r3, r0
 8005b94:	4637      	mov	r7, r6
 8005b96:	dc04      	bgt.n	8005ba2 <__swbuf_r+0x3a>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f7ff ffbc 	bl	8005b18 <_fflush_r>
 8005ba0:	b9e0      	cbnz	r0, 8005bdc <__swbuf_r+0x74>
 8005ba2:	68a3      	ldr	r3, [r4, #8]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	6022      	str	r2, [r4, #0]
 8005bae:	701e      	strb	r6, [r3, #0]
 8005bb0:	6962      	ldr	r2, [r4, #20]
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d004      	beq.n	8005bc2 <__swbuf_r+0x5a>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	07db      	lsls	r3, r3, #31
 8005bbc:	d506      	bpl.n	8005bcc <__swbuf_r+0x64>
 8005bbe:	2e0a      	cmp	r6, #10
 8005bc0:	d104      	bne.n	8005bcc <__swbuf_r+0x64>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f7ff ffa7 	bl	8005b18 <_fflush_r>
 8005bca:	b938      	cbnz	r0, 8005bdc <__swbuf_r+0x74>
 8005bcc:	4638      	mov	r0, r7
 8005bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 f806 	bl	8005be4 <__swsetup_r>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d0d5      	beq.n	8005b88 <__swbuf_r+0x20>
 8005bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8005be0:	e7f4      	b.n	8005bcc <__swbuf_r+0x64>
	...

08005be4 <__swsetup_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <__swsetup_r+0xac>)
 8005be8:	4605      	mov	r5, r0
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	460c      	mov	r4, r1
 8005bee:	b118      	cbz	r0, 8005bf8 <__swsetup_r+0x14>
 8005bf0:	6a03      	ldr	r3, [r0, #32]
 8005bf2:	b90b      	cbnz	r3, 8005bf8 <__swsetup_r+0x14>
 8005bf4:	f7ff fa1e 	bl	8005034 <__sinit>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bfe:	0718      	lsls	r0, r3, #28
 8005c00:	d422      	bmi.n	8005c48 <__swsetup_r+0x64>
 8005c02:	06d9      	lsls	r1, r3, #27
 8005c04:	d407      	bmi.n	8005c16 <__swsetup_r+0x32>
 8005c06:	2309      	movs	r3, #9
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e034      	b.n	8005c80 <__swsetup_r+0x9c>
 8005c16:	0758      	lsls	r0, r3, #29
 8005c18:	d512      	bpl.n	8005c40 <__swsetup_r+0x5c>
 8005c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c1c:	b141      	cbz	r1, 8005c30 <__swsetup_r+0x4c>
 8005c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c22:	4299      	cmp	r1, r3
 8005c24:	d002      	beq.n	8005c2c <__swsetup_r+0x48>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7ff fb24 	bl	8005274 <_free_r>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	89a3      	ldrh	r3, [r4, #12]
 8005c42:	f043 0308 	orr.w	r3, r3, #8
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	b94b      	cbnz	r3, 8005c60 <__swsetup_r+0x7c>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c56:	d003      	beq.n	8005c60 <__swsetup_r+0x7c>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f000 f894 	bl	8005d88 <__smakebuf_r>
 8005c60:	89a0      	ldrh	r0, [r4, #12]
 8005c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c66:	f010 0301 	ands.w	r3, r0, #1
 8005c6a:	d00a      	beq.n	8005c82 <__swsetup_r+0x9e>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	6963      	ldr	r3, [r4, #20]
 8005c72:	425b      	negs	r3, r3
 8005c74:	61a3      	str	r3, [r4, #24]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	b943      	cbnz	r3, 8005c8c <__swsetup_r+0xa8>
 8005c7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c7e:	d1c4      	bne.n	8005c0a <__swsetup_r+0x26>
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
 8005c82:	0781      	lsls	r1, r0, #30
 8005c84:	bf58      	it	pl
 8005c86:	6963      	ldrpl	r3, [r4, #20]
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	e7f4      	b.n	8005c76 <__swsetup_r+0x92>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e7f7      	b.n	8005c80 <__swsetup_r+0x9c>
 8005c90:	2000008c 	.word	0x2000008c

08005c94 <_raise_r>:
 8005c94:	291f      	cmp	r1, #31
 8005c96:	b538      	push	{r3, r4, r5, lr}
 8005c98:	4604      	mov	r4, r0
 8005c9a:	460d      	mov	r5, r1
 8005c9c:	d904      	bls.n	8005ca8 <_raise_r+0x14>
 8005c9e:	2316      	movs	r3, #22
 8005ca0:	6003      	str	r3, [r0, #0]
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005caa:	b112      	cbz	r2, 8005cb2 <_raise_r+0x1e>
 8005cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cb0:	b94b      	cbnz	r3, 8005cc6 <_raise_r+0x32>
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 f830 	bl	8005d18 <_getpid_r>
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4601      	mov	r1, r0
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cc2:	f000 b817 	b.w	8005cf4 <_kill_r>
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d00a      	beq.n	8005ce0 <_raise_r+0x4c>
 8005cca:	1c59      	adds	r1, r3, #1
 8005ccc:	d103      	bne.n	8005cd6 <_raise_r+0x42>
 8005cce:	2316      	movs	r3, #22
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	e7e7      	b.n	8005ca6 <_raise_r+0x12>
 8005cd6:	2400      	movs	r4, #0
 8005cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005cdc:	4628      	mov	r0, r5
 8005cde:	4798      	blx	r3
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	e7e0      	b.n	8005ca6 <_raise_r+0x12>

08005ce4 <raise>:
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <raise+0xc>)
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	f7ff bfd3 	b.w	8005c94 <_raise_r>
 8005cee:	bf00      	nop
 8005cf0:	2000008c 	.word	0x2000008c

08005cf4 <_kill_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	; (8005d14 <_kill_r+0x20>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f7fc fab5 	bl	8002270 <_kill>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d102      	bne.n	8005d10 <_kill_r+0x1c>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	b103      	cbz	r3, 8005d10 <_kill_r+0x1c>
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
 8005d12:	bf00      	nop
 8005d14:	200007a8 	.word	0x200007a8

08005d18 <_getpid_r>:
 8005d18:	f7fc baa2 	b.w	8002260 <_getpid>

08005d1c <_sbrk_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4d06      	ldr	r5, [pc, #24]	; (8005d38 <_sbrk_r+0x1c>)
 8005d20:	2300      	movs	r3, #0
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	602b      	str	r3, [r5, #0]
 8005d28:	f7fc fb2a 	bl	8002380 <_sbrk>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_sbrk_r+0x1a>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_sbrk_r+0x1a>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	200007a8 	.word	0x200007a8

08005d3c <__swhatbuf_r>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	460c      	mov	r4, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	2900      	cmp	r1, #0
 8005d46:	b096      	sub	sp, #88	; 0x58
 8005d48:	4615      	mov	r5, r2
 8005d4a:	461e      	mov	r6, r3
 8005d4c:	da0d      	bge.n	8005d6a <__swhatbuf_r+0x2e>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	bf0c      	ite	eq
 8005d5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d5e:	2340      	movne	r3, #64	; 0x40
 8005d60:	2000      	movs	r0, #0
 8005d62:	6031      	str	r1, [r6, #0]
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	b016      	add	sp, #88	; 0x58
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	466a      	mov	r2, sp
 8005d6c:	f000 f848 	bl	8005e00 <_fstat_r>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	dbec      	blt.n	8005d4e <__swhatbuf_r+0x12>
 8005d74:	9901      	ldr	r1, [sp, #4]
 8005d76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d7e:	4259      	negs	r1, r3
 8005d80:	4159      	adcs	r1, r3
 8005d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d86:	e7eb      	b.n	8005d60 <__swhatbuf_r+0x24>

08005d88 <__smakebuf_r>:
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d8c:	079d      	lsls	r5, r3, #30
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	d507      	bpl.n	8005da4 <__smakebuf_r+0x1c>
 8005d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	6163      	str	r3, [r4, #20]
 8005da0:	b002      	add	sp, #8
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	ab01      	add	r3, sp, #4
 8005da6:	466a      	mov	r2, sp
 8005da8:	f7ff ffc8 	bl	8005d3c <__swhatbuf_r>
 8005dac:	9900      	ldr	r1, [sp, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff facb 	bl	800534c <_malloc_r>
 8005db6:	b948      	cbnz	r0, 8005dcc <__smakebuf_r+0x44>
 8005db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbc:	059a      	lsls	r2, r3, #22
 8005dbe:	d4ef      	bmi.n	8005da0 <__smakebuf_r+0x18>
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	e7e3      	b.n	8005d94 <__smakebuf_r+0xc>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	6020      	str	r0, [r4, #0]
 8005dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd4:	81a3      	strh	r3, [r4, #12]
 8005dd6:	9b00      	ldr	r3, [sp, #0]
 8005dd8:	6163      	str	r3, [r4, #20]
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	6120      	str	r0, [r4, #16]
 8005dde:	b15b      	cbz	r3, 8005df8 <__smakebuf_r+0x70>
 8005de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de4:	4630      	mov	r0, r6
 8005de6:	f000 f81d 	bl	8005e24 <_isatty_r>
 8005dea:	b128      	cbz	r0, 8005df8 <__smakebuf_r+0x70>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	431d      	orrs	r5, r3
 8005dfc:	81a5      	strh	r5, [r4, #12]
 8005dfe:	e7cf      	b.n	8005da0 <__smakebuf_r+0x18>

08005e00 <_fstat_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	; (8005e20 <_fstat_r+0x20>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	602b      	str	r3, [r5, #0]
 8005e0e:	f7fc fa8e 	bl	800232e <_fstat>
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	d102      	bne.n	8005e1c <_fstat_r+0x1c>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	b103      	cbz	r3, 8005e1c <_fstat_r+0x1c>
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	bd38      	pop	{r3, r4, r5, pc}
 8005e1e:	bf00      	nop
 8005e20:	200007a8 	.word	0x200007a8

08005e24 <_isatty_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d06      	ldr	r5, [pc, #24]	; (8005e40 <_isatty_r+0x1c>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fc fa8d 	bl	800234e <_isatty>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_isatty_r+0x1a>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_isatty_r+0x1a>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	200007a8 	.word	0x200007a8

08005e44 <_init>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr

08005e50 <_fini>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr
