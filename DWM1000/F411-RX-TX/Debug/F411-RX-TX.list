
F411-RX-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e4  080077e4  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077ec  080077ec  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080077f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  200000b4  080078a8  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  080078a8  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013708  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319f  00000000  00000000  000337ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00036990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00037b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa2d  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ac0  00000000  00000000  000535e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000922c3  00000000  00000000  0006a0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004adc  00000000  00000000  000fc3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f00 	.word	0x08006f00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08006f00 	.word	0x08006f00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80005a4:	4b9f      	ldr	r3, [pc, #636]	; (8000824 <dwt_initialise+0x290>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80005ac:	4b9d      	ldr	r3, [pc, #628]	; (8000824 <dwt_initialise+0x290>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80005b4:	4b9b      	ldr	r3, [pc, #620]	; (8000824 <dwt_initialise+0x290>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005bc:	4b99      	ldr	r3, [pc, #612]	; (8000824 <dwt_initialise+0x290>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005c4:	4b97      	ldr	r3, [pc, #604]	; (8000824 <dwt_initialise+0x290>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005cc:	4b95      	ldr	r3, [pc, #596]	; (8000824 <dwt_initialise+0x290>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005d4:	4b93      	ldr	r3, [pc, #588]	; (8000824 <dwt_initialise+0x290>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005dc:	f000 f926 	bl	800082c <dwt_readdevid>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a91      	ldr	r2, [pc, #580]	; (8000828 <dwt_initialise+0x294>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d002      	beq.n	80005ee <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	e115      	b.n	800081a <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f003 0302 	and.w	r3, r3, #2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005f8:	f000 fe14 	bl	8001224 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	2b00      	cmp	r3, #0
 8000604:	d004      	beq.n	8000610 <dwt_initialise+0x7c>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fc87 	bl	8000f24 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000616:	2204      	movs	r2, #4
 8000618:	2100      	movs	r1, #0
 800061a:	2024      	movs	r0, #36	; 0x24
 800061c:	f000 fbcc 	bl	8000db8 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b00      	cmp	r3, #0
 8000628:	d116      	bne.n	8000658 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800062a:	2004      	movs	r0, #4
 800062c:	f000 fc1a 	bl	8000e64 <_dwt_otpread>
 8000630:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d01f      	beq.n	800067a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800063a:	2202      	movs	r2, #2
 800063c:	2112      	movs	r1, #18
 800063e:	202d      	movs	r0, #45	; 0x2d
 8000640:	f000 fbba 	bl	8000db8 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000644:	4b77      	ldr	r3, [pc, #476]	; (8000824 <dwt_initialise+0x290>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	8ada      	ldrh	r2, [r3, #22]
 800064a:	4b76      	ldr	r3, [pc, #472]	; (8000824 <dwt_initialise+0x290>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000652:	b292      	uxth	r2, r2
 8000654:	82da      	strh	r2, [r3, #22]
 8000656:	e010      	b.n	800067a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000658:	2130      	movs	r1, #48	; 0x30
 800065a:	2028      	movs	r0, #40	; 0x28
 800065c:	f000 fb55 	bl	8000d0a <dwt_read32bitoffsetreg>
 8000660:	4603      	mov	r3, r0
 8000662:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000666:	d008      	beq.n	800067a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000668:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <dwt_initialise+0x290>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	8ada      	ldrh	r2, [r3, #22]
 800066e:	4b6d      	ldr	r3, [pc, #436]	; (8000824 <dwt_initialise+0x290>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000676:	b292      	uxth	r2, r2
 8000678:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	2b00      	cmp	r3, #0
 8000682:	d009      	beq.n	8000698 <dwt_initialise+0x104>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	2b00      	cmp	r3, #0
 800068c:	d011      	beq.n	80006b2 <dwt_initialise+0x11e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00c      	beq.n	80006b2 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000698:	201e      	movs	r0, #30
 800069a:	f000 fbe3 	bl	8000e64 <_dwt_otpread>
 800069e:	4603      	mov	r3, r0
 80006a0:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80006a2:	8afb      	ldrh	r3, [r7, #22]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <dwt_initialise+0x290>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	72da      	strb	r2, [r3, #11]
 80006b0:	e003      	b.n	80006ba <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80006b2:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <dwt_initialise+0x290>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10b      	bne.n	80006dc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006c4:	8afb      	ldrh	r3, [r7, #22]
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006ce:	2310      	movs	r3, #16
 80006d0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006d2:	8afb      	ldrh	r3, [r7, #22]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fdca 	bl	8001270 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006e6:	4b4f      	ldr	r3, [pc, #316]	; (8000824 <dwt_initialise+0x290>)
 80006e8:	681c      	ldr	r4, [r3, #0]
 80006ea:	2006      	movs	r0, #6
 80006ec:	f000 fbba 	bl	8000e64 <_dwt_otpread>
 80006f0:	4603      	mov	r3, r0
 80006f2:	6023      	str	r3, [r4, #0]
 80006f4:	e003      	b.n	80006fe <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80006f6:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <dwt_initialise+0x290>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000708:	4b46      	ldr	r3, [pc, #280]	; (8000824 <dwt_initialise+0x290>)
 800070a:	681c      	ldr	r4, [r3, #0]
 800070c:	2007      	movs	r0, #7
 800070e:	f000 fba9 	bl	8000e64 <_dwt_otpread>
 8000712:	4603      	mov	r3, r0
 8000714:	6063      	str	r3, [r4, #4]
 8000716:	e003      	b.n	8000720 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000718:	4b42      	ldr	r3, [pc, #264]	; (8000824 <dwt_initialise+0x290>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	2b00      	cmp	r3, #0
 8000728:	d008      	beq.n	800073c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800072a:	2008      	movs	r0, #8
 800072c:	f000 fb9a 	bl	8000e64 <_dwt_otpread>
 8000730:	4602      	mov	r2, r0
 8000732:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <dwt_initialise+0x290>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	721a      	strb	r2, [r3, #8]
 800073a:	e003      	b.n	8000744 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800073c:	4b39      	ldr	r3, [pc, #228]	; (8000824 <dwt_initialise+0x290>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	2b00      	cmp	r3, #0
 800074c:	d008      	beq.n	8000760 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800074e:	2009      	movs	r0, #9
 8000750:	f000 fb88 	bl	8000e64 <_dwt_otpread>
 8000754:	4602      	mov	r2, r0
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <dwt_initialise+0x290>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	725a      	strb	r2, [r3, #9]
 800075e:	e003      	b.n	8000768 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <dwt_initialise+0x290>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d121      	bne.n	80007b6 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00b      	beq.n	8000794 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 800077c:	f000 fbbf 	bl	8000efe <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <dwt_initialise+0x290>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	8ada      	ldrh	r2, [r3, #22]
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <dwt_initialise+0x290>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800078e:	b292      	uxth	r2, r2
 8000790:	82da      	strh	r2, [r3, #22]
 8000792:	e01e      	b.n	80007d2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000794:	2105      	movs	r1, #5
 8000796:	2036      	movs	r0, #54	; 0x36
 8000798:	f000 fade 	bl	8000d58 <dwt_read16bitoffsetreg>
 800079c:	4603      	mov	r3, r0
 800079e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007a6:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80007a8:	89fb      	ldrh	r3, [r7, #14]
 80007aa:	461a      	mov	r2, r3
 80007ac:	2105      	movs	r1, #5
 80007ae:	2036      	movs	r0, #54	; 0x36
 80007b0:	f000 fb15 	bl	8000dde <dwt_write16bitoffsetreg>
 80007b4:	e00d      	b.n	80007d2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d108      	bne.n	80007d2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <dwt_initialise+0x290>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	8ada      	ldrh	r2, [r3, #22]
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <dwt_initialise+0x290>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007ce:	b292      	uxth	r2, r2
 80007d0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 fba6 	bl	8000f24 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007d8:	2200      	movs	r2, #0
 80007da:	210a      	movs	r1, #10
 80007dc:	202c      	movs	r0, #44	; 0x2c
 80007de:	f000 faeb 	bl	8000db8 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <dwt_initialise+0x290>)
 80007e4:	681c      	ldr	r4, [r3, #0]
 80007e6:	2100      	movs	r1, #0
 80007e8:	2004      	movs	r0, #4
 80007ea:	f000 fa8e 	bl	8000d0a <dwt_read32bitoffsetreg>
 80007ee:	4603      	mov	r3, r0
 80007f0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <dwt_initialise+0x290>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <dwt_initialise+0x290>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f002 0203 	and.w	r2, r2, #3
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <dwt_initialise+0x290>)
 800080a:	681c      	ldr	r4, [r3, #0]
 800080c:	2100      	movs	r1, #0
 800080e:	2008      	movs	r0, #8
 8000810:	f000 fa7b 	bl	8000d0a <dwt_read32bitoffsetreg>
 8000814:	4603      	mov	r3, r0
 8000816:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000818:	2300      	movs	r3, #0

} // end dwt_initialise()
 800081a:	4618      	mov	r0, r3
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000
 8000828:	deca0130 	.word	0xdeca0130

0800082c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000830:	2100      	movs	r1, #0
 8000832:	2000      	movs	r0, #0
 8000834:	f000 fa69 	bl	8000d0a <dwt_read32bitoffsetreg>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	795b      	ldrb	r3, [r3, #5]
 800085a:	461a      	mov	r2, r3
 800085c:	4ba1      	ldr	r3, [pc, #644]	; (8000ae4 <dwt_configure+0x2a4>)
 800085e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000862:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	3b01      	subs	r3, #1
 800086a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d002      	beq.n	8000878 <dwt_configure+0x38>
 8000872:	7cfb      	ldrb	r3, [r7, #19]
 8000874:	2b07      	cmp	r3, #7
 8000876:	d101      	bne.n	800087c <dwt_configure+0x3c>
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <dwt_configure+0x3e>
 800087c:	2300      	movs	r3, #0
 800087e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	79db      	ldrb	r3, [r3, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10b      	bne.n	80008a0 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000888:	4b97      	ldr	r3, [pc, #604]	; (8000ae8 <dwt_configure+0x2a8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	4b96      	ldr	r3, [pc, #600]	; (8000ae8 <dwt_configure+0x2a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000896:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000898:	8abb      	ldrh	r3, [r7, #20]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	82bb      	strh	r3, [r7, #20]
 800089e:	e007      	b.n	80008b0 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80008a0:	4b91      	ldr	r3, [pc, #580]	; (8000ae8 <dwt_configure+0x2a8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	691a      	ldr	r2, [r3, #16]
 80008a6:	4b90      	ldr	r3, [pc, #576]	; (8000ae8 <dwt_configure+0x2a8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80008ae:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80008b0:	4b8d      	ldr	r3, [pc, #564]	; (8000ae8 <dwt_configure+0x2a8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	7a12      	ldrb	r2, [r2, #8]
 80008b8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80008ba:	4b8b      	ldr	r3, [pc, #556]	; (8000ae8 <dwt_configure+0x2a8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	4b89      	ldr	r3, [pc, #548]	; (8000ae8 <dwt_configure+0x2a8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008c8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80008ca:	4b87      	ldr	r3, [pc, #540]	; (8000ae8 <dwt_configure+0x2a8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6919      	ldr	r1, [r3, #16]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7a1b      	ldrb	r3, [r3, #8]
 80008d4:	041b      	lsls	r3, r3, #16
 80008d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80008da:	4b83      	ldr	r3, [pc, #524]	; (8000ae8 <dwt_configure+0x2a8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	430a      	orrs	r2, r1
 80008e0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80008e2:	4b81      	ldr	r3, [pc, #516]	; (8000ae8 <dwt_configure+0x2a8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	461a      	mov	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	2004      	movs	r0, #4
 80008ee:	f000 fa92 	bl	8000e16 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f642 0104 	movw	r1, #10244	; 0x2804
 80008fa:	202e      	movs	r0, #46	; 0x2e
 80008fc:	f000 fa6f 	bl	8000dde <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000900:	7cbb      	ldrb	r3, [r7, #18]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fadb 	bl	8000ebe <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	4a78      	ldr	r2, [pc, #480]	; (8000aec <dwt_configure+0x2ac>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
 800090e:	461a      	mov	r2, r3
 8000910:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <dwt_configure+0x2b0>)
 8000912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000916:	461a      	mov	r2, r3
 8000918:	2107      	movs	r1, #7
 800091a:	202b      	movs	r0, #43	; 0x2b
 800091c:	f000 fa7b 	bl	8000e16 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000920:	7cfb      	ldrb	r3, [r7, #19]
 8000922:	4a72      	ldr	r2, [pc, #456]	; (8000aec <dwt_configure+0x2ac>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	461a      	mov	r2, r3
 8000928:	4b72      	ldr	r3, [pc, #456]	; (8000af4 <dwt_configure+0x2b4>)
 800092a:	5c9b      	ldrb	r3, [r3, r2]
 800092c:	461a      	mov	r2, r3
 800092e:	210b      	movs	r1, #11
 8000930:	202b      	movs	r0, #43	; 0x2b
 8000932:	f000 fa41 	bl	8000db8 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000936:	7c7b      	ldrb	r3, [r7, #17]
 8000938:	4a6f      	ldr	r2, [pc, #444]	; (8000af8 <dwt_configure+0x2b8>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	461a      	mov	r2, r3
 800093e:	210b      	movs	r1, #11
 8000940:	2028      	movs	r0, #40	; 0x28
 8000942:	f000 fa39 	bl	8000db8 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000946:	7cfb      	ldrb	r3, [r7, #19]
 8000948:	4a68      	ldr	r2, [pc, #416]	; (8000aec <dwt_configure+0x2ac>)
 800094a:	5cd3      	ldrb	r3, [r2, r3]
 800094c:	461a      	mov	r2, r3
 800094e:	4b6b      	ldr	r3, [pc, #428]	; (8000afc <dwt_configure+0x2bc>)
 8000950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000954:	461a      	mov	r2, r3
 8000956:	210c      	movs	r1, #12
 8000958:	2028      	movs	r0, #40	; 0x28
 800095a:	f000 fa5c 	bl	8000e16 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	79db      	ldrb	r3, [r3, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	799b      	ldrb	r3, [r3, #6]
 8000968:	4619      	mov	r1, r3
 800096a:	4a65      	ldr	r2, [pc, #404]	; (8000b00 <dwt_configure+0x2c0>)
 800096c:	0043      	lsls	r3, r0, #1
 800096e:	440b      	add	r3, r1
 8000970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000974:	461a      	mov	r2, r3
 8000976:	2102      	movs	r1, #2
 8000978:	2027      	movs	r0, #39	; 0x27
 800097a:	f000 fa30 	bl	8000dde <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800097e:	7cbb      	ldrb	r3, [r7, #18]
 8000980:	4a60      	ldr	r2, [pc, #384]	; (8000b04 <dwt_configure+0x2c4>)
 8000982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000986:	461a      	mov	r2, r3
 8000988:	2104      	movs	r1, #4
 800098a:	2027      	movs	r0, #39	; 0x27
 800098c:	f000 fa27 	bl	8000dde <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	79db      	ldrb	r3, [r3, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d105      	bne.n	80009a4 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000998:	2264      	movs	r2, #100	; 0x64
 800099a:	2106      	movs	r1, #6
 800099c:	2027      	movs	r0, #39	; 0x27
 800099e:	f000 fa1e 	bl	8000dde <dwt_write16bitoffsetreg>
 80009a2:	e018      	b.n	80009d6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d10a      	bne.n	80009c2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80009ac:	2210      	movs	r2, #16
 80009ae:	2106      	movs	r1, #6
 80009b0:	2027      	movs	r0, #39	; 0x27
 80009b2:	f000 fa14 	bl	8000dde <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80009b6:	2210      	movs	r2, #16
 80009b8:	2126      	movs	r1, #38	; 0x26
 80009ba:	2027      	movs	r0, #39	; 0x27
 80009bc:	f000 f9fc 	bl	8000db8 <dwt_write8bitoffsetreg>
 80009c0:	e009      	b.n	80009d6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80009c2:	2220      	movs	r2, #32
 80009c4:	2106      	movs	r1, #6
 80009c6:	2027      	movs	r0, #39	; 0x27
 80009c8:	f000 fa09 	bl	8000dde <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80009cc:	2228      	movs	r2, #40	; 0x28
 80009ce:	2126      	movs	r1, #38	; 0x26
 80009d0:	2027      	movs	r0, #39	; 0x27
 80009d2:	f000 f9f1 	bl	8000db8 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80009d6:	7cbb      	ldrb	r3, [r7, #18]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	78d2      	ldrb	r2, [r2, #3]
 80009dc:	4611      	mov	r1, r2
 80009de:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <dwt_configure+0x2c8>)
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2108      	movs	r1, #8
 80009ec:	2027      	movs	r0, #39	; 0x27
 80009ee:	f000 fa12 	bl	8000e16 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	895b      	ldrh	r3, [r3, #10]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d103      	bne.n	8000a02 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f241 0241 	movw	r2, #4161	; 0x1041
 8000a00:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	895b      	ldrh	r3, [r3, #10]
 8000a06:	461a      	mov	r2, r3
 8000a08:	2120      	movs	r1, #32
 8000a0a:	2027      	movs	r0, #39	; 0x27
 8000a0c:	f000 f9e7 	bl	8000dde <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <dwt_configure+0x2cc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	210c      	movs	r1, #12
 8000a18:	2023      	movs	r0, #35	; 0x23
 8000a1a:	f000 f9fc 	bl	8000e16 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000a1e:	7cbb      	ldrb	r3, [r7, #18]
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <dwt_configure+0x2cc>)
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	2023      	movs	r0, #35	; 0x23
 8000a2e:	f000 f9d6 	bl	8000dde <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	799b      	ldrb	r3, [r3, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00d      	beq.n	8000a56 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	79db      	ldrb	r3, [r3, #7]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <dwt_configure+0x2d0>)
 8000a42:	5c9b      	ldrb	r3, [r3, r2]
 8000a44:	461a      	mov	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	2021      	movs	r0, #33	; 0x21
 8000a4a:	f000 f9b5 	bl	8000db8 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000a52:	2301      	movs	r3, #1
 8000a54:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a56:	7cfb      	ldrb	r3, [r7, #19]
 8000a58:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a5c:	7cfb      	ldrb	r3, [r7, #19]
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a62:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	049b      	lsls	r3, r3, #18
 8000a6a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a6e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	051b      	lsls	r3, r3, #20
 8000a74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a78:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	045b      	lsls	r3, r3, #17
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a82:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	791b      	ldrb	r3, [r3, #4]
 8000a88:	059b      	lsls	r3, r3, #22
 8000a8a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a8e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	795b      	ldrb	r3, [r3, #5]
 8000a94:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	201f      	movs	r0, #31
 8000aa0:	f000 f9b9 	bl	8000e16 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	789a      	ldrb	r2, [r3, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	0419      	lsls	r1, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	79db      	ldrb	r3, [r3, #7]
 8000ab6:	035a      	lsls	r2, r3, #13
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <dwt_configure+0x2a8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	430a      	orrs	r2, r1
 8000abe:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <dwt_configure+0x2a8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2008      	movs	r0, #8
 8000acc:	f000 f9a3 	bl	8000e16 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ad0:	2242      	movs	r2, #66	; 0x42
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	200d      	movs	r0, #13
 8000ad6:	f000 f96f 	bl	8000db8 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08006ff8 	.word	0x08006ff8
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	08006f78 	.word	0x08006f78
 8000af0:	08006f98 	.word	0x08006f98
 8000af4:	08006fb0 	.word	0x08006fb0
 8000af8:	08006fb8 	.word	0x08006fb8
 8000afc:	08006f80 	.word	0x08006f80
 8000b00:	08006fc8 	.word	0x08006fc8
 8000b04:	08006fd4 	.word	0x08006fd4
 8000b08:	08006fd8 	.word	0x08006fd8
 8000b0c:	08006fbc 	.word	0x08006fbc
 8000b10:	08006fc4 	.word	0x08006fc4

08000b14 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4413      	add	r3, r2
 8000b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b2e:	dc09      	bgt.n	8000b44 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	3b02      	subs	r3, #2
 8000b34:	461a      	mov	r2, r3
 8000b36:	88b9      	ldrh	r1, [r7, #4]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2009      	movs	r0, #9
 8000b3c:	f000 f83a 	bl	8000bb4 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e001      	b.n	8000b48 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	80fb      	strh	r3, [r7, #6]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <dwt_writetxfctrl+0x3c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	059b      	lsls	r3, r3, #22
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2008      	movs	r0, #8
 8000b7e:	f000 f94a 	bl	8000e16 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000000 	.word	0x20000000

08000b90 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	8839      	ldrh	r1, [r7, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2011      	movs	r0, #17
 8000ba8:	f000 f85b 	bl	8000c62 <dwt_readfromdevice>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60ba      	str	r2, [r7, #8]
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	81fb      	strh	r3, [r7, #14]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10c      	bne.n	8000bea <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	1c59      	adds	r1, r3, #1
 8000bd8:	6179      	str	r1, [r7, #20]
 8000bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	3318      	adds	r3, #24
 8000be2:	443b      	add	r3, r7
 8000be4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000be8:	e02f      	b.n	8000c4a <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	1c59      	adds	r1, r3, #1
 8000bf2:	6179      	str	r1, [r7, #20]
 8000bf4:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c02:	89bb      	ldrh	r3, [r7, #12]
 8000c04:	2b7f      	cmp	r3, #127	; 0x7f
 8000c06:	d809      	bhi.n	8000c1c <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	617a      	str	r2, [r7, #20]
 8000c0e:	89ba      	ldrh	r2, [r7, #12]
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	3318      	adds	r3, #24
 8000c14:	443b      	add	r3, r7
 8000c16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c1a:	e016      	b.n	8000c4a <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c1c:	89bb      	ldrh	r3, [r7, #12]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	1c59      	adds	r1, r3, #1
 8000c24:	6179      	str	r1, [r7, #20]
 8000c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	3318      	adds	r3, #24
 8000c2e:	443b      	add	r3, r7
 8000c30:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	09db      	lsrs	r3, r3, #7
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	617a      	str	r2, [r7, #20]
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	3318      	adds	r3, #24
 8000c44:	443b      	add	r3, r7
 8000c46:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	b298      	uxth	r0, r3
 8000c4e:	f107 0110 	add.w	r1, r7, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	f000 fb4d 	bl	80012f4 <writetospi>
} // end dwt_writetodevice()
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	81fb      	strh	r3, [r7, #14]
 8000c70:	460b      	mov	r3, r1
 8000c72:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d109      	bne.n	8000c92 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	617a      	str	r2, [r7, #20]
 8000c84:	89fa      	ldrh	r2, [r7, #14]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	3318      	adds	r3, #24
 8000c8a:	443b      	add	r3, r7
 8000c8c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c90:	e02f      	b.n	8000cf2 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	1c59      	adds	r1, r3, #1
 8000c9a:	6179      	str	r1, [r7, #20]
 8000c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	443b      	add	r3, r7
 8000ca6:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	2b7f      	cmp	r3, #127	; 0x7f
 8000cae:	d809      	bhi.n	8000cc4 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	617a      	str	r2, [r7, #20]
 8000cb6:	89ba      	ldrh	r2, [r7, #12]
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	3318      	adds	r3, #24
 8000cbc:	443b      	add	r3, r7
 8000cbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cc2:	e016      	b.n	8000cf2 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000cc4:	89bb      	ldrh	r3, [r7, #12]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	1c59      	adds	r1, r3, #1
 8000ccc:	6179      	str	r1, [r7, #20]
 8000cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	3318      	adds	r3, #24
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000cdc:	89bb      	ldrh	r3, [r7, #12]
 8000cde:	09db      	lsrs	r3, r3, #7
 8000ce0:	b299      	uxth	r1, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	617a      	str	r2, [r7, #20]
 8000ce8:	b2ca      	uxtb	r2, r1
 8000cea:	3318      	adds	r3, #24
 8000cec:	443b      	add	r3, r7
 8000cee:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	b298      	uxth	r0, r3
 8000cf6:	f107 0110 	add.w	r1, r7, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	f000 fb2d 	bl	800135c <readfromspi>
} // end dwt_readfromdevice()
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b299      	uxth	r1, r3
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2204      	movs	r2, #4
 8000d26:	f7ff ff9c 	bl	8000c62 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	e00b      	b.n	8000d48 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	f107 010c 	add.w	r1, r7, #12
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	440a      	add	r2, r1
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf0      	bge.n	8000d30 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d4e:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d62:	2300      	movs	r3, #0
 8000d64:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	b298      	uxth	r0, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b299      	uxth	r1, r3
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2202      	movs	r2, #2
 8000d74:	f7ff ff75 	bl	8000c62 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d78:	7b7b      	ldrb	r3, [r7, #13]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	7b3b      	ldrb	r3, [r7, #12]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d88:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	b298      	uxth	r0, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b299      	uxth	r1, r3
 8000da4:	f107 030f 	add.w	r3, r7, #15
 8000da8:	2201      	movs	r2, #1
 8000daa:	f7ff ff5a 	bl	8000c62 <dwt_readfromdevice>

    return regval ;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	b298      	uxth	r0, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f7ff feef 	bl	8000bb4 <dwt_writetodevice>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b299      	uxth	r1, r3
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2202      	movs	r2, #2
 8000e0a:	f7ff fed3 	bl	8000bb4 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e00d      	b.n	8000e44 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	b2d9      	uxtb	r1, r3
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	460a      	mov	r2, r1
 8000e36:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	ddee      	ble.n	8000e28 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	b299      	uxth	r1, r3
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2204      	movs	r2, #4
 8000e58:	f7ff feac 	bl	8000bb4 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	461a      	mov	r2, r3
 8000e72:	2104      	movs	r1, #4
 8000e74:	202d      	movs	r0, #45	; 0x2d
 8000e76:	f7ff ffb2 	bl	8000dde <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	2106      	movs	r1, #6
 8000e7e:	202d      	movs	r0, #45	; 0x2d
 8000e80:	f7ff ff9a 	bl	8000db8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e84:	2200      	movs	r2, #0
 8000e86:	2106      	movs	r1, #6
 8000e88:	202d      	movs	r0, #45	; 0x2d
 8000e8a:	f7ff ff95 	bl	8000db8 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e8e:	210a      	movs	r1, #10
 8000e90:	202d      	movs	r0, #45	; 0x2d
 8000e92:	f7ff ff3a 	bl	8000d0a <dwt_read32bitoffsetreg>
 8000e96:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e98:	68fb      	ldr	r3, [r7, #12]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	202c      	movs	r0, #44	; 0x2c
 8000eac:	f7ff ff84 	bl	8000db8 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	202c      	movs	r0, #44	; 0x2c
 8000eb6:	f7ff ff7f 	bl	8000db8 <dwt_write8bitoffsetreg>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000ec6:	226d      	movs	r2, #109	; 0x6d
 8000ec8:	f640 0106 	movw	r1, #2054	; 0x806
 8000ecc:	202e      	movs	r0, #46	; 0x2e
 8000ece:	f7ff ff73 	bl	8000db8 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000ed8:	f240 6207 	movw	r2, #1543	; 0x607
 8000edc:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ee0:	202e      	movs	r0, #46	; 0x2e
 8000ee2:	f7ff ff7c 	bl	8000dde <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000ee6:	e006      	b.n	8000ef6 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000ee8:	f241 6207 	movw	r2, #5639	; 0x1607
 8000eec:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ef0:	202e      	movs	r0, #46	; 0x2e
 8000ef2:	f7ff ff74 	bl	8000dde <dwt_write16bitoffsetreg>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000f02:	200e      	movs	r0, #14
 8000f04:	f000 f80e 	bl	8000f24 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000f08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f0c:	2106      	movs	r1, #6
 8000f0e:	202d      	movs	r0, #45	; 0x2d
 8000f10:	f7ff ff65 	bl	8000dde <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 f9e1 	bl	80012dc <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f000 f802 	bl	8000f24 <_dwt_enableclocks>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2202      	movs	r2, #2
 8000f32:	2100      	movs	r1, #0
 8000f34:	2036      	movs	r0, #54	; 0x36
 8000f36:	f7ff fe94 	bl	8000c62 <dwt_readfromdevice>
    switch(clocks)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0e      	cmp	r3, #14
 8000f3e:	d876      	bhi.n	800102e <_dwt_enableclocks+0x10a>
 8000f40:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <_dwt_enableclocks+0x24>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000f95 	.word	0x08000f95
 8000f4c:	08000f85 	.word	0x08000f85
 8000f50:	08000fab 	.word	0x08000fab
 8000f54:	0800102f 	.word	0x0800102f
 8000f58:	0800102f 	.word	0x0800102f
 8000f5c:	0800102f 	.word	0x0800102f
 8000f60:	0800102f 	.word	0x0800102f
 8000f64:	08000fc1 	.word	0x08000fc1
 8000f68:	08000fe1 	.word	0x08000fe1
 8000f6c:	0800102f 	.word	0x0800102f
 8000f70:	0800102f 	.word	0x0800102f
 8000f74:	08000ff7 	.word	0x08000ff7
 8000f78:	08001003 	.word	0x08001003
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	08001025 	.word	0x08001025
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f84:	2300      	movs	r3, #0
 8000f86:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f92:	e04d      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	f023 0303 	bic.w	r3, r3, #3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fa8:	e042      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fbe:	e037      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fde:	e027      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000fe0:	7b3b      	ldrb	r3, [r7, #12]
 8000fe2:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ff4:	e01c      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001000:	e016      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	f023 0302 	bic.w	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800100c:	e010      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001016:	b25b      	sxtb	r3, r3
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	b25b      	sxtb	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001022:	e005      	b.n	8001030 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001024:	2301      	movs	r3, #1
 8001026:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001028:	2303      	movs	r3, #3
 800102a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800102c:	e000      	b.n	8001030 <_dwt_enableclocks+0x10c>
        default:
        break;
 800102e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2201      	movs	r2, #1
 8001036:	2100      	movs	r1, #0
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f7ff fdbb 	bl	8000bb4 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	3301      	adds	r3, #1
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	2036      	movs	r0, #54	; 0x36
 800104a:	f7ff fdb3 	bl	8000bb4 <dwt_writetodevice>

} // end _dwt_enableclocks()
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop

08001058 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff ff61 	bl	8000f24 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001062:	2200      	movs	r2, #0
 8001064:	2104      	movs	r1, #4
 8001066:	2036      	movs	r0, #54	; 0x36
 8001068:	f7ff feb9 	bl	8000dde <dwt_write16bitoffsetreg>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001082:	2300      	movs	r3, #0
 8001084:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <dwt_starttx+0x98>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2201      	movs	r2, #1
 800109a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d020      	beq.n	80010e8 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	f043 0306 	orr.w	r3, r3, #6
 80010ac:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	461a      	mov	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	200d      	movs	r0, #13
 80010b6:	f7ff fe7f 	bl	8000db8 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80010ba:	2103      	movs	r1, #3
 80010bc:	200f      	movs	r0, #15
 80010be:	f7ff fe4b 	bl	8000d58 <dwt_read16bitoffsetreg>
 80010c2:	4603      	mov	r3, r0
 80010c4:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80010c6:	893b      	ldrh	r3, [r7, #8]
 80010c8:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e012      	b.n	80010fc <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	2100      	movs	r1, #0
 80010da:	200d      	movs	r0, #13
 80010dc:	f7ff fe6c 	bl	8000db8 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e009      	b.n	80010fc <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	461a      	mov	r2, r3
 80010f4:	2100      	movs	r1, #0
 80010f6:	200d      	movs	r0, #13
 80010f8:	f7ff fe5e 	bl	8000db8 <dwt_write8bitoffsetreg>
    }

    return retval;
 80010fc:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001112:	2100      	movs	r1, #0
 8001114:	200e      	movs	r0, #14
 8001116:	f7ff fdf8 	bl	8000d0a <dwt_read32bitoffsetreg>
 800111a:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 800111c:	f000 f8c0 	bl	80012a0 <decamutexon>
 8001120:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	200e      	movs	r0, #14
 8001128:	f7ff fe75 	bl	8000e16 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	2100      	movs	r1, #0
 8001130:	200d      	movs	r0, #13
 8001132:	f7ff fe41 	bl	8000db8 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <dwt_forcetrxoff+0x58>)
 8001138:	2100      	movs	r1, #0
 800113a:	200f      	movs	r0, #15
 800113c:	f7ff fe6b 	bl	8000e16 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001140:	f000 f814 	bl	800116c <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	2100      	movs	r1, #0
 8001148:	200e      	movs	r0, #14
 800114a:	f7ff fe64 	bl	8000e16 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f000 f8b7 	bl	80012c2 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <dwt_forcetrxoff+0x5c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2427fff8 	.word	0x2427fff8
 8001168:	20000000 	.word	0x20000000

0800116c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001172:	2103      	movs	r1, #3
 8001174:	200f      	movs	r0, #15
 8001176:	f7ff fe0c 	bl	8000d92 <dwt_read8bitoffsetreg>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800117e:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001184:	4053      	eors	r3, r2
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	2b00      	cmp	r3, #0
 800118c:	d004      	beq.n	8001198 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800118e:	2201      	movs	r2, #1
 8001190:	2103      	movs	r1, #3
 8001192:	200d      	movs	r0, #13
 8001194:	f7ff fe10 	bl	8000db8 <dwt_write8bitoffsetreg>
    }
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 80011b2:	f7ff ffdb 	bl	800116c <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 80011b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ba:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011cc:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	200d      	movs	r0, #13
 80011d6:	f7ff fe02 	bl	8000dde <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01a      	beq.n	800121a <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80011e4:	2103      	movs	r1, #3
 80011e6:	200f      	movs	r0, #15
 80011e8:	f7ff fdd3 	bl	8000d92 <dwt_read8bitoffsetreg>
 80011ec:	4603      	mov	r3, r0
 80011ee:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00f      	beq.n	800121a <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80011fa:	f7ff ff87 	bl	800110c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120c:	2100      	movs	r1, #0
 800120e:	200d      	movs	r0, #13
 8001210:	f7ff fde5 	bl	8000dde <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
 8001218:	e000      	b.n	800121c <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 800121a:	2300      	movs	r3, #0
} // end dwt_rxenable()
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001228:	f7ff ff16 	bl	8001058 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	202c      	movs	r0, #44	; 0x2c
 8001232:	f7ff fdd4 	bl	8000dde <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001236:	2200      	movs	r2, #0
 8001238:	2106      	movs	r1, #6
 800123a:	202c      	movs	r0, #44	; 0x2c
 800123c:	f7ff fdbc 	bl	8000db8 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001240:	f7ff fe2f 	bl	8000ea2 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001244:	2200      	movs	r2, #0
 8001246:	2103      	movs	r1, #3
 8001248:	2036      	movs	r0, #54	; 0x36
 800124a:	f7ff fdb5 	bl	8000db8 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 f844 	bl	80012dc <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001254:	22f0      	movs	r2, #240	; 0xf0
 8001256:	2103      	movs	r1, #3
 8001258:	2036      	movs	r0, #54	; 0x36
 800125a:	f7ff fdad 	bl	8000db8 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800125e:	4b03      	ldr	r3, [pc, #12]	; (800126c <dwt_softreset+0x48>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	755a      	strb	r2, [r3, #21]
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	b25b      	sxtb	r3, r3
 8001284:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001288:	b25b      	sxtb	r3, r3
 800128a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	461a      	mov	r2, r3
 8001290:	210e      	movs	r1, #14
 8001292:	202b      	movs	r0, #43	; 0x2b
 8001294:	f7ff fd90 	bl	8000db8 <dwt_write8bitoffsetreg>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80012a6:	f000 f991 	bl	80015cc <port_GetEXT_IRQStatus>
 80012aa:	4603      	mov	r3, r0
 80012ac:	607b      	str	r3, [r7, #4]

	if(s) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80012b4:	f000 f97c 	bl	80015b0 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80012d0:	f000 f975 	bl	80015be <port_EnableEXT_IRQ>
	}
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f8c5 	bl	8001474 <Sleep>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80012f4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80012f8:	4683      	mov	fp, r0
 80012fa:	468a      	mov	sl, r1
 80012fc:	4690      	mov	r8, r2
 80012fe:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001300:	f7ff ffce 	bl	80012a0 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001304:	4d13      	ldr	r5, [pc, #76]	; (8001354 <writetospi+0x60>)
    stat = decamutexon() ;
 8001306:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001308:	4628      	mov	r0, r5
 800130a:	f004 fcab 	bl	8005c64 <HAL_SPI_GetState>
 800130e:	2801      	cmp	r0, #1
 8001310:	4604      	mov	r4, r0
 8001312:	d1f9      	bne.n	8001308 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <writetospi+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	f001 fc2d 	bl	8002b78 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800131e:	465a      	mov	r2, fp
 8001320:	4651      	mov	r1, sl
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <writetospi+0x60>)
 8001328:	f004 fa55 	bl	80057d6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800132c:	f04f 33ff 	mov.w	r3, #4294967295
 8001330:	4649      	mov	r1, r9
 8001332:	fa1f f288 	uxth.w	r2, r8
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <writetospi+0x60>)
 8001338:	f004 fa4d 	bl	80057d6 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800133c:	4622      	mov	r2, r4
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <writetospi+0x64>)
 8001342:	f001 fc19 	bl	8002b78 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001346:	4630      	mov	r0, r6
 8001348:	f7ff ffbb 	bl	80012c2 <decamutexoff>

    return 0;
} // end writetospi()
 800134c:	2000      	movs	r0, #0
 800134e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001352:	bf00      	nop
 8001354:	200005ec 	.word	0x200005ec
 8001358:	40020400 	.word	0x40020400

0800135c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800135c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001360:	4681      	mov	r9, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4690      	mov	r8, r2
 8001366:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001368:	f7ff ff9a 	bl	80012a0 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800136c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80013ec <readfromspi+0x90>
    stat = decamutexon() ;
 8001370:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001372:	4650      	mov	r0, sl
 8001374:	f004 fc76 	bl	8005c64 <HAL_SPI_GetState>
 8001378:	2801      	cmp	r0, #1
 800137a:	d1fa      	bne.n	8001372 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <readfromspi+0x8c>)
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	f001 fbf9 	bl	8002b78 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001386:	f1b9 0f00 	cmp.w	r9, #0
 800138a:	d00c      	beq.n	80013a6 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800138c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80013ec <readfromspi+0x90>
 8001390:	44a1      	add	r9, r4
 8001392:	2201      	movs	r2, #1
 8001394:	4621      	mov	r1, r4
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 800139a:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800139c:	4650      	mov	r0, sl
 800139e:	f004 fa1a 	bl	80057d6 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80013a2:	454c      	cmp	r4, r9
 80013a4:	d1f5      	bne.n	8001392 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80013a6:	f1b8 0f00 	cmp.w	r8, #0
 80013aa:	d012      	beq.n	80013d2 <readfromspi+0x76>
 80013ac:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80013ec <readfromspi+0x90>
 80013b0:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80013b4:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80013b6:	f8dc 2000 	ldr.w	r2, [ip]
 80013ba:	6891      	ldr	r1, [r2, #8]
 80013bc:	0789      	lsls	r1, r1, #30
 80013be:	d5fc      	bpl.n	80013ba <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80013c0:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80013c2:	6891      	ldr	r1, [r2, #8]
 80013c4:	07cb      	lsls	r3, r1, #31
 80013c6:	d5fc      	bpl.n	80013c2 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80013c8:	68d3      	ldr	r3, [r2, #12]
 80013ca:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80013ce:	4285      	cmp	r5, r0
 80013d0:	d1f1      	bne.n	80013b6 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80013d2:	2201      	movs	r2, #1
 80013d4:	2140      	movs	r1, #64	; 0x40
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <readfromspi+0x8c>)
 80013d8:	f001 fbce 	bl	8002b78 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80013dc:	4630      	mov	r0, r6
 80013de:	f7ff ff70 	bl	80012c2 <decamutexoff>

    return 0;
} // end readfromspi()
 80013e2:	2000      	movs	r0, #0
 80013e4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80013e8:	40020400 	.word	0x40020400
 80013ec:	200005ec 	.word	0x200005ec

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db12      	blt.n	8001464 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	490a      	ldr	r1, [pc, #40]	; (8001470 <__NVIC_DisableIRQ+0x44>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	3320      	adds	r3, #32
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001458:	f3bf 8f4f 	dsb	sy
}
 800145c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800145e:	f3bf 8f6f 	isb	sy
}
 8001462:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100

08001474 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 f85f 	bl	8002540 <HAL_Delay>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <EXTI_GetITEnStatus+0x38>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80014ce:	2301      	movs	r3, #1
 80014d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014d2:	2311      	movs	r3, #17
 80014d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	480a      	ldr	r0, [pc, #40]	; (8001508 <reset_DW1000+0x40>)
 80014e0:	f001 f9c6 	bl	8002870 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2101      	movs	r1, #1
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <reset_DW1000+0x40>)
 80014ea:	f001 fb45 	bl	8002b78 <HAL_GPIO_WritePin>

    Sleep(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff ffc0 	bl	8001474 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f809 	bl	800150c <setup_DW1000RSTnIRQ>



    Sleep(2);
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff ffba 	bl	8001474 <Sleep>
}
 8001500:	bf00      	nop
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020000 	.word	0x40020000

0800150c <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800151a:	2301      	movs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001522:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <setup_DW1000RSTnIRQ+0x70>)
 8001530:	f001 f99e 	bl	8002870 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001534:	2006      	movs	r0, #6
 8001536:	f001 f942 	bl	80027be <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	2006      	movs	r0, #6
 8001540:	f001 f921 	bl	8002786 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001544:	e015      	b.n	8001572 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001546:	2006      	movs	r0, #6
 8001548:	f001 f947 	bl	80027da <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800154c:	2301      	movs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001550:	2311      	movs	r3, #17
 8001552:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <setup_DW1000RSTnIRQ+0x70>)
 8001564:	f001 f984 	bl	8002870 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2101      	movs	r1, #1
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <setup_DW1000RSTnIRQ+0x70>)
 800156e:	f001 fb03 	bl	8002b78 <HAL_GPIO_WritePin>
}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020000 	.word	0x40020000

08001580 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <port_set_dw1000_slowrate+0x14>)
 8001586:	2220      	movs	r2, #32
 8001588:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800158a:	4802      	ldr	r0, [pc, #8]	; (8001594 <port_set_dw1000_slowrate+0x14>)
 800158c:	f004 f89a 	bl	80056c4 <HAL_SPI_Init>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200005ec 	.word	0x200005ec

08001598 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <port_set_dw1000_fastrate+0x14>)
 800159e:	2208      	movs	r2, #8
 80015a0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <port_set_dw1000_fastrate+0x14>)
 80015a4:	f004 f88e 	bl	80056c4 <HAL_SPI_Init>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200005ec 	.word	0x200005ec

080015b0 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80015b4:	2017      	movs	r0, #23
 80015b6:	f7ff ff39 	bl	800142c <__NVIC_DisableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}

080015be <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80015c2:	2017      	movs	r0, #23
 80015c4:	f7ff ff14 	bl	80013f0 <__NVIC_EnableIRQ>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80015d0:	2017      	movs	r0, #23
 80015d2:	f7ff ff5b 	bl	800148c <EXTI_GetITEnStatus>
 80015d6:	4603      	mov	r3, r0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}

080015dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015e2:	f000 fa29 	bl	8001a38 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015ea:	2201      	movs	r2, #1
 80015ec:	2178      	movs	r1, #120	; 0x78
 80015ee:	485b      	ldr	r0, [pc, #364]	; (800175c <SSD1306_Init+0x180>)
 80015f0:	f001 fd1e 	bl	8003030 <HAL_I2C_IsDeviceReady>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e0a9      	b.n	8001752 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80015fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001602:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001604:	e002      	b.n	800160c <SSD1306_Init+0x30>
		p--;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3b01      	subs	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001612:	22ae      	movs	r2, #174	; 0xae
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 fa8a 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800161c:	2220      	movs	r2, #32
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 fa85 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001626:	2210      	movs	r2, #16
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 fa80 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001630:	22b0      	movs	r2, #176	; 0xb0
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	; 0x78
 8001636:	f000 fa7b 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800163a:	22c8      	movs	r2, #200	; 0xc8
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	; 0x78
 8001640:	f000 fa76 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	; 0x78
 800164a:	f000 fa71 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800164e:	2210      	movs	r2, #16
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	; 0x78
 8001654:	f000 fa6c 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001658:	2240      	movs	r2, #64	; 0x40
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f000 fa67 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001662:	2281      	movs	r2, #129	; 0x81
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	; 0x78
 8001668:	f000 fa62 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	; 0x78
 8001672:	f000 fa5d 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001676:	22a1      	movs	r2, #161	; 0xa1
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f000 fa58 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001680:	22a6      	movs	r2, #166	; 0xa6
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	; 0x78
 8001686:	f000 fa53 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800168a:	22a8      	movs	r2, #168	; 0xa8
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f000 fa4e 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001694:	223f      	movs	r2, #63	; 0x3f
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	; 0x78
 800169a:	f000 fa49 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800169e:	22a4      	movs	r2, #164	; 0xa4
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	; 0x78
 80016a4:	f000 fa44 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016a8:	22d3      	movs	r2, #211	; 0xd3
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	; 0x78
 80016ae:	f000 fa3f 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	; 0x78
 80016b8:	f000 fa3a 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016bc:	22d5      	movs	r2, #213	; 0xd5
 80016be:	2100      	movs	r1, #0
 80016c0:	2078      	movs	r0, #120	; 0x78
 80016c2:	f000 fa35 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016c6:	22f0      	movs	r2, #240	; 0xf0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2078      	movs	r0, #120	; 0x78
 80016cc:	f000 fa30 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016d0:	22d9      	movs	r2, #217	; 0xd9
 80016d2:	2100      	movs	r1, #0
 80016d4:	2078      	movs	r0, #120	; 0x78
 80016d6:	f000 fa2b 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016da:	2222      	movs	r2, #34	; 0x22
 80016dc:	2100      	movs	r1, #0
 80016de:	2078      	movs	r0, #120	; 0x78
 80016e0:	f000 fa26 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016e4:	22da      	movs	r2, #218	; 0xda
 80016e6:	2100      	movs	r1, #0
 80016e8:	2078      	movs	r0, #120	; 0x78
 80016ea:	f000 fa21 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016ee:	2212      	movs	r2, #18
 80016f0:	2100      	movs	r1, #0
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 fa1c 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016f8:	22db      	movs	r2, #219	; 0xdb
 80016fa:	2100      	movs	r1, #0
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f000 fa17 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001702:	2220      	movs	r2, #32
 8001704:	2100      	movs	r1, #0
 8001706:	2078      	movs	r0, #120	; 0x78
 8001708:	f000 fa12 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800170c:	228d      	movs	r2, #141	; 0x8d
 800170e:	2100      	movs	r1, #0
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f000 fa0d 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001716:	2214      	movs	r2, #20
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 fa08 	bl	8001b30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001720:	22af      	movs	r2, #175	; 0xaf
 8001722:	2100      	movs	r1, #0
 8001724:	2078      	movs	r0, #120	; 0x78
 8001726:	f000 fa03 	bl	8001b30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800172a:	222e      	movs	r2, #46	; 0x2e
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 f9fe 	bl	8001b30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001734:	2000      	movs	r0, #0
 8001736:	f000 f843 	bl	80017c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800173a:	f000 f813 	bl	8001764 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <SSD1306_Init+0x184>)
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SSD1306_Init+0x184>)
 8001746:	2200      	movs	r2, #0
 8001748:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SSD1306_Init+0x184>)
 800174c:	2201      	movs	r2, #1
 800174e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000510 	.word	0x20000510
 8001760:	20000508 	.word	0x20000508

08001764 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800176a:	2300      	movs	r3, #0
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	e01d      	b.n	80017ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	3b50      	subs	r3, #80	; 0x50
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 f9d8 	bl	8001b30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 f9d3 	bl	8001b30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800178a:	2210      	movs	r2, #16
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 f9ce 	bl	8001b30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	01db      	lsls	r3, r3, #7
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <SSD1306_UpdateScreen+0x58>)
 800179a:	441a      	add	r2, r3
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	2078      	movs	r0, #120	; 0x78
 80017a2:	f000 f95f 	bl	8001a64 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b07      	cmp	r3, #7
 80017b0:	d9de      	bls.n	8001770 <SSD1306_UpdateScreen+0xc>
	}
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000108 	.word	0x20000108

080017c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <SSD1306_Fill+0x14>
 80017d0:	2300      	movs	r3, #0
 80017d2:	e000      	b.n	80017d6 <SSD1306_Fill+0x16>
 80017d4:	23ff      	movs	r3, #255	; 0xff
 80017d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017da:	4619      	mov	r1, r3
 80017dc:	4803      	ldr	r0, [pc, #12]	; (80017ec <SSD1306_Fill+0x2c>)
 80017de:	f004 ff19 	bl	8006614 <memset>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000108 	.word	0x20000108

080017f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	460b      	mov	r3, r1
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	70fb      	strb	r3, [r7, #3]
	if (
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b7f      	cmp	r3, #127	; 0x7f
 8001806:	d848      	bhi.n	800189a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	2b3f      	cmp	r3, #63	; 0x3f
 800180c:	d845      	bhi.n	800189a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <SSD1306_DrawPixel+0xb8>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d11a      	bne.n	8001860 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	b298      	uxth	r0, r3
 8001832:	4603      	mov	r3, r0
 8001834:	01db      	lsls	r3, r3, #7
 8001836:	4413      	add	r3, r2
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <SSD1306_DrawPixel+0xbc>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	b25a      	sxtb	r2, r3
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	b25b      	sxtb	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b259      	sxtb	r1, r3
 8001850:	88fa      	ldrh	r2, [r7, #6]
 8001852:	4603      	mov	r3, r0
 8001854:	01db      	lsls	r3, r3, #7
 8001856:	4413      	add	r3, r2
 8001858:	b2c9      	uxtb	r1, r1
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <SSD1306_DrawPixel+0xbc>)
 800185c:	54d1      	strb	r1, [r2, r3]
 800185e:	e01d      	b.n	800189c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001860:	88fa      	ldrh	r2, [r7, #6]
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	b298      	uxth	r0, r3
 8001868:	4603      	mov	r3, r0
 800186a:	01db      	lsls	r3, r3, #7
 800186c:	4413      	add	r3, r2
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <SSD1306_DrawPixel+0xbc>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	b25a      	sxtb	r2, r3
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	b25b      	sxtb	r3, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	b25b      	sxtb	r3, r3
 8001886:	4013      	ands	r3, r2
 8001888:	b259      	sxtb	r1, r3
 800188a:	88fa      	ldrh	r2, [r7, #6]
 800188c:	4603      	mov	r3, r0
 800188e:	01db      	lsls	r3, r3, #7
 8001890:	4413      	add	r3, r2
 8001892:	b2c9      	uxtb	r1, r1
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SSD1306_DrawPixel+0xbc>)
 8001896:	54d1      	strb	r1, [r2, r3]
 8001898:	e000      	b.n	800189c <SSD1306_DrawPixel+0xac>
		return;
 800189a:	bf00      	nop
	}
}
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000508 	.word	0x20000508
 80018ac:	20000108 	.word	0x20000108

080018b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4613      	mov	r3, r2
 80018be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018c0:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <SSD1306_GotoXY+0x28>)
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <SSD1306_GotoXY+0x28>)
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	8053      	strh	r3, [r2, #2]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	20000508 	.word	0x20000508

080018dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <SSD1306_Putc+0xfc>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
	if (
 80018f8:	2b7f      	cmp	r3, #127	; 0x7f
 80018fa:	dc07      	bgt.n	800190c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <SSD1306_Putc+0xfc>)
 80018fe:	885b      	ldrh	r3, [r3, #2]
 8001900:	461a      	mov	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001908:	2b3f      	cmp	r3, #63	; 0x3f
 800190a:	dd01      	ble.n	8001910 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800190c:	2300      	movs	r3, #0
 800190e:	e05e      	b.n	80019ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e04b      	b.n	80019ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	3b20      	subs	r3, #32
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	7849      	ldrb	r1, [r1, #1]
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4619      	mov	r1, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	440b      	add	r3, r1
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e030      	b.n	800199c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <SSD1306_Putc+0xfc>)
 800194c:	881a      	ldrh	r2, [r3, #0]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b298      	uxth	r0, r3
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <SSD1306_Putc+0xfc>)
 8001958:	885a      	ldrh	r2, [r3, #2]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	79ba      	ldrb	r2, [r7, #6]
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff ff43 	bl	80017f0 <SSD1306_DrawPixel>
 800196a:	e014      	b.n	8001996 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <SSD1306_Putc+0xfc>)
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b298      	uxth	r0, r3
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <SSD1306_Putc+0xfc>)
 800197a:	885a      	ldrh	r2, [r3, #2]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b299      	uxth	r1, r3
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	f7ff ff2d 	bl	80017f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	3301      	adds	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d3c8      	bcc.n	800193a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	785b      	ldrb	r3, [r3, #1]
 80019b2:	461a      	mov	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d3ad      	bcc.n	8001916 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <SSD1306_Putc+0xfc>)
 80019bc:	881a      	ldrh	r2, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <SSD1306_Putc+0xfc>)
 80019ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000508 	.word	0x20000508

080019dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	4613      	mov	r3, r2
 80019e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019ea:	e012      	b.n	8001a12 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff71 	bl	80018dc <SSD1306_Putc>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d002      	beq.n	8001a0c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	e008      	b.n	8001a1e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e8      	bne.n	80019ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fec8 	bl	80017c0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001a30:	f7ff fe98 	bl	8001764 <SSD1306_UpdateScreen>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <ssd1306_I2C_Init+0x28>)
 8001a40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a42:	e002      	b.n	8001a4a <ssd1306_I2C_Init+0x12>
		p--;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f9      	bne.n	8001a44 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	0003d090 	.word	0x0003d090

08001a64 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b0c7      	sub	sp, #284	; 0x11c
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001a72:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001a76:	600a      	str	r2, [r1, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a7e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a82:	4622      	mov	r2, r4
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a8a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001a8e:	4602      	mov	r2, r0
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aa6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001aaa:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ab8:	e015      	b.n	8001ae6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001aba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001abe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ac2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	441a      	add	r2, r3
 8001aca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ace:	3301      	adds	r3, #1
 8001ad0:	7811      	ldrb	r1, [r2, #0]
 8001ad2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ad6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001ada:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001adc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ae6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001af0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d8df      	bhi.n	8001aba <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001afe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b299      	uxth	r1, r3
 8001b06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	200a      	movs	r0, #10
 8001b1a:	9000      	str	r0, [sp, #0]
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <ssd1306_I2C_WriteMulti+0xc8>)
 8001b1e:	f001 f989 	bl	8002e34 <HAL_I2C_Master_Transmit>
}
 8001b22:	bf00      	nop
 8001b24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	20000510 	.word	0x20000510

08001b30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	71bb      	strb	r3, [r7, #6]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b46:	797b      	ldrb	r3, [r7, #5]
 8001b48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	230a      	movs	r3, #10
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2302      	movs	r3, #2
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <ssd1306_I2C_Write+0x38>)
 8001b5a:	f001 f96b 	bl	8002e34 <HAL_I2C_Master_Transmit>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000510 	.word	0x20000510

08001b6c <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1d39      	adds	r1, r7, #4
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff2b 	bl	80019dc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001b86:	f7ff fded 	bl	8001764 <SSD1306_UpdateScreen>
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <MX_GPIO_Init+0xdc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	4815      	ldr	r0, [pc, #84]	; (8001c74 <MX_GPIO_Init+0xe0>)
 8001c20:	f000 ffaa 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2140      	movs	r1, #64	; 0x40
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_GPIO_Init+0xe4>)
 8001c2a:	f000 ffa5 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <MX_GPIO_Init+0xe0>)
 8001c46:	f000 fe13 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001c4a:	2340      	movs	r3, #64	; 0x40
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_GPIO_Init+0xe4>)
 8001c62:	f000 fe05 	bl	8002870 <HAL_GPIO_Init>

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	40020400 	.word	0x40020400

08001c7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <MX_I2C1_Init+0x54>)
 8001c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001c88:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <MX_I2C1_Init+0x58>)
 8001c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_I2C1_Init+0x50>)
 8001cba:	f000 ff77 	bl	8002bac <HAL_I2C_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cc4:	f000 f8d4 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000510 	.word	0x20000510
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	00061a80 	.word	0x00061a80

08001cd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_I2C_MspInit+0x94>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d134      	bne.n	8001d64 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_I2C_MspInit+0x98>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_I2C_MspInit+0x98>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_I2C_MspInit+0x98>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4810      	ldr	r0, [pc, #64]	; (8001d74 <HAL_I2C_MspInit+0x9c>)
 8001d34:	f000 fd9c 	bl	8002870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_I2C_MspInit+0x98>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_I2C_MspInit+0x98>)
 8001d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_I2C_MspInit+0x98>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	201f      	movs	r0, #31
 8001d5a:	f000 fd14 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d5e:	201f      	movs	r0, #31
 8001d60:	f000 fd2d 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020400 	.word	0x40020400

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7c:	f000 fb6e 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d80:	f000 f80e 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d84:	f7ff ff06 	bl	8001b94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d88:	f000 f998 	bl	80020bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001d8c:	f000 faca 	bl	8002324 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d90:	f7ff ff74 	bl	8001c7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  setup_DW1000RSTnIRQ(0);
  SSD1306_Init();
 8001d94:	f7ff fc22 	bl	80015dc <SSD1306_Init>
      dw_main();
 8001d98:	f000 f870 	bl	8001e7c <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <main+0x24>
	...

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	; 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fc30 	bl	8006614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <SystemClock_Config+0xc8>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <SystemClock_Config+0xcc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <SystemClock_Config+0xcc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e10:	230c      	movs	r3, #12
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e14:	2360      	movs	r3, #96	; 0x60
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 0320 	add.w	r3, r7, #32
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fff5 	bl	8004e14 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e30:	f000 f81e 	bl	8001e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e34:	230f      	movs	r3, #15
 8001e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	2103      	movs	r1, #3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fa57 	bl	8005304 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e5c:	f000 f808 	bl	8001e70 <Error_Handler>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3750      	adds	r7, #80	; 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
	int le6n = strlen(buff);
 8001e82:	487d      	ldr	r0, [pc, #500]	; (8002078 <dw_main+0x1fc>)
 8001e84:	f7fe f9ac 	bl	80001e0 <strlen>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	603b      	str	r3, [r7, #0]
    /* Display application name on LCD. */
	HAL_UART_Transmit(&huart2,buff, strlen(buff), 100);
 8001e8c:	487a      	ldr	r0, [pc, #488]	; (8002078 <dw_main+0x1fc>)
 8001e8e:	f7fe f9a7 	bl	80001e0 <strlen>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	2364      	movs	r3, #100	; 0x64
 8001e98:	4977      	ldr	r1, [pc, #476]	; (8002078 <dw_main+0x1fc>)
 8001e9a:	4878      	ldr	r0, [pc, #480]	; (800207c <dw_main+0x200>)
 8001e9c:	f004 f81b 	bl	8005ed6 <HAL_UART_Transmit>
	ssd1306_write(buff, Font_7x10);
 8001ea0:	4875      	ldr	r0, [pc, #468]	; (8002078 <dw_main+0x1fc>)
 8001ea2:	4b77      	ldr	r3, [pc, #476]	; (8002080 <dw_main+0x204>)
 8001ea4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ea8:	f7ff fe60 	bl	8001b6c <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001eac:	f7ff fb0c 	bl	80014c8 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001eb0:	f7ff fb66 	bl	8001580 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7fe fb6d 	bl	8000594 <dwt_initialise>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d110      	bne.n	8001ee4 <dw_main+0x68>
    {
    	HAL_UART_Transmit(&huart2,"Init failed!!!\n", 16, 100);
 8001ec2:	2364      	movs	r3, #100	; 0x64
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	496f      	ldr	r1, [pc, #444]	; (8002084 <dw_main+0x208>)
 8001ec8:	486c      	ldr	r0, [pc, #432]	; (800207c <dw_main+0x200>)
 8001eca:	f004 f804 	bl	8005ed6 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10);
 8001ece:	210a      	movs	r1, #10
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fced 	bl	80018b0 <SSD1306_GotoXY>
    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001ed6:	486c      	ldr	r0, [pc, #432]	; (8002088 <dw_main+0x20c>)
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <dw_main+0x204>)
 8001eda:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ede:	f7ff fe45 	bl	8001b6c <ssd1306_write>

        while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <dw_main+0x66>
        { };
    }
    port_set_dw1000_fastrate();
 8001ee4:	f7ff fb58 	bl	8001598 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 8001ee8:	4868      	ldr	r0, [pc, #416]	; (800208c <dw_main+0x210>)
 8001eea:	f7fe fca9 	bl	8000840 <dwt_configure>

    /* Loop forever sending and receiving frames periodically. */
    while (1)
    {
    	SSD1306_Clear ();
 8001eee:	f7ff fd9a 	bl	8001a26 <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fcdb 	bl	80018b0 <SSD1306_GotoXY>
 8001efa:	4865      	ldr	r0, [pc, #404]	; (8002090 <dw_main+0x214>)
 8001efc:	4b60      	ldr	r3, [pc, #384]	; (8002080 <dw_main+0x204>)
 8001efe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f02:	f7ff fe33 	bl	8001b6c <ssd1306_write>
    	SSD1306_GotoXY(0, 30);  ssd1306_write("Transmitted :", Font_7x10);
 8001f06:	211e      	movs	r1, #30
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fcd1 	bl	80018b0 <SSD1306_GotoXY>
 8001f0e:	4861      	ldr	r0, [pc, #388]	; (8002094 <dw_main+0x218>)
 8001f10:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <dw_main+0x204>)
 8001f12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f16:	f7ff fe29 	bl	8001b6c <ssd1306_write>
        /* Activate reception immediately. See NOTE 4 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7ff f940 	bl	80011a0 <dwt_rxenable>

        /* Poll until a frame is properly received or an error occurs. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the events we are looking at are in the lower bytes of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001f20:	bf00      	nop
 8001f22:	2100      	movs	r1, #0
 8001f24:	200f      	movs	r0, #15
 8001f26:	f7fe fef0 	bl	8000d0a <dwt_read32bitoffsetreg>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <dw_main+0x21c>)
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <dw_main+0x21c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <dw_main+0x220>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f2      	beq.n	8001f22 <dw_main+0xa6>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <dw_main+0x21c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8091 	beq.w	800206c <dw_main+0x1f0>
        {
            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2010      	movs	r0, #16
 8001f4e:	f7fe fedc 	bl	8000d0a <dwt_read32bitoffsetreg>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <dw_main+0x224>)
 8001f5e:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8001f60:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <dw_main+0x224>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	2b7f      	cmp	r3, #127	; 0x7f
 8001f66:	d806      	bhi.n	8001f76 <dw_main+0xfa>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <dw_main+0x224>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	484c      	ldr	r0, [pc, #304]	; (80020a4 <dw_main+0x228>)
 8001f72:	f7fe fe0d 	bl	8000b90 <dwt_readrxdata>
            }
            sprintf(buff, "Received : %s\n", rx_buffer);
 8001f76:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <dw_main+0x228>)
 8001f78:	494b      	ldr	r1, [pc, #300]	; (80020a8 <dw_main+0x22c>)
 8001f7a:	483f      	ldr	r0, [pc, #252]	; (8002078 <dw_main+0x1fc>)
 8001f7c:	f004 fb52 	bl	8006624 <siprintf>
            HAL_UART_Transmit(&huart2,buff, sizeof(buff), 100);
 8001f80:	2364      	movs	r3, #100	; 0x64
 8001f82:	2211      	movs	r2, #17
 8001f84:	493c      	ldr	r1, [pc, #240]	; (8002078 <dw_main+0x1fc>)
 8001f86:	483d      	ldr	r0, [pc, #244]	; (800207c <dw_main+0x200>)
 8001f88:	f003 ffa5 	bl	8005ed6 <HAL_UART_Transmit>


            SSD1306_GotoXY(0, 10); ssd1306_write(rx_buffer, Font_7x10);
 8001f8c:	210a      	movs	r1, #10
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fc8e 	bl	80018b0 <SSD1306_GotoXY>
 8001f94:	4843      	ldr	r0, [pc, #268]	; (80020a4 <dw_main+0x228>)
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <dw_main+0x204>)
 8001f98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f9c:	f7ff fde6 	bl	8001b6c <ssd1306_write>

            /* TESTING BREAKPOINT LOCATION #1 */

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001fa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f7fe ff35 	bl	8000e16 <dwt_write32bitoffsetreg>

            /* Validate the frame is the one expected as sent by "TX then wait for a response" example. */
            if ((frame_len == 14) && (rx_buffer[0] == 0xC5) && (rx_buffer[10] == 0x43) && (rx_buffer[11] == 0x2))
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <dw_main+0x224>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	2b0e      	cmp	r3, #14
 8001fb2:	d19c      	bne.n	8001eee <dw_main+0x72>
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <dw_main+0x228>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2bc5      	cmp	r3, #197	; 0xc5
 8001fba:	d198      	bne.n	8001eee <dw_main+0x72>
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <dw_main+0x228>)
 8001fbe:	7a9b      	ldrb	r3, [r3, #10]
 8001fc0:	2b43      	cmp	r3, #67	; 0x43
 8001fc2:	d194      	bne.n	8001eee <dw_main+0x72>
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <dw_main+0x228>)
 8001fc6:	7adb      	ldrb	r3, [r3, #11]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d190      	bne.n	8001eee <dw_main+0x72>
            {
                int i;

                /* Copy source address of blink in response destination address. */
                for (i = 0; i < 8; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	e00a      	b.n	8001fe8 <dw_main+0x16c>
                {
                    tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1c9a      	adds	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3305      	adds	r3, #5
 8001fda:	4932      	ldr	r1, [pc, #200]	; (80020a4 <dw_main+0x228>)
 8001fdc:	5c89      	ldrb	r1, [r1, r2]
 8001fde:	4a33      	ldr	r2, [pc, #204]	; (80020ac <dw_main+0x230>)
 8001fe0:	54d1      	strb	r1, [r2, r3]
                for (i = 0; i < 8; i++)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	ddf1      	ble.n	8001fd2 <dw_main+0x156>
                }

                /* Write response frame data to DW1000 and prepare transmission. See NOTE 6 below.*/
                dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001fee:	2200      	movs	r2, #0
 8001ff0:	492e      	ldr	r1, [pc, #184]	; (80020ac <dw_main+0x230>)
 8001ff2:	2015      	movs	r0, #21
 8001ff4:	f7fe fd8e 	bl	8000b14 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2015      	movs	r0, #21
 8001ffe:	f7fe fda7 	bl	8000b50 <dwt_writetxfctrl>

                /* Send the response. */
                dwt_starttx(DWT_START_TX_IMMEDIATE);
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff f834 	bl	8001070 <dwt_starttx>
                HAL_UART_Transmit(&huart2,"Transmitted : ", 14, 100);
 8002008:	2364      	movs	r3, #100	; 0x64
 800200a:	220e      	movs	r2, #14
 800200c:	4928      	ldr	r1, [pc, #160]	; (80020b0 <dw_main+0x234>)
 800200e:	481b      	ldr	r0, [pc, #108]	; (800207c <dw_main+0x200>)
 8002010:	f003 ff61 	bl	8005ed6 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,tx_msg, sizeof(tx_msg), 100);
 8002014:	2364      	movs	r3, #100	; 0x64
 8002016:	2215      	movs	r2, #21
 8002018:	4924      	ldr	r1, [pc, #144]	; (80020ac <dw_main+0x230>)
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <dw_main+0x200>)
 800201c:	f003 ff5b 	bl	8005ed6 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,"\n", 1, 100);
 8002020:	2364      	movs	r3, #100	; 0x64
 8002022:	2201      	movs	r2, #1
 8002024:	4923      	ldr	r1, [pc, #140]	; (80020b4 <dw_main+0x238>)
 8002026:	4815      	ldr	r0, [pc, #84]	; (800207c <dw_main+0x200>)
 8002028:	f003 ff55 	bl	8005ed6 <HAL_UART_Transmit>

                SSD1306_GotoXY(0, 40); ssd1306_write(tx_msg, Font_7x10);
 800202c:	2128      	movs	r1, #40	; 0x28
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fc3e 	bl	80018b0 <SSD1306_GotoXY>
 8002034:	481d      	ldr	r0, [pc, #116]	; (80020ac <dw_main+0x230>)
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <dw_main+0x204>)
 8002038:	e893 0006 	ldmia.w	r3, {r1, r2}
 800203c:	f7ff fd96 	bl	8001b6c <ssd1306_write>
                /* Poll DW1000 until TX frame sent event set. */
                while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8002040:	bf00      	nop
 8002042:	2100      	movs	r1, #0
 8002044:	200f      	movs	r0, #15
 8002046:	f7fe fe60 	bl	8000d0a <dwt_read32bitoffsetreg>
 800204a:	4603      	mov	r3, r0
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f6      	beq.n	8002042 <dw_main+0x1c6>
                { };

                /* Clear TX frame sent event. */
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	2100      	movs	r1, #0
 8002058:	200f      	movs	r0, #15
 800205a:	f7fe fedc 	bl	8000e16 <dwt_write32bitoffsetreg>

                /* Increment the data frame sequence number (modulo 256). */
                tx_msg[DATA_FRAME_SN_IDX]++;
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <dw_main+0x230>)
 8002060:	789b      	ldrb	r3, [r3, #2]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <dw_main+0x230>)
 8002068:	709a      	strb	r2, [r3, #2]
 800206a:	e740      	b.n	8001eee <dw_main+0x72>
            }
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <dw_main+0x23c>)
 800206e:	2100      	movs	r1, #0
 8002070:	200f      	movs	r0, #15
 8002072:	f7fe fed0 	bl	8000e16 <dwt_write32bitoffsetreg>
    	SSD1306_Clear ();
 8002076:	e73a      	b.n	8001eee <dw_main+0x72>
 8002078:	2000000c 	.word	0x2000000c
 800207c:	20000648 	.word	0x20000648
 8002080:	20000004 	.word	0x20000004
 8002084:	08006f18 	.word	0x08006f18
 8002088:	08006f28 	.word	0x08006f28
 800208c:	20000020 	.word	0x20000020
 8002090:	08006f38 	.word	0x08006f38
 8002094:	08006f44 	.word	0x08006f44
 8002098:	200005e4 	.word	0x200005e4
 800209c:	2405d000 	.word	0x2405d000
 80020a0:	200005e8 	.word	0x200005e8
 80020a4:	20000564 	.word	0x20000564
 80020a8:	08006f54 	.word	0x08006f54
 80020ac:	2000002c 	.word	0x2000002c
 80020b0:	08006f64 	.word	0x08006f64
 80020b4:	08006f74 	.word	0x08006f74
 80020b8:	24059000 	.word	0x24059000

080020bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_SPI1_Init+0x64>)
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <MX_SPI1_Init+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_SPI1_Init+0x64>)
 80020c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_SPI1_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_SPI1_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_SPI1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_SPI1_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_SPI1_Init+0x64>)
 80020e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_SPI1_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <MX_SPI1_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_SPI1_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <MX_SPI1_Init+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_SPI1_Init+0x64>)
 8002108:	220a      	movs	r2, #10
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_SPI1_Init+0x64>)
 800210e:	f003 fad9 	bl	80056c4 <HAL_SPI_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002118:	f7ff feaa 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200005ec 	.word	0x200005ec
 8002124:	40013000 	.word	0x40013000

08002128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_SPI_MspInit+0x94>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d133      	bne.n	80021b2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_SPI_MspInit+0x98>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_SPI_MspInit+0x98>)
 8002154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_SPI_MspInit+0x98>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_SPI_MspInit+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_SPI_MspInit+0x98>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_SPI_MspInit+0x98>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002182:	23e0      	movs	r3, #224	; 0xe0
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002192:	2305      	movs	r3, #5
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4809      	ldr	r0, [pc, #36]	; (80021c4 <HAL_SPI_MspInit+0x9c>)
 800219e:	f000 fb67 	bl	8002870 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2023      	movs	r0, #35	; 0x23
 80021a8:	f000 faed 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80021ac:	2023      	movs	r0, #35	; 0x23
 80021ae:	f000 fb06 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40013000 	.word	0x40013000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_MspInit+0x4c>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_MspInit+0x4c>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 f94c 	bl	8002500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <I2C1_EV_IRQHandler+0x10>)
 8002272:	f001 f80b 	bl	800328c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000510 	.word	0x20000510

08002280 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <SPI1_IRQHandler+0x10>)
 8002286:	f003 fbe3 	bl	8005a50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200005ec 	.word	0x200005ec

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f004 f97c 	bl	80065c0 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20020000 	.word	0x20020000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20000644 	.word	0x20000644
 80022fc:	200006a0 	.word	0x200006a0

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <SystemInit+0x20>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <SystemInit+0x20>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_USART2_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART2_UART_Init+0x4c>)
 800235c:	f003 fd6e 	bl	8005e3c <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f7ff fd83 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000648 	.word	0x20000648
 8002374:	40004400 	.word	0x40004400

08002378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_UART_MspInit+0x84>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12b      	bne.n	80023f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023d2:	230c      	movs	r3, #12
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023e2:	2307      	movs	r3, #7
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <HAL_UART_MspInit+0x8c>)
 80023ee:	f000 fa3f 	bl	8002870 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023f2:	bf00      	nop
 80023f4:	3728      	adds	r7, #40	; 0x28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40004400 	.word	0x40004400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020000 	.word	0x40020000

08002408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800240e:	490e      	ldr	r1, [pc, #56]	; (8002448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002410:	4a0e      	ldr	r2, [pc, #56]	; (800244c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002424:	4c0b      	ldr	r4, [pc, #44]	; (8002454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002432:	f7ff ff65 	bl	8002300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002436:	f004 f8c9 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243a:	f7ff fc9d 	bl	8001d78 <main>
  bx  lr    
 800243e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800244c:	080077f4 	.word	0x080077f4
  ldr r2, =_sbss
 8002450:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002454:	200006a0 	.word	0x200006a0

08002458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC_IRQHandler>
	...

0800245c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <HAL_Init+0x40>)
 8002466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_Init+0x40>)
 8002472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a07      	ldr	r2, [pc, #28]	; (800249c <HAL_Init+0x40>)
 800247e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002484:	2003      	movs	r0, #3
 8002486:	f000 f973 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248a:	200f      	movs	r0, #15
 800248c:	f000 f808 	bl	80024a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002490:	f7ff fe9a 	bl	80021c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023c00 	.word	0x40023c00

080024a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_InitTick+0x54>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_InitTick+0x58>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f999 	bl	80027f6 <HAL_SYSTICK_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00e      	b.n	80024ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d80a      	bhi.n	80024ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f000 f953 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e0:	4a06      	ldr	r2, [pc, #24]	; (80024fc <HAL_InitTick+0x5c>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000044 	.word	0x20000044
 80024f8:	2000004c 	.word	0x2000004c
 80024fc:	20000048 	.word	0x20000048

08002500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x20>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x24>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <HAL_IncTick+0x24>)
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	2000004c 	.word	0x2000004c
 8002524:	2000068c 	.word	0x2000068c

08002528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_GetTick+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	2000068c 	.word	0x2000068c

08002540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff ffee 	bl	8002528 <HAL_GetTick>
 800254c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d005      	beq.n	8002566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_Delay+0x44>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002566:	bf00      	nop
 8002568:	f7ff ffde 	bl	8002528 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	429a      	cmp	r2, r3
 8002576:	d8f7      	bhi.n	8002568 <HAL_Delay+0x28>
  {
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000004c 	.word	0x2000004c

08002588 <__NVIC_SetPriorityGrouping>:
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	60d3      	str	r3, [r2, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_GetPriorityGrouping>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_DisableIRQ>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db12      	blt.n	8002660 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	490a      	ldr	r1, [pc, #40]	; (800266c <__NVIC_DisableIRQ+0x44>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	3320      	adds	r3, #32
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002654:	f3bf 8f4f 	dsb	sy
}
 8002658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800265a:	f3bf 8f6f 	isb	sy
}
 800265e:	bf00      	nop
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff05 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff1a 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff0d 	bl	80025ec <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff1d 	bl	8002628 <__NVIC_DisableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff94 	bl	800272c <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d004      	beq.n	800282c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e00c      	b.n	8002846 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2205      	movs	r2, #5
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002860:	b2db      	uxtb	r3, r3
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e159      	b.n	8002b40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8148 	bne.w	8002b3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d123      	bne.n	80029b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a2 	beq.w	8002b3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a56      	ldr	r2, [pc, #344]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <HAL_GPIO_Init+0x2e8>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a12:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_GPIO_Init+0x2ec>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <HAL_GPIO_Init+0x2f0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d019      	beq.n	8002a72 <HAL_GPIO_Init+0x202>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2f4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0x1fe>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_GPIO_Init+0x2f8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00d      	beq.n	8002a6a <HAL_GPIO_Init+0x1fa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_GPIO_Init+0x2fc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <HAL_GPIO_Init+0x1f6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <HAL_GPIO_Init+0x300>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_GPIO_Init+0x1f2>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e008      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a62:	2307      	movs	r3, #7
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e004      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e002      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_GPIO_Init+0x204>
 8002a72:	2300      	movs	r3, #0
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	f002 0203 	and.w	r2, r2, #3
 8002a7a:	0092      	lsls	r2, r2, #2
 8002a7c:	4093      	lsls	r3, r2
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a84:	4935      	ldr	r1, [pc, #212]	; (8002b5c <HAL_GPIO_Init+0x2ec>)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ae0:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b34:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f aea2 	bls.w	800288c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e12b      	b.n	8002e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff f880 	bl	8001cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c10:	f002 fd30 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a81      	ldr	r2, [pc, #516]	; (8002e20 <HAL_I2C_Init+0x274>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d807      	bhi.n	8002c30 <HAL_I2C_Init+0x84>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a80      	ldr	r2, [pc, #512]	; (8002e24 <HAL_I2C_Init+0x278>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e006      	b.n	8002c3e <HAL_I2C_Init+0x92>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a7d      	ldr	r2, [pc, #500]	; (8002e28 <HAL_I2C_Init+0x27c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bf94      	ite	ls
 8002c38:	2301      	movls	r3, #1
 8002c3a:	2300      	movhi	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0e7      	b.n	8002e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a78      	ldr	r2, [pc, #480]	; (8002e2c <HAL_I2C_Init+0x280>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_I2C_Init+0x274>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <HAL_I2C_Init+0xd4>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e009      	b.n	8002c94 <HAL_I2C_Init+0xe8>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_I2C_Init+0x284>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	3301      	adds	r3, #1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	495c      	ldr	r1, [pc, #368]	; (8002e20 <HAL_I2C_Init+0x274>)
 8002cb0:	428b      	cmp	r3, r1
 8002cb2:	d819      	bhi.n	8002ce8 <HAL_I2C_Init+0x13c>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e59      	subs	r1, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cc8:	400b      	ands	r3, r1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_I2C_Init+0x138>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1e59      	subs	r1, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	e051      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	e04f      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <HAL_I2C_Init+0x168>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	440b      	add	r3, r1
 8002cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e012      	b.n	8002d3a <HAL_I2C_Init+0x18e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	0099      	lsls	r1, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Init+0x196>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e022      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_I2C_Init+0x1bc>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e58      	subs	r0, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	440b      	add	r3, r1
 8002d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d66:	e00f      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e58      	subs	r0, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	0099      	lsls	r1, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	6809      	ldr	r1, [r1, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6911      	ldr	r1, [r2, #16]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	000186a0 	.word	0x000186a0
 8002e24:	001e847f 	.word	0x001e847f
 8002e28:	003d08ff 	.word	0x003d08ff
 8002e2c:	431bde83 	.word	0x431bde83
 8002e30:	10624dd3 	.word	0x10624dd3

08002e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
 8002e44:	4613      	mov	r3, r2
 8002e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff fb6e 	bl	8002528 <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	f040 80e0 	bne.w	800301c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2319      	movs	r3, #25
 8002e62:	2201      	movs	r2, #1
 8002e64:	4970      	ldr	r1, [pc, #448]	; (8003028 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f001 fe00 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0d3      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2C_Master_Transmit+0x50>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0cc      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d007      	beq.n	8002eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a50      	ldr	r2, [pc, #320]	; (800302c <HAL_I2C_Master_Transmit+0x1f8>)
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eec:	8979      	ldrh	r1, [r7, #10]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f001 fc90 	bl	8004818 <I2C_MasterRequestWrite>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e08d      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f18:	e066      	b.n	8002fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6a39      	ldr	r1, [r7, #32]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f001 fe7a 	bl	8004c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d107      	bne.n	8002f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06b      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	781a      	ldrb	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d11b      	bne.n	8002fbc <HAL_I2C_Master_Transmit+0x188>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	6a39      	ldr	r1, [r7, #32]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f001 fe6a 	bl	8004c9a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e01a      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d194      	bne.n	8002f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	00100002 	.word	0x00100002
 800302c:	ffff0000 	.word	0xffff0000

08003030 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fa72 	bl	8002528 <HAL_GetTick>
 8003044:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	f040 8111 	bne.w	800327a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2319      	movs	r3, #25
 800305e:	2201      	movs	r2, #1
 8003060:	4988      	ldr	r1, [pc, #544]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f001 fd02 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e104      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x50>
 800307c:	2302      	movs	r3, #2
 800307e:	e0fd      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d007      	beq.n	80030a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2224      	movs	r2, #36	; 0x24
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a70      	ldr	r2, [pc, #448]	; (8003288 <HAL_I2C_IsDeviceReady+0x258>)
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f001 fcc0 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d103      	bne.n	800310a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0b6      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800311e:	f7ff fa03 	bl	8002528 <HAL_GetTick>
 8003122:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003152:	e025      	b.n	80031a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003154:	f7ff f9e8 	bl	8002528 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <HAL_I2C_IsDeviceReady+0x13a>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22a0      	movs	r2, #160	; 0xa0
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2ba0      	cmp	r3, #160	; 0xa0
 80031aa:	d005      	beq.n	80031b8 <HAL_I2C_IsDeviceReady+0x188>
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_I2C_IsDeviceReady+0x188>
 80031b2:	7dbb      	ldrb	r3, [r7, #22]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0cd      	beq.n	8003154 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d129      	bne.n	8003222 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f001 fc34 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e036      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e02c      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2319      	movs	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	490f      	ldr	r1, [pc, #60]	; (8003284 <HAL_I2C_IsDeviceReady+0x254>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f001 fc10 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e012      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3301      	adds	r3, #1
 800325a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	f4ff af32 	bcc.w	80030ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00100002 	.word	0x00100002
 8003288:	ffff0000 	.word	0xffff0000

0800328c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d003      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x38>
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	f040 80c1 	bne.w	8003446 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10d      	bne.n	80032fa <HAL_I2C_EV_IRQHandler+0x6e>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032e4:	d003      	beq.n	80032ee <HAL_I2C_EV_IRQHandler+0x62>
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_EV_IRQHandler+0x66>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x68>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	f000 8132 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x92>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 fd64 	bl	8004dde <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fcd2 	bl	8003cc0 <I2C_Master_SB>
 800331c:	e092      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0xb2>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fd48 	bl	8003dcc <I2C_Master_ADD10>
 800333c:	e082      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0xd2>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	0a5b      	lsrs	r3, r3, #9
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fd62 	bl	8003e20 <I2C_Master_ADDR>
 800335c:	e072      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03b      	beq.n	80033e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	f000 80f3 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	09db      	lsrs	r3, r3, #7
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00f      	beq.n	80033a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f94c 	bl	800363e <I2C_MasterTransmit_TXE>
 80033a6:	e04d      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80d6 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80cf 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	2b21      	cmp	r3, #33	; 0x21
 80033c8:	d103      	bne.n	80033d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9d3 	bl	8003776 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d0:	e0c7      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	f040 80c4 	bne.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fa41 	bl	8003862 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e0:	e0bf      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f0:	f000 80b7 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00f      	beq.n	8003420 <HAL_I2C_EV_IRQHandler+0x194>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d009      	beq.n	8003420 <HAL_I2C_EV_IRQHandler+0x194>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fab6 	bl	800398a <I2C_MasterReceive_RXNE>
 800341e:	e011      	b.n	8003444 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 809a 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	0a5b      	lsrs	r3, r3, #9
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8093 	beq.w	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb55 	bl	8003aec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003442:	e08e      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003444:	e08d      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d004      	beq.n	8003458 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e007      	b.n	8003468 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x20e>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	0a5b      	lsrs	r3, r3, #9
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003490:	69b9      	ldr	r1, [r7, #24]
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 ff13 	bl	80042be <I2C_Slave_ADDR>
 8003498:	e066      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x22e>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	0a5b      	lsrs	r3, r3, #9
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ff4e 	bl	8004354 <I2C_Slave_STOPF>
 80034b8:	e056      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	2b21      	cmp	r3, #33	; 0x21
 80034be:	d002      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80034c0:	7bbb      	ldrb	r3, [r7, #14]
 80034c2:	2b29      	cmp	r3, #41	; 0x29
 80034c4:	d125      	bne.n	8003512 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	09db      	lsrs	r3, r3, #7
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x266>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	0a9b      	lsrs	r3, r3, #10
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x266>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fe29 	bl	8004142 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f0:	e039      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d033      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	0a5b      	lsrs	r3, r3, #9
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02d      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fe56 	bl	80041bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003510:	e029      	b.n	8003566 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00f      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x2b2>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	0a9b      	lsrs	r3, r3, #10
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x2b2>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fe61 	bl	80041fe <I2C_SlaveReceive_RXNE>
 800353c:	e014      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	0a5b      	lsrs	r3, r3, #9
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fe8f 	bl	800427a <I2C_SlaveReceive_BTF>
 800355c:	e004      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003566:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70fb      	strb	r3, [r7, #3]
 80035ca:	4613      	mov	r3, r2
 80035cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003654:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	d150      	bne.n	8003706 <I2C_MasterTransmit_TXE+0xc8>
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b21      	cmp	r3, #33	; 0x21
 8003668:	d14d      	bne.n	8003706 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d01d      	beq.n	80036ac <I2C_MasterTransmit_TXE+0x6e>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b20      	cmp	r3, #32
 8003674:	d01a      	beq.n	80036ac <I2C_MasterTransmit_TXE+0x6e>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800367c:	d016      	beq.n	80036ac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800368c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2211      	movs	r2, #17
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff62 	bl	800356e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036aa:	e060      	b.n	800376e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036ba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d107      	bne.n	80036f6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff7d 	bl	80035ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f4:	e03b      	b.n	800376e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff35 	bl	800356e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003704:	e033      	b.n	800376e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b21      	cmp	r3, #33	; 0x21
 800370a:	d005      	beq.n	8003718 <I2C_MasterTransmit_TXE+0xda>
 800370c:	7bbb      	ldrb	r3, [r7, #14]
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d12d      	bne.n	800376e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b22      	cmp	r3, #34	; 0x22
 8003716:	d12a      	bne.n	800376e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003732:	e01c      	b.n	800376e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d103      	bne.n	8003748 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f88e 	bl	8003862 <I2C_MemoryTransmit_TXE_BTF>
}
 8003746:	e012      	b.n	800376e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800376c:	e7ff      	b.n	800376e <I2C_MasterTransmit_TXE+0x130>
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b21      	cmp	r3, #33	; 0x21
 800378e:	d164      	bne.n	800385a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037be:	e04c      	b.n	800385a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d01d      	beq.n	8003802 <I2C_MasterTransmit_BTF+0x8c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d01a      	beq.n	8003802 <I2C_MasterTransmit_BTF+0x8c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037d2:	d016      	beq.n	8003802 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2211      	movs	r2, #17
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff feb7 	bl	800356e <HAL_I2C_MasterTxCpltCallback>
}
 8003800:	e02b      	b.n	800385a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003810:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d107      	bne.n	800384c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fed2 	bl	80035ee <HAL_I2C_MemTxCpltCallback>
}
 800384a:	e006      	b.n	800385a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fe8a 	bl	800356e <HAL_I2C_MasterTxCpltCallback>
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11d      	bne.n	80038b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10b      	bne.n	800389a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	1c9a      	adds	r2, r3, #2
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003898:	e073      	b.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389e:	b29b      	uxth	r3, r3
 80038a0:	121b      	asrs	r3, r3, #8
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038b4:	e065      	b.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10b      	bne.n	80038d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038d4:	e055      	b.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d151      	bne.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b22      	cmp	r3, #34	; 0x22
 80038e2:	d10d      	bne.n	8003900 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038fe:	e040      	b.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d015      	beq.n	8003936 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b21      	cmp	r3, #33	; 0x21
 800390e:	d112      	bne.n	8003936 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003934:	e025      	b.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d120      	bne.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b21      	cmp	r3, #33	; 0x21
 8003944:	d11d      	bne.n	8003982 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003954:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fe36 	bl	80035ee <HAL_I2C_MemTxCpltCallback>
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b22      	cmp	r3, #34	; 0x22
 800399c:	f040 80a2 	bne.w	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d921      	bls.n	80039f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	f040 8082 	bne.w	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80039f0:	e078      	b.n	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d074      	beq.n	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <I2C_MasterReceive_RXNE+0x7c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d16e      	bne.n	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f001 f988 	bl	8004d1c <I2C_WaitOnSTOPRequestThroughIT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d142      	bne.n	8003a98 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a30:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d10a      	bne.n	8003a82 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fdc1 	bl	8003602 <HAL_I2C_MemRxCpltCallback>
}
 8003a80:	e030      	b.n	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2212      	movs	r2, #18
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fd76 	bl	8003582 <HAL_I2C_MasterRxCpltCallback>
}
 8003a96:	e025      	b.n	8003ae4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aa6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff fd99 	bl	8003616 <HAL_I2C_ErrorCallback>
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b12:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b3a:	e0bd      	b.n	8003cb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d129      	bne.n	8003b9a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d00a      	beq.n	8003b72 <I2C_MasterReceive_BTF+0x86>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d007      	beq.n	8003b72 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b98:	e08e      	b.n	8003cb8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d176      	bne.n	8003c92 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d002      	beq.n	8003bb0 <I2C_MasterReceive_BTF+0xc4>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d108      	bne.n	8003bc2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e019      	b.n	8003bf6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d002      	beq.n	8003bce <I2C_MasterReceive_BTF+0xe2>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d108      	bne.n	8003be0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	e00a      	b.n	8003bf6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d007      	beq.n	8003bf6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c50:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d10a      	bne.n	8003c7c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fcc4 	bl	8003602 <HAL_I2C_MemRxCpltCallback>
}
 8003c7a:	e01d      	b.n	8003cb8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2212      	movs	r2, #18
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff fc79 	bl	8003582 <HAL_I2C_MasterRxCpltCallback>
}
 8003c90:	e012      	b.n	8003cb8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d117      	bne.n	8003d04 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cee:	e067      	b.n	8003dc0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]
}
 8003d02:	e05d      	b.n	8003dc0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d0c:	d133      	bne.n	8003d76 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b21      	cmp	r3, #33	; 0x21
 8003d18:	d109      	bne.n	8003d2e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	e008      	b.n	8003d40 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <I2C_Master_SB+0x92>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d032      	beq.n	8003dc0 <I2C_Master_SB+0x100>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d02d      	beq.n	8003dc0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d72:	605a      	str	r2, [r3, #4]
}
 8003d74:	e024      	b.n	8003dc0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	11db      	asrs	r3, r3, #7
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 0306 	and.w	r3, r3, #6
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f063 030f 	orn	r3, r3, #15
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]
}
 8003d9a:	e011      	b.n	8003dc0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10d      	bne.n	8003dc0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	11db      	asrs	r3, r3, #7
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f063 030e 	orn	r3, r3, #14
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <I2C_Master_ADD10+0x26>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d108      	bne.n	8003e04 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <I2C_Master_ADD10+0x48>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e12:	605a      	str	r2, [r3, #4]
  }
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b091      	sub	sp, #68	; 0x44
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b22      	cmp	r3, #34	; 0x22
 8003e48:	f040 8169 	bne.w	800411e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <I2C_Master_ADDR+0x54>
 8003e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d10b      	bne.n	8003e74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	e160      	b.n	8004136 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11d      	bne.n	8003eb8 <I2C_Master_ADDR+0x98>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e84:	d118      	bne.n	8003eb8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e86:	2300      	movs	r3, #0
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eaa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb6:	e13e      	b.n	8004136 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d113      	bne.n	8003eea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e115      	b.n	8004116 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	f040 808a 	bne.w	800400a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003efc:	d137      	bne.n	8003f6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1c:	d113      	bne.n	8003f46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	e0e7      	b.n	8004116 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e0d3      	b.n	8004116 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d02e      	beq.n	8003fd2 <I2C_Master_ADDR+0x1b2>
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d02b      	beq.n	8003fd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	2b12      	cmp	r3, #18
 8003f7e:	d102      	bne.n	8003f86 <I2C_Master_ADDR+0x166>
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d125      	bne.n	8003fd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d00e      	beq.n	8003faa <I2C_Master_ADDR+0x18a>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d00b      	beq.n	8003faa <I2C_Master_ADDR+0x18a>
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d008      	beq.n	8003faa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e007      	b.n	8003fba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	e0a1      	b.n	8004116 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e085      	b.n	8004116 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d14d      	bne.n	80040b0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	2b04      	cmp	r3, #4
 8004018:	d016      	beq.n	8004048 <I2C_Master_ADDR+0x228>
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	2b02      	cmp	r3, #2
 800401e:	d013      	beq.n	8004048 <I2C_Master_ADDR+0x228>
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	2b10      	cmp	r3, #16
 8004024:	d010      	beq.n	8004048 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004056:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004066:	d117      	bne.n	8004098 <I2C_Master_ADDR+0x278>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800406e:	d00b      	beq.n	8004088 <I2C_Master_ADDR+0x268>
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2b01      	cmp	r3, #1
 8004074:	d008      	beq.n	8004088 <I2C_Master_ADDR+0x268>
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	2b08      	cmp	r3, #8
 800407a:	d005      	beq.n	8004088 <I2C_Master_ADDR+0x268>
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	2b10      	cmp	r3, #16
 8004080:	d002      	beq.n	8004088 <I2C_Master_ADDR+0x268>
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2b20      	cmp	r3, #32
 8004086:	d107      	bne.n	8004098 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004096:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	e032      	b.n	8004116 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ce:	d117      	bne.n	8004100 <I2C_Master_ADDR+0x2e0>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040d6:	d00b      	beq.n	80040f0 <I2C_Master_ADDR+0x2d0>
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d008      	beq.n	80040f0 <I2C_Master_ADDR+0x2d0>
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d005      	beq.n	80040f0 <I2C_Master_ADDR+0x2d0>
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d002      	beq.n	80040f0 <I2C_Master_ADDR+0x2d0>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d107      	bne.n	8004100 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800411c:	e00b      	b.n	8004136 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	e7ff      	b.n	8004136 <I2C_Master_ADDR+0x316>
 8004136:	bf00      	nop
 8004138:	3744      	adds	r7, #68	; 0x44
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02b      	beq.n	80041b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d114      	bne.n	80041b4 <I2C_SlaveTransmit_TXE+0x72>
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b29      	cmp	r3, #41	; 0x29
 800418e:	d111      	bne.n	80041b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2221      	movs	r2, #33	; 0x21
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2228      	movs	r2, #40	; 0x28
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff f9f1 	bl	8003596 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d011      	beq.n	80041f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02c      	beq.n	8004272 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d114      	bne.n	8004272 <I2C_SlaveReceive_RXNE+0x74>
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b2a      	cmp	r3, #42	; 0x2a
 800424c:	d111      	bne.n	8004272 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2222      	movs	r2, #34	; 0x22
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2228      	movs	r2, #40	; 0x28
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff f99c 	bl	80035aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d012      	beq.n	80042b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042d8:	2b28      	cmp	r3, #40	; 0x28
 80042da:	d127      	bne.n	800432c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	09db      	lsrs	r3, r3, #7
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	81bb      	strh	r3, [r7, #12]
 800430e:	e002      	b.n	8004316 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800431e:	89ba      	ldrh	r2, [r7, #12]
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff f94a 	bl	80035be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800432a:	e00e      	b.n	800434a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004372:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	d172      	bne.n	8004498 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b22      	cmp	r3, #34	; 0x22
 80043b6:	d002      	beq.n	80043be <I2C_Slave_STOPF+0x6a>
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b2a      	cmp	r3, #42	; 0x2a
 80043bc:	d135      	bne.n	800442a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fa2b 	bl	8002852 <HAL_DMA_GetState>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d049      	beq.n	8004496 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	4a69      	ldr	r2, [pc, #420]	; (80045ac <I2C_Slave_STOPF+0x258>)
 8004408:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe f9fd 	bl	800280e <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d03d      	beq.n	8004496 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004428:	e035      	b.n	8004496 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f043 0204 	orr.w	r2, r3, #4
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f9f5 	bl	8002852 <HAL_DMA_GetState>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d014      	beq.n	8004498 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	4a4e      	ldr	r2, [pc, #312]	; (80045ac <I2C_Slave_STOPF+0x258>)
 8004474:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe f9c7 	bl	800280e <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
 8004494:	e000      	b.n	8004498 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004496:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03e      	beq.n	8004520 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d112      	bne.n	80044d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d112      	bne.n	800450a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f843 	bl	80045b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800452e:	e039      	b.n	80045a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b2a      	cmp	r3, #42	; 0x2a
 8004534:	d109      	bne.n	800454a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2228      	movs	r2, #40	; 0x28
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff f830 	bl	80035aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b28      	cmp	r3, #40	; 0x28
 8004554:	d111      	bne.n	800457a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <I2C_Slave_STOPF+0x25c>)
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff f831 	bl	80035da <HAL_I2C_ListenCpltCallback>
}
 8004578:	e014      	b.n	80045a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	2b22      	cmp	r3, #34	; 0x22
 8004580:	d002      	beq.n	8004588 <I2C_Slave_STOPF+0x234>
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b22      	cmp	r3, #34	; 0x22
 8004586:	d10d      	bne.n	80045a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff f803 	bl	80035aa <HAL_I2C_SlaveRxCpltCallback>
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	0800491d 	.word	0x0800491d
 80045b0:	ffff0000 	.word	0xffff0000

080045b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d002      	beq.n	80045d8 <I2C_ITError+0x24>
 80045d2:	7bbb      	ldrb	r3, [r7, #14]
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d10a      	bne.n	80045ee <I2C_ITError+0x3a>
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b22      	cmp	r3, #34	; 0x22
 80045dc:	d107      	bne.n	80045ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045f4:	2b28      	cmp	r3, #40	; 0x28
 80045f6:	d107      	bne.n	8004608 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2228      	movs	r2, #40	; 0x28
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004606:	e015      	b.n	8004634 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d00a      	beq.n	800462e <I2C_ITError+0x7a>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b60      	cmp	r3, #96	; 0x60
 800461c:	d007      	beq.n	800462e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004642:	d162      	bne.n	800470a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004652:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d020      	beq.n	80046a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	4a6a      	ldr	r2, [pc, #424]	; (8004810 <I2C_ITError+0x25c>)
 8004668:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe f8cd 	bl	800280e <HAL_DMA_Abort_IT>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8089 	beq.w	800478e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800469e:	4610      	mov	r0, r2
 80046a0:	4798      	blx	r3
 80046a2:	e074      	b.n	800478e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	4a59      	ldr	r2, [pc, #356]	; (8004810 <I2C_ITError+0x25c>)
 80046aa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe f8ac 	bl	800280e <HAL_DMA_Abort_IT>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d068      	beq.n	800478e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d10b      	bne.n	80046e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004704:	4610      	mov	r0, r2
 8004706:	4798      	blx	r3
 8004708:	e041      	b.n	800478e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b60      	cmp	r3, #96	; 0x60
 8004714:	d125      	bne.n	8004762 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d10b      	bne.n	800474a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe ff65 	bl	800362a <HAL_I2C_AbortCpltCallback>
 8004760:	e015      	b.n	800478e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d10b      	bne.n	8004788 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fe ff44 	bl	8003616 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10e      	bne.n	80047bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d113      	bne.n	8004808 <I2C_ITError+0x254>
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b28      	cmp	r3, #40	; 0x28
 80047e4:	d110      	bne.n	8004808 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <I2C_ITError+0x260>)
 80047ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe fee9 	bl	80035da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	0800491d 	.word	0x0800491d
 8004814:	ffff0000 	.word	0xffff0000

08004818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	460b      	mov	r3, r1
 8004826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d006      	beq.n	8004842 <I2C_MasterRequestWrite+0x2a>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d003      	beq.n	8004842 <I2C_MasterRequestWrite+0x2a>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004840:	d108      	bne.n	8004854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e00b      	b.n	800486c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	2b12      	cmp	r3, #18
 800485a:	d107      	bne.n	800486c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800486a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f8f7 	bl	8004a6c <I2C_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00d      	beq.n	80048a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004892:	d103      	bne.n	800489c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e035      	b.n	800490c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a8:	d108      	bne.n	80048bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048b8:	611a      	str	r2, [r3, #16]
 80048ba:	e01b      	b.n	80048f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048bc:	897b      	ldrh	r3, [r7, #10]
 80048be:	11db      	asrs	r3, r3, #7
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 0306 	and.w	r3, r3, #6
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f063 030f 	orn	r3, r3, #15
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	490e      	ldr	r1, [pc, #56]	; (8004914 <I2C_MasterRequestWrite+0xfc>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f91d 	bl	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e010      	b.n	800490c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4907      	ldr	r1, [pc, #28]	; (8004918 <I2C_MasterRequestWrite+0x100>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f90d 	bl	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	00010008 	.word	0x00010008
 8004918:	00010002 	.word	0x00010002

0800491c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004936:	4b4b      	ldr	r3, [pc, #300]	; (8004a64 <I2C_DMAAbort+0x148>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <I2C_DMAAbort+0x14c>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	0a1a      	lsrs	r2, r3, #8
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00da      	lsls	r2, r3, #3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004962:	e00a      	b.n	800497a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3b01      	subs	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004978:	d0ea      	beq.n	8004950 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	2200      	movs	r2, #0
 8004988:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	2200      	movs	r2, #0
 8004998:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	2200      	movs	r2, #0
 80049be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	2200      	movs	r2, #0
 80049ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d10e      	bne.n	8004a0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7fe fe11 	bl	800362a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a08:	e027      	b.n	8004a5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a10:	2b28      	cmp	r3, #40	; 0x28
 8004a12:	d117      	bne.n	8004a44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2228      	movs	r2, #40	; 0x28
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a42:	e007      	b.n	8004a54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a54:	6978      	ldr	r0, [r7, #20]
 8004a56:	f7fe fdde 	bl	8003616 <HAL_I2C_ErrorCallback>
}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000044 	.word	0x20000044
 8004a68:	14f8b589 	.word	0x14f8b589

08004a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7c:	e025      	b.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d021      	beq.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a86:	f7fd fd4f 	bl	8002528 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d116      	bne.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e023      	b.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d10d      	bne.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	43da      	mvns	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	e00c      	b.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d0b6      	beq.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b28:	e051      	b.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b38:	d123      	bne.n	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f043 0204 	orr.w	r2, r3, #4
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e046      	b.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d021      	beq.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fd fccd 	bl	8002528 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d116      	bne.n	8004bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f043 0220 	orr.w	r2, r3, #32
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e020      	b.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d10c      	bne.n	8004bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	e00b      	b.n	8004c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d18d      	bne.n	8004b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c24:	e02d      	b.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f8aa 	bl	8004d80 <I2C_IsAcknowledgeFailed>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e02d      	b.n	8004c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d021      	beq.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3e:	f7fd fc73 	bl	8002528 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d302      	bcc.n	8004c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d116      	bne.n	8004c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e007      	b.n	8004c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d1ca      	bne.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca6:	e02d      	b.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f869 	bl	8004d80 <I2C_IsAcknowledgeFailed>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e02d      	b.n	8004d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d021      	beq.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc0:	f7fd fc32 	bl	8002528 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d116      	bne.n	8004d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e007      	b.n	8004d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d1ca      	bne.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	0a1a      	lsrs	r2, r3, #8
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d107      	bne.n	8004d5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f043 0220 	orr.w	r2, r3, #32
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e008      	b.n	8004d6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d68:	d0e9      	beq.n	8004d3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000044 	.word	0x20000044
 8004d7c:	14f8b589 	.word	0x14f8b589

08004d80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d96:	d11b      	bne.n	8004dd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dee:	d103      	bne.n	8004df8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004df6:	e007      	b.n	8004e08 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e00:	d102      	bne.n	8004e08 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2208      	movs	r2, #8
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e267      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d075      	beq.n	8004f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e32:	4b88      	ldr	r3, [pc, #544]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d00c      	beq.n	8004e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b85      	ldr	r3, [pc, #532]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d112      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4a:	4b82      	ldr	r3, [pc, #520]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e56:	d10b      	bne.n	8004e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e58:	4b7e      	ldr	r3, [pc, #504]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05b      	beq.n	8004f1c <HAL_RCC_OscConfig+0x108>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d157      	bne.n	8004f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e242      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x74>
 8004e7a:	4b76      	ldr	r3, [pc, #472]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a75      	ldr	r2, [pc, #468]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e01d      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x98>
 8004e92:	4b70      	ldr	r3, [pc, #448]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6f      	ldr	r2, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6c      	ldr	r2, [pc, #432]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0xb0>
 8004eac:	4b69      	ldr	r3, [pc, #420]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a68      	ldr	r2, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	4b66      	ldr	r3, [pc, #408]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a65      	ldr	r2, [pc, #404]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fb2c 	bl	8002528 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fd fb28 	bl	8002528 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e207      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	4b5b      	ldr	r3, [pc, #364]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0xc0>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fd fb18 	bl	8002528 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fd fb14 	bl	8002528 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1f3      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	4b51      	ldr	r3, [pc, #324]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0xe8>
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d063      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2a:	4b4a      	ldr	r3, [pc, #296]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00b      	beq.n	8004f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b47      	ldr	r3, [pc, #284]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d11c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b44      	ldr	r3, [pc, #272]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d116      	bne.n	8004f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4e:	4b41      	ldr	r3, [pc, #260]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x152>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e1c7      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4937      	ldr	r1, [pc, #220]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	e03a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f84:	4b34      	ldr	r3, [pc, #208]	; (8005058 <HAL_RCC_OscConfig+0x244>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fd facd 	bl	8002528 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fd fac9 	bl	8002528 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e1a8      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4925      	ldr	r1, [pc, #148]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
 8004fc4:	e015      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCC_OscConfig+0x244>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd faac 	bl	8002528 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fd faa8 	bl	8002528 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e187      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d036      	beq.n	800506c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_RCC_OscConfig+0x248>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fd fa8c 	bl	8002528 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005014:	f7fd fa88 	bl	8002528 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e167      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x240>)
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x200>
 8005032:	e01b      	b.n	800506c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_RCC_OscConfig+0x248>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503a:	f7fd fa75 	bl	8002528 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	e00e      	b.n	8005060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005042:	f7fd fa71 	bl	8002528 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d907      	bls.n	8005060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e150      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
 8005054:	40023800 	.word	0x40023800
 8005058:	42470000 	.word	0x42470000
 800505c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ea      	bne.n	8005042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8097 	beq.w	80051a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b81      	ldr	r3, [pc, #516]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a7c      	ldr	r2, [pc, #496]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b7a      	ldr	r3, [pc, #488]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050aa:	4b77      	ldr	r3, [pc, #476]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b6:	4b74      	ldr	r3, [pc, #464]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fd fa31 	bl	8002528 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fd fa2d 	bl	8002528 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e10c      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050dc:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <HAL_RCC_OscConfig+0x474>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x2ea>
 80050f0:	4b64      	ldr	r3, [pc, #400]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a63      	ldr	r2, [pc, #396]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	e01c      	b.n	8005138 <HAL_RCC_OscConfig+0x324>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b05      	cmp	r3, #5
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x30c>
 8005106:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a5e      	ldr	r2, [pc, #376]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	4b5c      	ldr	r3, [pc, #368]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5b      	ldr	r2, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	e00b      	b.n	8005138 <HAL_RCC_OscConfig+0x324>
 8005120:	4b58      	ldr	r3, [pc, #352]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a57      	ldr	r2, [pc, #348]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	4b55      	ldr	r3, [pc, #340]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a54      	ldr	r2, [pc, #336]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 0304 	bic.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d015      	beq.n	800516c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fd f9f2 	bl	8002528 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	e00a      	b.n	800515e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005148:	f7fd f9ee 	bl	8002528 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0cb      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	4b49      	ldr	r3, [pc, #292]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ee      	beq.n	8005148 <HAL_RCC_OscConfig+0x334>
 800516a:	e014      	b.n	8005196 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516c:	f7fd f9dc 	bl	8002528 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fd f9d8 	bl	8002528 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0b5      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ee      	bne.n	8005174 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	4a38      	ldr	r2, [pc, #224]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a1 	beq.w	80052f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b2:	4b34      	ldr	r3, [pc, #208]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d05c      	beq.n	8005278 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d141      	bne.n	800524a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b31      	ldr	r3, [pc, #196]	; (800528c <HAL_RCC_OscConfig+0x478>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd f9ac 	bl	8002528 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd f9a8 	bl	8002528 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e087      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	019b      	lsls	r3, r3, #6
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	3b01      	subs	r3, #1
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	061b      	lsls	r3, r3, #24
 8005216:	491b      	ldr	r1, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_RCC_OscConfig+0x478>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fd f981 	bl	8002528 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fd f97d 	bl	8002528 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e05c      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x416>
 8005248:	e054      	b.n	80052f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <HAL_RCC_OscConfig+0x478>)
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd f96a 	bl	8002528 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005258:	f7fd f966 	bl	8002528 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e045      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCC_OscConfig+0x470>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x444>
 8005276:	e03d      	b.n	80052f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e038      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
 8005284:	40023800 	.word	0x40023800
 8005288:	40007000 	.word	0x40007000
 800528c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4ec>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d028      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d121      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d11a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d111      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	3b01      	subs	r3, #1
 80052da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800

08005304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0cc      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005318:	4b68      	ldr	r3, [pc, #416]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d90c      	bls.n	8005340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b65      	ldr	r3, [pc, #404]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b63      	ldr	r3, [pc, #396]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0b8      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005358:	4b59      	ldr	r3, [pc, #356]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a58      	ldr	r2, [pc, #352]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005370:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800537a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537c:	4b50      	ldr	r3, [pc, #320]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	494d      	ldr	r1, [pc, #308]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d044      	beq.n	8005424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d107      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	4b47      	ldr	r3, [pc, #284]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d119      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e07f      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d003      	beq.n	80053c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c2:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e06f      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e067      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e2:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f023 0203 	bic.w	r2, r3, #3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4934      	ldr	r1, [pc, #208]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f4:	f7fd f898 	bl	8002528 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fd f894 	bl	8002528 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	; 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e04f      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 020c 	and.w	r2, r3, #12
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d1eb      	bne.n	80053fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d20c      	bcs.n	800544c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b22      	ldr	r3, [pc, #136]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e032      	b.n	80054b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4916      	ldr	r1, [pc, #88]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005476:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	490e      	ldr	r1, [pc, #56]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800548a:	f000 f821 	bl	80054d0 <HAL_RCC_GetSysClockFreq>
 800548e:	4602      	mov	r2, r0
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	490a      	ldr	r1, [pc, #40]	; (80054c4 <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	5ccb      	ldrb	r3, [r1, r3]
 800549e:	fa22 f303 	lsr.w	r3, r2, r3
 80054a2:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <HAL_RCC_ClockConfig+0x1c4>)
 80054a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <HAL_RCC_ClockConfig+0x1c8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fc fff8 	bl	80024a0 <HAL_InitTick>

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40023c00 	.word	0x40023c00
 80054c0:	40023800 	.word	0x40023800
 80054c4:	08007798 	.word	0x08007798
 80054c8:	20000044 	.word	0x20000044
 80054cc:	20000048 	.word	0x20000048

080054d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d4:	b090      	sub	sp, #64	; 0x40
 80054d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	2300      	movs	r3, #0
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 030c 	and.w	r3, r3, #12
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d00d      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x40>
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	f200 80a1 	bhi.w	800563c <HAL_RCC_GetSysClockFreq+0x16c>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x34>
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d003      	beq.n	800550a <HAL_RCC_GetSysClockFreq+0x3a>
 8005502:	e09b      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b53      	ldr	r3, [pc, #332]	; (8005654 <HAL_RCC_GetSysClockFreq+0x184>)
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005508:	e09b      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800550a:	4b53      	ldr	r3, [pc, #332]	; (8005658 <HAL_RCC_GetSysClockFreq+0x188>)
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800550e:	e098      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005510:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800551a:	4b4d      	ldr	r3, [pc, #308]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d028      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	099b      	lsrs	r3, r3, #6
 800552c:	2200      	movs	r2, #0
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	627a      	str	r2, [r7, #36]	; 0x24
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005538:	2100      	movs	r1, #0
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_GetSysClockFreq+0x188>)
 800553c:	fb03 f201 	mul.w	r2, r3, r1
 8005540:	2300      	movs	r3, #0
 8005542:	fb00 f303 	mul.w	r3, r0, r3
 8005546:	4413      	add	r3, r2
 8005548:	4a43      	ldr	r2, [pc, #268]	; (8005658 <HAL_RCC_GetSysClockFreq+0x188>)
 800554a:	fba0 1202 	umull	r1, r2, r0, r2
 800554e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005550:	460a      	mov	r2, r1
 8005552:	62ba      	str	r2, [r7, #40]	; 0x28
 8005554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005556:	4413      	add	r3, r2
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	2200      	movs	r2, #0
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800556a:	f7fa fe91 	bl	8000290 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4613      	mov	r3, r2
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005576:	e053      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005578:	4b35      	ldr	r3, [pc, #212]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	099b      	lsrs	r3, r3, #6
 800557e:	2200      	movs	r2, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	617a      	str	r2, [r7, #20]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800558a:	f04f 0b00 	mov.w	fp, #0
 800558e:	4652      	mov	r2, sl
 8005590:	465b      	mov	r3, fp
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	0159      	lsls	r1, r3, #5
 800559c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a0:	0150      	lsls	r0, r2, #5
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	ebb2 080a 	subs.w	r8, r2, sl
 80055aa:	eb63 090b 	sbc.w	r9, r3, fp
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055c2:	ebb2 0408 	subs.w	r4, r2, r8
 80055c6:	eb63 0509 	sbc.w	r5, r3, r9
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	00eb      	lsls	r3, r5, #3
 80055d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d8:	00e2      	lsls	r2, r4, #3
 80055da:	4614      	mov	r4, r2
 80055dc:	461d      	mov	r5, r3
 80055de:	eb14 030a 	adds.w	r3, r4, sl
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	eb45 030b 	adc.w	r3, r5, fp
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055f6:	4629      	mov	r1, r5
 80055f8:	028b      	lsls	r3, r1, #10
 80055fa:	4621      	mov	r1, r4
 80055fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005600:	4621      	mov	r1, r4
 8005602:	028a      	lsls	r2, r1, #10
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	2200      	movs	r2, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	60fa      	str	r2, [r7, #12]
 8005610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005614:	f7fa fe3c 	bl	8000290 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_GetSysClockFreq+0x180>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	3301      	adds	r3, #1
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800563a:	e002      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <HAL_RCC_GetSysClockFreq+0x184>)
 800563e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005644:	4618      	mov	r0, r3
 8005646:	3740      	adds	r7, #64	; 0x40
 8005648:	46bd      	mov	sp, r7
 800564a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	00f42400 	.word	0x00f42400
 8005658:	017d7840 	.word	0x017d7840

0800565c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000044 	.word	0x20000044

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005678:	f7ff fff0 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0a9b      	lsrs	r3, r3, #10
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4903      	ldr	r1, [pc, #12]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40023800 	.word	0x40023800
 8005698:	080077a8 	.word	0x080077a8

0800569c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056a0:	f7ff ffdc 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0b5b      	lsrs	r3, r3, #13
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4903      	ldr	r1, [pc, #12]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40023800 	.word	0x40023800
 80056c0:	080077a8 	.word	0x080077a8

080056c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e07b      	b.n	80057ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d108      	bne.n	80056f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e6:	d009      	beq.n	80056fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	61da      	str	r2, [r3, #28]
 80056ee:	e005      	b.n	80056fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fc fd06 	bl	8002128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	ea42 0103 	orr.w	r1, r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	0c1b      	lsrs	r3, r3, #16
 800579a:	f003 0104 	and.w	r1, r3, #4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f003 0210 	and.w	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b088      	sub	sp, #32
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	603b      	str	r3, [r7, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_SPI_Transmit+0x22>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e126      	b.n	8005a46 <HAL_SPI_Transmit+0x270>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005800:	f7fc fe92 	bl	8002528 <HAL_GetTick>
 8005804:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d002      	beq.n	800581c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005816:	2302      	movs	r3, #2
 8005818:	77fb      	strb	r3, [r7, #31]
    goto error;
 800581a:	e10b      	b.n	8005a34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_SPI_Transmit+0x52>
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800582c:	e102      	b.n	8005a34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2203      	movs	r2, #3
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	d10f      	bne.n	8005896 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d007      	beq.n	80058b4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058bc:	d14b      	bne.n	8005956 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Transmit+0xf6>
 80058c6:	8afb      	ldrh	r3, [r7, #22]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d13e      	bne.n	800594a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058f0:	e02b      	b.n	800594a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d112      	bne.n	8005926 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	881a      	ldrh	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	1c9a      	adds	r2, r3, #2
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	86da      	strh	r2, [r3, #54]	; 0x36
 8005924:	e011      	b.n	800594a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005926:	f7fc fdff 	bl	8002528 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d803      	bhi.n	800593e <HAL_SPI_Transmit+0x168>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d102      	bne.n	8005944 <HAL_SPI_Transmit+0x16e>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005948:	e074      	b.n	8005a34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ce      	bne.n	80058f2 <HAL_SPI_Transmit+0x11c>
 8005954:	e04c      	b.n	80059f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_SPI_Transmit+0x18e>
 800595e:	8afb      	ldrh	r3, [r7, #22]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d140      	bne.n	80059e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800598a:	e02c      	b.n	80059e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d113      	bne.n	80059c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	86da      	strh	r2, [r3, #54]	; 0x36
 80059c0:	e011      	b.n	80059e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c2:	f7fc fdb1 	bl	8002528 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d803      	bhi.n	80059da <HAL_SPI_Transmit+0x204>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d102      	bne.n	80059e0 <HAL_SPI_Transmit+0x20a>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059e4:	e026      	b.n	8005a34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1cd      	bne.n	800598c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f9df 	bl	8005db8 <SPI_EndRxTxTransaction>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e000      	b.n	8005a34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	099b      	lsrs	r3, r3, #6
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10f      	bne.n	8005a94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	099b      	lsrs	r3, r3, #6
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	4798      	blx	r3
    return;
 8005a92:	e0d7      	b.n	8005c44 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_SPI_IRQHandler+0x66>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	09db      	lsrs	r3, r3, #7
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
    return;
 8005ab4:	e0c6      	b.n	8005c44 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10c      	bne.n	8005adc <HAL_SPI_IRQHandler+0x8c>
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80b4 	beq.w	8005c44 <HAL_SPI_IRQHandler+0x1f4>
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80ad 	beq.w	8005c44 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	099b      	lsrs	r3, r3, #6
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d023      	beq.n	8005b3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d011      	beq.n	8005b26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	e00b      	b.n	8005b3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]
        return;
 8005b3c:	e082      	b.n	8005c44 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d014      	beq.n	8005b74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00c      	beq.n	8005b9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	f043 0208 	orr.w	r2, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d04f      	beq.n	8005c42 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d104      	bne.n	8005bce <HAL_SPI_IRQHandler+0x17e>
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d034      	beq.n	8005c38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0203 	bic.w	r2, r2, #3
 8005bdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d011      	beq.n	8005c0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <HAL_SPI_IRQHandler+0x1fc>)
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fc fe0b 	bl	800280e <HAL_DMA_Abort_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c16:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <HAL_SPI_IRQHandler+0x1fc>)
 8005c18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fc fdf5 	bl	800280e <HAL_DMA_Abort_IT>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005c36:	e003      	b.n	8005c40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f809 	bl	8005c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c3e:	e000      	b.n	8005c42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005c40:	bf00      	nop
    return;
 8005c42:	bf00      	nop
  }
}
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08005c81 	.word	0x08005c81

08005c50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c72:	b2db      	uxtb	r3, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ffd8 	bl	8005c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cb8:	f7fc fc36 	bl	8002528 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cc8:	f7fc fc2e 	bl	8002528 <HAL_GetTick>
 8005ccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	015b      	lsls	r3, r3, #5
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cde:	e054      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d050      	beq.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce8:	f7fc fc1e 	bl	8002528 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d13d      	bne.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d16:	d111      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d20:	d004      	beq.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d107      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d10f      	bne.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e017      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d19b      	bne.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000044 	.word	0x20000044

08005db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <SPI_EndRxTxTransaction+0x7c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <SPI_EndRxTxTransaction+0x80>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	0d5b      	lsrs	r3, r3, #21
 8005dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dd4:	fb02 f303 	mul.w	r3, r2, r3
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de2:	d112      	bne.n	8005e0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2200      	movs	r2, #0
 8005dec:	2180      	movs	r1, #128	; 0x80
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff5a 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d016      	beq.n	8005e28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e00f      	b.n	8005e2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d0f2      	beq.n	8005e0a <SPI_EndRxTxTransaction+0x52>
 8005e24:	e000      	b.n	8005e28 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e26:	bf00      	nop
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000044 	.word	0x20000044
 8005e38:	165e9f81 	.word	0x165e9f81

08005e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e03f      	b.n	8005ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc fa88 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	; 0x24
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f929 	bl	80060d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695a      	ldr	r2, [r3, #20]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08a      	sub	sp, #40	; 0x28
 8005eda:	af02      	add	r7, sp, #8
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d17c      	bne.n	8005ff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_UART_Transmit+0x2c>
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e075      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UART_Transmit+0x3e>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e06e      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2221      	movs	r2, #33	; 0x21
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f2a:	f7fc fafd 	bl	8002528 <HAL_GetTick>
 8005f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f44:	d108      	bne.n	8005f58 <HAL_UART_Transmit+0x82>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	e003      	b.n	8005f60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f68:	e02a      	b.n	8005fc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2180      	movs	r1, #128	; 0x80
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f840 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e036      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	e007      	b.n	8005fb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	781a      	ldrb	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1cf      	bne.n	8005f6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2140      	movs	r1, #64	; 0x40
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f810 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e006      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b090      	sub	sp, #64	; 0x40
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600a:	e050      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d04c      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0x30>
 800601a:	f7fc fa85 	bl	8002528 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006026:	429a      	cmp	r2, r3
 8006028:	d241      	bcs.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800604a:	637a      	str	r2, [r7, #52]	; 0x34
 800604c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	613b      	str	r3, [r7, #16]
   return(result);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f023 0301 	bic.w	r3, r3, #1
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607e:	623a      	str	r2, [r7, #32]
 8006080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	69f9      	ldr	r1, [r7, #28]
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	61bb      	str	r3, [r7, #24]
   return(result);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e00f      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d09f      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3740      	adds	r7, #64	; 0x40
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060dc:	b0c0      	sub	sp, #256	; 0x100
 80060de:	af00      	add	r7, sp, #0
 80060e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	68d9      	ldr	r1, [r3, #12]
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	ea40 0301 	orr.w	r3, r0, r1
 8006100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	431a      	orrs	r2, r3
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	431a      	orrs	r2, r3
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006130:	f021 010c 	bic.w	r1, r1, #12
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800613e:	430b      	orrs	r3, r1
 8006140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006152:	6999      	ldr	r1, [r3, #24]
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	ea40 0301 	orr.w	r3, r0, r1
 800615e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4b8f      	ldr	r3, [pc, #572]	; (80063a4 <UART_SetConfig+0x2cc>)
 8006168:	429a      	cmp	r2, r3
 800616a:	d005      	beq.n	8006178 <UART_SetConfig+0xa0>
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <UART_SetConfig+0x2d0>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d104      	bne.n	8006182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006178:	f7ff fa90 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 800617c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006180:	e003      	b.n	800618a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006182:	f7ff fa77 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8006186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006194:	f040 810c 	bne.w	80063b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619c:	2200      	movs	r2, #0
 800619e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061aa:	4622      	mov	r2, r4
 80061ac:	462b      	mov	r3, r5
 80061ae:	1891      	adds	r1, r2, r2
 80061b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80061b2:	415b      	adcs	r3, r3
 80061b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061ba:	4621      	mov	r1, r4
 80061bc:	eb12 0801 	adds.w	r8, r2, r1
 80061c0:	4629      	mov	r1, r5
 80061c2:	eb43 0901 	adc.w	r9, r3, r1
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061da:	4690      	mov	r8, r2
 80061dc:	4699      	mov	r9, r3
 80061de:	4623      	mov	r3, r4
 80061e0:	eb18 0303 	adds.w	r3, r8, r3
 80061e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061e8:	462b      	mov	r3, r5
 80061ea:	eb49 0303 	adc.w	r3, r9, r3
 80061ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006206:	460b      	mov	r3, r1
 8006208:	18db      	adds	r3, r3, r3
 800620a:	653b      	str	r3, [r7, #80]	; 0x50
 800620c:	4613      	mov	r3, r2
 800620e:	eb42 0303 	adc.w	r3, r2, r3
 8006212:	657b      	str	r3, [r7, #84]	; 0x54
 8006214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800621c:	f7fa f838 	bl	8000290 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4b61      	ldr	r3, [pc, #388]	; (80063ac <UART_SetConfig+0x2d4>)
 8006226:	fba3 2302 	umull	r2, r3, r3, r2
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	011c      	lsls	r4, r3, #4
 800622e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006232:	2200      	movs	r2, #0
 8006234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800623c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006240:	4642      	mov	r2, r8
 8006242:	464b      	mov	r3, r9
 8006244:	1891      	adds	r1, r2, r2
 8006246:	64b9      	str	r1, [r7, #72]	; 0x48
 8006248:	415b      	adcs	r3, r3
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800624c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006250:	4641      	mov	r1, r8
 8006252:	eb12 0a01 	adds.w	sl, r2, r1
 8006256:	4649      	mov	r1, r9
 8006258:	eb43 0b01 	adc.w	fp, r3, r1
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800626c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006270:	4692      	mov	sl, r2
 8006272:	469b      	mov	fp, r3
 8006274:	4643      	mov	r3, r8
 8006276:	eb1a 0303 	adds.w	r3, sl, r3
 800627a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800627e:	464b      	mov	r3, r9
 8006280:	eb4b 0303 	adc.w	r3, fp, r3
 8006284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800629c:	460b      	mov	r3, r1
 800629e:	18db      	adds	r3, r3, r3
 80062a0:	643b      	str	r3, [r7, #64]	; 0x40
 80062a2:	4613      	mov	r3, r2
 80062a4:	eb42 0303 	adc.w	r3, r2, r3
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44
 80062aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062b2:	f7f9 ffed 	bl	8000290 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	4b3b      	ldr	r3, [pc, #236]	; (80063ac <UART_SetConfig+0x2d4>)
 80062be:	fba3 2301 	umull	r2, r3, r3, r1
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	2264      	movs	r2, #100	; 0x64
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
 80062ca:	1acb      	subs	r3, r1, r3
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062d2:	4b36      	ldr	r3, [pc, #216]	; (80063ac <UART_SetConfig+0x2d4>)
 80062d4:	fba3 2302 	umull	r2, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062e0:	441c      	add	r4, r3
 80062e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	1891      	adds	r1, r2, r2
 80062fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80062fc:	415b      	adcs	r3, r3
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006304:	4641      	mov	r1, r8
 8006306:	1851      	adds	r1, r2, r1
 8006308:	6339      	str	r1, [r7, #48]	; 0x30
 800630a:	4649      	mov	r1, r9
 800630c:	414b      	adcs	r3, r1
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800631c:	4659      	mov	r1, fp
 800631e:	00cb      	lsls	r3, r1, #3
 8006320:	4651      	mov	r1, sl
 8006322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006326:	4651      	mov	r1, sl
 8006328:	00ca      	lsls	r2, r1, #3
 800632a:	4610      	mov	r0, r2
 800632c:	4619      	mov	r1, r3
 800632e:	4603      	mov	r3, r0
 8006330:	4642      	mov	r2, r8
 8006332:	189b      	adds	r3, r3, r2
 8006334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006338:	464b      	mov	r3, r9
 800633a:	460a      	mov	r2, r1
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006358:	460b      	mov	r3, r1
 800635a:	18db      	adds	r3, r3, r3
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
 800635e:	4613      	mov	r3, r2
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800636a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800636e:	f7f9 ff8f 	bl	8000290 <__aeabi_uldivmod>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <UART_SetConfig+0x2d4>)
 8006378:	fba3 1302 	umull	r1, r3, r3, r2
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	2164      	movs	r1, #100	; 0x64
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	3332      	adds	r3, #50	; 0x32
 800638a:	4a08      	ldr	r2, [pc, #32]	; (80063ac <UART_SetConfig+0x2d4>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	f003 0207 	and.w	r2, r3, #7
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4422      	add	r2, r4
 800639e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063a0:	e105      	b.n	80065ae <UART_SetConfig+0x4d6>
 80063a2:	bf00      	nop
 80063a4:	40011000 	.word	0x40011000
 80063a8:	40011400 	.word	0x40011400
 80063ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063c2:	4642      	mov	r2, r8
 80063c4:	464b      	mov	r3, r9
 80063c6:	1891      	adds	r1, r2, r2
 80063c8:	6239      	str	r1, [r7, #32]
 80063ca:	415b      	adcs	r3, r3
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
 80063ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063d2:	4641      	mov	r1, r8
 80063d4:	1854      	adds	r4, r2, r1
 80063d6:	4649      	mov	r1, r9
 80063d8:	eb43 0501 	adc.w	r5, r3, r1
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	00eb      	lsls	r3, r5, #3
 80063e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ea:	00e2      	lsls	r2, r4, #3
 80063ec:	4614      	mov	r4, r2
 80063ee:	461d      	mov	r5, r3
 80063f0:	4643      	mov	r3, r8
 80063f2:	18e3      	adds	r3, r4, r3
 80063f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063f8:	464b      	mov	r3, r9
 80063fa:	eb45 0303 	adc.w	r3, r5, r3
 80063fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800640e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800641e:	4629      	mov	r1, r5
 8006420:	008b      	lsls	r3, r1, #2
 8006422:	4621      	mov	r1, r4
 8006424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006428:	4621      	mov	r1, r4
 800642a:	008a      	lsls	r2, r1, #2
 800642c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006430:	f7f9 ff2e 	bl	8000290 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b60      	ldr	r3, [pc, #384]	; (80065bc <UART_SetConfig+0x4e4>)
 800643a:	fba3 2302 	umull	r2, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	011c      	lsls	r4, r3, #4
 8006442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006446:	2200      	movs	r2, #0
 8006448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800644c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	61b9      	str	r1, [r7, #24]
 800645c:	415b      	adcs	r3, r3
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006464:	4641      	mov	r1, r8
 8006466:	1851      	adds	r1, r2, r1
 8006468:	6139      	str	r1, [r7, #16]
 800646a:	4649      	mov	r1, r9
 800646c:	414b      	adcs	r3, r1
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800647c:	4659      	mov	r1, fp
 800647e:	00cb      	lsls	r3, r1, #3
 8006480:	4651      	mov	r1, sl
 8006482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006486:	4651      	mov	r1, sl
 8006488:	00ca      	lsls	r2, r1, #3
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	4603      	mov	r3, r0
 8006490:	4642      	mov	r2, r8
 8006492:	189b      	adds	r3, r3, r2
 8006494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006498:	464b      	mov	r3, r9
 800649a:	460a      	mov	r2, r1
 800649c:	eb42 0303 	adc.w	r3, r2, r3
 80064a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064bc:	4649      	mov	r1, r9
 80064be:	008b      	lsls	r3, r1, #2
 80064c0:	4641      	mov	r1, r8
 80064c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c6:	4641      	mov	r1, r8
 80064c8:	008a      	lsls	r2, r1, #2
 80064ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ce:	f7f9 fedf 	bl	8000290 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4b39      	ldr	r3, [pc, #228]	; (80065bc <UART_SetConfig+0x4e4>)
 80064d8:	fba3 1302 	umull	r1, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	2164      	movs	r1, #100	; 0x64
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	3332      	adds	r3, #50	; 0x32
 80064ea:	4a34      	ldr	r2, [pc, #208]	; (80065bc <UART_SetConfig+0x4e4>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f6:	441c      	add	r4, r3
 80064f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fc:	2200      	movs	r2, #0
 80064fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006500:	677a      	str	r2, [r7, #116]	; 0x74
 8006502:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006506:	4642      	mov	r2, r8
 8006508:	464b      	mov	r3, r9
 800650a:	1891      	adds	r1, r2, r2
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	415b      	adcs	r3, r3
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006516:	4641      	mov	r1, r8
 8006518:	1851      	adds	r1, r2, r1
 800651a:	6039      	str	r1, [r7, #0]
 800651c:	4649      	mov	r1, r9
 800651e:	414b      	adcs	r3, r1
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800652e:	4659      	mov	r1, fp
 8006530:	00cb      	lsls	r3, r1, #3
 8006532:	4651      	mov	r1, sl
 8006534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006538:	4651      	mov	r1, sl
 800653a:	00ca      	lsls	r2, r1, #3
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	4603      	mov	r3, r0
 8006542:	4642      	mov	r2, r8
 8006544:	189b      	adds	r3, r3, r2
 8006546:	66bb      	str	r3, [r7, #104]	; 0x68
 8006548:	464b      	mov	r3, r9
 800654a:	460a      	mov	r2, r1
 800654c:	eb42 0303 	adc.w	r3, r2, r3
 8006550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	663b      	str	r3, [r7, #96]	; 0x60
 800655c:	667a      	str	r2, [r7, #100]	; 0x64
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800656a:	4649      	mov	r1, r9
 800656c:	008b      	lsls	r3, r1, #2
 800656e:	4641      	mov	r1, r8
 8006570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006574:	4641      	mov	r1, r8
 8006576:	008a      	lsls	r2, r1, #2
 8006578:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800657c:	f7f9 fe88 	bl	8000290 <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <UART_SetConfig+0x4e4>)
 8006586:	fba3 1302 	umull	r1, r3, r3, r2
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2164      	movs	r1, #100	; 0x64
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	3332      	adds	r3, #50	; 0x32
 8006598:	4a08      	ldr	r2, [pc, #32]	; (80065bc <UART_SetConfig+0x4e4>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4422      	add	r2, r4
 80065ac:	609a      	str	r2, [r3, #8]
}
 80065ae:	bf00      	nop
 80065b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ba:	bf00      	nop
 80065bc:	51eb851f 	.word	0x51eb851f

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	; (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000050 	.word	0x20000050

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f000 fc8e 	bl	8006f00 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	080077ec 	.word	0x080077ec
 8006608:	080077ec 	.word	0x080077ec
 800660c:	080077ec 	.word	0x080077ec
 8006610:	080077f0 	.word	0x080077f0

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <siprintf>:
 8006624:	b40e      	push	{r1, r2, r3}
 8006626:	b500      	push	{lr}
 8006628:	b09c      	sub	sp, #112	; 0x70
 800662a:	ab1d      	add	r3, sp, #116	; 0x74
 800662c:	9002      	str	r0, [sp, #8]
 800662e:	9006      	str	r0, [sp, #24]
 8006630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006634:	4809      	ldr	r0, [pc, #36]	; (800665c <siprintf+0x38>)
 8006636:	9107      	str	r1, [sp, #28]
 8006638:	9104      	str	r1, [sp, #16]
 800663a:	4909      	ldr	r1, [pc, #36]	; (8006660 <siprintf+0x3c>)
 800663c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006640:	9105      	str	r1, [sp, #20]
 8006642:	6800      	ldr	r0, [r0, #0]
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	a902      	add	r1, sp, #8
 8006648:	f000 f868 	bl	800671c <_svfiprintf_r>
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	b01c      	add	sp, #112	; 0x70
 8006654:	f85d eb04 	ldr.w	lr, [sp], #4
 8006658:	b003      	add	sp, #12
 800665a:	4770      	bx	lr
 800665c:	20000050 	.word	0x20000050
 8006660:	ffff0208 	.word	0xffff0208

08006664 <__ssputs_r>:
 8006664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	688e      	ldr	r6, [r1, #8]
 800666a:	429e      	cmp	r6, r3
 800666c:	4682      	mov	sl, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4690      	mov	r8, r2
 8006672:	461f      	mov	r7, r3
 8006674:	d838      	bhi.n	80066e8 <__ssputs_r+0x84>
 8006676:	898a      	ldrh	r2, [r1, #12]
 8006678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800667c:	d032      	beq.n	80066e4 <__ssputs_r+0x80>
 800667e:	6825      	ldr	r5, [r4, #0]
 8006680:	6909      	ldr	r1, [r1, #16]
 8006682:	eba5 0901 	sub.w	r9, r5, r1
 8006686:	6965      	ldr	r5, [r4, #20]
 8006688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800668c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006690:	3301      	adds	r3, #1
 8006692:	444b      	add	r3, r9
 8006694:	106d      	asrs	r5, r5, #1
 8006696:	429d      	cmp	r5, r3
 8006698:	bf38      	it	cc
 800669a:	461d      	movcc	r5, r3
 800669c:	0553      	lsls	r3, r2, #21
 800669e:	d531      	bpl.n	8006704 <__ssputs_r+0xa0>
 80066a0:	4629      	mov	r1, r5
 80066a2:	f000 fb63 	bl	8006d6c <_malloc_r>
 80066a6:	4606      	mov	r6, r0
 80066a8:	b950      	cbnz	r0, 80066c0 <__ssputs_r+0x5c>
 80066aa:	230c      	movs	r3, #12
 80066ac:	f8ca 3000 	str.w	r3, [sl]
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b6:	81a3      	strh	r3, [r4, #12]
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c0:	6921      	ldr	r1, [r4, #16]
 80066c2:	464a      	mov	r2, r9
 80066c4:	f000 fabe 	bl	8006c44 <memcpy>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	6126      	str	r6, [r4, #16]
 80066d6:	6165      	str	r5, [r4, #20]
 80066d8:	444e      	add	r6, r9
 80066da:	eba5 0509 	sub.w	r5, r5, r9
 80066de:	6026      	str	r6, [r4, #0]
 80066e0:	60a5      	str	r5, [r4, #8]
 80066e2:	463e      	mov	r6, r7
 80066e4:	42be      	cmp	r6, r7
 80066e6:	d900      	bls.n	80066ea <__ssputs_r+0x86>
 80066e8:	463e      	mov	r6, r7
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	4632      	mov	r2, r6
 80066ee:	4641      	mov	r1, r8
 80066f0:	f000 fab6 	bl	8006c60 <memmove>
 80066f4:	68a3      	ldr	r3, [r4, #8]
 80066f6:	1b9b      	subs	r3, r3, r6
 80066f8:	60a3      	str	r3, [r4, #8]
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	4433      	add	r3, r6
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	2000      	movs	r0, #0
 8006702:	e7db      	b.n	80066bc <__ssputs_r+0x58>
 8006704:	462a      	mov	r2, r5
 8006706:	f000 fba5 	bl	8006e54 <_realloc_r>
 800670a:	4606      	mov	r6, r0
 800670c:	2800      	cmp	r0, #0
 800670e:	d1e1      	bne.n	80066d4 <__ssputs_r+0x70>
 8006710:	6921      	ldr	r1, [r4, #16]
 8006712:	4650      	mov	r0, sl
 8006714:	f000 fabe 	bl	8006c94 <_free_r>
 8006718:	e7c7      	b.n	80066aa <__ssputs_r+0x46>
	...

0800671c <_svfiprintf_r>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	4698      	mov	r8, r3
 8006722:	898b      	ldrh	r3, [r1, #12]
 8006724:	061b      	lsls	r3, r3, #24
 8006726:	b09d      	sub	sp, #116	; 0x74
 8006728:	4607      	mov	r7, r0
 800672a:	460d      	mov	r5, r1
 800672c:	4614      	mov	r4, r2
 800672e:	d50e      	bpl.n	800674e <_svfiprintf_r+0x32>
 8006730:	690b      	ldr	r3, [r1, #16]
 8006732:	b963      	cbnz	r3, 800674e <_svfiprintf_r+0x32>
 8006734:	2140      	movs	r1, #64	; 0x40
 8006736:	f000 fb19 	bl	8006d6c <_malloc_r>
 800673a:	6028      	str	r0, [r5, #0]
 800673c:	6128      	str	r0, [r5, #16]
 800673e:	b920      	cbnz	r0, 800674a <_svfiprintf_r+0x2e>
 8006740:	230c      	movs	r3, #12
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	e0d1      	b.n	80068ee <_svfiprintf_r+0x1d2>
 800674a:	2340      	movs	r3, #64	; 0x40
 800674c:	616b      	str	r3, [r5, #20]
 800674e:	2300      	movs	r3, #0
 8006750:	9309      	str	r3, [sp, #36]	; 0x24
 8006752:	2320      	movs	r3, #32
 8006754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006758:	f8cd 800c 	str.w	r8, [sp, #12]
 800675c:	2330      	movs	r3, #48	; 0x30
 800675e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006908 <_svfiprintf_r+0x1ec>
 8006762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006766:	f04f 0901 	mov.w	r9, #1
 800676a:	4623      	mov	r3, r4
 800676c:	469a      	mov	sl, r3
 800676e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006772:	b10a      	cbz	r2, 8006778 <_svfiprintf_r+0x5c>
 8006774:	2a25      	cmp	r2, #37	; 0x25
 8006776:	d1f9      	bne.n	800676c <_svfiprintf_r+0x50>
 8006778:	ebba 0b04 	subs.w	fp, sl, r4
 800677c:	d00b      	beq.n	8006796 <_svfiprintf_r+0x7a>
 800677e:	465b      	mov	r3, fp
 8006780:	4622      	mov	r2, r4
 8006782:	4629      	mov	r1, r5
 8006784:	4638      	mov	r0, r7
 8006786:	f7ff ff6d 	bl	8006664 <__ssputs_r>
 800678a:	3001      	adds	r0, #1
 800678c:	f000 80aa 	beq.w	80068e4 <_svfiprintf_r+0x1c8>
 8006790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006792:	445a      	add	r2, fp
 8006794:	9209      	str	r2, [sp, #36]	; 0x24
 8006796:	f89a 3000 	ldrb.w	r3, [sl]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80a2 	beq.w	80068e4 <_svfiprintf_r+0x1c8>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295
 80067a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067aa:	f10a 0a01 	add.w	sl, sl, #1
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	9307      	str	r3, [sp, #28]
 80067b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067b6:	931a      	str	r3, [sp, #104]	; 0x68
 80067b8:	4654      	mov	r4, sl
 80067ba:	2205      	movs	r2, #5
 80067bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c0:	4851      	ldr	r0, [pc, #324]	; (8006908 <_svfiprintf_r+0x1ec>)
 80067c2:	f7f9 fd15 	bl	80001f0 <memchr>
 80067c6:	9a04      	ldr	r2, [sp, #16]
 80067c8:	b9d8      	cbnz	r0, 8006802 <_svfiprintf_r+0xe6>
 80067ca:	06d0      	lsls	r0, r2, #27
 80067cc:	bf44      	itt	mi
 80067ce:	2320      	movmi	r3, #32
 80067d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067d4:	0711      	lsls	r1, r2, #28
 80067d6:	bf44      	itt	mi
 80067d8:	232b      	movmi	r3, #43	; 0x2b
 80067da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067de:	f89a 3000 	ldrb.w	r3, [sl]
 80067e2:	2b2a      	cmp	r3, #42	; 0x2a
 80067e4:	d015      	beq.n	8006812 <_svfiprintf_r+0xf6>
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	4654      	mov	r4, sl
 80067ea:	2000      	movs	r0, #0
 80067ec:	f04f 0c0a 	mov.w	ip, #10
 80067f0:	4621      	mov	r1, r4
 80067f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f6:	3b30      	subs	r3, #48	; 0x30
 80067f8:	2b09      	cmp	r3, #9
 80067fa:	d94e      	bls.n	800689a <_svfiprintf_r+0x17e>
 80067fc:	b1b0      	cbz	r0, 800682c <_svfiprintf_r+0x110>
 80067fe:	9207      	str	r2, [sp, #28]
 8006800:	e014      	b.n	800682c <_svfiprintf_r+0x110>
 8006802:	eba0 0308 	sub.w	r3, r0, r8
 8006806:	fa09 f303 	lsl.w	r3, r9, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	46a2      	mov	sl, r4
 8006810:	e7d2      	b.n	80067b8 <_svfiprintf_r+0x9c>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	1d19      	adds	r1, r3, #4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	9103      	str	r1, [sp, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfbb      	ittet	lt
 800681e:	425b      	neglt	r3, r3
 8006820:	f042 0202 	orrlt.w	r2, r2, #2
 8006824:	9307      	strge	r3, [sp, #28]
 8006826:	9307      	strlt	r3, [sp, #28]
 8006828:	bfb8      	it	lt
 800682a:	9204      	strlt	r2, [sp, #16]
 800682c:	7823      	ldrb	r3, [r4, #0]
 800682e:	2b2e      	cmp	r3, #46	; 0x2e
 8006830:	d10c      	bne.n	800684c <_svfiprintf_r+0x130>
 8006832:	7863      	ldrb	r3, [r4, #1]
 8006834:	2b2a      	cmp	r3, #42	; 0x2a
 8006836:	d135      	bne.n	80068a4 <_svfiprintf_r+0x188>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	9203      	str	r2, [sp, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfb8      	it	lt
 8006844:	f04f 33ff 	movlt.w	r3, #4294967295
 8006848:	3402      	adds	r4, #2
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006918 <_svfiprintf_r+0x1fc>
 8006850:	7821      	ldrb	r1, [r4, #0]
 8006852:	2203      	movs	r2, #3
 8006854:	4650      	mov	r0, sl
 8006856:	f7f9 fccb 	bl	80001f0 <memchr>
 800685a:	b140      	cbz	r0, 800686e <_svfiprintf_r+0x152>
 800685c:	2340      	movs	r3, #64	; 0x40
 800685e:	eba0 000a 	sub.w	r0, r0, sl
 8006862:	fa03 f000 	lsl.w	r0, r3, r0
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	4303      	orrs	r3, r0
 800686a:	3401      	adds	r4, #1
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006872:	4826      	ldr	r0, [pc, #152]	; (800690c <_svfiprintf_r+0x1f0>)
 8006874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006878:	2206      	movs	r2, #6
 800687a:	f7f9 fcb9 	bl	80001f0 <memchr>
 800687e:	2800      	cmp	r0, #0
 8006880:	d038      	beq.n	80068f4 <_svfiprintf_r+0x1d8>
 8006882:	4b23      	ldr	r3, [pc, #140]	; (8006910 <_svfiprintf_r+0x1f4>)
 8006884:	bb1b      	cbnz	r3, 80068ce <_svfiprintf_r+0x1b2>
 8006886:	9b03      	ldr	r3, [sp, #12]
 8006888:	3307      	adds	r3, #7
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	3308      	adds	r3, #8
 8006890:	9303      	str	r3, [sp, #12]
 8006892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006894:	4433      	add	r3, r6
 8006896:	9309      	str	r3, [sp, #36]	; 0x24
 8006898:	e767      	b.n	800676a <_svfiprintf_r+0x4e>
 800689a:	fb0c 3202 	mla	r2, ip, r2, r3
 800689e:	460c      	mov	r4, r1
 80068a0:	2001      	movs	r0, #1
 80068a2:	e7a5      	b.n	80067f0 <_svfiprintf_r+0xd4>
 80068a4:	2300      	movs	r3, #0
 80068a6:	3401      	adds	r4, #1
 80068a8:	9305      	str	r3, [sp, #20]
 80068aa:	4619      	mov	r1, r3
 80068ac:	f04f 0c0a 	mov.w	ip, #10
 80068b0:	4620      	mov	r0, r4
 80068b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b6:	3a30      	subs	r2, #48	; 0x30
 80068b8:	2a09      	cmp	r2, #9
 80068ba:	d903      	bls.n	80068c4 <_svfiprintf_r+0x1a8>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0c5      	beq.n	800684c <_svfiprintf_r+0x130>
 80068c0:	9105      	str	r1, [sp, #20]
 80068c2:	e7c3      	b.n	800684c <_svfiprintf_r+0x130>
 80068c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c8:	4604      	mov	r4, r0
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7f0      	b.n	80068b0 <_svfiprintf_r+0x194>
 80068ce:	ab03      	add	r3, sp, #12
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	462a      	mov	r2, r5
 80068d4:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <_svfiprintf_r+0x1f8>)
 80068d6:	a904      	add	r1, sp, #16
 80068d8:	4638      	mov	r0, r7
 80068da:	f3af 8000 	nop.w
 80068de:	1c42      	adds	r2, r0, #1
 80068e0:	4606      	mov	r6, r0
 80068e2:	d1d6      	bne.n	8006892 <_svfiprintf_r+0x176>
 80068e4:	89ab      	ldrh	r3, [r5, #12]
 80068e6:	065b      	lsls	r3, r3, #25
 80068e8:	f53f af2c 	bmi.w	8006744 <_svfiprintf_r+0x28>
 80068ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ee:	b01d      	add	sp, #116	; 0x74
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	ab03      	add	r3, sp, #12
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	462a      	mov	r2, r5
 80068fa:	4b06      	ldr	r3, [pc, #24]	; (8006914 <_svfiprintf_r+0x1f8>)
 80068fc:	a904      	add	r1, sp, #16
 80068fe:	4638      	mov	r0, r7
 8006900:	f000 f87a 	bl	80069f8 <_printf_i>
 8006904:	e7eb      	b.n	80068de <_svfiprintf_r+0x1c2>
 8006906:	bf00      	nop
 8006908:	080077b0 	.word	0x080077b0
 800690c:	080077ba 	.word	0x080077ba
 8006910:	00000000 	.word	0x00000000
 8006914:	08006665 	.word	0x08006665
 8006918:	080077b6 	.word	0x080077b6

0800691c <_printf_common>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	4616      	mov	r6, r2
 8006922:	4699      	mov	r9, r3
 8006924:	688a      	ldr	r2, [r1, #8]
 8006926:	690b      	ldr	r3, [r1, #16]
 8006928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800692c:	4293      	cmp	r3, r2
 800692e:	bfb8      	it	lt
 8006930:	4613      	movlt	r3, r2
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006938:	4607      	mov	r7, r0
 800693a:	460c      	mov	r4, r1
 800693c:	b10a      	cbz	r2, 8006942 <_printf_common+0x26>
 800693e:	3301      	adds	r3, #1
 8006940:	6033      	str	r3, [r6, #0]
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	0699      	lsls	r1, r3, #26
 8006946:	bf42      	ittt	mi
 8006948:	6833      	ldrmi	r3, [r6, #0]
 800694a:	3302      	addmi	r3, #2
 800694c:	6033      	strmi	r3, [r6, #0]
 800694e:	6825      	ldr	r5, [r4, #0]
 8006950:	f015 0506 	ands.w	r5, r5, #6
 8006954:	d106      	bne.n	8006964 <_printf_common+0x48>
 8006956:	f104 0a19 	add.w	sl, r4, #25
 800695a:	68e3      	ldr	r3, [r4, #12]
 800695c:	6832      	ldr	r2, [r6, #0]
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	42ab      	cmp	r3, r5
 8006962:	dc26      	bgt.n	80069b2 <_printf_common+0x96>
 8006964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006968:	1e13      	subs	r3, r2, #0
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	bf18      	it	ne
 800696e:	2301      	movne	r3, #1
 8006970:	0692      	lsls	r2, r2, #26
 8006972:	d42b      	bmi.n	80069cc <_printf_common+0xb0>
 8006974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006978:	4649      	mov	r1, r9
 800697a:	4638      	mov	r0, r7
 800697c:	47c0      	blx	r8
 800697e:	3001      	adds	r0, #1
 8006980:	d01e      	beq.n	80069c0 <_printf_common+0xa4>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	68e5      	ldr	r5, [r4, #12]
 8006986:	6832      	ldr	r2, [r6, #0]
 8006988:	f003 0306 	and.w	r3, r3, #6
 800698c:	2b04      	cmp	r3, #4
 800698e:	bf08      	it	eq
 8006990:	1aad      	subeq	r5, r5, r2
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	6922      	ldr	r2, [r4, #16]
 8006996:	bf0c      	ite	eq
 8006998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800699c:	2500      	movne	r5, #0
 800699e:	4293      	cmp	r3, r2
 80069a0:	bfc4      	itt	gt
 80069a2:	1a9b      	subgt	r3, r3, r2
 80069a4:	18ed      	addgt	r5, r5, r3
 80069a6:	2600      	movs	r6, #0
 80069a8:	341a      	adds	r4, #26
 80069aa:	42b5      	cmp	r5, r6
 80069ac:	d11a      	bne.n	80069e4 <_printf_common+0xc8>
 80069ae:	2000      	movs	r0, #0
 80069b0:	e008      	b.n	80069c4 <_printf_common+0xa8>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4652      	mov	r2, sl
 80069b6:	4649      	mov	r1, r9
 80069b8:	4638      	mov	r0, r7
 80069ba:	47c0      	blx	r8
 80069bc:	3001      	adds	r0, #1
 80069be:	d103      	bne.n	80069c8 <_printf_common+0xac>
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	3501      	adds	r5, #1
 80069ca:	e7c6      	b.n	800695a <_printf_common+0x3e>
 80069cc:	18e1      	adds	r1, r4, r3
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	2030      	movs	r0, #48	; 0x30
 80069d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069d6:	4422      	add	r2, r4
 80069d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069e0:	3302      	adds	r3, #2
 80069e2:	e7c7      	b.n	8006974 <_printf_common+0x58>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4622      	mov	r2, r4
 80069e8:	4649      	mov	r1, r9
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c0      	blx	r8
 80069ee:	3001      	adds	r0, #1
 80069f0:	d0e6      	beq.n	80069c0 <_printf_common+0xa4>
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7d9      	b.n	80069aa <_printf_common+0x8e>
	...

080069f8 <_printf_i>:
 80069f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	7e0f      	ldrb	r7, [r1, #24]
 80069fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a00:	2f78      	cmp	r7, #120	; 0x78
 8006a02:	4691      	mov	r9, r2
 8006a04:	4680      	mov	r8, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	469a      	mov	sl, r3
 8006a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a0e:	d807      	bhi.n	8006a20 <_printf_i+0x28>
 8006a10:	2f62      	cmp	r7, #98	; 0x62
 8006a12:	d80a      	bhi.n	8006a2a <_printf_i+0x32>
 8006a14:	2f00      	cmp	r7, #0
 8006a16:	f000 80d8 	beq.w	8006bca <_printf_i+0x1d2>
 8006a1a:	2f58      	cmp	r7, #88	; 0x58
 8006a1c:	f000 80a3 	beq.w	8006b66 <_printf_i+0x16e>
 8006a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a28:	e03a      	b.n	8006aa0 <_printf_i+0xa8>
 8006a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a2e:	2b15      	cmp	r3, #21
 8006a30:	d8f6      	bhi.n	8006a20 <_printf_i+0x28>
 8006a32:	a101      	add	r1, pc, #4	; (adr r1, 8006a38 <_printf_i+0x40>)
 8006a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a38:	08006a91 	.word	0x08006a91
 8006a3c:	08006aa5 	.word	0x08006aa5
 8006a40:	08006a21 	.word	0x08006a21
 8006a44:	08006a21 	.word	0x08006a21
 8006a48:	08006a21 	.word	0x08006a21
 8006a4c:	08006a21 	.word	0x08006a21
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	08006a21 	.word	0x08006a21
 8006a58:	08006a21 	.word	0x08006a21
 8006a5c:	08006a21 	.word	0x08006a21
 8006a60:	08006a21 	.word	0x08006a21
 8006a64:	08006bb1 	.word	0x08006bb1
 8006a68:	08006ad5 	.word	0x08006ad5
 8006a6c:	08006b93 	.word	0x08006b93
 8006a70:	08006a21 	.word	0x08006a21
 8006a74:	08006a21 	.word	0x08006a21
 8006a78:	08006bd3 	.word	0x08006bd3
 8006a7c:	08006a21 	.word	0x08006a21
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a21 	.word	0x08006a21
 8006a88:	08006a21 	.word	0x08006a21
 8006a8c:	08006b9b 	.word	0x08006b9b
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	602a      	str	r2, [r5, #0]
 8006a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0a3      	b.n	8006bec <_printf_i+0x1f4>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	6829      	ldr	r1, [r5, #0]
 8006aa8:	0606      	lsls	r6, r0, #24
 8006aaa:	f101 0304 	add.w	r3, r1, #4
 8006aae:	d50a      	bpl.n	8006ac6 <_printf_i+0xce>
 8006ab0:	680e      	ldr	r6, [r1, #0]
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	2e00      	cmp	r6, #0
 8006ab6:	da03      	bge.n	8006ac0 <_printf_i+0xc8>
 8006ab8:	232d      	movs	r3, #45	; 0x2d
 8006aba:	4276      	negs	r6, r6
 8006abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac0:	485e      	ldr	r0, [pc, #376]	; (8006c3c <_printf_i+0x244>)
 8006ac2:	230a      	movs	r3, #10
 8006ac4:	e019      	b.n	8006afa <_printf_i+0x102>
 8006ac6:	680e      	ldr	r6, [r1, #0]
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ace:	bf18      	it	ne
 8006ad0:	b236      	sxthne	r6, r6
 8006ad2:	e7ef      	b.n	8006ab4 <_printf_i+0xbc>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	6029      	str	r1, [r5, #0]
 8006adc:	0601      	lsls	r1, r0, #24
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0xec>
 8006ae0:	681e      	ldr	r6, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <_printf_i+0xf2>
 8006ae4:	0646      	lsls	r6, r0, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0xe8>
 8006ae8:	881e      	ldrh	r6, [r3, #0]
 8006aea:	4854      	ldr	r0, [pc, #336]	; (8006c3c <_printf_i+0x244>)
 8006aec:	2f6f      	cmp	r7, #111	; 0x6f
 8006aee:	bf0c      	ite	eq
 8006af0:	2308      	moveq	r3, #8
 8006af2:	230a      	movne	r3, #10
 8006af4:	2100      	movs	r1, #0
 8006af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006afa:	6865      	ldr	r5, [r4, #4]
 8006afc:	60a5      	str	r5, [r4, #8]
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	bfa2      	ittt	ge
 8006b02:	6821      	ldrge	r1, [r4, #0]
 8006b04:	f021 0104 	bicge.w	r1, r1, #4
 8006b08:	6021      	strge	r1, [r4, #0]
 8006b0a:	b90e      	cbnz	r6, 8006b10 <_printf_i+0x118>
 8006b0c:	2d00      	cmp	r5, #0
 8006b0e:	d04d      	beq.n	8006bac <_printf_i+0x1b4>
 8006b10:	4615      	mov	r5, r2
 8006b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b16:	fb03 6711 	mls	r7, r3, r1, r6
 8006b1a:	5dc7      	ldrb	r7, [r0, r7]
 8006b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b20:	4637      	mov	r7, r6
 8006b22:	42bb      	cmp	r3, r7
 8006b24:	460e      	mov	r6, r1
 8006b26:	d9f4      	bls.n	8006b12 <_printf_i+0x11a>
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d10b      	bne.n	8006b44 <_printf_i+0x14c>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	07de      	lsls	r6, r3, #31
 8006b30:	d508      	bpl.n	8006b44 <_printf_i+0x14c>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	6861      	ldr	r1, [r4, #4]
 8006b36:	4299      	cmp	r1, r3
 8006b38:	bfde      	ittt	le
 8006b3a:	2330      	movle	r3, #48	; 0x30
 8006b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b44:	1b52      	subs	r2, r2, r5
 8006b46:	6122      	str	r2, [r4, #16]
 8006b48:	f8cd a000 	str.w	sl, [sp]
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	aa03      	add	r2, sp, #12
 8006b50:	4621      	mov	r1, r4
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7ff fee2 	bl	800691c <_printf_common>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d14c      	bne.n	8006bf6 <_printf_i+0x1fe>
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	b004      	add	sp, #16
 8006b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b66:	4835      	ldr	r0, [pc, #212]	; (8006c3c <_printf_i+0x244>)
 8006b68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b6c:	6829      	ldr	r1, [r5, #0]
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b74:	6029      	str	r1, [r5, #0]
 8006b76:	061d      	lsls	r5, r3, #24
 8006b78:	d514      	bpl.n	8006ba4 <_printf_i+0x1ac>
 8006b7a:	07df      	lsls	r7, r3, #31
 8006b7c:	bf44      	itt	mi
 8006b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b82:	6023      	strmi	r3, [r4, #0]
 8006b84:	b91e      	cbnz	r6, 8006b8e <_printf_i+0x196>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	f023 0320 	bic.w	r3, r3, #32
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	2310      	movs	r3, #16
 8006b90:	e7b0      	b.n	8006af4 <_printf_i+0xfc>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f043 0320 	orr.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	2378      	movs	r3, #120	; 0x78
 8006b9c:	4828      	ldr	r0, [pc, #160]	; (8006c40 <_printf_i+0x248>)
 8006b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ba2:	e7e3      	b.n	8006b6c <_printf_i+0x174>
 8006ba4:	0659      	lsls	r1, r3, #25
 8006ba6:	bf48      	it	mi
 8006ba8:	b2b6      	uxthmi	r6, r6
 8006baa:	e7e6      	b.n	8006b7a <_printf_i+0x182>
 8006bac:	4615      	mov	r5, r2
 8006bae:	e7bb      	b.n	8006b28 <_printf_i+0x130>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	6826      	ldr	r6, [r4, #0]
 8006bb4:	6961      	ldr	r1, [r4, #20]
 8006bb6:	1d18      	adds	r0, r3, #4
 8006bb8:	6028      	str	r0, [r5, #0]
 8006bba:	0635      	lsls	r5, r6, #24
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	d501      	bpl.n	8006bc4 <_printf_i+0x1cc>
 8006bc0:	6019      	str	r1, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <_printf_i+0x1d2>
 8006bc4:	0670      	lsls	r0, r6, #25
 8006bc6:	d5fb      	bpl.n	8006bc0 <_printf_i+0x1c8>
 8006bc8:	8019      	strh	r1, [r3, #0]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6123      	str	r3, [r4, #16]
 8006bce:	4615      	mov	r5, r2
 8006bd0:	e7ba      	b.n	8006b48 <_printf_i+0x150>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	1d1a      	adds	r2, r3, #4
 8006bd6:	602a      	str	r2, [r5, #0]
 8006bd8:	681d      	ldr	r5, [r3, #0]
 8006bda:	6862      	ldr	r2, [r4, #4]
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4628      	mov	r0, r5
 8006be0:	f7f9 fb06 	bl	80001f0 <memchr>
 8006be4:	b108      	cbz	r0, 8006bea <_printf_i+0x1f2>
 8006be6:	1b40      	subs	r0, r0, r5
 8006be8:	6060      	str	r0, [r4, #4]
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	6123      	str	r3, [r4, #16]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	e7a8      	b.n	8006b48 <_printf_i+0x150>
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	47d0      	blx	sl
 8006c00:	3001      	adds	r0, #1
 8006c02:	d0ab      	beq.n	8006b5c <_printf_i+0x164>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	079b      	lsls	r3, r3, #30
 8006c08:	d413      	bmi.n	8006c32 <_printf_i+0x23a>
 8006c0a:	68e0      	ldr	r0, [r4, #12]
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	4298      	cmp	r0, r3
 8006c10:	bfb8      	it	lt
 8006c12:	4618      	movlt	r0, r3
 8006c14:	e7a4      	b.n	8006b60 <_printf_i+0x168>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4632      	mov	r2, r6
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	47d0      	blx	sl
 8006c20:	3001      	adds	r0, #1
 8006c22:	d09b      	beq.n	8006b5c <_printf_i+0x164>
 8006c24:	3501      	adds	r5, #1
 8006c26:	68e3      	ldr	r3, [r4, #12]
 8006c28:	9903      	ldr	r1, [sp, #12]
 8006c2a:	1a5b      	subs	r3, r3, r1
 8006c2c:	42ab      	cmp	r3, r5
 8006c2e:	dcf2      	bgt.n	8006c16 <_printf_i+0x21e>
 8006c30:	e7eb      	b.n	8006c0a <_printf_i+0x212>
 8006c32:	2500      	movs	r5, #0
 8006c34:	f104 0619 	add.w	r6, r4, #25
 8006c38:	e7f5      	b.n	8006c26 <_printf_i+0x22e>
 8006c3a:	bf00      	nop
 8006c3c:	080077c1 	.word	0x080077c1
 8006c40:	080077d2 	.word	0x080077d2

08006c44 <memcpy>:
 8006c44:	440a      	add	r2, r1
 8006c46:	4291      	cmp	r1, r2
 8006c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c4c:	d100      	bne.n	8006c50 <memcpy+0xc>
 8006c4e:	4770      	bx	lr
 8006c50:	b510      	push	{r4, lr}
 8006c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	d1f9      	bne.n	8006c52 <memcpy+0xe>
 8006c5e:	bd10      	pop	{r4, pc}

08006c60 <memmove>:
 8006c60:	4288      	cmp	r0, r1
 8006c62:	b510      	push	{r4, lr}
 8006c64:	eb01 0402 	add.w	r4, r1, r2
 8006c68:	d902      	bls.n	8006c70 <memmove+0x10>
 8006c6a:	4284      	cmp	r4, r0
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	d807      	bhi.n	8006c80 <memmove+0x20>
 8006c70:	1e43      	subs	r3, r0, #1
 8006c72:	42a1      	cmp	r1, r4
 8006c74:	d008      	beq.n	8006c88 <memmove+0x28>
 8006c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c7e:	e7f8      	b.n	8006c72 <memmove+0x12>
 8006c80:	4402      	add	r2, r0
 8006c82:	4601      	mov	r1, r0
 8006c84:	428a      	cmp	r2, r1
 8006c86:	d100      	bne.n	8006c8a <memmove+0x2a>
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c92:	e7f7      	b.n	8006c84 <memmove+0x24>

08006c94 <_free_r>:
 8006c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d044      	beq.n	8006d24 <_free_r+0x90>
 8006c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9e:	9001      	str	r0, [sp, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ca6:	bfb8      	it	lt
 8006ca8:	18e4      	addlt	r4, r4, r3
 8006caa:	f000 f913 	bl	8006ed4 <__malloc_lock>
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <_free_r+0x94>)
 8006cb0:	9801      	ldr	r0, [sp, #4]
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <_free_r+0x30>
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6014      	str	r4, [r2, #0]
 8006cba:	b003      	add	sp, #12
 8006cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cc0:	f000 b90e 	b.w	8006ee0 <__malloc_unlock>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d908      	bls.n	8006cda <_free_r+0x46>
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	1961      	adds	r1, r4, r5
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf01      	itttt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	1949      	addeq	r1, r1, r5
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	e7ed      	b.n	8006cb6 <_free_r+0x22>
 8006cda:	461a      	mov	r2, r3
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b10b      	cbz	r3, 8006ce4 <_free_r+0x50>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x46>
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	1855      	adds	r5, r2, r1
 8006ce8:	42a5      	cmp	r5, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x70>
 8006cec:	6824      	ldr	r4, [r4, #0]
 8006cee:	4421      	add	r1, r4
 8006cf0:	1854      	adds	r4, r2, r1
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	d1e0      	bne.n	8006cba <_free_r+0x26>
 8006cf8:	681c      	ldr	r4, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	4421      	add	r1, r4
 8006d00:	6011      	str	r1, [r2, #0]
 8006d02:	e7da      	b.n	8006cba <_free_r+0x26>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x78>
 8006d06:	230c      	movs	r3, #12
 8006d08:	6003      	str	r3, [r0, #0]
 8006d0a:	e7d6      	b.n	8006cba <_free_r+0x26>
 8006d0c:	6825      	ldr	r5, [r4, #0]
 8006d0e:	1961      	adds	r1, r4, r5
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1949      	addeq	r1, r1, r5
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	6054      	str	r4, [r2, #4]
 8006d22:	e7ca      	b.n	8006cba <_free_r+0x26>
 8006d24:	b003      	add	sp, #12
 8006d26:	bd30      	pop	{r4, r5, pc}
 8006d28:	20000690 	.word	0x20000690

08006d2c <sbrk_aligned>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4e0e      	ldr	r6, [pc, #56]	; (8006d68 <sbrk_aligned+0x3c>)
 8006d30:	460c      	mov	r4, r1
 8006d32:	6831      	ldr	r1, [r6, #0]
 8006d34:	4605      	mov	r5, r0
 8006d36:	b911      	cbnz	r1, 8006d3e <sbrk_aligned+0x12>
 8006d38:	f000 f8bc 	bl	8006eb4 <_sbrk_r>
 8006d3c:	6030      	str	r0, [r6, #0]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 f8b7 	bl	8006eb4 <_sbrk_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	d00a      	beq.n	8006d60 <sbrk_aligned+0x34>
 8006d4a:	1cc4      	adds	r4, r0, #3
 8006d4c:	f024 0403 	bic.w	r4, r4, #3
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d007      	beq.n	8006d64 <sbrk_aligned+0x38>
 8006d54:	1a21      	subs	r1, r4, r0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f8ac 	bl	8006eb4 <_sbrk_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d101      	bne.n	8006d64 <sbrk_aligned+0x38>
 8006d60:	f04f 34ff 	mov.w	r4, #4294967295
 8006d64:	4620      	mov	r0, r4
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	20000694 	.word	0x20000694

08006d6c <_malloc_r>:
 8006d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	1ccd      	adds	r5, r1, #3
 8006d72:	f025 0503 	bic.w	r5, r5, #3
 8006d76:	3508      	adds	r5, #8
 8006d78:	2d0c      	cmp	r5, #12
 8006d7a:	bf38      	it	cc
 8006d7c:	250c      	movcc	r5, #12
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	4607      	mov	r7, r0
 8006d82:	db01      	blt.n	8006d88 <_malloc_r+0x1c>
 8006d84:	42a9      	cmp	r1, r5
 8006d86:	d905      	bls.n	8006d94 <_malloc_r+0x28>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	4e2e      	ldr	r6, [pc, #184]	; (8006e50 <_malloc_r+0xe4>)
 8006d96:	f000 f89d 	bl	8006ed4 <__malloc_lock>
 8006d9a:	6833      	ldr	r3, [r6, #0]
 8006d9c:	461c      	mov	r4, r3
 8006d9e:	bb34      	cbnz	r4, 8006dee <_malloc_r+0x82>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4638      	mov	r0, r7
 8006da4:	f7ff ffc2 	bl	8006d2c <sbrk_aligned>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	4604      	mov	r4, r0
 8006dac:	d14d      	bne.n	8006e4a <_malloc_r+0xde>
 8006dae:	6834      	ldr	r4, [r6, #0]
 8006db0:	4626      	mov	r6, r4
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	d140      	bne.n	8006e38 <_malloc_r+0xcc>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	4631      	mov	r1, r6
 8006dba:	4638      	mov	r0, r7
 8006dbc:	eb04 0803 	add.w	r8, r4, r3
 8006dc0:	f000 f878 	bl	8006eb4 <_sbrk_r>
 8006dc4:	4580      	cmp	r8, r0
 8006dc6:	d13a      	bne.n	8006e3e <_malloc_r+0xd2>
 8006dc8:	6821      	ldr	r1, [r4, #0]
 8006dca:	3503      	adds	r5, #3
 8006dcc:	1a6d      	subs	r5, r5, r1
 8006dce:	f025 0503 	bic.w	r5, r5, #3
 8006dd2:	3508      	adds	r5, #8
 8006dd4:	2d0c      	cmp	r5, #12
 8006dd6:	bf38      	it	cc
 8006dd8:	250c      	movcc	r5, #12
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff ffa5 	bl	8006d2c <sbrk_aligned>
 8006de2:	3001      	adds	r0, #1
 8006de4:	d02b      	beq.n	8006e3e <_malloc_r+0xd2>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	442b      	add	r3, r5
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	e00e      	b.n	8006e0c <_malloc_r+0xa0>
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	1b52      	subs	r2, r2, r5
 8006df2:	d41e      	bmi.n	8006e32 <_malloc_r+0xc6>
 8006df4:	2a0b      	cmp	r2, #11
 8006df6:	d916      	bls.n	8006e26 <_malloc_r+0xba>
 8006df8:	1961      	adds	r1, r4, r5
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	6025      	str	r5, [r4, #0]
 8006dfe:	bf18      	it	ne
 8006e00:	6059      	strne	r1, [r3, #4]
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	bf08      	it	eq
 8006e06:	6031      	streq	r1, [r6, #0]
 8006e08:	5162      	str	r2, [r4, r5]
 8006e0a:	604b      	str	r3, [r1, #4]
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f104 060b 	add.w	r6, r4, #11
 8006e12:	f000 f865 	bl	8006ee0 <__malloc_unlock>
 8006e16:	f026 0607 	bic.w	r6, r6, #7
 8006e1a:	1d23      	adds	r3, r4, #4
 8006e1c:	1af2      	subs	r2, r6, r3
 8006e1e:	d0b6      	beq.n	8006d8e <_malloc_r+0x22>
 8006e20:	1b9b      	subs	r3, r3, r6
 8006e22:	50a3      	str	r3, [r4, r2]
 8006e24:	e7b3      	b.n	8006d8e <_malloc_r+0x22>
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	bf0c      	ite	eq
 8006e2c:	6032      	streq	r2, [r6, #0]
 8006e2e:	605a      	strne	r2, [r3, #4]
 8006e30:	e7ec      	b.n	8006e0c <_malloc_r+0xa0>
 8006e32:	4623      	mov	r3, r4
 8006e34:	6864      	ldr	r4, [r4, #4]
 8006e36:	e7b2      	b.n	8006d9e <_malloc_r+0x32>
 8006e38:	4634      	mov	r4, r6
 8006e3a:	6876      	ldr	r6, [r6, #4]
 8006e3c:	e7b9      	b.n	8006db2 <_malloc_r+0x46>
 8006e3e:	230c      	movs	r3, #12
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4638      	mov	r0, r7
 8006e44:	f000 f84c 	bl	8006ee0 <__malloc_unlock>
 8006e48:	e7a1      	b.n	8006d8e <_malloc_r+0x22>
 8006e4a:	6025      	str	r5, [r4, #0]
 8006e4c:	e7de      	b.n	8006e0c <_malloc_r+0xa0>
 8006e4e:	bf00      	nop
 8006e50:	20000690 	.word	0x20000690

08006e54 <_realloc_r>:
 8006e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	4680      	mov	r8, r0
 8006e5a:	4614      	mov	r4, r2
 8006e5c:	460e      	mov	r6, r1
 8006e5e:	b921      	cbnz	r1, 8006e6a <_realloc_r+0x16>
 8006e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	4611      	mov	r1, r2
 8006e66:	f7ff bf81 	b.w	8006d6c <_malloc_r>
 8006e6a:	b92a      	cbnz	r2, 8006e78 <_realloc_r+0x24>
 8006e6c:	f7ff ff12 	bl	8006c94 <_free_r>
 8006e70:	4625      	mov	r5, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e78:	f000 f838 	bl	8006eec <_malloc_usable_size_r>
 8006e7c:	4284      	cmp	r4, r0
 8006e7e:	4607      	mov	r7, r0
 8006e80:	d802      	bhi.n	8006e88 <_realloc_r+0x34>
 8006e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e86:	d812      	bhi.n	8006eae <_realloc_r+0x5a>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	f7ff ff6e 	bl	8006d6c <_malloc_r>
 8006e90:	4605      	mov	r5, r0
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0ed      	beq.n	8006e72 <_realloc_r+0x1e>
 8006e96:	42bc      	cmp	r4, r7
 8006e98:	4622      	mov	r2, r4
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	bf28      	it	cs
 8006e9e:	463a      	movcs	r2, r7
 8006ea0:	f7ff fed0 	bl	8006c44 <memcpy>
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	f7ff fef4 	bl	8006c94 <_free_r>
 8006eac:	e7e1      	b.n	8006e72 <_realloc_r+0x1e>
 8006eae:	4635      	mov	r5, r6
 8006eb0:	e7df      	b.n	8006e72 <_realloc_r+0x1e>
	...

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	; (8006ed0 <_sbrk_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fb f9e8 	bl	8002294 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	20000698 	.word	0x20000698

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f000 b811 	b.w	8006efc <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	2000069c 	.word	0x2000069c

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f000 b80c 	b.w	8006efe <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	2000069c 	.word	0x2000069c

08006eec <_malloc_usable_size_r>:
 8006eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef0:	1f18      	subs	r0, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bfbc      	itt	lt
 8006ef6:	580b      	ldrlt	r3, [r1, r0]
 8006ef8:	18c0      	addlt	r0, r0, r3
 8006efa:	4770      	bx	lr

08006efc <__retarget_lock_acquire_recursive>:
 8006efc:	4770      	bx	lr

08006efe <__retarget_lock_release_recursive>:
 8006efe:	4770      	bx	lr

08006f00 <_init>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr

08006f0c <_fini>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	bf00      	nop
 8006f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f12:	bc08      	pop	{r3}
 8006f14:	469e      	mov	lr, r3
 8006f16:	4770      	bx	lr
