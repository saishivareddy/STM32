
dwm1000-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ec  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  20000098  08006dc8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08006dc8  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7db  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac3  00000000  00000000  0003a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0003e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b251  00000000  00000000  000406b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169ea  00000000  00000000  0005b909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926d6  00000000  00000000  000722f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001049c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005160  00000000  00000000  00104a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000098 	.word	0x20000098
 8000158:	00000000 	.word	0x00000000
 800015c:	08006410 	.word	0x08006410

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000009c 	.word	0x2000009c
 8000178:	08006410 	.word	0x08006410

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000484:	4b9f      	ldr	r3, [pc, #636]	; (8000704 <dwt_initialise+0x290>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2200      	movs	r2, #0
 800048a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800048c:	4b9d      	ldr	r3, [pc, #628]	; (8000704 <dwt_initialise+0x290>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2200      	movs	r2, #0
 8000492:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000494:	4b9b      	ldr	r3, [pc, #620]	; (8000704 <dwt_initialise+0x290>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2200      	movs	r2, #0
 800049a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800049c:	4b99      	ldr	r3, [pc, #612]	; (8000704 <dwt_initialise+0x290>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80004a4:	4b97      	ldr	r3, [pc, #604]	; (8000704 <dwt_initialise+0x290>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80004ac:	4b95      	ldr	r3, [pc, #596]	; (8000704 <dwt_initialise+0x290>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2200      	movs	r2, #0
 80004b2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80004b4:	4b93      	ldr	r3, [pc, #588]	; (8000704 <dwt_initialise+0x290>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2200      	movs	r2, #0
 80004ba:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80004bc:	f000 f926 	bl	800070c <dwt_readdevid>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4a91      	ldr	r2, [pc, #580]	; (8000708 <dwt_initialise+0x294>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d002      	beq.n	80004ce <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	e115      	b.n	80006fa <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d101      	bne.n	80004dc <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80004d8:	f000 fd92 	bl	8001000 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d004      	beq.n	80004f0 <dwt_initialise+0x7c>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fc53 	bl	8000d9c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 80004f6:	2204      	movs	r2, #4
 80004f8:	2100      	movs	r1, #0
 80004fa:	2024      	movs	r0, #36	; 0x24
 80004fc:	f000 fb98 	bl	8000c30 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d116      	bne.n	8000538 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800050a:	2004      	movs	r0, #4
 800050c:	f000 fbe6 	bl	8000cdc <_dwt_otpread>
 8000510:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d01f      	beq.n	800055a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800051a:	2202      	movs	r2, #2
 800051c:	2112      	movs	r1, #18
 800051e:	202d      	movs	r0, #45	; 0x2d
 8000520:	f000 fb86 	bl	8000c30 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000524:	4b77      	ldr	r3, [pc, #476]	; (8000704 <dwt_initialise+0x290>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	8ada      	ldrh	r2, [r3, #22]
 800052a:	4b76      	ldr	r3, [pc, #472]	; (8000704 <dwt_initialise+0x290>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000532:	b292      	uxth	r2, r2
 8000534:	82da      	strh	r2, [r3, #22]
 8000536:	e010      	b.n	800055a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000538:	2130      	movs	r1, #48	; 0x30
 800053a:	2028      	movs	r0, #40	; 0x28
 800053c:	f000 fb21 	bl	8000b82 <dwt_read32bitoffsetreg>
 8000540:	4603      	mov	r3, r0
 8000542:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000546:	d008      	beq.n	800055a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000548:	4b6e      	ldr	r3, [pc, #440]	; (8000704 <dwt_initialise+0x290>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	8ada      	ldrh	r2, [r3, #22]
 800054e:	4b6d      	ldr	r3, [pc, #436]	; (8000704 <dwt_initialise+0x290>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000556:	b292      	uxth	r2, r2
 8000558:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	2b00      	cmp	r3, #0
 8000562:	d009      	beq.n	8000578 <dwt_initialise+0x104>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d011      	beq.n	8000592 <dwt_initialise+0x11e>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00c      	beq.n	8000592 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000578:	201e      	movs	r0, #30
 800057a:	f000 fbaf 	bl	8000cdc <_dwt_otpread>
 800057e:	4603      	mov	r3, r0
 8000580:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b5e      	ldr	r3, [pc, #376]	; (8000704 <dwt_initialise+0x290>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	72da      	strb	r2, [r3, #11]
 8000590:	e003      	b.n	800059a <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8000592:	4b5c      	ldr	r3, [pc, #368]	; (8000704 <dwt_initialise+0x290>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10b      	bne.n	80005bc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80005a4:	8afb      	ldrh	r3, [r7, #22]
 80005a6:	f003 031f 	and.w	r3, r3, #31
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80005ae:	2310      	movs	r3, #16
 80005b0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80005b2:	8afb      	ldrh	r3, [r7, #22]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fd48 	bl	800104c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d007      	beq.n	80005d6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80005c6:	4b4f      	ldr	r3, [pc, #316]	; (8000704 <dwt_initialise+0x290>)
 80005c8:	681c      	ldr	r4, [r3, #0]
 80005ca:	2006      	movs	r0, #6
 80005cc:	f000 fb86 	bl	8000cdc <_dwt_otpread>
 80005d0:	4603      	mov	r3, r0
 80005d2:	6023      	str	r3, [r4, #0]
 80005d4:	e003      	b.n	80005de <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <dwt_initialise+0x290>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d007      	beq.n	80005f8 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80005e8:	4b46      	ldr	r3, [pc, #280]	; (8000704 <dwt_initialise+0x290>)
 80005ea:	681c      	ldr	r4, [r3, #0]
 80005ec:	2007      	movs	r0, #7
 80005ee:	f000 fb75 	bl	8000cdc <_dwt_otpread>
 80005f2:	4603      	mov	r3, r0
 80005f4:	6063      	str	r3, [r4, #4]
 80005f6:	e003      	b.n	8000600 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <dwt_initialise+0x290>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000606:	2b00      	cmp	r3, #0
 8000608:	d008      	beq.n	800061c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800060a:	2008      	movs	r0, #8
 800060c:	f000 fb66 	bl	8000cdc <_dwt_otpread>
 8000610:	4602      	mov	r2, r0
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <dwt_initialise+0x290>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	721a      	strb	r2, [r3, #8]
 800061a:	e003      	b.n	8000624 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <dwt_initialise+0x290>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800062e:	2009      	movs	r0, #9
 8000630:	f000 fb54 	bl	8000cdc <_dwt_otpread>
 8000634:	4602      	mov	r2, r0
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <dwt_initialise+0x290>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	725a      	strb	r2, [r3, #9]
 800063e:	e003      	b.n	8000648 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <dwt_initialise+0x290>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2200      	movs	r2, #0
 8000646:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	2b00      	cmp	r3, #0
 8000650:	d121      	bne.n	8000696 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00b      	beq.n	8000674 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 800065c:	f000 fb8b 	bl	8000d76 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <dwt_initialise+0x290>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	8ada      	ldrh	r2, [r3, #22]
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <dwt_initialise+0x290>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800066e:	b292      	uxth	r2, r2
 8000670:	82da      	strh	r2, [r3, #22]
 8000672:	e01e      	b.n	80006b2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000674:	2105      	movs	r1, #5
 8000676:	2036      	movs	r0, #54	; 0x36
 8000678:	f000 faaa 	bl	8000bd0 <dwt_read16bitoffsetreg>
 800067c:	4603      	mov	r3, r0
 800067e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000686:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	461a      	mov	r2, r3
 800068c:	2105      	movs	r1, #5
 800068e:	2036      	movs	r0, #54	; 0x36
 8000690:	f000 fae1 	bl	8000c56 <dwt_write16bitoffsetreg>
 8000694:	e00d      	b.n	80006b2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	2b00      	cmp	r3, #0
 800069e:	d108      	bne.n	80006b2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <dwt_initialise+0x290>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	8ada      	ldrh	r2, [r3, #22]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <dwt_initialise+0x290>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ae:	b292      	uxth	r2, r2
 80006b0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fb72 	bl	8000d9c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80006b8:	2200      	movs	r2, #0
 80006ba:	210a      	movs	r1, #10
 80006bc:	202c      	movs	r0, #44	; 0x2c
 80006be:	f000 fab7 	bl	8000c30 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <dwt_initialise+0x290>)
 80006c4:	681c      	ldr	r4, [r3, #0]
 80006c6:	2100      	movs	r1, #0
 80006c8:	2004      	movs	r0, #4
 80006ca:	f000 fa5a 	bl	8000b82 <dwt_read32bitoffsetreg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <dwt_initialise+0x290>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <dwt_initialise+0x290>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f002 0203 	and.w	r2, r2, #3
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <dwt_initialise+0x290>)
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	2100      	movs	r1, #0
 80006ee:	2008      	movs	r0, #8
 80006f0:	f000 fa47 	bl	8000b82 <dwt_read32bitoffsetreg>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80006f8:	2300      	movs	r3, #0

} // end dwt_initialise()
 80006fa:	4618      	mov	r0, r3
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000
 8000708:	deca0130 	.word	0xdeca0130

0800070c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fa35 	bl	8000b82 <dwt_read32bitoffsetreg>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	461a      	mov	r2, r3
 800073c:	4ba1      	ldr	r3, [pc, #644]	; (80009c4 <dwt_configure+0x2a4>)
 800073e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000742:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	3b01      	subs	r3, #1
 800074a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800074c:	7cfb      	ldrb	r3, [r7, #19]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d002      	beq.n	8000758 <dwt_configure+0x38>
 8000752:	7cfb      	ldrb	r3, [r7, #19]
 8000754:	2b07      	cmp	r3, #7
 8000756:	d101      	bne.n	800075c <dwt_configure+0x3c>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <dwt_configure+0x3e>
 800075c:	2300      	movs	r3, #0
 800075e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	79db      	ldrb	r3, [r3, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10b      	bne.n	8000780 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000768:	4b97      	ldr	r3, [pc, #604]	; (80009c8 <dwt_configure+0x2a8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	691a      	ldr	r2, [r3, #16]
 800076e:	4b96      	ldr	r3, [pc, #600]	; (80009c8 <dwt_configure+0x2a8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000776:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	82bb      	strh	r3, [r7, #20]
 800077e:	e007      	b.n	8000790 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000780:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <dwt_configure+0x2a8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	691a      	ldr	r2, [r3, #16]
 8000786:	4b90      	ldr	r3, [pc, #576]	; (80009c8 <dwt_configure+0x2a8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800078e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000790:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <dwt_configure+0x2a8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7a12      	ldrb	r2, [r2, #8]
 8000798:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800079a:	4b8b      	ldr	r3, [pc, #556]	; (80009c8 <dwt_configure+0x2a8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	691a      	ldr	r2, [r3, #16]
 80007a0:	4b89      	ldr	r3, [pc, #548]	; (80009c8 <dwt_configure+0x2a8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80007a8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80007aa:	4b87      	ldr	r3, [pc, #540]	; (80009c8 <dwt_configure+0x2a8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6919      	ldr	r1, [r3, #16]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a1b      	ldrb	r3, [r3, #8]
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <dwt_configure+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	430a      	orrs	r2, r1
 80007c0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80007c2:	4b81      	ldr	r3, [pc, #516]	; (80009c8 <dwt_configure+0x2a8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 fa5e 	bl	8000c8e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80007d2:	8abb      	ldrh	r3, [r7, #20]
 80007d4:	461a      	mov	r2, r3
 80007d6:	f642 0104 	movw	r1, #10244	; 0x2804
 80007da:	202e      	movs	r0, #46	; 0x2e
 80007dc:	f000 fa3b 	bl	8000c56 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80007e0:	7cbb      	ldrb	r3, [r7, #18]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 faa7 	bl	8000d36 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80007e8:	7cfb      	ldrb	r3, [r7, #19]
 80007ea:	4a78      	ldr	r2, [pc, #480]	; (80009cc <dwt_configure+0x2ac>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b77      	ldr	r3, [pc, #476]	; (80009d0 <dwt_configure+0x2b0>)
 80007f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f6:	461a      	mov	r2, r3
 80007f8:	2107      	movs	r1, #7
 80007fa:	202b      	movs	r0, #43	; 0x2b
 80007fc:	f000 fa47 	bl	8000c8e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	4a72      	ldr	r2, [pc, #456]	; (80009cc <dwt_configure+0x2ac>)
 8000804:	5cd3      	ldrb	r3, [r2, r3]
 8000806:	461a      	mov	r2, r3
 8000808:	4b72      	ldr	r3, [pc, #456]	; (80009d4 <dwt_configure+0x2b4>)
 800080a:	5c9b      	ldrb	r3, [r3, r2]
 800080c:	461a      	mov	r2, r3
 800080e:	210b      	movs	r1, #11
 8000810:	202b      	movs	r0, #43	; 0x2b
 8000812:	f000 fa0d 	bl	8000c30 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000816:	7c7b      	ldrb	r3, [r7, #17]
 8000818:	4a6f      	ldr	r2, [pc, #444]	; (80009d8 <dwt_configure+0x2b8>)
 800081a:	5cd3      	ldrb	r3, [r2, r3]
 800081c:	461a      	mov	r2, r3
 800081e:	210b      	movs	r1, #11
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f000 fa05 	bl	8000c30 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000826:	7cfb      	ldrb	r3, [r7, #19]
 8000828:	4a68      	ldr	r2, [pc, #416]	; (80009cc <dwt_configure+0x2ac>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	461a      	mov	r2, r3
 800082e:	4b6b      	ldr	r3, [pc, #428]	; (80009dc <dwt_configure+0x2bc>)
 8000830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000834:	461a      	mov	r2, r3
 8000836:	210c      	movs	r1, #12
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f000 fa28 	bl	8000c8e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	79db      	ldrb	r3, [r3, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	799b      	ldrb	r3, [r3, #6]
 8000848:	4619      	mov	r1, r3
 800084a:	4a65      	ldr	r2, [pc, #404]	; (80009e0 <dwt_configure+0x2c0>)
 800084c:	0043      	lsls	r3, r0, #1
 800084e:	440b      	add	r3, r1
 8000850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000854:	461a      	mov	r2, r3
 8000856:	2102      	movs	r1, #2
 8000858:	2027      	movs	r0, #39	; 0x27
 800085a:	f000 f9fc 	bl	8000c56 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800085e:	7cbb      	ldrb	r3, [r7, #18]
 8000860:	4a60      	ldr	r2, [pc, #384]	; (80009e4 <dwt_configure+0x2c4>)
 8000862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000866:	461a      	mov	r2, r3
 8000868:	2104      	movs	r1, #4
 800086a:	2027      	movs	r0, #39	; 0x27
 800086c:	f000 f9f3 	bl	8000c56 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	79db      	ldrb	r3, [r3, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d105      	bne.n	8000884 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000878:	2264      	movs	r2, #100	; 0x64
 800087a:	2106      	movs	r1, #6
 800087c:	2027      	movs	r0, #39	; 0x27
 800087e:	f000 f9ea 	bl	8000c56 <dwt_write16bitoffsetreg>
 8000882:	e018      	b.n	80008b6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	2b04      	cmp	r3, #4
 800088a:	d10a      	bne.n	80008a2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800088c:	2210      	movs	r2, #16
 800088e:	2106      	movs	r1, #6
 8000890:	2027      	movs	r0, #39	; 0x27
 8000892:	f000 f9e0 	bl	8000c56 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000896:	2210      	movs	r2, #16
 8000898:	2126      	movs	r1, #38	; 0x26
 800089a:	2027      	movs	r0, #39	; 0x27
 800089c:	f000 f9c8 	bl	8000c30 <dwt_write8bitoffsetreg>
 80008a0:	e009      	b.n	80008b6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80008a2:	2220      	movs	r2, #32
 80008a4:	2106      	movs	r1, #6
 80008a6:	2027      	movs	r0, #39	; 0x27
 80008a8:	f000 f9d5 	bl	8000c56 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80008ac:	2228      	movs	r2, #40	; 0x28
 80008ae:	2126      	movs	r1, #38	; 0x26
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f000 f9bd 	bl	8000c30 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80008b6:	7cbb      	ldrb	r3, [r7, #18]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	78d2      	ldrb	r2, [r2, #3]
 80008bc:	4611      	mov	r1, r2
 80008be:	4a4a      	ldr	r2, [pc, #296]	; (80009e8 <dwt_configure+0x2c8>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	2108      	movs	r1, #8
 80008cc:	2027      	movs	r0, #39	; 0x27
 80008ce:	f000 f9de 	bl	8000c8e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	895b      	ldrh	r3, [r3, #10]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d103      	bne.n	80008e2 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f241 0241 	movw	r2, #4161	; 0x1041
 80008e0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	895b      	ldrh	r3, [r3, #10]
 80008e6:	461a      	mov	r2, r3
 80008e8:	2120      	movs	r1, #32
 80008ea:	2027      	movs	r0, #39	; 0x27
 80008ec:	f000 f9b3 	bl	8000c56 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80008f0:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <dwt_configure+0x2cc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	210c      	movs	r1, #12
 80008f8:	2023      	movs	r0, #35	; 0x23
 80008fa:	f000 f9c8 	bl	8000c8e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80008fe:	7cbb      	ldrb	r3, [r7, #18]
 8000900:	4a3a      	ldr	r2, [pc, #232]	; (80009ec <dwt_configure+0x2cc>)
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	889b      	ldrh	r3, [r3, #4]
 8000908:	461a      	mov	r2, r3
 800090a:	2104      	movs	r1, #4
 800090c:	2023      	movs	r0, #35	; 0x23
 800090e:	f000 f9a2 	bl	8000c56 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	799b      	ldrb	r3, [r3, #6]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00d      	beq.n	8000936 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	79db      	ldrb	r3, [r3, #7]
 800091e:	461a      	mov	r2, r3
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <dwt_configure+0x2d0>)
 8000922:	5c9b      	ldrb	r3, [r3, r2]
 8000924:	461a      	mov	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	2021      	movs	r0, #33	; 0x21
 800092a:	f000 f981 	bl	8000c30 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800092e:	2303      	movs	r3, #3
 8000930:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000932:	2301      	movs	r3, #1
 8000934:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800093c:	7cfb      	ldrb	r3, [r7, #19]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000942:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	049b      	lsls	r3, r3, #18
 800094a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800094e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	051b      	lsls	r3, r3, #20
 8000954:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000958:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800095a:	7dbb      	ldrb	r3, [r7, #22]
 800095c:	045b      	lsls	r3, r3, #17
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000962:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	059b      	lsls	r3, r3, #22
 800096a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800096e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000976:	4313      	orrs	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	2100      	movs	r1, #0
 800097e:	201f      	movs	r0, #31
 8000980:	f000 f985 	bl	8000c8e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	789a      	ldrb	r2, [r3, #2]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	4313      	orrs	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	0419      	lsls	r1, r3, #16
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	79db      	ldrb	r3, [r3, #7]
 8000996:	035a      	lsls	r2, r3, #13
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <dwt_configure+0x2a8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	430a      	orrs	r2, r1
 800099e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <dwt_configure+0x2a8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	461a      	mov	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	2008      	movs	r0, #8
 80009ac:	f000 f96f 	bl	8000c8e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80009b0:	2242      	movs	r2, #66	; 0x42
 80009b2:	2100      	movs	r1, #0
 80009b4:	200d      	movs	r0, #13
 80009b6:	f000 f93b 	bl	8000c30 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	080064c4 	.word	0x080064c4
 80009c8:	20000000 	.word	0x20000000
 80009cc:	08006444 	.word	0x08006444
 80009d0:	08006464 	.word	0x08006464
 80009d4:	0800647c 	.word	0x0800647c
 80009d8:	08006484 	.word	0x08006484
 80009dc:	0800644c 	.word	0x0800644c
 80009e0:	08006494 	.word	0x08006494
 80009e4:	080064a0 	.word	0x080064a0
 80009e8:	080064a4 	.word	0x080064a4
 80009ec:	08006488 	.word	0x08006488
 80009f0:	08006490 	.word	0x08006490

080009f4 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
 8000a00:	4613      	mov	r3, r2
 8000a02:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000a04:	887a      	ldrh	r2, [r7, #2]
 8000a06:	8839      	ldrh	r1, [r7, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2011      	movs	r0, #17
 8000a0c:	f000 f860 	bl	8000ad0 <dwt_readfromdevice>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60ba      	str	r2, [r7, #8]
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4603      	mov	r3, r0
 8000a24:	81fb      	strh	r3, [r7, #14]
 8000a26:	460b      	mov	r3, r1
 8000a28:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000a2e:	89bb      	ldrh	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10d      	bne.n	8000a50 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000a34:	89fb      	ldrh	r3, [r7, #14]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	1c59      	adds	r1, r3, #1
 8000a3c:	6179      	str	r1, [r7, #20]
 8000a3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	f107 0118 	add.w	r1, r7, #24
 8000a48:	440b      	add	r3, r1
 8000a4a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000a4e:	e033      	b.n	8000ab8 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	1c59      	adds	r1, r3, #1
 8000a58:	6179      	str	r1, [r7, #20]
 8000a5a:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	f107 0118 	add.w	r1, r7, #24
 8000a64:	440b      	add	r3, r1
 8000a66:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000a6a:	89bb      	ldrh	r3, [r7, #12]
 8000a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a6e:	d80a      	bhi.n	8000a86 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	617a      	str	r2, [r7, #20]
 8000a76:	89ba      	ldrh	r2, [r7, #12]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	f107 0118 	add.w	r1, r7, #24
 8000a7e:	440b      	add	r3, r1
 8000a80:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000a84:	e018      	b.n	8000ab8 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000a86:	89bb      	ldrh	r3, [r7, #12]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	1c59      	adds	r1, r3, #1
 8000a8e:	6179      	str	r1, [r7, #20]
 8000a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	f107 0118 	add.w	r1, r7, #24
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000aa0:	89bb      	ldrh	r3, [r7, #12]
 8000aa2:	09db      	lsrs	r3, r3, #7
 8000aa4:	b299      	uxth	r1, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	617a      	str	r2, [r7, #20]
 8000aac:	b2ca      	uxtb	r2, r1
 8000aae:	f107 0118 	add.w	r1, r7, #24
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	b298      	uxth	r0, r3
 8000abc:	f107 0110 	add.w	r1, r7, #16
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f000 fb04 	bl	80010d0 <writetospi>
} // end dwt_writetodevice()
 8000ac8:	bf00      	nop
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60ba      	str	r2, [r7, #8]
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4603      	mov	r3, r0
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10a      	bne.n	8000b02 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	617a      	str	r2, [r7, #20]
 8000af2:	89fa      	ldrh	r2, [r7, #14]
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	f107 0118 	add.w	r1, r7, #24
 8000afa:	440b      	add	r3, r1
 8000afc:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b00:	e033      	b.n	8000b6a <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	1c59      	adds	r1, r3, #1
 8000b0a:	6179      	str	r1, [r7, #20]
 8000b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	f107 0118 	add.w	r1, r7, #24
 8000b16:	440b      	add	r3, r1
 8000b18:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	d80a      	bhi.n	8000b38 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	617a      	str	r2, [r7, #20]
 8000b28:	89ba      	ldrh	r2, [r7, #12]
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	f107 0118 	add.w	r1, r7, #24
 8000b30:	440b      	add	r3, r1
 8000b32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b36:	e018      	b.n	8000b6a <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	1c59      	adds	r1, r3, #1
 8000b40:	6179      	str	r1, [r7, #20]
 8000b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	f107 0118 	add.w	r1, r7, #24
 8000b4c:	440b      	add	r3, r1
 8000b4e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000b52:	89bb      	ldrh	r3, [r7, #12]
 8000b54:	09db      	lsrs	r3, r3, #7
 8000b56:	b299      	uxth	r1, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	617a      	str	r2, [r7, #20]
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	f107 0118 	add.w	r1, r7, #24
 8000b64:	440b      	add	r3, r1
 8000b66:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	b298      	uxth	r0, r3
 8000b6e:	f107 0110 	add.w	r1, r7, #16
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	f000 fadf 	bl	8001138 <readfromspi>
} // end dwt_readfromdevice()
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	b298      	uxth	r0, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b299      	uxth	r1, r3
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	f7ff ff97 	bl	8000ad0 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	e00b      	b.n	8000bc0 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	f107 010c 	add.w	r1, r7, #12
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	440a      	add	r2, r1
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	daf0      	bge.n	8000ba8 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000bc6:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	b298      	uxth	r0, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b299      	uxth	r1, r3
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2202      	movs	r2, #2
 8000bec:	f7ff ff70 	bl	8000ad0 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000bf0:	7b7b      	ldrb	r3, [r7, #13]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	7b3b      	ldrb	r3, [r7, #12]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000c00:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	b298      	uxth	r0, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b299      	uxth	r1, r3
 8000c1c:	f107 030f 	add.w	r3, r7, #15
 8000c20:	2201      	movs	r2, #1
 8000c22:	f7ff ff55 	bl	8000ad0 <dwt_readfromdevice>

    return regval ;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	b298      	uxth	r0, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	b299      	uxth	r1, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f7ff fee5 	bl	8000a18 <dwt_writetodevice>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	4613      	mov	r3, r2
 8000c62:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	b298      	uxth	r0, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2202      	movs	r2, #2
 8000c82:	f7ff fec9 	bl	8000a18 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e00d      	b.n	8000cbc <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	b2d9      	uxtb	r1, r3
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4413      	add	r3, r2
 8000cac:	460a      	mov	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	ddee      	ble.n	8000ca0 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	b298      	uxth	r0, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	b299      	uxth	r1, r3
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2204      	movs	r2, #4
 8000cd0:	f7ff fea2 	bl	8000a18 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2104      	movs	r1, #4
 8000cec:	202d      	movs	r0, #45	; 0x2d
 8000cee:	f7ff ffb2 	bl	8000c56 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	2106      	movs	r1, #6
 8000cf6:	202d      	movs	r0, #45	; 0x2d
 8000cf8:	f7ff ff9a 	bl	8000c30 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2106      	movs	r1, #6
 8000d00:	202d      	movs	r0, #45	; 0x2d
 8000d02:	f7ff ff95 	bl	8000c30 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000d06:	210a      	movs	r1, #10
 8000d08:	202d      	movs	r0, #45	; 0x2d
 8000d0a:	f7ff ff3a 	bl	8000b82 <dwt_read32bitoffsetreg>
 8000d0e:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000d10:	68fb      	ldr	r3, [r7, #12]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2102      	movs	r1, #2
 8000d22:	202c      	movs	r0, #44	; 0x2c
 8000d24:	f7ff ff84 	bl	8000c30 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000d28:	2202      	movs	r2, #2
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	202c      	movs	r0, #44	; 0x2c
 8000d2e:	f7ff ff7f 	bl	8000c30 <dwt_write8bitoffsetreg>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000d3e:	226d      	movs	r2, #109	; 0x6d
 8000d40:	f640 0106 	movw	r1, #2054	; 0x806
 8000d44:	202e      	movs	r0, #46	; 0x2e
 8000d46:	f7ff ff73 	bl	8000c30 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d007      	beq.n	8000d60 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000d50:	f240 6207 	movw	r2, #1543	; 0x607
 8000d54:	f641 0106 	movw	r1, #6150	; 0x1806
 8000d58:	202e      	movs	r0, #46	; 0x2e
 8000d5a:	f7ff ff7c 	bl	8000c56 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000d5e:	e006      	b.n	8000d6e <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000d60:	f241 6207 	movw	r2, #5639	; 0x1607
 8000d64:	f641 0106 	movw	r1, #6150	; 0x1806
 8000d68:	202e      	movs	r0, #46	; 0x2e
 8000d6a:	f7ff ff74 	bl	8000c56 <dwt_write16bitoffsetreg>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000d7a:	200e      	movs	r0, #14
 8000d7c:	f000 f80e 	bl	8000d9c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000d80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d84:	2106      	movs	r1, #6
 8000d86:	202d      	movs	r0, #45	; 0x2d
 8000d88:	f7ff ff65 	bl	8000c56 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f000 f993 	bl	80010b8 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000d92:	2001      	movs	r0, #1
 8000d94:	f000 f802 	bl	8000d9c <_dwt_enableclocks>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2202      	movs	r2, #2
 8000daa:	2100      	movs	r1, #0
 8000dac:	2036      	movs	r0, #54	; 0x36
 8000dae:	f7ff fe8f 	bl	8000ad0 <dwt_readfromdevice>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0e      	cmp	r3, #14
 8000db6:	d876      	bhi.n	8000ea6 <_dwt_enableclocks+0x10a>
 8000db8:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <_dwt_enableclocks+0x24>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000e0d 	.word	0x08000e0d
 8000dc4:	08000dfd 	.word	0x08000dfd
 8000dc8:	08000e23 	.word	0x08000e23
 8000dcc:	08000ea7 	.word	0x08000ea7
 8000dd0:	08000ea7 	.word	0x08000ea7
 8000dd4:	08000ea7 	.word	0x08000ea7
 8000dd8:	08000ea7 	.word	0x08000ea7
 8000ddc:	08000e39 	.word	0x08000e39
 8000de0:	08000e59 	.word	0x08000e59
 8000de4:	08000ea7 	.word	0x08000ea7
 8000de8:	08000ea7 	.word	0x08000ea7
 8000dec:	08000e6f 	.word	0x08000e6f
 8000df0:	08000e7b 	.word	0x08000e7b
 8000df4:	08000e87 	.word	0x08000e87
 8000df8:	08000e9d 	.word	0x08000e9d
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000e00:	7b7b      	ldrb	r3, [r7, #13]
 8000e02:	f023 0301 	bic.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e0a:	e04d      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000e0c:	7b3b      	ldrb	r3, [r7, #12]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	f023 0303 	bic.w	r3, r3, #3
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000e20:	e042      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000e22:	7b3b      	ldrb	r3, [r7, #12]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	f023 0303 	bic.w	r3, r3, #3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000e36:	e037      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000e38:	7b3b      	ldrb	r3, [r7, #12]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000e4c:	7b7b      	ldrb	r3, [r7, #13]
 8000e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e56:	e027      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000e62:	7b7b      	ldrb	r3, [r7, #13]
 8000e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e6c:	e01c      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000e6e:	7b7b      	ldrb	r3, [r7, #13]
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e78:	e016      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	f023 0302 	bic.w	r3, r3, #2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e84:	e010      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000e86:	7b3b      	ldrb	r3, [r7, #12]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000e9a:	e005      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ea4:	e000      	b.n	8000ea8 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000ea6:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2201      	movs	r2, #1
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2036      	movs	r0, #54	; 0x36
 8000eb2:	f7ff fdb1 	bl	8000a18 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	3301      	adds	r3, #1
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2036      	movs	r0, #54	; 0x36
 8000ec2:	f7ff fda9 	bl	8000a18 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop

08000ed0 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ff61 	bl	8000d9c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000eda:	2200      	movs	r2, #0
 8000edc:	2104      	movs	r1, #4
 8000ede:	2036      	movs	r0, #54	; 0x36
 8000ee0:	f7ff feb9 	bl	8000c56 <dwt_write16bitoffsetreg>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8000eee:	2100      	movs	r1, #0
 8000ef0:	200e      	movs	r0, #14
 8000ef2:	f7ff fe46 	bl	8000b82 <dwt_read32bitoffsetreg>
 8000ef6:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8000ef8:	f000 f8c0 	bl	800107c <decamutexon>
 8000efc:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200e      	movs	r0, #14
 8000f04:	f7ff fec3 	bl	8000c8e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	200d      	movs	r0, #13
 8000f0e:	f7ff fe8f 	bl	8000c30 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <dwt_forcetrxoff+0x58>)
 8000f14:	2100      	movs	r1, #0
 8000f16:	200f      	movs	r0, #15
 8000f18:	f7ff feb9 	bl	8000c8e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8000f1c:	f000 f814 	bl	8000f48 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	2100      	movs	r1, #0
 8000f24:	200e      	movs	r0, #14
 8000f26:	f7ff feb2 	bl	8000c8e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8000f2a:	6838      	ldr	r0, [r7, #0]
 8000f2c:	f000 f8b7 	bl	800109e <decamutexoff>
    pdw1000local->wait4resp = 0;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <dwt_forcetrxoff+0x5c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2427fff8 	.word	0x2427fff8
 8000f44:	20000000 	.word	0x20000000

08000f48 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8000f4e:	2103      	movs	r1, #3
 8000f50:	200f      	movs	r0, #15
 8000f52:	f7ff fe5a 	bl	8000c0a <dwt_read8bitoffsetreg>
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8000f60:	4053      	eors	r3, r2
 8000f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	200d      	movs	r0, #13
 8000f70:	f7ff fe5e 	bl	8000c30 <dwt_write8bitoffsetreg>
    }
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8000f8e:	f7ff ffdb 	bl	8000f48 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8000f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f96:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8000fa2:	89fb      	ldrh	r3, [r7, #14]
 8000fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa8:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f7ff fe50 	bl	8000c56 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d01a      	beq.n	8000ff6 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f7ff fe21 	bl	8000c0a <dwt_read8bitoffsetreg>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00f      	beq.n	8000ff6 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8000fd6:	f7ff ff87 	bl	8000ee8 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8000fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200d      	movs	r0, #13
 8000fec:	f7ff fe33 	bl	8000c56 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	e000      	b.n	8000ff8 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8000ff6:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001004:	f7ff ff64 	bl	8000ed0 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	202c      	movs	r0, #44	; 0x2c
 800100e:	f7ff fe22 	bl	8000c56 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001012:	2200      	movs	r2, #0
 8001014:	2106      	movs	r1, #6
 8001016:	202c      	movs	r0, #44	; 0x2c
 8001018:	f7ff fe0a 	bl	8000c30 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800101c:	f7ff fe7d 	bl	8000d1a <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001020:	2200      	movs	r2, #0
 8001022:	2103      	movs	r1, #3
 8001024:	2036      	movs	r0, #54	; 0x36
 8001026:	f7ff fe03 	bl	8000c30 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f000 f844 	bl	80010b8 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001030:	22f0      	movs	r2, #240	; 0xf0
 8001032:	2103      	movs	r1, #3
 8001034:	2036      	movs	r0, #54	; 0x36
 8001036:	f7ff fdfb 	bl	8000c30 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800103a:	4b03      	ldr	r3, [pc, #12]	; (8001048 <dwt_softreset+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	755a      	strb	r2, [r3, #21]
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000000 	.word	0x20000000

0800104c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	b25b      	sxtb	r3, r3
 8001060:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001064:	b25b      	sxtb	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	461a      	mov	r2, r3
 800106c:	210e      	movs	r1, #14
 800106e:	202b      	movs	r0, #43	; 0x2b
 8001070:	f7ff fdde 	bl	8000c30 <dwt_write8bitoffsetreg>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001082:	f000 f98d 	bl	80013a0 <port_GetEXT_IRQStatus>
 8001086:	4603      	mov	r3, r0
 8001088:	607b      	str	r3, [r7, #4]

	if(s) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001090:	f000 f978 	bl	8001384 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80010ac:	f000 f971 	bl	8001392 <port_EnableEXT_IRQ>
	}
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f8c3 	bl	800124c <Sleep>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80010d0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80010d4:	4683      	mov	fp, r0
 80010d6:	468a      	mov	sl, r1
 80010d8:	4691      	mov	r9, r2
 80010da:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80010dc:	f7ff ffce 	bl	800107c <decamutexon>
 80010e0:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80010e2:	4d13      	ldr	r5, [pc, #76]	; (8001130 <writetospi+0x60>)
 80010e4:	4628      	mov	r0, r5
 80010e6:	f003 fa9c 	bl	8004622 <HAL_SPI_GetState>
 80010ea:	2801      	cmp	r0, #1
 80010ec:	4604      	mov	r4, r0
 80010ee:	d1f9      	bne.n	80010e4 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	480f      	ldr	r0, [pc, #60]	; (8001134 <writetospi+0x64>)
 80010f6:	f001 fc19 	bl	800292c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80010fa:	465a      	mov	r2, fp
 80010fc:	4651      	mov	r1, sl
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <writetospi+0x60>)
 8001104:	f003 f841 	bl	800418a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	4641      	mov	r1, r8
 800110e:	fa1f f289 	uxth.w	r2, r9
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <writetospi+0x60>)
 8001114:	f003 f839 	bl	800418a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001118:	4622      	mov	r2, r4
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <writetospi+0x64>)
 800111e:	f001 fc05 	bl	800292c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001122:	4630      	mov	r0, r6
 8001124:	f7ff ffbb 	bl	800109e <decamutexoff>

    return 0;
} // end writetospi()
 8001128:	2000      	movs	r0, #0
 800112a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800112e:	bf00      	nop
 8001130:	200005dc 	.word	0x200005dc
 8001134:	40020400 	.word	0x40020400

08001138 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001138:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 800113c:	4681      	mov	r9, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4690      	mov	r8, r2
 8001142:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001144:	f7ff ff9a 	bl	800107c <decamutexon>
 8001148:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800114a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80011c8 <readfromspi+0x90>
 800114e:	4650      	mov	r0, sl
 8001150:	f003 fa67 	bl	8004622 <HAL_SPI_GetState>
 8001154:	2801      	cmp	r0, #1
 8001156:	d1fa      	bne.n	800114e <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001158:	2200      	movs	r2, #0
 800115a:	2140      	movs	r1, #64	; 0x40
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <readfromspi+0x8c>)
 800115e:	f001 fbe5 	bl	800292c <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001162:	f1b9 0f00 	cmp.w	r9, #0
 8001166:	d00c      	beq.n	8001182 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001168:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80011c8 <readfromspi+0x90>
 800116c:	44a1      	add	r9, r4
 800116e:	2201      	movs	r2, #1
 8001170:	4621      	mov	r1, r4
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	4414      	add	r4, r2
 8001178:	4650      	mov	r0, sl
 800117a:	f003 f806 	bl	800418a <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800117e:	454c      	cmp	r4, r9
 8001180:	d1f5      	bne.n	800116e <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001182:	f1b8 0f00 	cmp.w	r8, #0
 8001186:	d012      	beq.n	80011ae <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001188:	2400      	movs	r4, #0
 800118a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80011c8 <readfromspi+0x90>
 800118e:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001192:	f8dc 2000 	ldr.w	r2, [ip]
 8001196:	6891      	ldr	r1, [r2, #8]
 8001198:	0789      	lsls	r1, r1, #30
 800119a:	d5fc      	bpl.n	8001196 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800119c:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800119e:	6891      	ldr	r1, [r2, #8]
 80011a0:	07cb      	lsls	r3, r1, #31
 80011a2:	d5fc      	bpl.n	800119e <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80011a4:	68d3      	ldr	r3, [r2, #12]
 80011a6:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80011aa:	4285      	cmp	r5, r0
 80011ac:	d1f1      	bne.n	8001192 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80011ae:	2201      	movs	r2, #1
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <readfromspi+0x8c>)
 80011b4:	f001 fbba 	bl	800292c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80011b8:	4630      	mov	r0, r6
 80011ba:	f7ff ff70 	bl	800109e <decamutexoff>

    return 0;
} // end readfromspi()
 80011be:	2000      	movs	r0, #0
 80011c0:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80011c4:	40020400 	.word	0x40020400
 80011c8:	200005dc 	.word	0x200005dc

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <__NVIC_EnableIRQ+0x34>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db12      	blt.n	800123c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	490a      	ldr	r1, [pc, #40]	; (8001248 <__NVIC_DisableIRQ+0x44>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	3320      	adds	r3, #32
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001236:	f3bf 8f6f 	isb	sy
}
 800123a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fff9 	bl	800224c <HAL_Delay>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <EXTI_GetITEnStatus+0x34>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80012a2:	2301      	movs	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012a6:	2311      	movs	r3, #17
 80012a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	480a      	ldr	r0, [pc, #40]	; (80012dc <reset_DW1000+0x40>)
 80012b4:	f001 f9aa 	bl	800260c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2101      	movs	r1, #1
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <reset_DW1000+0x40>)
 80012be:	f001 fb35 	bl	800292c <HAL_GPIO_WritePin>

    Sleep(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff ffc2 	bl	800124c <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f809 	bl	80012e0 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80012ce:	2002      	movs	r0, #2
 80012d0:	f7ff ffbc 	bl	800124c <Sleep>
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020000 	.word	0x40020000

080012e0 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <setup_DW1000RSTnIRQ+0x70>)
 8001304:	f001 f982 	bl	800260c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001308:	2006      	movs	r0, #6
 800130a:	f001 f8d8 	bl	80024be <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2105      	movs	r1, #5
 8001312:	2006      	movs	r0, #6
 8001314:	f001 f8b7 	bl	8002486 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001318:	e015      	b.n	8001346 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800131a:	2006      	movs	r0, #6
 800131c:	f001 f8dd 	bl	80024da <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001320:	2301      	movs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001324:	2311      	movs	r3, #17
 8001326:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <setup_DW1000RSTnIRQ+0x70>)
 8001338:	f001 f968 	bl	800260c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	2101      	movs	r1, #1
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <setup_DW1000RSTnIRQ+0x70>)
 8001342:	f001 faf3 	bl	800292c <HAL_GPIO_WritePin>
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020000 	.word	0x40020000

08001354 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <port_set_dw1000_slowrate+0x14>)
 800135a:	2220      	movs	r2, #32
 800135c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <port_set_dw1000_slowrate+0x14>)
 8001360:	f002 fe8a 	bl	8004078 <HAL_SPI_Init>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200005dc 	.word	0x200005dc

0800136c <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <port_set_dw1000_fastrate+0x14>)
 8001372:	2208      	movs	r2, #8
 8001374:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001376:	4802      	ldr	r0, [pc, #8]	; (8001380 <port_set_dw1000_fastrate+0x14>)
 8001378:	f002 fe7e 	bl	8004078 <HAL_SPI_Init>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200005dc 	.word	0x200005dc

08001384 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001388:	2017      	movs	r0, #23
 800138a:	f7ff ff3b 	bl	8001204 <__NVIC_DisableIRQ>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}

08001392 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001396:	2017      	movs	r0, #23
 8001398:	f7ff ff18 	bl	80011cc <__NVIC_EnableIRQ>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80013a4:	2017      	movs	r0, #23
 80013a6:	f7ff ff5d 	bl	8001264 <EXTI_GetITEnStatus>
 80013aa:	4603      	mov	r3, r0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <SSD1306_InvertDisplay+0x1a>
 80013be:	22a7      	movs	r2, #167	; 0xa7
 80013c0:	2100      	movs	r1, #0
 80013c2:	2078      	movs	r0, #120	; 0x78
 80013c4:	f000 fa8a 	bl	80018dc <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80013c8:	e004      	b.n	80013d4 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80013ca:	22a6      	movs	r2, #166	; 0xa6
 80013cc:	2100      	movs	r1, #0
 80013ce:	2078      	movs	r0, #120	; 0x78
 80013d0:	f000 fa84 	bl	80018dc <ssd1306_I2C_Write>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80013e2:	f000 fa1f 	bl	8001824 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013ea:	2201      	movs	r2, #1
 80013ec:	2178      	movs	r1, #120	; 0x78
 80013ee:	485b      	ldr	r0, [pc, #364]	; (800155c <SSD1306_Init+0x180>)
 80013f0:	f001 fcf6 	bl	8002de0 <HAL_I2C_IsDeviceReady>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e0a9      	b.n	8001552 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80013fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001402:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001404:	e002      	b.n	800140c <SSD1306_Init+0x30>
		p--;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3b01      	subs	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f9      	bne.n	8001406 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001412:	22ae      	movs	r2, #174	; 0xae
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	; 0x78
 8001418:	f000 fa60 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800141c:	2220      	movs	r2, #32
 800141e:	2100      	movs	r1, #0
 8001420:	2078      	movs	r0, #120	; 0x78
 8001422:	f000 fa5b 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001426:	2210      	movs	r2, #16
 8001428:	2100      	movs	r1, #0
 800142a:	2078      	movs	r0, #120	; 0x78
 800142c:	f000 fa56 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001430:	22b0      	movs	r2, #176	; 0xb0
 8001432:	2100      	movs	r1, #0
 8001434:	2078      	movs	r0, #120	; 0x78
 8001436:	f000 fa51 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800143a:	22c8      	movs	r2, #200	; 0xc8
 800143c:	2100      	movs	r1, #0
 800143e:	2078      	movs	r0, #120	; 0x78
 8001440:	f000 fa4c 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2078      	movs	r0, #120	; 0x78
 800144a:	f000 fa47 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800144e:	2210      	movs	r2, #16
 8001450:	2100      	movs	r1, #0
 8001452:	2078      	movs	r0, #120	; 0x78
 8001454:	f000 fa42 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	2100      	movs	r1, #0
 800145c:	2078      	movs	r0, #120	; 0x78
 800145e:	f000 fa3d 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001462:	2281      	movs	r2, #129	; 0x81
 8001464:	2100      	movs	r1, #0
 8001466:	2078      	movs	r0, #120	; 0x78
 8001468:	f000 fa38 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800146c:	22ff      	movs	r2, #255	; 0xff
 800146e:	2100      	movs	r1, #0
 8001470:	2078      	movs	r0, #120	; 0x78
 8001472:	f000 fa33 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001476:	22a1      	movs	r2, #161	; 0xa1
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	; 0x78
 800147c:	f000 fa2e 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001480:	22a6      	movs	r2, #166	; 0xa6
 8001482:	2100      	movs	r1, #0
 8001484:	2078      	movs	r0, #120	; 0x78
 8001486:	f000 fa29 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800148a:	22a8      	movs	r2, #168	; 0xa8
 800148c:	2100      	movs	r1, #0
 800148e:	2078      	movs	r0, #120	; 0x78
 8001490:	f000 fa24 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	2100      	movs	r1, #0
 8001498:	2078      	movs	r0, #120	; 0x78
 800149a:	f000 fa1f 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800149e:	22a4      	movs	r2, #164	; 0xa4
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	; 0x78
 80014a4:	f000 fa1a 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014a8:	22d3      	movs	r2, #211	; 0xd3
 80014aa:	2100      	movs	r1, #0
 80014ac:	2078      	movs	r0, #120	; 0x78
 80014ae:	f000 fa15 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2078      	movs	r0, #120	; 0x78
 80014b8:	f000 fa10 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014bc:	22d5      	movs	r2, #213	; 0xd5
 80014be:	2100      	movs	r1, #0
 80014c0:	2078      	movs	r0, #120	; 0x78
 80014c2:	f000 fa0b 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014c6:	22f0      	movs	r2, #240	; 0xf0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f000 fa06 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014d0:	22d9      	movs	r2, #217	; 0xd9
 80014d2:	2100      	movs	r1, #0
 80014d4:	2078      	movs	r0, #120	; 0x78
 80014d6:	f000 fa01 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014da:	2222      	movs	r2, #34	; 0x22
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	; 0x78
 80014e0:	f000 f9fc 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014e4:	22da      	movs	r2, #218	; 0xda
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	; 0x78
 80014ea:	f000 f9f7 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014ee:	2212      	movs	r2, #18
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 f9f2 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014f8:	22db      	movs	r2, #219	; 0xdb
 80014fa:	2100      	movs	r1, #0
 80014fc:	2078      	movs	r0, #120	; 0x78
 80014fe:	f000 f9ed 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001502:	2220      	movs	r2, #32
 8001504:	2100      	movs	r1, #0
 8001506:	2078      	movs	r0, #120	; 0x78
 8001508:	f000 f9e8 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800150c:	228d      	movs	r2, #141	; 0x8d
 800150e:	2100      	movs	r1, #0
 8001510:	2078      	movs	r0, #120	; 0x78
 8001512:	f000 f9e3 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001516:	2214      	movs	r2, #20
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 f9de 	bl	80018dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001520:	22af      	movs	r2, #175	; 0xaf
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f000 f9d9 	bl	80018dc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800152a:	222e      	movs	r2, #46	; 0x2e
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 f9d4 	bl	80018dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001534:	2000      	movs	r0, #0
 8001536:	f000 f843 	bl	80015c0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800153a:	f000 f813 	bl	8001564 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <SSD1306_Init+0x184>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <SSD1306_Init+0x184>)
 8001546:	2200      	movs	r2, #0
 8001548:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SSD1306_Init+0x184>)
 800154c:	2201      	movs	r2, #1
 800154e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000588 	.word	0x20000588
 8001560:	200004ec 	.word	0x200004ec

08001564 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e01d      	b.n	80015ac <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	3b50      	subs	r3, #80	; 0x50
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	; 0x78
 800157c:	f000 f9ae 	bl	80018dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f000 f9a9 	bl	80018dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800158a:	2210      	movs	r2, #16
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 f9a4 	bl	80018dc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <SSD1306_UpdateScreen+0x58>)
 800159a:	441a      	add	r2, r3
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	2078      	movs	r0, #120	; 0x78
 80015a2:	f000 f953 	bl	800184c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	3301      	adds	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	d9de      	bls.n	8001570 <SSD1306_UpdateScreen+0xc>
	}
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000ec 	.word	0x200000ec

080015c0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <SSD1306_Fill+0x14>
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <SSD1306_Fill+0x16>
 80015d4:	23ff      	movs	r3, #255	; 0xff
 80015d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015da:	4619      	mov	r1, r3
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <SSD1306_Fill+0x2c>)
 80015de:	f003 ffaf 	bl	8005540 <memset>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000ec 	.word	0x200000ec

080015f0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	460b      	mov	r3, r1
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	70fb      	strb	r3, [r7, #3]
	if (
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	2b7f      	cmp	r3, #127	; 0x7f
 8001606:	d848      	bhi.n	800169a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	2b3f      	cmp	r3, #63	; 0x3f
 800160c:	d845      	bhi.n	800169a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <SSD1306_DrawPixel+0xb4>)
 8001610:	791b      	ldrb	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d11a      	bne.n	8001660 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800162a:	88fa      	ldrh	r2, [r7, #6]
 800162c:	88bb      	ldrh	r3, [r7, #4]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	b298      	uxth	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	01db      	lsls	r3, r3, #7
 8001636:	4413      	add	r3, r2
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <SSD1306_DrawPixel+0xb8>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	b25a      	sxtb	r2, r3
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	b25b      	sxtb	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b259      	sxtb	r1, r3
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	4603      	mov	r3, r0
 8001654:	01db      	lsls	r3, r3, #7
 8001656:	4413      	add	r3, r2
 8001658:	b2c9      	uxtb	r1, r1
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <SSD1306_DrawPixel+0xb8>)
 800165c:	54d1      	strb	r1, [r2, r3]
 800165e:	e01d      	b.n	800169c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b298      	uxth	r0, r3
 8001668:	4603      	mov	r3, r0
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4413      	add	r3, r2
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <SSD1306_DrawPixel+0xb8>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	b25a      	sxtb	r2, r3
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	b25b      	sxtb	r3, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	b25b      	sxtb	r3, r3
 8001686:	4013      	ands	r3, r2
 8001688:	b259      	sxtb	r1, r3
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	4603      	mov	r3, r0
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	4413      	add	r3, r2
 8001692:	b2c9      	uxtb	r1, r1
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <SSD1306_DrawPixel+0xb8>)
 8001696:	54d1      	strb	r1, [r2, r3]
 8001698:	e000      	b.n	800169c <SSD1306_DrawPixel+0xac>
		return;
 800169a:	bf00      	nop
	}
}
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	200004ec 	.word	0x200004ec
 80016a8:	200000ec 	.word	0x200000ec

080016ac <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	460a      	mov	r2, r1
 80016b6:	80fb      	strh	r3, [r7, #6]
 80016b8:	4613      	mov	r3, r2
 80016ba:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SSD1306_GotoXY+0x28>)
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <SSD1306_GotoXY+0x28>)
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	8053      	strh	r3, [r2, #2]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200004ec 	.word	0x200004ec

080016d8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016e8:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <SSD1306_Putc+0xfc>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
	if (
 80016f4:	2b7f      	cmp	r3, #127	; 0x7f
 80016f6:	dc07      	bgt.n	8001708 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <SSD1306_Putc+0xfc>)
 80016fa:	885b      	ldrh	r3, [r3, #2]
 80016fc:	461a      	mov	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001704:	2b3f      	cmp	r3, #63	; 0x3f
 8001706:	dd01      	ble.n	800170c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001708:	2300      	movs	r3, #0
 800170a:	e05e      	b.n	80017ca <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e04b      	b.n	80017aa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3b20      	subs	r3, #32
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	7849      	ldrb	r1, [r1, #1]
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4619      	mov	r1, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	440b      	add	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e030      	b.n	8001798 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d010      	beq.n	8001768 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <SSD1306_Putc+0xfc>)
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	b298      	uxth	r0, r3
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <SSD1306_Putc+0xfc>)
 8001754:	885a      	ldrh	r2, [r3, #2]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	79ba      	ldrb	r2, [r7, #6]
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff ff45 	bl	80015f0 <SSD1306_DrawPixel>
 8001766:	e014      	b.n	8001792 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <SSD1306_Putc+0xfc>)
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b298      	uxth	r0, r3
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <SSD1306_Putc+0xfc>)
 8001776:	885a      	ldrh	r2, [r3, #2]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b299      	uxth	r1, r3
 8001780:	79bb      	ldrb	r3, [r7, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	f7ff ff2f 	bl	80015f0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	3301      	adds	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d3c8      	bcc.n	8001736 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	461a      	mov	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d3ad      	bcc.n	8001712 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <SSD1306_Putc+0xfc>)
 80017b8:	881a      	ldrh	r2, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <SSD1306_Putc+0xfc>)
 80017c6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200004ec 	.word	0x200004ec

080017d8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	4613      	mov	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017e6:	e012      	b.n	800180e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff71 	bl	80016d8 <SSD1306_Putc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d002      	beq.n	8001808 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	e008      	b.n	800181a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1e8      	bne.n	80017e8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	781b      	ldrb	r3, [r3, #0]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <ssd1306_I2C_Init+0x24>)
 800182c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800182e:	e002      	b.n	8001836 <ssd1306_I2C_Init+0x12>
		p--;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f9      	bne.n	8001830 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	0003d090 	.word	0x0003d090

0800184c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b0c7      	sub	sp, #284	; 0x11c
 8001850:	af02      	add	r7, sp, #8
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4639      	mov	r1, r7
 8001858:	600a      	str	r2, [r1, #0]
 800185a:	4619      	mov	r1, r3
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	4622      	mov	r2, r4
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	1dbb      	adds	r3, r7, #6
 8001864:	4602      	mov	r2, r0
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	460a      	mov	r2, r1
 800186c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	1dba      	adds	r2, r7, #6
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800187e:	e010      	b.n	80018a2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001880:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001884:	463a      	mov	r2, r7
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	441a      	add	r2, r3
 800188a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800188e:	3301      	adds	r3, #1
 8001890:	7811      	ldrb	r1, [r2, #0]
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001898:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800189c:	3301      	adds	r3, #1
 800189e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	1d3a      	adds	r2, r7, #4
 80018aa:	8812      	ldrh	r2, [r2, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8e7      	bhi.n	8001880 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b299      	uxth	r1, r3
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f107 020c 	add.w	r2, r7, #12
 80018c2:	200a      	movs	r0, #10
 80018c4:	9000      	str	r0, [sp, #0]
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <ssd1306_I2C_WriteMulti+0x8c>)
 80018c8:	f001 f98c 	bl	8002be4 <HAL_I2C_Master_Transmit>
}
 80018cc:	bf00      	nop
 80018ce:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000588 	.word	0x20000588

080018dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	460b      	mov	r3, r1
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	4613      	mov	r3, r2
 80018ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018f2:	797b      	ldrb	r3, [r7, #5]
 80018f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	b299      	uxth	r1, r3
 80018fa:	f107 020c 	add.w	r2, r7, #12
 80018fe:	230a      	movs	r3, #10
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2302      	movs	r3, #2
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <ssd1306_I2C_Write+0x38>)
 8001906:	f001 f96d 	bl	8002be4 <HAL_I2C_Master_Transmit>
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000588 	.word	0x20000588

08001918 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1d39      	adds	r1, r7, #4
 800192a:	2201      	movs	r2, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff53 	bl	80017d8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001932:	f7ff fe17 	bl	8001564 <SSD1306_UpdateScreen>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <MX_GPIO_Init+0xe4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <MX_GPIO_Init+0xe4>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <MX_GPIO_Init+0xe4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <MX_GPIO_Init+0xe4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <MX_GPIO_Init+0xe4>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <MX_GPIO_Init+0xe4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <MX_GPIO_Init+0xe4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <MX_GPIO_Init+0xe4>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <MX_GPIO_Init+0xe4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_GPIO_Init+0xe4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <MX_GPIO_Init+0xe4>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_GPIO_Init+0xe4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2101      	movs	r1, #1
 80019ba:	481b      	ldr	r0, [pc, #108]	; (8001a28 <MX_GPIO_Init+0xe8>)
 80019bc:	f000 ffb6 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2140      	movs	r1, #64	; 0x40
 80019c4:	4819      	ldr	r0, [pc, #100]	; (8001a2c <MX_GPIO_Init+0xec>)
 80019c6:	f000 ffb1 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 80019ca:	2301      	movs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_GPIO_Init+0xe8>)
 80019e2:	f000 fe13 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 80019e6:	2302      	movs	r3, #2
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MX_GPIO_Init+0xe8>)
 80019fc:	f000 fe06 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_GPIO_Init+0xec>)
 8001a18:	f000 fdf8 	bl	800260c <HAL_GPIO_Init>

}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400

08001a30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_I2C1_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a6e:	f000 ff75 	bl	800295c <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 f8b0 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000588 	.word	0x20000588
 8001a84:	40005400 	.word	0x40005400
 8001a88:	00061a80 	.word	0x00061a80

08001a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_I2C_MspInit+0x7c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d128      	bne.n	8001b00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_I2C_MspInit+0x80>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_I2C_MspInit+0x80>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	61d3      	str	r3, [r2, #28]
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_I2C_MspInit+0x80>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480b      	ldr	r0, [pc, #44]	; (8001b10 <HAL_I2C_MspInit+0x84>)
 8001ae4:	f000 fd92 	bl	800260c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_I2C_MspInit+0x80>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_I2C_MspInit+0x80>)
 8001aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af2:	6253      	str	r3, [r2, #36]	; 0x24
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_I2C_MspInit+0x80>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40005400 	.word	0x40005400
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020400 	.word	0x40020400

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f000 fb29 	bl	800216e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1c:	f000 f810 	bl	8001b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b20:	f7ff ff0e 	bl	8001940 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b24:	f000 f8fa 	bl	8001d1c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b28:	f000 fa86 	bl	8002038 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b2c:	f7ff ff80 	bl	8001a30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fbd5 	bl	80012e0 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8001b36:	f7ff fc51 	bl	80013dc <SSD1306_Init>
  dw_main();
 8001b3a:	f000 f855 	bl	8001be8 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <main+0x2a>

08001b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b092      	sub	sp, #72	; 0x48
 8001b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	2234      	movs	r2, #52	; 0x34
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fcf6 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <SystemClock_Config+0x98>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <SystemClock_Config+0x98>)
 8001b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b70:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b72:	2302      	movs	r3, #2
 8001b74:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b76:	2301      	movs	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001b86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001b8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fcaa 	bl	80034f0 <HAL_RCC_OscConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ba2:	f000 f81b 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001baa:	2303      	movs	r3, #3
 8001bac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 ffc6 	bl	8003b50 <HAL_RCC_ClockConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bca:	f000 f807 	bl	8001bdc <Error_Handler>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3748      	adds	r7, #72	; 0x48
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40007000 	.word	0x40007000

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x8>
	...

08001be8 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    ssd1306_write(buff, Font_7x10);
 8001bee:	4840      	ldr	r0, [pc, #256]	; (8001cf0 <dw_main+0x108>)
 8001bf0:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <dw_main+0x10c>)
 8001bf2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bf6:	f7ff fe8f 	bl	8001918 <ssd1306_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001bfa:	f7ff fb4f 	bl	800129c <reset_DW1000>
    port_set_dw1000_slowrate();
 8001bfe:	f7ff fba9 	bl	8001354 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7fe fc36 	bl	8000474 <dwt_initialise>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d110      	bne.n	8001c32 <dw_main+0x4a>
    {
        printf("INIT FAILED");
 8001c10:	4839      	ldr	r0, [pc, #228]	; (8001cf8 <dw_main+0x110>)
 8001c12:	f003 fc9d 	bl	8005550 <iprintf>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8001c16:	210a      	movs	r1, #10
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fd47 	bl	80016ac <SSD1306_GotoXY>
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fbc6 	bl	80013b0 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 8001c24:	4835      	ldr	r0, [pc, #212]	; (8001cfc <dw_main+0x114>)
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <dw_main+0x10c>)
 8001c28:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c2c:	f7ff fe74 	bl	8001918 <ssd1306_write>
        while (1)
 8001c30:	e7fe      	b.n	8001c30 <dw_main+0x48>
        { };
    }
    port_set_dw1000_fastrate();
 8001c32:	f7ff fb9b 	bl	800136c <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 8001c36:	4832      	ldr	r0, [pc, #200]	; (8001d00 <dw_main+0x118>)
 8001c38:	f7fe fd72 	bl	8000720 <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	e007      	b.n	8001c52 <dw_main+0x6a>
        {
            rx_buffer[i] = 0;
 8001c42:	4a30      	ldr	r2, [pc, #192]	; (8001d04 <dw_main+0x11c>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b7e      	cmp	r3, #126	; 0x7e
 8001c56:	ddf4      	ble.n	8001c42 <dw_main+0x5a>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff f98f 	bl	8000f7c <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001c5e:	bf00      	nop
 8001c60:	2100      	movs	r1, #0
 8001c62:	200f      	movs	r0, #15
 8001c64:	f7fe ff8d 	bl	8000b82 <dwt_read32bitoffsetreg>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <dw_main+0x120>)
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <dw_main+0x120>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <dw_main+0x124>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f2      	beq.n	8001c60 <dw_main+0x78>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <dw_main+0x120>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d02d      	beq.n	8001ce2 <dw_main+0xfa>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001c86:	2100      	movs	r1, #0
 8001c88:	2010      	movs	r0, #16
 8001c8a:	f7fe ff7a 	bl	8000b82 <dwt_read32bitoffsetreg>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <dw_main+0x128>)
 8001c9a:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <dw_main+0x128>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca2:	d806      	bhi.n	8001cb2 <dw_main+0xca>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <dw_main+0x128>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4815      	ldr	r0, [pc, #84]	; (8001d04 <dw_main+0x11c>)
 8001cae:	f7fe fea1 	bl	80009f4 <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 30);
 8001cb2:	211e      	movs	r1, #30
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fcf9 	bl	80016ac <SSD1306_GotoXY>
            ssd1306_write(rx_buffer, Font_7x10);
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <dw_main+0x11c>)
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <dw_main+0x10c>)
 8001cbe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001cc2:	f7ff fe29 	bl	8001918 <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, 10, HAL_MAX_DELAY);
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	220a      	movs	r2, #10
 8001ccc:	490d      	ldr	r1, [pc, #52]	; (8001d04 <dw_main+0x11c>)
 8001cce:	4811      	ldr	r0, [pc, #68]	; (8001d14 <dw_main+0x12c>)
 8001cd0:	f002 fde2 	bl	8004898 <HAL_UART_Transmit>
            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001cd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd8:	2100      	movs	r1, #0
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f7fe ffd7 	bl	8000c8e <dwt_write32bitoffsetreg>
 8001ce0:	e7ac      	b.n	8001c3c <dw_main+0x54>

        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <dw_main+0x130>)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f7fe ffd1 	bl	8000c8e <dwt_write32bitoffsetreg>
    {
 8001cec:	e7a6      	b.n	8001c3c <dw_main+0x54>
 8001cee:	bf00      	nop
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	08006428 	.word	0x08006428
 8001cfc:	08006434 	.word	0x08006434
 8001d00:	2000001c 	.word	0x2000001c
 8001d04:	200004f4 	.word	0x200004f4
 8001d08:	20000574 	.word	0x20000574
 8001d0c:	2405d000 	.word	0x2405d000
 8001d10:	20000578 	.word	0x20000578
 8001d14:	20000634 	.word	0x20000634
 8001d18:	24059000 	.word	0x24059000

08001d1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <MX_SPI1_Init+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d68:	220a      	movs	r2, #10
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d6e:	f002 f983 	bl	8004078 <HAL_SPI_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d78:	f7ff ff30 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200005dc 	.word	0x200005dc
 8001d84:	40013000 	.word	0x40013000

08001d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_SPI_MspInit+0x8c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12f      	bne.n	8001e0a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_SPI_MspInit+0x90>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_SPI_MspInit+0x90>)
 8001db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_SPI_MspInit+0x90>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_SPI_MspInit+0x90>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <HAL_SPI_MspInit+0x90>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_SPI_MspInit+0x90>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dda:	23e0      	movs	r3, #224	; 0xe0
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dea:	2305      	movs	r3, #5
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4809      	ldr	r0, [pc, #36]	; (8001e1c <HAL_SPI_MspInit+0x94>)
 8001df6:	f000 fc09 	bl	800260c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2023      	movs	r0, #35	; 0x23
 8001e00:	f000 fb41 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e04:	2023      	movs	r0, #35	; 0x23
 8001e06:	f000 fb5a 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40013000 	.word	0x40013000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e30:	6253      	str	r3, [r2, #36]	; 0x24
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6253      	str	r3, [r2, #36]	; 0x24
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x5c>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e6e:	2007      	movs	r0, #7
 8001e70:	f000 fafe 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <NMI_Handler+0x4>

08001e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler+0x4>

08001e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler+0x4>

08001e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec6:	f000 f9a5 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <SPI1_IRQHandler+0x10>)
 8001ed6:	f002 fa9b 	bl	8004410 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200005dc 	.word	0x200005dc

08001ee4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <USART2_IRQHandler+0x10>)
 8001eea:	f002 fd59 	bl	80049a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000634 	.word	0x20000634

08001ef8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e00a      	b.n	8001f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0a:	f3af 8000 	nop.w
 8001f0e:	4601      	mov	r1, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbf0      	blt.n	8001f0a <_read+0x12>
  }

  return len;
 8001f28:	687b      	ldr	r3, [r7, #4]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f58:	605a      	str	r2, [r3, #4]
  return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
	...

08001f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <_sbrk+0x5c>)
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <_sbrk+0x60>)
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <_sbrk+0x64>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <_sbrk+0x68>)
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d207      	bcs.n	8001fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc4:	f003 fa92 	bl	80054ec <__errno>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	220c      	movs	r2, #12
 8001fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	e009      	b.n	8001fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <_sbrk+0x64>)
 8001fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20014000 	.word	0x20014000
 8001ff4:	00000400 	.word	0x00000400
 8001ff8:	2000057c 	.word	0x2000057c
 8001ffc:	20000690 	.word	0x20000690

08002000 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	b29a      	uxth	r2, r3
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	4804      	ldr	r0, [pc, #16]	; (8002034 <_write+0x28>)
 8002024:	f002 fc38 	bl	8004898 <HAL_UART_Transmit>
    return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000634 	.word	0x20000634

08002038 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <MX_USART2_UART_Init+0x50>)
 8002040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART2_UART_Init+0x4c>)
 8002070:	f002 fbc2 	bl	80047f8 <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207a:	f7ff fdaf 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000634 	.word	0x20000634
 8002088:	40004400 	.word	0x40004400

0800208c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_UART_MspInit+0x8c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12f      	bne.n	800210e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_UART_MspInit+0x90>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_UART_MspInit+0x90>)
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	6253      	str	r3, [r2, #36]	; 0x24
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_UART_MspInit+0x90>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_UART_MspInit+0x90>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_UART_MspInit+0x90>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_UART_MspInit+0x90>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020de:	230c      	movs	r3, #12
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ee:	2307      	movs	r3, #7
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020fa:	f000 fa87 	bl	800260c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2026      	movs	r0, #38	; 0x26
 8002104:	f000 f9bf 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002108:	2026      	movs	r0, #38	; 0x26
 800210a:	f000 f9d8 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40004400 	.word	0x40004400
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000

08002124 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8002124:	f7ff ff6c 	bl	8002000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800212a:	490c      	ldr	r1, [pc, #48]	; (800215c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <LoopFillZerobss+0x16>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002140:	4c09      	ldr	r4, [pc, #36]	; (8002168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f003 f9d3 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002152:	f7ff fcdf 	bl	8001b14 <main>
  bx lr
 8002156:	4770      	bx	lr
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002160:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 8002164:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002168:	20000690 	.word	0x20000690

0800216c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC1_IRQHandler>

0800216e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f979 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f80e 	bl	80021a0 <HAL_InitTick>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	e001      	b.n	8002194 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002190:	f7ff fe46 	bl	8001e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002194:	79fb      	ldrb	r3, [r7, #7]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_InitTick+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d022      	beq.n	80021fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_InitTick+0x6c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_InitTick+0x68>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f994 	bl	80024f6 <HAL_SYSTICK_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10f      	bne.n	80021f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b0f      	cmp	r3, #15
 80021d8:	d809      	bhi.n	80021ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021da:	2200      	movs	r2, #0
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	f04f 30ff 	mov.w	r0, #4294967295
 80021e2:	f000 f950 	bl	8002486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <HAL_InitTick+0x70>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e007      	b.n	80021fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e004      	b.n	80021fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e001      	b.n	80021fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000030 	.word	0x20000030
 800220c:	20000028 	.word	0x20000028
 8002210:	2000002c 	.word	0x2000002c

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_IncTick+0x1c>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_IncTick+0x20>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4413      	add	r3, r2
 8002222:	4a03      	ldr	r2, [pc, #12]	; (8002230 <HAL_IncTick+0x1c>)
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000067c 	.word	0x2000067c
 8002234:	20000030 	.word	0x20000030

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_GetTick+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	2000067c 	.word	0x2000067c

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fff0 	bl	8002238 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d004      	beq.n	8002270 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_Delay+0x40>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4413      	add	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002270:	bf00      	nop
 8002272:	f7ff ffe1 	bl	8002238 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	429a      	cmp	r2, r3
 8002280:	d8f7      	bhi.n	8002272 <HAL_Delay+0x26>
  {
  }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000030 	.word	0x20000030

08002290 <__NVIC_SetPriorityGrouping>:
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4906      	ldr	r1, [pc, #24]	; (8002328 <__NVIC_EnableIRQ+0x34>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_DisableIRQ>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db12      	blt.n	8002364 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	490a      	ldr	r1, [pc, #40]	; (8002370 <__NVIC_DisableIRQ+0x44>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	3320      	adds	r3, #32
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002358:	f3bf 8f4f 	dsb	sy
}
 800235c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800235e:	f3bf 8f6f 	isb	sy
}
 8002362:	bf00      	nop
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	; (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff90 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff09 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff1e 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff90 	bl	80023c8 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5f 	bl	8002374 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff11 	bl	80022f4 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff1f 	bl	800232c <__NVIC_DisableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff94 	bl	800242c <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d008      	beq.n	8002538 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2204      	movs	r2, #4
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e022      	b.n	800257e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 020e 	bic.w	r2, r2, #14
 8002546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 021c 	and.w	r2, r3, #28
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d005      	beq.n	80025ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2204      	movs	r2, #4
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e029      	b.n	8002600 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020e 	bic.w	r2, r2, #14
 80025ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f003 021c 	and.w	r2, r3, #28
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
    }
  }
  return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002622:	e160      	b.n	80028e6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8152 	beq.w	80028e0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d005      	beq.n	8002654 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002650:	2b02      	cmp	r3, #2
 8002652:	d130      	bne.n	80026b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800268a:	2201      	movs	r2, #1
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0201 	and.w	r2, r3, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d017      	beq.n	80026f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d123      	bne.n	8002746 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	6939      	ldr	r1, [r7, #16]
 8002742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80ac 	beq.w	80028e0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_GPIO_Init+0x2f8>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_GPIO_Init+0x2f8>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <HAL_GPIO_Init+0x2f8>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80027a0:	4a59      	ldr	r2, [pc, #356]	; (8002908 <HAL_GPIO_Init+0x2fc>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a51      	ldr	r2, [pc, #324]	; (800290c <HAL_GPIO_Init+0x300>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d025      	beq.n	8002818 <HAL_GPIO_Init+0x20c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a50      	ldr	r2, [pc, #320]	; (8002910 <HAL_GPIO_Init+0x304>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01f      	beq.n	8002814 <HAL_GPIO_Init+0x208>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a4f      	ldr	r2, [pc, #316]	; (8002914 <HAL_GPIO_Init+0x308>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d019      	beq.n	8002810 <HAL_GPIO_Init+0x204>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a4e      	ldr	r2, [pc, #312]	; (8002918 <HAL_GPIO_Init+0x30c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_GPIO_Init+0x200>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a4d      	ldr	r2, [pc, #308]	; (800291c <HAL_GPIO_Init+0x310>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00d      	beq.n	8002808 <HAL_GPIO_Init+0x1fc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a4c      	ldr	r2, [pc, #304]	; (8002920 <HAL_GPIO_Init+0x314>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <HAL_GPIO_Init+0x1f8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a4b      	ldr	r2, [pc, #300]	; (8002924 <HAL_GPIO_Init+0x318>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_GPIO_Init+0x1f4>
 80027fc:	2306      	movs	r3, #6
 80027fe:	e00c      	b.n	800281a <HAL_GPIO_Init+0x20e>
 8002800:	2307      	movs	r3, #7
 8002802:	e00a      	b.n	800281a <HAL_GPIO_Init+0x20e>
 8002804:	2305      	movs	r3, #5
 8002806:	e008      	b.n	800281a <HAL_GPIO_Init+0x20e>
 8002808:	2304      	movs	r3, #4
 800280a:	e006      	b.n	800281a <HAL_GPIO_Init+0x20e>
 800280c:	2303      	movs	r3, #3
 800280e:	e004      	b.n	800281a <HAL_GPIO_Init+0x20e>
 8002810:	2302      	movs	r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x20e>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_GPIO_Init+0x20e>
 8002818:	2300      	movs	r3, #0
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800282a:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_GPIO_Init+0x2fc>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <HAL_GPIO_Init+0x31c>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800285c:	4a32      	ldr	r2, [pc, #200]	; (8002928 <HAL_GPIO_Init+0x31c>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_GPIO_Init+0x31c>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002886:	4a28      	ldr	r2, [pc, #160]	; (8002928 <HAL_GPIO_Init+0x31c>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_GPIO_Init+0x31c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_GPIO_Init+0x31c>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_GPIO_Init+0x31c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028da:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_GPIO_Init+0x31c>)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f ae97 	bne.w	8002624 <HAL_GPIO_Init+0x18>
  }
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40010000 	.word	0x40010000
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40010400 	.word	0x40010400

0800292c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002948:	e003      	b.n	8002952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	619a      	str	r2, [r3, #24]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e12b      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff f882 	bl	8001a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c0:	f001 fad2 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a81      	ldr	r2, [pc, #516]	; (8002bd0 <HAL_I2C_Init+0x274>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d807      	bhi.n	80029e0 <HAL_I2C_Init+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_I2C_Init+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e006      	b.n	80029ee <HAL_I2C_Init+0x92>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a7d      	ldr	r2, [pc, #500]	; (8002bd8 <HAL_I2C_Init+0x27c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0e7      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a78      	ldr	r2, [pc, #480]	; (8002bdc <HAL_I2C_Init+0x280>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a6a      	ldr	r2, [pc, #424]	; (8002bd0 <HAL_I2C_Init+0x274>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d802      	bhi.n	8002a30 <HAL_I2C_Init+0xd4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e009      	b.n	8002a44 <HAL_I2C_Init+0xe8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a69      	ldr	r2, [pc, #420]	; (8002be0 <HAL_I2C_Init+0x284>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	495c      	ldr	r1, [pc, #368]	; (8002bd0 <HAL_I2C_Init+0x274>)
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d819      	bhi.n	8002a98 <HAL_I2C_Init+0x13c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a78:	400b      	ands	r3, r1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_I2C_Init+0x138>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e59      	subs	r1, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	e051      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e04f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <HAL_I2C_Init+0x168>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_I2C_Init+0x18e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Init+0x196>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <HAL_I2C_Init+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6809      	ldr	r1, [r1, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6911      	ldr	r1, [r2, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	001e847f 	.word	0x001e847f
 8002bd8:	003d08ff 	.word	0x003d08ff
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff fb1e 	bl	8002238 <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 80e0 	bne.w	8002dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	4970      	ldr	r1, [pc, #448]	; (8002dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa92 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0d3      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x50>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0cc      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f9ca 	bl	800303c <I2C_MasterRequestWrite>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e08d      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc8:	e066      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb50 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11b      	bne.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d017      	beq.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6a39      	ldr	r1, [r7, #32]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fb47 	bl	8003404 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e01a      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d194      	bne.n	8002cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000

08002de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff fa22 	bl	8002238 <HAL_GetTick>
 8002df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	f040 8111 	bne.w	800302a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2319      	movs	r3, #25
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4988      	ldr	r1, [pc, #544]	; (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f994 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e104      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2C_IsDeviceReady+0x50>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0fd      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d007      	beq.n	8002e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2224      	movs	r2, #36	; 0x24
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a70      	ldr	r2, [pc, #448]	; (8003038 <HAL_I2C_IsDeviceReady+0x258>)
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f952 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb0:	d103      	bne.n	8002eba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0b6      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ecc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ece:	f7ff f9b3 	bl	8002238 <HAL_GetTick>
 8002ed2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	bf0c      	ite	eq
 8002efa:	2301      	moveq	r3, #1
 8002efc:	2300      	movne	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f02:	e025      	b.n	8002f50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7ff f998 	bl	8002238 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <HAL_I2C_IsDeviceReady+0x13a>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	22a0      	movs	r2, #160	; 0xa0
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2ba0      	cmp	r3, #160	; 0xa0
 8002f5a:	d005      	beq.n	8002f68 <HAL_I2C_IsDeviceReady+0x188>
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <HAL_I2C_IsDeviceReady+0x188>
 8002f62:	7dbb      	ldrb	r3, [r7, #22]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0cd      	beq.n	8002f04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d129      	bne.n	8002fd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2319      	movs	r3, #25
 8002faa:	2201      	movs	r2, #1
 8002fac:	4921      	ldr	r1, [pc, #132]	; (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8c6 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e036      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e02c      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	490f      	ldr	r1, [pc, #60]	; (8003034 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8a2 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e012      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3301      	adds	r3, #1
 800300a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	f4ff af32 	bcc.w	8002e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d006      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d003      	beq.n	8003066 <I2C_MasterRequestWrite+0x2a>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003064:	d108      	bne.n	8003078 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e00b      	b.n	8003090 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	2b12      	cmp	r3, #18
 800307e:	d107      	bne.n	8003090 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f84f 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b6:	d103      	bne.n	80030c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e035      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030cc:	d108      	bne.n	80030e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e01b      	b.n	8003118 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	11db      	asrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 0306 	and.w	r3, r3, #6
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f063 030f 	orn	r3, r3, #15
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <I2C_MasterRequestWrite+0xfc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f898 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e010      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <I2C_MasterRequestWrite+0x100>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f888 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	00010008 	.word	0x00010008
 800313c:	00010002 	.word	0x00010002

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e048      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d044      	beq.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7ff f86d 	bl	8002238 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d139      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	e00c      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d116      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e023      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10d      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	e00c      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d093      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003242:	e071      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d123      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800326c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e067      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d041      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe ffc8 	bl	8002238 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d136      	bne.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e00b      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e021      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10c      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e00b      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af6d 	bne.w	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e034      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e034      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d028      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe ff4d 	bl	8002238 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11d      	bne.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d016      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e007      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	d1c3      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f83e 	bl	8003494 <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d028      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe ff05 	bl	8002238 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d016      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034aa:	d11b      	bne.n	80034e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e31d      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350c:	4b91      	ldr	r3, [pc, #580]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d07b      	beq.n	800361a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d006      	beq.n	8003536 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d10f      	bne.n	800354e <HAL_RCC_OscConfig+0x5e>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d10b      	bne.n	800354e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003536:	4b87      	ldr	r3, [pc, #540]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d06a      	beq.n	8003618 <HAL_RCC_OscConfig+0x128>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d166      	bne.n	8003618 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e2f7      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b7f      	ldr	r3, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7e      	ldr	r2, [pc, #504]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e02d      	b.n	80035c0 <HAL_RCC_OscConfig+0xd0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10c      	bne.n	8003586 <HAL_RCC_OscConfig+0x96>
 800356c:	4b79      	ldr	r3, [pc, #484]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a78      	ldr	r2, [pc, #480]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a75      	ldr	r2, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0xd0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0xb8>
 800358e:	4b71      	ldr	r3, [pc, #452]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a70      	ldr	r2, [pc, #448]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6d      	ldr	r2, [pc, #436]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xd0>
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a69      	ldr	r2, [pc, #420]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a66      	ldr	r2, [pc, #408]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fe36 	bl	8002238 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fe32 	bl	8002238 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e2ad      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035e2:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fe22 	bl	8002238 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fe1e 	bl	8002238 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e299      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800360a:	4b52      	ldr	r3, [pc, #328]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d05a      	beq.n	80036dc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d119      	bne.n	8003666 <HAL_RCC_OscConfig+0x176>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_OscConfig+0x160>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e276      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	493d      	ldr	r1, [pc, #244]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003664:	e03a      	b.n	80036dc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d020      	beq.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366e:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCC_OscConfig+0x268>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe fde0 	bl	8002238 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367c:	f7fe fddc 	bl	8002238 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e257      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	492a      	ldr	r1, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	604b      	str	r3, [r1, #4]
 80036ae:	e015      	b.n	80036dc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b0:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_RCC_OscConfig+0x268>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fe fdbf 	bl	8002238 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe fdbb 	bl	8002238 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e236      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d0:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80b8 	beq.w	800385a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d170      	bne.n	80037d2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_OscConfig+0x218>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e21a      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003714:	429a      	cmp	r2, r3
 8003716:	d921      	bls.n	800375c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fc4b 	bl	8003fb8 <RCC_SetFlashLatencyFromMSIRange>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e208      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4906      	ldr	r1, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	4901      	ldr	r1, [pc, #4]	; (8003754 <HAL_RCC_OscConfig+0x264>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
 8003752:	e020      	b.n	8003796 <HAL_RCC_OscConfig+0x2a6>
 8003754:	40023800 	.word	0x40023800
 8003758:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375c:	4ba4      	ldr	r3, [pc, #656]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	49a1      	ldr	r1, [pc, #644]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800376e:	4ba0      	ldr	r3, [pc, #640]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	499c      	ldr	r1, [pc, #624]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fc16 	bl	8003fb8 <RCC_SetFlashLatencyFromMSIRange>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1d3      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	0b5b      	lsrs	r3, r3, #13
 800379c:	3301      	adds	r3, #1
 800379e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037a6:	4a92      	ldr	r2, [pc, #584]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80037a8:	6892      	ldr	r2, [r2, #8]
 80037aa:	0912      	lsrs	r2, r2, #4
 80037ac:	f002 020f 	and.w	r2, r2, #15
 80037b0:	4990      	ldr	r1, [pc, #576]	; (80039f4 <HAL_RCC_OscConfig+0x504>)
 80037b2:	5c8a      	ldrb	r2, [r1, r2]
 80037b4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037b6:	4a90      	ldr	r2, [pc, #576]	; (80039f8 <HAL_RCC_OscConfig+0x508>)
 80037b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037ba:	4b90      	ldr	r3, [pc, #576]	; (80039fc <HAL_RCC_OscConfig+0x50c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fcee 	bl	80021a0 <HAL_InitTick>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d045      	beq.n	800385a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	e1b5      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d029      	beq.n	800382e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037da:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <HAL_RCC_OscConfig+0x510>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fd2a 	bl	8002238 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e8:	f7fe fd26 	bl	8002238 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1a1      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037fa:	4b7d      	ldr	r3, [pc, #500]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4977      	ldr	r1, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003818:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	4972      	ldr	r1, [pc, #456]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800382e:	4b74      	ldr	r3, [pc, #464]	; (8003a00 <HAL_RCC_OscConfig+0x510>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe fd00 	bl	8002238 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800383c:	f7fe fcfc 	bl	8002238 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e177      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800384e:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d030      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <HAL_RCC_OscConfig+0x514>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fe fce0 	bl	8002238 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe fcdc 	bl	8002238 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e157      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800388e:	4b58      	ldr	r3, [pc, #352]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x38c>
 800389a:	e015      	b.n	80038c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b59      	ldr	r3, [pc, #356]	; (8003a04 <HAL_RCC_OscConfig+0x514>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe fcc9 	bl	8002238 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe fcc5 	bl	8002238 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e140      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038bc:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80b5 	beq.w	8003a40 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	4a41      	ldr	r2, [pc, #260]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6253      	str	r3, [r2, #36]	; 0x24
 80038f2:	4b3f      	ldr	r3, [pc, #252]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCC_OscConfig+0x518>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCC_OscConfig+0x518>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a3d      	ldr	r2, [pc, #244]	; (8003a08 <HAL_RCC_OscConfig+0x518>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7fe fc8d 	bl	8002238 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fe fc89 	bl	8002238 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	; 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e104      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_OscConfig+0x518>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x466>
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6353      	str	r3, [r2, #52]	; 0x34
 8003954:	e02d      	b.n	80039b2 <HAL_RCC_OscConfig+0x4c2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x488>
 800395e:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	6353      	str	r3, [r2, #52]	; 0x34
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003974:	6353      	str	r3, [r2, #52]	; 0x34
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x4c2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x4aa>
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398a:	6353      	str	r3, [r2, #52]	; 0x34
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 8003992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003996:	6353      	str	r3, [r2, #52]	; 0x34
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x4c2>
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80039a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a4:	6353      	str	r3, [r2, #52]	; 0x34
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80039ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039b0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fe fc3d 	bl	8002238 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fe fc39 	bl	8002238 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0b2      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_OscConfig+0x500>)
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x4d2>
 80039e4:	e023      	b.n	8003a2e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fc27 	bl	8002238 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ec:	e019      	b.n	8003a22 <HAL_RCC_OscConfig+0x532>
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08006c70 	.word	0x08006c70
 80039f8:	20000028 	.word	0x20000028
 80039fc:	2000002c 	.word	0x2000002c
 8003a00:	42470020 	.word	0x42470020
 8003a04:	42470680 	.word	0x42470680
 8003a08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fc14 	bl	8002238 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e08d      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a22:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ee      	bne.n	8003a0c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a2e:	7ffb      	ldrb	r3, [r7, #31]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a34:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	4a43      	ldr	r2, [pc, #268]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d079      	beq.n	8003b3c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d056      	beq.n	8003afc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d13b      	bne.n	8003ace <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <HAL_RCC_OscConfig+0x65c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fbec 	bl	8002238 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fbe8 	bl	8002238 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e063      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	4319      	orrs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	492b      	ldr	r1, [pc, #172]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_RCC_OscConfig+0x65c>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fbc7 	bl	8002238 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fe fbc3 	bl	8002238 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e03e      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x5be>
 8003acc:	e036      	b.n	8003b3c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_RCC_OscConfig+0x65c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fbb0 	bl	8002238 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe fbac 	bl	8002238 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e027      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x5ec>
 8003afa:	e01f      	b.n	8003b3c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e01a      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <HAL_RCC_OscConfig+0x658>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10d      	bne.n	8003b38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470060 	.word	0x42470060

08003b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e11a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b8f      	ldr	r3, [pc, #572]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d919      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x34>
 8003b78:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a89      	ldr	r2, [pc, #548]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b87      	ldr	r3, [pc, #540]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 0201 	bic.w	r2, r3, #1
 8003b8c:	4985      	ldr	r1, [pc, #532]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b94:	4b83      	ldr	r3, [pc, #524]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0f9      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb2:	4b7d      	ldr	r3, [pc, #500]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	497a      	ldr	r1, [pc, #488]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 808e 	beq.w	8003cee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d107      	bne.n	8003bea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bda:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d121      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0d7      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d115      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0cb      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	4b67      	ldr	r3, [pc, #412]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0bf      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0b7      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b5f      	ldr	r3, [pc, #380]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	495c      	ldr	r1, [pc, #368]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe fafc 	bl	8002238 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d112      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe faf4 	bl	8002238 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e09b      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c62:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xfc>
 8003c6e:	e03e      	b.n	8003cee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d112      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7a:	f7fe fadd 	bl	8002238 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e084      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c90:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d1ee      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x12a>
 8003c9c:	e027      	b.n	8003cee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d11d      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fe fac6 	bl	8002238 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e06d      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cbe:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x158>
 8003cca:	e010      	b.n	8003cee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe fab4 	bl	8002238 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e05b      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cee:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d219      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x1be>
 8003d02:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	4923      	ldr	r1, [pc, #140]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_RCC_ClockConfig+0x254>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e034      	b.n	8003d9a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4917      	ldr	r1, [pc, #92]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	490f      	ldr	r1, [pc, #60]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d6e:	f000 f823 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_RCC_ClockConfig+0x258>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	490b      	ldr	r1, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x25c>)
 8003d80:	5ccb      	ldrb	r3, [r1, r3]
 8003d82:	fa22 f303 	lsr.w	r3, r2, r3
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x264>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fa06 	bl	80021a0 <HAL_InitTick>
 8003d94:	4603      	mov	r3, r0
 8003d96:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d98:	7afb      	ldrb	r3, [r7, #11]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08006c70 	.word	0x08006c70
 8003db0:	20000028 	.word	0x20000028
 8003db4:	2000002c 	.word	0x2000002c

08003db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003dbe:	4b61      	ldr	r3, [pc, #388]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d00d      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0x32>
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	f200 80a4 	bhi.w	8003f1c <HAL_RCC_GetSysClockFreq+0x164>
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d002      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x26>
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d003      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c>
 8003ddc:	e09e      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x190>)
 8003de0:	613b      	str	r3, [r7, #16]
      break;
 8003de2:	e0a9      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de4:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x194>)
 8003de6:	613b      	str	r3, [r7, #16]
      break;
 8003de8:	e0a6      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	0c9b      	lsrs	r3, r3, #18
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a57      	ldr	r2, [pc, #348]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x198>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
 8003df6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	0d9b      	lsrs	r3, r3, #22
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	3301      	adds	r3, #1
 8003e02:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e04:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d041      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	461c      	mov	r4, r3
 8003e14:	f04f 0500 	mov.w	r5, #0
 8003e18:	4620      	mov	r0, r4
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	014b      	lsls	r3, r1, #5
 8003e26:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e2a:	0142      	lsls	r2, r0, #5
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	1b00      	subs	r0, r0, r4
 8003e32:	eb61 0105 	sbc.w	r1, r1, r5
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	018b      	lsls	r3, r1, #6
 8003e40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e44:	0182      	lsls	r2, r0, #6
 8003e46:	1a12      	subs	r2, r2, r0
 8003e48:	eb63 0301 	sbc.w	r3, r3, r1
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	00d9      	lsls	r1, r3, #3
 8003e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e5a:	00d0      	lsls	r0, r2, #3
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	1912      	adds	r2, r2, r4
 8003e62:	eb45 0303 	adc.w	r3, r5, r3
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0259      	lsls	r1, r3, #9
 8003e70:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e74:	0250      	lsls	r0, r2, #9
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	f7fc f979 	bl	800017c <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e040      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	461c      	mov	r4, r3
 8003e98:	f04f 0500 	mov.w	r5, #0
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	014b      	lsls	r3, r1, #5
 8003eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eae:	0142      	lsls	r2, r0, #5
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	1b00      	subs	r0, r0, r4
 8003eb6:	eb61 0105 	sbc.w	r1, r1, r5
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	018b      	lsls	r3, r1, #6
 8003ec4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ec8:	0182      	lsls	r2, r0, #6
 8003eca:	1a12      	subs	r2, r2, r0
 8003ecc:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed0:	f04f 0000 	mov.w	r0, #0
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	00d9      	lsls	r1, r3, #3
 8003eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ede:	00d0      	lsls	r0, r2, #3
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	1912      	adds	r2, r2, r4
 8003ee6:	eb45 0303 	adc.w	r3, r5, r3
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	0299      	lsls	r1, r3, #10
 8003ef4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ef8:	0290      	lsls	r0, r2, #10
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	f7fc f937 	bl	800017c <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4613      	mov	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	613b      	str	r3, [r7, #16]
      break;
 8003f1a:	e00d      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	0b5b      	lsrs	r3, r3, #13
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	613b      	str	r3, [r7, #16]
      break;
 8003f36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f38:	693b      	ldr	r3, [r7, #16]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bdb0      	pop	{r4, r5, r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	007a1200 	.word	0x007a1200
 8003f50:	08006c64 	.word	0x08006c64

08003f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20000028 	.word	0x20000028

08003f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f6c:	f7ff fff2 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4903      	ldr	r1, [pc, #12]	; (8003f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	08006c80 	.word	0x08006c80

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f94:	f7ff ffde 	bl	8003f54 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08006c80 	.word	0x08006c80

08003fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fc4:	4b29      	ldr	r3, [pc, #164]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d12c      	bne.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fd0:	4b26      	ldr	r3, [pc, #152]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e016      	b.n	8004016 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b20      	ldr	r3, [pc, #128]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	4a1f      	ldr	r2, [pc, #124]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6253      	str	r3, [r2, #36]	; 0x24
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004008:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004014:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800401c:	d105      	bne.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004024:	d101      	bne.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004026:	2301      	movs	r3, #1
 8004028:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 0201 	bic.w	r2, r3, #1
 8004044:	490b      	ldr	r1, [pc, #44]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d001      	beq.n	800405e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	40007000 	.word	0x40007000
 8004074:	40023c00 	.word	0x40023c00

08004078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e07b      	b.n	8004182 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d108      	bne.n	80040a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409a:	d009      	beq.n	80040b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	61da      	str	r2, [r3, #28]
 80040a2:	e005      	b.n	80040b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd fe5c 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0104 	and.w	r1, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0210 	and.w	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004170:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b088      	sub	sp, #32
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_SPI_Transmit+0x22>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e12d      	b.n	8004408 <HAL_SPI_Transmit+0x27e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b4:	f7fe f840 	bl	8002238 <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041ce:	e116      	b.n	80043fe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Transmit+0x52>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e0:	e10d      	b.n	80043fe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004228:	d10f      	bne.n	800424a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004238:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004248:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d007      	beq.n	8004268 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	d14f      	bne.n	8004312 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0xf6>
 800427a:	8afb      	ldrh	r3, [r7, #22]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d142      	bne.n	8004306 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	881a      	ldrh	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042a4:	e02f      	b.n	8004306 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d112      	bne.n	80042da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	1c9a      	adds	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80042d8:	e015      	b.n	8004306 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042da:	f7fd ffad 	bl	8002238 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d803      	bhi.n	80042f2 <HAL_SPI_Transmit+0x168>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d102      	bne.n	80042f8 <HAL_SPI_Transmit+0x16e>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d106      	bne.n	8004306 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004304:	e07b      	b.n	80043fe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ca      	bne.n	80042a6 <HAL_SPI_Transmit+0x11c>
 8004310:	e050      	b.n	80043b4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Transmit+0x196>
 800431a:	8afb      	ldrh	r3, [r7, #22]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d144      	bne.n	80043aa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004346:	e030      	b.n	80043aa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b02      	cmp	r3, #2
 8004354:	d113      	bne.n	800437e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	86da      	strh	r2, [r3, #54]	; 0x36
 800437c:	e015      	b.n	80043aa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437e:	f7fd ff5b 	bl	8002238 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d803      	bhi.n	8004396 <HAL_SPI_Transmit+0x20c>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d102      	bne.n	800439c <HAL_SPI_Transmit+0x212>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043a8:	e029      	b.n	80043fe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1c9      	bne.n	8004348 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f9db 	bl	8004774 <SPI_EndRxTxTransaction>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e003      	b.n	80043fe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004406:	7ffb      	ldrb	r3, [r7, #31]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10f      	bne.n	8004454 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
    return;
 8004452:	e0d7      	b.n	8004604 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_SPI_IRQHandler+0x66>
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	09db      	lsrs	r3, r3, #7
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
    return;
 8004474:	e0c6      	b.n	8004604 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_SPI_IRQHandler+0x8c>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80b4 	beq.w	8004604 <HAL_SPI_IRQHandler+0x1f4>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80ad 	beq.w	8004604 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d023      	beq.n	80044fe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d011      	beq.n	80044e6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	e00b      	b.n	80044fe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
        return;
 80044fc:	e082      	b.n	8004604 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d014      	beq.n	8004534 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f043 0201 	orr.w	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f043 0208 	orr.w	r2, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04f      	beq.n	8004602 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004570:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_SPI_IRQHandler+0x17e>
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d034      	beq.n	80045f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0203 	bic.w	r2, r2, #3
 800459c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d011      	beq.n	80045ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	4a18      	ldr	r2, [pc, #96]	; (800460c <HAL_SPI_IRQHandler+0x1fc>)
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd ffe8 	bl	8002588 <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d6:	4a0d      	ldr	r2, [pc, #52]	; (800460c <HAL_SPI_IRQHandler+0x1fc>)
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd ffd2 	bl	8002588 <HAL_DMA_Abort_IT>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80045f6:	e003      	b.n	8004600 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f809 	bl	8004610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045fe:	e000      	b.n	8004602 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004600:	bf00      	nop
    return;
 8004602:	bf00      	nop
  }
}
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	0800463d 	.word	0x0800463d

08004610 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004630:	b2db      	uxtb	r3, r3
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ffda 	bl	8004610 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004674:	f7fd fde0 	bl	8002238 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4413      	add	r3, r2
 8004682:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004684:	f7fd fdd8 	bl	8002238 <HAL_GetTick>
 8004688:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	0d1b      	lsrs	r3, r3, #20
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	fb02 f303 	mul.w	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800469a:	e054      	b.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d050      	beq.n	8004746 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046a4:	f7fd fdc8 	bl	8002238 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d902      	bls.n	80046ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d13d      	bne.n	8004736 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d111      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d004      	beq.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d107      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004700:	d10f      	bne.n	8004722 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004720:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e017      	b.n	8004766 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3b01      	subs	r3, #1
 8004744:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d19b      	bne.n	800469c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000028 	.word	0x20000028

08004774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <SPI_EndRxTxTransaction+0x7c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <SPI_EndRxTxTransaction+0x80>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0d5b      	lsrs	r3, r3, #21
 800478c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479e:	d112      	bne.n	80047c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2200      	movs	r2, #0
 80047a8:	2180      	movs	r1, #128	; 0x80
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff ff5a 	bl	8004664 <SPI_WaitFlagStateUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e00f      	b.n	80047e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047dc:	2b80      	cmp	r3, #128	; 0x80
 80047de:	d0f2      	beq.n	80047c6 <SPI_EndRxTxTransaction+0x52>
 80047e0:	e000      	b.n	80047e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80047e2:	bf00      	nop
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000028 	.word	0x20000028
 80047f4:	165e9f81 	.word	0x165e9f81

080047f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e042      	b.n	8004890 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fc34 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fd71 	bl	8005324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d16d      	bne.n	8004994 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_UART_Transmit+0x2c>
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e066      	b.n	8004996 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	; 0x21
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d6:	f7fd fcaf 	bl	8002238 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d108      	bne.n	8004904 <HAL_UART_Transmit+0x6c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e003      	b.n	800490c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800490c:	e02a      	b.n	8004964 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 faf9 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e036      	b.n	8004996 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	3302      	adds	r3, #2
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	e007      	b.n	8004956 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3301      	adds	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1cf      	bne.n	800490e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2140      	movs	r1, #64	; 0x40
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fac9 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e006      	b.n	8004996 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0ba      	sub	sp, #232	; 0xe8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_UART_IRQHandler+0x66>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fbd1 	bl	80051a6 <UART_Receive_IT>
      return;
 8004a04:	e25b      	b.n	8004ebe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80de 	beq.w	8004bcc <HAL_UART_IRQHandler+0x22c>
 8004a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d106      	bne.n	8004a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80d1 	beq.w	8004bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0xae>
 8004a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <HAL_UART_IRQHandler+0xd2>
 8004a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f043 0202 	orr.w	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_UART_IRQHandler+0xf6>
 8004a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d011      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x126>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f043 0208 	orr.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 81f2 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x14e>
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fb5c 	bl	80051a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_UART_IRQHandler+0x17a>
 8004b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d04f      	beq.n	8004bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa66 	bl	8004fec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d141      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1d9      	bne.n	8004b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d013      	beq.n	8004baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	4a7e      	ldr	r2, [pc, #504]	; (8004d80 <HAL_UART_IRQHandler+0x3e0>)
 8004b88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fcfa 	bl	8002588 <HAL_DMA_Abort_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e00e      	b.n	8004bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f99c 	bl	8004ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	e00a      	b.n	8004bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f998 	bl	8004ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	e006      	b.n	8004bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f994 	bl	8004ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004bc6:	e175      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	bf00      	nop
    return;
 8004bca:	e173      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f040 814f 	bne.w	8004e74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8148 	beq.w	8004e74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8141 	beq.w	8004e74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	f040 80b6 	bne.w	8004d84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8145 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f080 813e 	bcs.w	8004eb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	f000 8088 	beq.w	8004d60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1d9      	bne.n	8004c50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3314      	adds	r3, #20
 8004cbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e1      	bne.n	8004c9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3314      	adds	r3, #20
 8004cde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e3      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d42:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e3      	bne.n	8004d1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd fbd7 	bl	800250e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f8bf 	bl	8004efa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d7c:	e09c      	b.n	8004eb8 <HAL_UART_IRQHandler+0x518>
 8004d7e:	bf00      	nop
 8004d80:	080050b1 	.word	0x080050b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 808e 	beq.w	8004ebc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8089 	beq.w	8004ebc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dce:	647a      	str	r2, [r7, #68]	; 0x44
 8004dd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e3      	bne.n	8004daa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	623b      	str	r3, [r7, #32]
   return(result);
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e06:	633a      	str	r2, [r7, #48]	; 0x30
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e3      	bne.n	8004de2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e3      	bne.n	8004e28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f844 	bl	8004efa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e72:	e023      	b.n	8004ebc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <HAL_UART_IRQHandler+0x4f4>
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f923 	bl	80050d8 <UART_Transmit_IT>
    return;
 8004e92:	e014      	b.n	8004ebe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <HAL_UART_IRQHandler+0x51e>
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f962 	bl	8005176 <UART_EndTransmit_IT>
    return;
 8004eb2:	e004      	b.n	8004ebe <HAL_UART_IRQHandler+0x51e>
    return;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <HAL_UART_IRQHandler+0x51e>
      return;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <HAL_UART_IRQHandler+0x51e>
      return;
 8004ebc:	bf00      	nop
  }
}
 8004ebe:	37e8      	adds	r7, #232	; 0xe8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b090      	sub	sp, #64	; 0x40
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f20:	e050      	b.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d04c      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f30:	f7fd f982 	bl	8002238 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d241      	bcs.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f60:	637a      	str	r2, [r7, #52]	; 0x34
 8004f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	613b      	str	r3, [r7, #16]
   return(result);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f94:	623a      	str	r2, [r7, #32]
 8004f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	69f9      	ldr	r1, [r7, #28]
 8004f9a:	6a3a      	ldr	r2, [r7, #32]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e00f      	b.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d09f      	beq.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3740      	adds	r7, #64	; 0x40
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b095      	sub	sp, #84	; 0x54
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800500a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005014:	643a      	str	r2, [r7, #64]	; 0x40
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800501a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e5      	bne.n	8004ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	61fb      	str	r3, [r7, #28]
   return(result);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800504e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e5      	bne.n	8005028 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	d119      	bne.n	8005098 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	60bb      	str	r3, [r7, #8]
   return(result);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 0310 	bic.w	r3, r3, #16
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005084:	61ba      	str	r2, [r7, #24]
 8005086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	613b      	str	r3, [r7, #16]
   return(result);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050a6:	bf00      	nop
 80050a8:	3754      	adds	r7, #84	; 0x54
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff0c 	bl	8004ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b21      	cmp	r3, #33	; 0x21
 80050ea:	d13e      	bne.n	800516a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f4:	d114      	bne.n	8005120 <UART_Transmit_IT+0x48>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005112:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]
 800511e:	e008      	b.n	8005132 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	1c59      	adds	r1, r3, #1
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6211      	str	r1, [r2, #32]
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29b      	uxth	r3, r3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4619      	mov	r1, r3
 8005140:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005154:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005164:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fe94 	bl	8004ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b08c      	sub	sp, #48	; 0x30
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b22      	cmp	r3, #34	; 0x22
 80051b8:	f040 80ae 	bne.w	8005318 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d117      	bne.n	80051f6 <UART_Receive_IT+0x50>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d113      	bne.n	80051f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
 80051f4:	e026      	b.n	8005244 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005208:	d007      	beq.n	800521a <UART_Receive_IT+0x74>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <UART_Receive_IT+0x82>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e008      	b.n	800523a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005234:	b2da      	uxtb	r2, r3
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4619      	mov	r1, r3
 8005252:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005254:	2b00      	cmp	r3, #0
 8005256:	d15d      	bne.n	8005314 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0220 	bic.w	r2, r2, #32
 8005266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	2b01      	cmp	r3, #1
 800529c:	d135      	bne.n	800530a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	613b      	str	r3, [r7, #16]
   return(result);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	623a      	str	r2, [r7, #32]
 80052c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	69f9      	ldr	r1, [r7, #28]
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d10a      	bne.n	80052fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff fdf9 	bl	8004efa <HAL_UARTEx_RxEventCallback>
 8005308:	e002      	b.n	8005310 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fde3 	bl	8004ed6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e002      	b.n	800531a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3730      	adds	r7, #48	; 0x30
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	4313      	orrs	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005364:	f023 030c 	bic.w	r3, r3, #12
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	430b      	orrs	r3, r1
 8005370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a55      	ldr	r2, [pc, #340]	; (80054e4 <UART_SetConfig+0x1c0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d103      	bne.n	800539a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005392:	f7fe fdfd 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	e002      	b.n	80053a0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800539a:	f7fe fde5 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 800539e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a8:	d14c      	bne.n	8005444 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	4a49      	ldr	r2, [pc, #292]	; (80054e8 <UART_SetConfig+0x1c4>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	0119      	lsls	r1, r3, #4
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009a      	lsls	r2, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e0:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <UART_SetConfig+0x1c4>)
 80053e2:	fba3 0302 	umull	r0, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2064      	movs	r0, #100	; 0x64
 80053ea:	fb00 f303 	mul.w	r3, r0, r3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	3332      	adds	r3, #50	; 0x32
 80053f4:	4a3c      	ldr	r2, [pc, #240]	; (80054e8 <UART_SetConfig+0x1c4>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005402:	4419      	add	r1, r3
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009a      	lsls	r2, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fbb2 f2f3 	udiv	r2, r2, r3
 800541a:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <UART_SetConfig+0x1c4>)
 800541c:	fba3 0302 	umull	r0, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	2064      	movs	r0, #100	; 0x64
 8005424:	fb00 f303 	mul.w	r3, r0, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3332      	adds	r3, #50	; 0x32
 800542e:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <UART_SetConfig+0x1c4>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f003 0207 	and.w	r2, r3, #7
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	440a      	add	r2, r1
 8005440:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005442:	e04a      	b.n	80054da <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009a      	lsls	r2, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <UART_SetConfig+0x1c4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	0119      	lsls	r1, r3, #4
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009a      	lsls	r2, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	fbb2 f2f3 	udiv	r2, r2, r3
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <UART_SetConfig+0x1c4>)
 800547c:	fba3 0302 	umull	r0, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	2064      	movs	r0, #100	; 0x64
 8005484:	fb00 f303 	mul.w	r3, r0, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	3332      	adds	r3, #50	; 0x32
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <UART_SetConfig+0x1c4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800549a:	4419      	add	r1, r3
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009a      	lsls	r2, r3, #2
 80054a6:	441a      	add	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <UART_SetConfig+0x1c4>)
 80054b4:	fba3 0302 	umull	r0, r3, r3, r2
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	2064      	movs	r0, #100	; 0x64
 80054bc:	fb00 f303 	mul.w	r3, r0, r3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	3332      	adds	r3, #50	; 0x32
 80054c6:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <UART_SetConfig+0x1c4>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	f003 020f 	and.w	r2, r3, #15
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	440a      	add	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40013800 	.word	0x40013800
 80054e8:	51eb851f 	.word	0x51eb851f

080054ec <__errno>:
 80054ec:	4b01      	ldr	r3, [pc, #4]	; (80054f4 <__errno+0x8>)
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000034 	.word	0x20000034

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2600      	movs	r6, #0
 80054fc:	4d0c      	ldr	r5, [pc, #48]	; (8005530 <__libc_init_array+0x38>)
 80054fe:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	f000 ff82 	bl	8006410 <_init>
 800550c:	2600      	movs	r6, #0
 800550e:	4d0a      	ldr	r5, [pc, #40]	; (8005538 <__libc_init_array+0x40>)
 8005510:	4c0a      	ldr	r4, [pc, #40]	; (800553c <__libc_init_array+0x44>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08006d28 	.word	0x08006d28
 8005534:	08006d28 	.word	0x08006d28
 8005538:	08006d28 	.word	0x08006d28
 800553c:	08006d2c 	.word	0x08006d2c

08005540 <memset>:
 8005540:	4603      	mov	r3, r0
 8005542:	4402      	add	r2, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <iprintf>:
 8005550:	b40f      	push	{r0, r1, r2, r3}
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <iprintf+0x2c>)
 8005554:	b513      	push	{r0, r1, r4, lr}
 8005556:	681c      	ldr	r4, [r3, #0]
 8005558:	b124      	cbz	r4, 8005564 <iprintf+0x14>
 800555a:	69a3      	ldr	r3, [r4, #24]
 800555c:	b913      	cbnz	r3, 8005564 <iprintf+0x14>
 800555e:	4620      	mov	r0, r4
 8005560:	f000 f866 	bl	8005630 <__sinit>
 8005564:	ab05      	add	r3, sp, #20
 8005566:	4620      	mov	r0, r4
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	68a1      	ldr	r1, [r4, #8]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	f000 f981 	bl	8005874 <_vfiprintf_r>
 8005572:	b002      	add	sp, #8
 8005574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005578:	b004      	add	sp, #16
 800557a:	4770      	bx	lr
 800557c:	20000034 	.word	0x20000034

08005580 <std>:
 8005580:	2300      	movs	r3, #0
 8005582:	b510      	push	{r4, lr}
 8005584:	4604      	mov	r4, r0
 8005586:	e9c0 3300 	strd	r3, r3, [r0]
 800558a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800558e:	6083      	str	r3, [r0, #8]
 8005590:	8181      	strh	r1, [r0, #12]
 8005592:	6643      	str	r3, [r0, #100]	; 0x64
 8005594:	81c2      	strh	r2, [r0, #14]
 8005596:	6183      	str	r3, [r0, #24]
 8005598:	4619      	mov	r1, r3
 800559a:	2208      	movs	r2, #8
 800559c:	305c      	adds	r0, #92	; 0x5c
 800559e:	f7ff ffcf 	bl	8005540 <memset>
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <std+0x38>)
 80055a4:	6224      	str	r4, [r4, #32]
 80055a6:	6263      	str	r3, [r4, #36]	; 0x24
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <std+0x3c>)
 80055aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <std+0x40>)
 80055ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <std+0x44>)
 80055b2:	6323      	str	r3, [r4, #48]	; 0x30
 80055b4:	bd10      	pop	{r4, pc}
 80055b6:	bf00      	nop
 80055b8:	08005e21 	.word	0x08005e21
 80055bc:	08005e43 	.word	0x08005e43
 80055c0:	08005e7b 	.word	0x08005e7b
 80055c4:	08005e9f 	.word	0x08005e9f

080055c8 <_cleanup_r>:
 80055c8:	4901      	ldr	r1, [pc, #4]	; (80055d0 <_cleanup_r+0x8>)
 80055ca:	f000 b8af 	b.w	800572c <_fwalk_reent>
 80055ce:	bf00      	nop
 80055d0:	08006179 	.word	0x08006179

080055d4 <__sfmoreglue>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	2568      	movs	r5, #104	; 0x68
 80055d8:	1e4a      	subs	r2, r1, #1
 80055da:	4355      	muls	r5, r2
 80055dc:	460e      	mov	r6, r1
 80055de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055e2:	f000 f8c5 	bl	8005770 <_malloc_r>
 80055e6:	4604      	mov	r4, r0
 80055e8:	b140      	cbz	r0, 80055fc <__sfmoreglue+0x28>
 80055ea:	2100      	movs	r1, #0
 80055ec:	e9c0 1600 	strd	r1, r6, [r0]
 80055f0:	300c      	adds	r0, #12
 80055f2:	60a0      	str	r0, [r4, #8]
 80055f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055f8:	f7ff ffa2 	bl	8005540 <memset>
 80055fc:	4620      	mov	r0, r4
 80055fe:	bd70      	pop	{r4, r5, r6, pc}

08005600 <__sfp_lock_acquire>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__sfp_lock_acquire+0x8>)
 8005602:	f000 b8b3 	b.w	800576c <__retarget_lock_acquire_recursive>
 8005606:	bf00      	nop
 8005608:	20000688 	.word	0x20000688

0800560c <__sfp_lock_release>:
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <__sfp_lock_release+0x8>)
 800560e:	f000 b8ae 	b.w	800576e <__retarget_lock_release_recursive>
 8005612:	bf00      	nop
 8005614:	20000688 	.word	0x20000688

08005618 <__sinit_lock_acquire>:
 8005618:	4801      	ldr	r0, [pc, #4]	; (8005620 <__sinit_lock_acquire+0x8>)
 800561a:	f000 b8a7 	b.w	800576c <__retarget_lock_acquire_recursive>
 800561e:	bf00      	nop
 8005620:	20000683 	.word	0x20000683

08005624 <__sinit_lock_release>:
 8005624:	4801      	ldr	r0, [pc, #4]	; (800562c <__sinit_lock_release+0x8>)
 8005626:	f000 b8a2 	b.w	800576e <__retarget_lock_release_recursive>
 800562a:	bf00      	nop
 800562c:	20000683 	.word	0x20000683

08005630 <__sinit>:
 8005630:	b510      	push	{r4, lr}
 8005632:	4604      	mov	r4, r0
 8005634:	f7ff fff0 	bl	8005618 <__sinit_lock_acquire>
 8005638:	69a3      	ldr	r3, [r4, #24]
 800563a:	b11b      	cbz	r3, 8005644 <__sinit+0x14>
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	f7ff bff0 	b.w	8005624 <__sinit_lock_release>
 8005644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005648:	6523      	str	r3, [r4, #80]	; 0x50
 800564a:	4b13      	ldr	r3, [pc, #76]	; (8005698 <__sinit+0x68>)
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <__sinit+0x6c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	62a2      	str	r2, [r4, #40]	; 0x28
 8005652:	42a3      	cmp	r3, r4
 8005654:	bf08      	it	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	4620      	mov	r0, r4
 800565a:	bf08      	it	eq
 800565c:	61a3      	streq	r3, [r4, #24]
 800565e:	f000 f81f 	bl	80056a0 <__sfp>
 8005662:	6060      	str	r0, [r4, #4]
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f81b 	bl	80056a0 <__sfp>
 800566a:	60a0      	str	r0, [r4, #8]
 800566c:	4620      	mov	r0, r4
 800566e:	f000 f817 	bl	80056a0 <__sfp>
 8005672:	2200      	movs	r2, #0
 8005674:	2104      	movs	r1, #4
 8005676:	60e0      	str	r0, [r4, #12]
 8005678:	6860      	ldr	r0, [r4, #4]
 800567a:	f7ff ff81 	bl	8005580 <std>
 800567e:	2201      	movs	r2, #1
 8005680:	2109      	movs	r1, #9
 8005682:	68a0      	ldr	r0, [r4, #8]
 8005684:	f7ff ff7c 	bl	8005580 <std>
 8005688:	2202      	movs	r2, #2
 800568a:	2112      	movs	r1, #18
 800568c:	68e0      	ldr	r0, [r4, #12]
 800568e:	f7ff ff77 	bl	8005580 <std>
 8005692:	2301      	movs	r3, #1
 8005694:	61a3      	str	r3, [r4, #24]
 8005696:	e7d1      	b.n	800563c <__sinit+0xc>
 8005698:	08006c88 	.word	0x08006c88
 800569c:	080055c9 	.word	0x080055c9

080056a0 <__sfp>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	4607      	mov	r7, r0
 80056a4:	f7ff ffac 	bl	8005600 <__sfp_lock_acquire>
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <__sfp+0x84>)
 80056aa:	681e      	ldr	r6, [r3, #0]
 80056ac:	69b3      	ldr	r3, [r6, #24]
 80056ae:	b913      	cbnz	r3, 80056b6 <__sfp+0x16>
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7ff ffbd 	bl	8005630 <__sinit>
 80056b6:	3648      	adds	r6, #72	; 0x48
 80056b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056bc:	3b01      	subs	r3, #1
 80056be:	d503      	bpl.n	80056c8 <__sfp+0x28>
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	b30b      	cbz	r3, 8005708 <__sfp+0x68>
 80056c4:	6836      	ldr	r6, [r6, #0]
 80056c6:	e7f7      	b.n	80056b8 <__sfp+0x18>
 80056c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056cc:	b9d5      	cbnz	r5, 8005704 <__sfp+0x64>
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <__sfp+0x88>)
 80056d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056d4:	60e3      	str	r3, [r4, #12]
 80056d6:	6665      	str	r5, [r4, #100]	; 0x64
 80056d8:	f000 f847 	bl	800576a <__retarget_lock_init_recursive>
 80056dc:	f7ff ff96 	bl	800560c <__sfp_lock_release>
 80056e0:	2208      	movs	r2, #8
 80056e2:	4629      	mov	r1, r5
 80056e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056ec:	6025      	str	r5, [r4, #0]
 80056ee:	61a5      	str	r5, [r4, #24]
 80056f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056f4:	f7ff ff24 	bl	8005540 <memset>
 80056f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005700:	4620      	mov	r0, r4
 8005702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005704:	3468      	adds	r4, #104	; 0x68
 8005706:	e7d9      	b.n	80056bc <__sfp+0x1c>
 8005708:	2104      	movs	r1, #4
 800570a:	4638      	mov	r0, r7
 800570c:	f7ff ff62 	bl	80055d4 <__sfmoreglue>
 8005710:	4604      	mov	r4, r0
 8005712:	6030      	str	r0, [r6, #0]
 8005714:	2800      	cmp	r0, #0
 8005716:	d1d5      	bne.n	80056c4 <__sfp+0x24>
 8005718:	f7ff ff78 	bl	800560c <__sfp_lock_release>
 800571c:	230c      	movs	r3, #12
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	e7ee      	b.n	8005700 <__sfp+0x60>
 8005722:	bf00      	nop
 8005724:	08006c88 	.word	0x08006c88
 8005728:	ffff0001 	.word	0xffff0001

0800572c <_fwalk_reent>:
 800572c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005730:	4606      	mov	r6, r0
 8005732:	4688      	mov	r8, r1
 8005734:	2700      	movs	r7, #0
 8005736:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800573a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800573e:	f1b9 0901 	subs.w	r9, r9, #1
 8005742:	d505      	bpl.n	8005750 <_fwalk_reent+0x24>
 8005744:	6824      	ldr	r4, [r4, #0]
 8005746:	2c00      	cmp	r4, #0
 8005748:	d1f7      	bne.n	800573a <_fwalk_reent+0xe>
 800574a:	4638      	mov	r0, r7
 800574c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005750:	89ab      	ldrh	r3, [r5, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d907      	bls.n	8005766 <_fwalk_reent+0x3a>
 8005756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800575a:	3301      	adds	r3, #1
 800575c:	d003      	beq.n	8005766 <_fwalk_reent+0x3a>
 800575e:	4629      	mov	r1, r5
 8005760:	4630      	mov	r0, r6
 8005762:	47c0      	blx	r8
 8005764:	4307      	orrs	r7, r0
 8005766:	3568      	adds	r5, #104	; 0x68
 8005768:	e7e9      	b.n	800573e <_fwalk_reent+0x12>

0800576a <__retarget_lock_init_recursive>:
 800576a:	4770      	bx	lr

0800576c <__retarget_lock_acquire_recursive>:
 800576c:	4770      	bx	lr

0800576e <__retarget_lock_release_recursive>:
 800576e:	4770      	bx	lr

08005770 <_malloc_r>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	1ccd      	adds	r5, r1, #3
 8005774:	f025 0503 	bic.w	r5, r5, #3
 8005778:	3508      	adds	r5, #8
 800577a:	2d0c      	cmp	r5, #12
 800577c:	bf38      	it	cc
 800577e:	250c      	movcc	r5, #12
 8005780:	2d00      	cmp	r5, #0
 8005782:	4606      	mov	r6, r0
 8005784:	db01      	blt.n	800578a <_malloc_r+0x1a>
 8005786:	42a9      	cmp	r1, r5
 8005788:	d903      	bls.n	8005792 <_malloc_r+0x22>
 800578a:	230c      	movs	r3, #12
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	2000      	movs	r0, #0
 8005790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005792:	f000 fdb1 	bl	80062f8 <__malloc_lock>
 8005796:	4921      	ldr	r1, [pc, #132]	; (800581c <_malloc_r+0xac>)
 8005798:	680a      	ldr	r2, [r1, #0]
 800579a:	4614      	mov	r4, r2
 800579c:	b99c      	cbnz	r4, 80057c6 <_malloc_r+0x56>
 800579e:	4f20      	ldr	r7, [pc, #128]	; (8005820 <_malloc_r+0xb0>)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	b923      	cbnz	r3, 80057ae <_malloc_r+0x3e>
 80057a4:	4621      	mov	r1, r4
 80057a6:	4630      	mov	r0, r6
 80057a8:	f000 fb2a 	bl	8005e00 <_sbrk_r>
 80057ac:	6038      	str	r0, [r7, #0]
 80057ae:	4629      	mov	r1, r5
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 fb25 	bl	8005e00 <_sbrk_r>
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	d123      	bne.n	8005802 <_malloc_r+0x92>
 80057ba:	230c      	movs	r3, #12
 80057bc:	4630      	mov	r0, r6
 80057be:	6033      	str	r3, [r6, #0]
 80057c0:	f000 fda0 	bl	8006304 <__malloc_unlock>
 80057c4:	e7e3      	b.n	800578e <_malloc_r+0x1e>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	1b5b      	subs	r3, r3, r5
 80057ca:	d417      	bmi.n	80057fc <_malloc_r+0x8c>
 80057cc:	2b0b      	cmp	r3, #11
 80057ce:	d903      	bls.n	80057d8 <_malloc_r+0x68>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	441c      	add	r4, r3
 80057d4:	6025      	str	r5, [r4, #0]
 80057d6:	e004      	b.n	80057e2 <_malloc_r+0x72>
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	42a2      	cmp	r2, r4
 80057dc:	bf0c      	ite	eq
 80057de:	600b      	streq	r3, [r1, #0]
 80057e0:	6053      	strne	r3, [r2, #4]
 80057e2:	4630      	mov	r0, r6
 80057e4:	f000 fd8e 	bl	8006304 <__malloc_unlock>
 80057e8:	f104 000b 	add.w	r0, r4, #11
 80057ec:	1d23      	adds	r3, r4, #4
 80057ee:	f020 0007 	bic.w	r0, r0, #7
 80057f2:	1ac2      	subs	r2, r0, r3
 80057f4:	d0cc      	beq.n	8005790 <_malloc_r+0x20>
 80057f6:	1a1b      	subs	r3, r3, r0
 80057f8:	50a3      	str	r3, [r4, r2]
 80057fa:	e7c9      	b.n	8005790 <_malloc_r+0x20>
 80057fc:	4622      	mov	r2, r4
 80057fe:	6864      	ldr	r4, [r4, #4]
 8005800:	e7cc      	b.n	800579c <_malloc_r+0x2c>
 8005802:	1cc4      	adds	r4, r0, #3
 8005804:	f024 0403 	bic.w	r4, r4, #3
 8005808:	42a0      	cmp	r0, r4
 800580a:	d0e3      	beq.n	80057d4 <_malloc_r+0x64>
 800580c:	1a21      	subs	r1, r4, r0
 800580e:	4630      	mov	r0, r6
 8005810:	f000 faf6 	bl	8005e00 <_sbrk_r>
 8005814:	3001      	adds	r0, #1
 8005816:	d1dd      	bne.n	80057d4 <_malloc_r+0x64>
 8005818:	e7cf      	b.n	80057ba <_malloc_r+0x4a>
 800581a:	bf00      	nop
 800581c:	20000580 	.word	0x20000580
 8005820:	20000584 	.word	0x20000584

08005824 <__sfputc_r>:
 8005824:	6893      	ldr	r3, [r2, #8]
 8005826:	b410      	push	{r4}
 8005828:	3b01      	subs	r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	6093      	str	r3, [r2, #8]
 800582e:	da07      	bge.n	8005840 <__sfputc_r+0x1c>
 8005830:	6994      	ldr	r4, [r2, #24]
 8005832:	42a3      	cmp	r3, r4
 8005834:	db01      	blt.n	800583a <__sfputc_r+0x16>
 8005836:	290a      	cmp	r1, #10
 8005838:	d102      	bne.n	8005840 <__sfputc_r+0x1c>
 800583a:	bc10      	pop	{r4}
 800583c:	f000 bb34 	b.w	8005ea8 <__swbuf_r>
 8005840:	6813      	ldr	r3, [r2, #0]
 8005842:	1c58      	adds	r0, r3, #1
 8005844:	6010      	str	r0, [r2, #0]
 8005846:	7019      	strb	r1, [r3, #0]
 8005848:	4608      	mov	r0, r1
 800584a:	bc10      	pop	{r4}
 800584c:	4770      	bx	lr

0800584e <__sfputs_r>:
 800584e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005850:	4606      	mov	r6, r0
 8005852:	460f      	mov	r7, r1
 8005854:	4614      	mov	r4, r2
 8005856:	18d5      	adds	r5, r2, r3
 8005858:	42ac      	cmp	r4, r5
 800585a:	d101      	bne.n	8005860 <__sfputs_r+0x12>
 800585c:	2000      	movs	r0, #0
 800585e:	e007      	b.n	8005870 <__sfputs_r+0x22>
 8005860:	463a      	mov	r2, r7
 8005862:	4630      	mov	r0, r6
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	f7ff ffdc 	bl	8005824 <__sfputc_r>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d1f3      	bne.n	8005858 <__sfputs_r+0xa>
 8005870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005874 <_vfiprintf_r>:
 8005874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	460d      	mov	r5, r1
 800587a:	4614      	mov	r4, r2
 800587c:	4698      	mov	r8, r3
 800587e:	4606      	mov	r6, r0
 8005880:	b09d      	sub	sp, #116	; 0x74
 8005882:	b118      	cbz	r0, 800588c <_vfiprintf_r+0x18>
 8005884:	6983      	ldr	r3, [r0, #24]
 8005886:	b90b      	cbnz	r3, 800588c <_vfiprintf_r+0x18>
 8005888:	f7ff fed2 	bl	8005630 <__sinit>
 800588c:	4b89      	ldr	r3, [pc, #548]	; (8005ab4 <_vfiprintf_r+0x240>)
 800588e:	429d      	cmp	r5, r3
 8005890:	d11b      	bne.n	80058ca <_vfiprintf_r+0x56>
 8005892:	6875      	ldr	r5, [r6, #4]
 8005894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005896:	07d9      	lsls	r1, r3, #31
 8005898:	d405      	bmi.n	80058a6 <_vfiprintf_r+0x32>
 800589a:	89ab      	ldrh	r3, [r5, #12]
 800589c:	059a      	lsls	r2, r3, #22
 800589e:	d402      	bmi.n	80058a6 <_vfiprintf_r+0x32>
 80058a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058a2:	f7ff ff63 	bl	800576c <__retarget_lock_acquire_recursive>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	071b      	lsls	r3, r3, #28
 80058aa:	d501      	bpl.n	80058b0 <_vfiprintf_r+0x3c>
 80058ac:	692b      	ldr	r3, [r5, #16]
 80058ae:	b9eb      	cbnz	r3, 80058ec <_vfiprintf_r+0x78>
 80058b0:	4629      	mov	r1, r5
 80058b2:	4630      	mov	r0, r6
 80058b4:	f000 fb5c 	bl	8005f70 <__swsetup_r>
 80058b8:	b1c0      	cbz	r0, 80058ec <_vfiprintf_r+0x78>
 80058ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058bc:	07dc      	lsls	r4, r3, #31
 80058be:	d50e      	bpl.n	80058de <_vfiprintf_r+0x6a>
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	b01d      	add	sp, #116	; 0x74
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	4b7b      	ldr	r3, [pc, #492]	; (8005ab8 <_vfiprintf_r+0x244>)
 80058cc:	429d      	cmp	r5, r3
 80058ce:	d101      	bne.n	80058d4 <_vfiprintf_r+0x60>
 80058d0:	68b5      	ldr	r5, [r6, #8]
 80058d2:	e7df      	b.n	8005894 <_vfiprintf_r+0x20>
 80058d4:	4b79      	ldr	r3, [pc, #484]	; (8005abc <_vfiprintf_r+0x248>)
 80058d6:	429d      	cmp	r5, r3
 80058d8:	bf08      	it	eq
 80058da:	68f5      	ldreq	r5, [r6, #12]
 80058dc:	e7da      	b.n	8005894 <_vfiprintf_r+0x20>
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	0598      	lsls	r0, r3, #22
 80058e2:	d4ed      	bmi.n	80058c0 <_vfiprintf_r+0x4c>
 80058e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e6:	f7ff ff42 	bl	800576e <__retarget_lock_release_recursive>
 80058ea:	e7e9      	b.n	80058c0 <_vfiprintf_r+0x4c>
 80058ec:	2300      	movs	r3, #0
 80058ee:	9309      	str	r3, [sp, #36]	; 0x24
 80058f0:	2320      	movs	r3, #32
 80058f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f6:	2330      	movs	r3, #48	; 0x30
 80058f8:	f04f 0901 	mov.w	r9, #1
 80058fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005900:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ac0 <_vfiprintf_r+0x24c>
 8005904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005908:	4623      	mov	r3, r4
 800590a:	469a      	mov	sl, r3
 800590c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005910:	b10a      	cbz	r2, 8005916 <_vfiprintf_r+0xa2>
 8005912:	2a25      	cmp	r2, #37	; 0x25
 8005914:	d1f9      	bne.n	800590a <_vfiprintf_r+0x96>
 8005916:	ebba 0b04 	subs.w	fp, sl, r4
 800591a:	d00b      	beq.n	8005934 <_vfiprintf_r+0xc0>
 800591c:	465b      	mov	r3, fp
 800591e:	4622      	mov	r2, r4
 8005920:	4629      	mov	r1, r5
 8005922:	4630      	mov	r0, r6
 8005924:	f7ff ff93 	bl	800584e <__sfputs_r>
 8005928:	3001      	adds	r0, #1
 800592a:	f000 80aa 	beq.w	8005a82 <_vfiprintf_r+0x20e>
 800592e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005930:	445a      	add	r2, fp
 8005932:	9209      	str	r2, [sp, #36]	; 0x24
 8005934:	f89a 3000 	ldrb.w	r3, [sl]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80a2 	beq.w	8005a82 <_vfiprintf_r+0x20e>
 800593e:	2300      	movs	r3, #0
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005948:	f10a 0a01 	add.w	sl, sl, #1
 800594c:	9304      	str	r3, [sp, #16]
 800594e:	9307      	str	r3, [sp, #28]
 8005950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005954:	931a      	str	r3, [sp, #104]	; 0x68
 8005956:	4654      	mov	r4, sl
 8005958:	2205      	movs	r2, #5
 800595a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595e:	4858      	ldr	r0, [pc, #352]	; (8005ac0 <_vfiprintf_r+0x24c>)
 8005960:	f000 fcbc 	bl	80062dc <memchr>
 8005964:	9a04      	ldr	r2, [sp, #16]
 8005966:	b9d8      	cbnz	r0, 80059a0 <_vfiprintf_r+0x12c>
 8005968:	06d1      	lsls	r1, r2, #27
 800596a:	bf44      	itt	mi
 800596c:	2320      	movmi	r3, #32
 800596e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005972:	0713      	lsls	r3, r2, #28
 8005974:	bf44      	itt	mi
 8005976:	232b      	movmi	r3, #43	; 0x2b
 8005978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800597c:	f89a 3000 	ldrb.w	r3, [sl]
 8005980:	2b2a      	cmp	r3, #42	; 0x2a
 8005982:	d015      	beq.n	80059b0 <_vfiprintf_r+0x13c>
 8005984:	4654      	mov	r4, sl
 8005986:	2000      	movs	r0, #0
 8005988:	f04f 0c0a 	mov.w	ip, #10
 800598c:	9a07      	ldr	r2, [sp, #28]
 800598e:	4621      	mov	r1, r4
 8005990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005994:	3b30      	subs	r3, #48	; 0x30
 8005996:	2b09      	cmp	r3, #9
 8005998:	d94e      	bls.n	8005a38 <_vfiprintf_r+0x1c4>
 800599a:	b1b0      	cbz	r0, 80059ca <_vfiprintf_r+0x156>
 800599c:	9207      	str	r2, [sp, #28]
 800599e:	e014      	b.n	80059ca <_vfiprintf_r+0x156>
 80059a0:	eba0 0308 	sub.w	r3, r0, r8
 80059a4:	fa09 f303 	lsl.w	r3, r9, r3
 80059a8:	4313      	orrs	r3, r2
 80059aa:	46a2      	mov	sl, r4
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	e7d2      	b.n	8005956 <_vfiprintf_r+0xe2>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	1d19      	adds	r1, r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9103      	str	r1, [sp, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfbb      	ittet	lt
 80059bc:	425b      	neglt	r3, r3
 80059be:	f042 0202 	orrlt.w	r2, r2, #2
 80059c2:	9307      	strge	r3, [sp, #28]
 80059c4:	9307      	strlt	r3, [sp, #28]
 80059c6:	bfb8      	it	lt
 80059c8:	9204      	strlt	r2, [sp, #16]
 80059ca:	7823      	ldrb	r3, [r4, #0]
 80059cc:	2b2e      	cmp	r3, #46	; 0x2e
 80059ce:	d10c      	bne.n	80059ea <_vfiprintf_r+0x176>
 80059d0:	7863      	ldrb	r3, [r4, #1]
 80059d2:	2b2a      	cmp	r3, #42	; 0x2a
 80059d4:	d135      	bne.n	8005a42 <_vfiprintf_r+0x1ce>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	3402      	adds	r4, #2
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	9203      	str	r2, [sp, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bfb8      	it	lt
 80059e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e8:	9305      	str	r3, [sp, #20]
 80059ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ad0 <_vfiprintf_r+0x25c>
 80059ee:	2203      	movs	r2, #3
 80059f0:	4650      	mov	r0, sl
 80059f2:	7821      	ldrb	r1, [r4, #0]
 80059f4:	f000 fc72 	bl	80062dc <memchr>
 80059f8:	b140      	cbz	r0, 8005a0c <_vfiprintf_r+0x198>
 80059fa:	2340      	movs	r3, #64	; 0x40
 80059fc:	eba0 000a 	sub.w	r0, r0, sl
 8005a00:	fa03 f000 	lsl.w	r0, r3, r0
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	3401      	adds	r4, #1
 8005a08:	4303      	orrs	r3, r0
 8005a0a:	9304      	str	r3, [sp, #16]
 8005a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a10:	2206      	movs	r2, #6
 8005a12:	482c      	ldr	r0, [pc, #176]	; (8005ac4 <_vfiprintf_r+0x250>)
 8005a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a18:	f000 fc60 	bl	80062dc <memchr>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d03f      	beq.n	8005aa0 <_vfiprintf_r+0x22c>
 8005a20:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <_vfiprintf_r+0x254>)
 8005a22:	bb1b      	cbnz	r3, 8005a6c <_vfiprintf_r+0x1f8>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	3307      	adds	r3, #7
 8005a28:	f023 0307 	bic.w	r3, r3, #7
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	9303      	str	r3, [sp, #12]
 8005a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a32:	443b      	add	r3, r7
 8005a34:	9309      	str	r3, [sp, #36]	; 0x24
 8005a36:	e767      	b.n	8005908 <_vfiprintf_r+0x94>
 8005a38:	460c      	mov	r4, r1
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a40:	e7a5      	b.n	800598e <_vfiprintf_r+0x11a>
 8005a42:	2300      	movs	r3, #0
 8005a44:	f04f 0c0a 	mov.w	ip, #10
 8005a48:	4619      	mov	r1, r3
 8005a4a:	3401      	adds	r4, #1
 8005a4c:	9305      	str	r3, [sp, #20]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a54:	3a30      	subs	r2, #48	; 0x30
 8005a56:	2a09      	cmp	r2, #9
 8005a58:	d903      	bls.n	8005a62 <_vfiprintf_r+0x1ee>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0c5      	beq.n	80059ea <_vfiprintf_r+0x176>
 8005a5e:	9105      	str	r1, [sp, #20]
 8005a60:	e7c3      	b.n	80059ea <_vfiprintf_r+0x176>
 8005a62:	4604      	mov	r4, r0
 8005a64:	2301      	movs	r3, #1
 8005a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a6a:	e7f0      	b.n	8005a4e <_vfiprintf_r+0x1da>
 8005a6c:	ab03      	add	r3, sp, #12
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	462a      	mov	r2, r5
 8005a72:	4630      	mov	r0, r6
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <_vfiprintf_r+0x258>)
 8005a76:	a904      	add	r1, sp, #16
 8005a78:	f3af 8000 	nop.w
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	1c78      	adds	r0, r7, #1
 8005a80:	d1d6      	bne.n	8005a30 <_vfiprintf_r+0x1bc>
 8005a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a84:	07d9      	lsls	r1, r3, #31
 8005a86:	d405      	bmi.n	8005a94 <_vfiprintf_r+0x220>
 8005a88:	89ab      	ldrh	r3, [r5, #12]
 8005a8a:	059a      	lsls	r2, r3, #22
 8005a8c:	d402      	bmi.n	8005a94 <_vfiprintf_r+0x220>
 8005a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a90:	f7ff fe6d 	bl	800576e <__retarget_lock_release_recursive>
 8005a94:	89ab      	ldrh	r3, [r5, #12]
 8005a96:	065b      	lsls	r3, r3, #25
 8005a98:	f53f af12 	bmi.w	80058c0 <_vfiprintf_r+0x4c>
 8005a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a9e:	e711      	b.n	80058c4 <_vfiprintf_r+0x50>
 8005aa0:	ab03      	add	r3, sp, #12
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4b08      	ldr	r3, [pc, #32]	; (8005acc <_vfiprintf_r+0x258>)
 8005aaa:	a904      	add	r1, sp, #16
 8005aac:	f000 f882 	bl	8005bb4 <_printf_i>
 8005ab0:	e7e4      	b.n	8005a7c <_vfiprintf_r+0x208>
 8005ab2:	bf00      	nop
 8005ab4:	08006cac 	.word	0x08006cac
 8005ab8:	08006ccc 	.word	0x08006ccc
 8005abc:	08006c8c 	.word	0x08006c8c
 8005ac0:	08006cec 	.word	0x08006cec
 8005ac4:	08006cf6 	.word	0x08006cf6
 8005ac8:	00000000 	.word	0x00000000
 8005acc:	0800584f 	.word	0x0800584f
 8005ad0:	08006cf2 	.word	0x08006cf2

08005ad4 <_printf_common>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	4616      	mov	r6, r2
 8005ada:	4699      	mov	r9, r3
 8005adc:	688a      	ldr	r2, [r1, #8]
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	bfb8      	it	lt
 8005ae6:	4613      	movlt	r3, r2
 8005ae8:	6033      	str	r3, [r6, #0]
 8005aea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aee:	460c      	mov	r4, r1
 8005af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af4:	b10a      	cbz	r2, 8005afa <_printf_common+0x26>
 8005af6:	3301      	adds	r3, #1
 8005af8:	6033      	str	r3, [r6, #0]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	0699      	lsls	r1, r3, #26
 8005afe:	bf42      	ittt	mi
 8005b00:	6833      	ldrmi	r3, [r6, #0]
 8005b02:	3302      	addmi	r3, #2
 8005b04:	6033      	strmi	r3, [r6, #0]
 8005b06:	6825      	ldr	r5, [r4, #0]
 8005b08:	f015 0506 	ands.w	r5, r5, #6
 8005b0c:	d106      	bne.n	8005b1c <_printf_common+0x48>
 8005b0e:	f104 0a19 	add.w	sl, r4, #25
 8005b12:	68e3      	ldr	r3, [r4, #12]
 8005b14:	6832      	ldr	r2, [r6, #0]
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dc28      	bgt.n	8005b6e <_printf_common+0x9a>
 8005b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b20:	1e13      	subs	r3, r2, #0
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	bf18      	it	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	0692      	lsls	r2, r2, #26
 8005b2a:	d42d      	bmi.n	8005b88 <_printf_common+0xb4>
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	4638      	mov	r0, r7
 8005b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d020      	beq.n	8005b7c <_printf_common+0xa8>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	68e5      	ldr	r5, [r4, #12]
 8005b3e:	f003 0306 	and.w	r3, r3, #6
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf18      	it	ne
 8005b46:	2500      	movne	r5, #0
 8005b48:	6832      	ldr	r2, [r6, #0]
 8005b4a:	f04f 0600 	mov.w	r6, #0
 8005b4e:	68a3      	ldr	r3, [r4, #8]
 8005b50:	bf08      	it	eq
 8005b52:	1aad      	subeq	r5, r5, r2
 8005b54:	6922      	ldr	r2, [r4, #16]
 8005b56:	bf08      	it	eq
 8005b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bfc4      	itt	gt
 8005b60:	1a9b      	subgt	r3, r3, r2
 8005b62:	18ed      	addgt	r5, r5, r3
 8005b64:	341a      	adds	r4, #26
 8005b66:	42b5      	cmp	r5, r6
 8005b68:	d11a      	bne.n	8005ba0 <_printf_common+0xcc>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e008      	b.n	8005b80 <_printf_common+0xac>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4652      	mov	r2, sl
 8005b72:	4649      	mov	r1, r9
 8005b74:	4638      	mov	r0, r7
 8005b76:	47c0      	blx	r8
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d103      	bne.n	8005b84 <_printf_common+0xb0>
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b84:	3501      	adds	r5, #1
 8005b86:	e7c4      	b.n	8005b12 <_printf_common+0x3e>
 8005b88:	2030      	movs	r0, #48	; 0x30
 8005b8a:	18e1      	adds	r1, r4, r3
 8005b8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b96:	4422      	add	r2, r4
 8005b98:	3302      	adds	r3, #2
 8005b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b9e:	e7c5      	b.n	8005b2c <_printf_common+0x58>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	47c0      	blx	r8
 8005baa:	3001      	adds	r0, #1
 8005bac:	d0e6      	beq.n	8005b7c <_printf_common+0xa8>
 8005bae:	3601      	adds	r6, #1
 8005bb0:	e7d9      	b.n	8005b66 <_printf_common+0x92>
	...

08005bb4 <_printf_i>:
 8005bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb8:	460c      	mov	r4, r1
 8005bba:	7e27      	ldrb	r7, [r4, #24]
 8005bbc:	4691      	mov	r9, r2
 8005bbe:	2f78      	cmp	r7, #120	; 0x78
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	469a      	mov	sl, r3
 8005bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bca:	d807      	bhi.n	8005bdc <_printf_i+0x28>
 8005bcc:	2f62      	cmp	r7, #98	; 0x62
 8005bce:	d80a      	bhi.n	8005be6 <_printf_i+0x32>
 8005bd0:	2f00      	cmp	r7, #0
 8005bd2:	f000 80d9 	beq.w	8005d88 <_printf_i+0x1d4>
 8005bd6:	2f58      	cmp	r7, #88	; 0x58
 8005bd8:	f000 80a4 	beq.w	8005d24 <_printf_i+0x170>
 8005bdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005be4:	e03a      	b.n	8005c5c <_printf_i+0xa8>
 8005be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bea:	2b15      	cmp	r3, #21
 8005bec:	d8f6      	bhi.n	8005bdc <_printf_i+0x28>
 8005bee:	a001      	add	r0, pc, #4	; (adr r0, 8005bf4 <_printf_i+0x40>)
 8005bf0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bf4:	08005c4d 	.word	0x08005c4d
 8005bf8:	08005c61 	.word	0x08005c61
 8005bfc:	08005bdd 	.word	0x08005bdd
 8005c00:	08005bdd 	.word	0x08005bdd
 8005c04:	08005bdd 	.word	0x08005bdd
 8005c08:	08005bdd 	.word	0x08005bdd
 8005c0c:	08005c61 	.word	0x08005c61
 8005c10:	08005bdd 	.word	0x08005bdd
 8005c14:	08005bdd 	.word	0x08005bdd
 8005c18:	08005bdd 	.word	0x08005bdd
 8005c1c:	08005bdd 	.word	0x08005bdd
 8005c20:	08005d6f 	.word	0x08005d6f
 8005c24:	08005c91 	.word	0x08005c91
 8005c28:	08005d51 	.word	0x08005d51
 8005c2c:	08005bdd 	.word	0x08005bdd
 8005c30:	08005bdd 	.word	0x08005bdd
 8005c34:	08005d91 	.word	0x08005d91
 8005c38:	08005bdd 	.word	0x08005bdd
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005bdd 	.word	0x08005bdd
 8005c44:	08005bdd 	.word	0x08005bdd
 8005c48:	08005d59 	.word	0x08005d59
 8005c4c:	680b      	ldr	r3, [r1, #0]
 8005c4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	600a      	str	r2, [r1, #0]
 8005c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0a4      	b.n	8005daa <_printf_i+0x1f6>
 8005c60:	6825      	ldr	r5, [r4, #0]
 8005c62:	6808      	ldr	r0, [r1, #0]
 8005c64:	062e      	lsls	r6, r5, #24
 8005c66:	f100 0304 	add.w	r3, r0, #4
 8005c6a:	d50a      	bpl.n	8005c82 <_printf_i+0xce>
 8005c6c:	6805      	ldr	r5, [r0, #0]
 8005c6e:	600b      	str	r3, [r1, #0]
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	da03      	bge.n	8005c7c <_printf_i+0xc8>
 8005c74:	232d      	movs	r3, #45	; 0x2d
 8005c76:	426d      	negs	r5, r5
 8005c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c7c:	230a      	movs	r3, #10
 8005c7e:	485e      	ldr	r0, [pc, #376]	; (8005df8 <_printf_i+0x244>)
 8005c80:	e019      	b.n	8005cb6 <_printf_i+0x102>
 8005c82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c86:	6805      	ldr	r5, [r0, #0]
 8005c88:	600b      	str	r3, [r1, #0]
 8005c8a:	bf18      	it	ne
 8005c8c:	b22d      	sxthne	r5, r5
 8005c8e:	e7ef      	b.n	8005c70 <_printf_i+0xbc>
 8005c90:	680b      	ldr	r3, [r1, #0]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	1d18      	adds	r0, r3, #4
 8005c96:	6008      	str	r0, [r1, #0]
 8005c98:	0628      	lsls	r0, r5, #24
 8005c9a:	d501      	bpl.n	8005ca0 <_printf_i+0xec>
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	e002      	b.n	8005ca6 <_printf_i+0xf2>
 8005ca0:	0669      	lsls	r1, r5, #25
 8005ca2:	d5fb      	bpl.n	8005c9c <_printf_i+0xe8>
 8005ca4:	881d      	ldrh	r5, [r3, #0]
 8005ca6:	2f6f      	cmp	r7, #111	; 0x6f
 8005ca8:	bf0c      	ite	eq
 8005caa:	2308      	moveq	r3, #8
 8005cac:	230a      	movne	r3, #10
 8005cae:	4852      	ldr	r0, [pc, #328]	; (8005df8 <_printf_i+0x244>)
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cb6:	6866      	ldr	r6, [r4, #4]
 8005cb8:	2e00      	cmp	r6, #0
 8005cba:	bfa8      	it	ge
 8005cbc:	6821      	ldrge	r1, [r4, #0]
 8005cbe:	60a6      	str	r6, [r4, #8]
 8005cc0:	bfa4      	itt	ge
 8005cc2:	f021 0104 	bicge.w	r1, r1, #4
 8005cc6:	6021      	strge	r1, [r4, #0]
 8005cc8:	b90d      	cbnz	r5, 8005cce <_printf_i+0x11a>
 8005cca:	2e00      	cmp	r6, #0
 8005ccc:	d04d      	beq.n	8005d6a <_printf_i+0x1b6>
 8005cce:	4616      	mov	r6, r2
 8005cd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cd4:	fb03 5711 	mls	r7, r3, r1, r5
 8005cd8:	5dc7      	ldrb	r7, [r0, r7]
 8005cda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cde:	462f      	mov	r7, r5
 8005ce0:	42bb      	cmp	r3, r7
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	d9f4      	bls.n	8005cd0 <_printf_i+0x11c>
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d10b      	bne.n	8005d02 <_printf_i+0x14e>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	07df      	lsls	r7, r3, #31
 8005cee:	d508      	bpl.n	8005d02 <_printf_i+0x14e>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	6861      	ldr	r1, [r4, #4]
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	bfde      	ittt	le
 8005cf8:	2330      	movle	r3, #48	; 0x30
 8005cfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d02:	1b92      	subs	r2, r2, r6
 8005d04:	6122      	str	r2, [r4, #16]
 8005d06:	464b      	mov	r3, r9
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f8cd a000 	str.w	sl, [sp]
 8005d10:	aa03      	add	r2, sp, #12
 8005d12:	f7ff fedf 	bl	8005ad4 <_printf_common>
 8005d16:	3001      	adds	r0, #1
 8005d18:	d14c      	bne.n	8005db4 <_printf_i+0x200>
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	b004      	add	sp, #16
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d24:	4834      	ldr	r0, [pc, #208]	; (8005df8 <_printf_i+0x244>)
 8005d26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d2a:	680e      	ldr	r6, [r1, #0]
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d32:	061f      	lsls	r7, r3, #24
 8005d34:	600e      	str	r6, [r1, #0]
 8005d36:	d514      	bpl.n	8005d62 <_printf_i+0x1ae>
 8005d38:	07d9      	lsls	r1, r3, #31
 8005d3a:	bf44      	itt	mi
 8005d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d40:	6023      	strmi	r3, [r4, #0]
 8005d42:	b91d      	cbnz	r5, 8005d4c <_printf_i+0x198>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	f023 0320 	bic.w	r3, r3, #32
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	e7af      	b.n	8005cb0 <_printf_i+0xfc>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	f043 0320 	orr.w	r3, r3, #32
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	2378      	movs	r3, #120	; 0x78
 8005d5a:	4828      	ldr	r0, [pc, #160]	; (8005dfc <_printf_i+0x248>)
 8005d5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d60:	e7e3      	b.n	8005d2a <_printf_i+0x176>
 8005d62:	065e      	lsls	r6, r3, #25
 8005d64:	bf48      	it	mi
 8005d66:	b2ad      	uxthmi	r5, r5
 8005d68:	e7e6      	b.n	8005d38 <_printf_i+0x184>
 8005d6a:	4616      	mov	r6, r2
 8005d6c:	e7bb      	b.n	8005ce6 <_printf_i+0x132>
 8005d6e:	680b      	ldr	r3, [r1, #0]
 8005d70:	6826      	ldr	r6, [r4, #0]
 8005d72:	1d1d      	adds	r5, r3, #4
 8005d74:	6960      	ldr	r0, [r4, #20]
 8005d76:	600d      	str	r5, [r1, #0]
 8005d78:	0635      	lsls	r5, r6, #24
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	d501      	bpl.n	8005d82 <_printf_i+0x1ce>
 8005d7e:	6018      	str	r0, [r3, #0]
 8005d80:	e002      	b.n	8005d88 <_printf_i+0x1d4>
 8005d82:	0671      	lsls	r1, r6, #25
 8005d84:	d5fb      	bpl.n	8005d7e <_printf_i+0x1ca>
 8005d86:	8018      	strh	r0, [r3, #0]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4616      	mov	r6, r2
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	e7ba      	b.n	8005d06 <_printf_i+0x152>
 8005d90:	680b      	ldr	r3, [r1, #0]
 8005d92:	1d1a      	adds	r2, r3, #4
 8005d94:	600a      	str	r2, [r1, #0]
 8005d96:	681e      	ldr	r6, [r3, #0]
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	6862      	ldr	r2, [r4, #4]
 8005d9e:	f000 fa9d 	bl	80062dc <memchr>
 8005da2:	b108      	cbz	r0, 8005da8 <_printf_i+0x1f4>
 8005da4:	1b80      	subs	r0, r0, r6
 8005da6:	6060      	str	r0, [r4, #4]
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	2300      	movs	r3, #0
 8005dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db2:	e7a8      	b.n	8005d06 <_printf_i+0x152>
 8005db4:	4632      	mov	r2, r6
 8005db6:	4649      	mov	r1, r9
 8005db8:	4640      	mov	r0, r8
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	47d0      	blx	sl
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d0ab      	beq.n	8005d1a <_printf_i+0x166>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	079b      	lsls	r3, r3, #30
 8005dc6:	d413      	bmi.n	8005df0 <_printf_i+0x23c>
 8005dc8:	68e0      	ldr	r0, [r4, #12]
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	4298      	cmp	r0, r3
 8005dce:	bfb8      	it	lt
 8005dd0:	4618      	movlt	r0, r3
 8005dd2:	e7a4      	b.n	8005d1e <_printf_i+0x16a>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4632      	mov	r2, r6
 8005dd8:	4649      	mov	r1, r9
 8005dda:	4640      	mov	r0, r8
 8005ddc:	47d0      	blx	sl
 8005dde:	3001      	adds	r0, #1
 8005de0:	d09b      	beq.n	8005d1a <_printf_i+0x166>
 8005de2:	3501      	adds	r5, #1
 8005de4:	68e3      	ldr	r3, [r4, #12]
 8005de6:	9903      	ldr	r1, [sp, #12]
 8005de8:	1a5b      	subs	r3, r3, r1
 8005dea:	42ab      	cmp	r3, r5
 8005dec:	dcf2      	bgt.n	8005dd4 <_printf_i+0x220>
 8005dee:	e7eb      	b.n	8005dc8 <_printf_i+0x214>
 8005df0:	2500      	movs	r5, #0
 8005df2:	f104 0619 	add.w	r6, r4, #25
 8005df6:	e7f5      	b.n	8005de4 <_printf_i+0x230>
 8005df8:	08006cfd 	.word	0x08006cfd
 8005dfc:	08006d0e 	.word	0x08006d0e

08005e00 <_sbrk_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	2300      	movs	r3, #0
 8005e04:	4d05      	ldr	r5, [pc, #20]	; (8005e1c <_sbrk_r+0x1c>)
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fc f8c2 	bl	8001f94 <_sbrk>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_sbrk_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_sbrk_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	2000068c 	.word	0x2000068c

08005e20 <__sread>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	460c      	mov	r4, r1
 8005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e28:	f000 fabe 	bl	80063a8 <_read_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	bfab      	itete	ge
 8005e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e32:	89a3      	ldrhlt	r3, [r4, #12]
 8005e34:	181b      	addge	r3, r3, r0
 8005e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e3a:	bfac      	ite	ge
 8005e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e3e:	81a3      	strhlt	r3, [r4, #12]
 8005e40:	bd10      	pop	{r4, pc}

08005e42 <__swrite>:
 8005e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e46:	461f      	mov	r7, r3
 8005e48:	898b      	ldrh	r3, [r1, #12]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	05db      	lsls	r3, r3, #23
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4616      	mov	r6, r2
 8005e52:	d505      	bpl.n	8005e60 <__swrite+0x1e>
 8005e54:	2302      	movs	r3, #2
 8005e56:	2200      	movs	r2, #0
 8005e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5c:	f000 f9c8 	bl	80061f0 <_lseek_r>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	4632      	mov	r2, r6
 8005e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e76:	f000 b869 	b.w	8005f4c <_write_r>

08005e7a <__sseek>:
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 f9b5 	bl	80061f0 <_lseek_r>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	bf15      	itete	ne
 8005e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e96:	81a3      	strheq	r3, [r4, #12]
 8005e98:	bf18      	it	ne
 8005e9a:	81a3      	strhne	r3, [r4, #12]
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <__sclose>:
 8005e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea2:	f000 b8d3 	b.w	800604c <_close_r>
	...

08005ea8 <__swbuf_r>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	460e      	mov	r6, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b118      	cbz	r0, 8005eba <__swbuf_r+0x12>
 8005eb2:	6983      	ldr	r3, [r0, #24]
 8005eb4:	b90b      	cbnz	r3, 8005eba <__swbuf_r+0x12>
 8005eb6:	f7ff fbbb 	bl	8005630 <__sinit>
 8005eba:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <__swbuf_r+0x98>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d12b      	bne.n	8005f18 <__swbuf_r+0x70>
 8005ec0:	686c      	ldr	r4, [r5, #4]
 8005ec2:	69a3      	ldr	r3, [r4, #24]
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	071a      	lsls	r2, r3, #28
 8005eca:	d52f      	bpl.n	8005f2c <__swbuf_r+0x84>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	b36b      	cbz	r3, 8005f2c <__swbuf_r+0x84>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	b2f6      	uxtb	r6, r6
 8005ed6:	1ac0      	subs	r0, r0, r3
 8005ed8:	6963      	ldr	r3, [r4, #20]
 8005eda:	4637      	mov	r7, r6
 8005edc:	4283      	cmp	r3, r0
 8005ede:	dc04      	bgt.n	8005eea <__swbuf_r+0x42>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f948 	bl	8006178 <_fflush_r>
 8005ee8:	bb30      	cbnz	r0, 8005f38 <__swbuf_r+0x90>
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	3001      	adds	r0, #1
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	60a3      	str	r3, [r4, #8]
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	6022      	str	r2, [r4, #0]
 8005ef8:	701e      	strb	r6, [r3, #0]
 8005efa:	6963      	ldr	r3, [r4, #20]
 8005efc:	4283      	cmp	r3, r0
 8005efe:	d004      	beq.n	8005f0a <__swbuf_r+0x62>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d506      	bpl.n	8005f14 <__swbuf_r+0x6c>
 8005f06:	2e0a      	cmp	r6, #10
 8005f08:	d104      	bne.n	8005f14 <__swbuf_r+0x6c>
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f933 	bl	8006178 <_fflush_r>
 8005f12:	b988      	cbnz	r0, 8005f38 <__swbuf_r+0x90>
 8005f14:	4638      	mov	r0, r7
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <__swbuf_r+0x9c>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d101      	bne.n	8005f22 <__swbuf_r+0x7a>
 8005f1e:	68ac      	ldr	r4, [r5, #8]
 8005f20:	e7cf      	b.n	8005ec2 <__swbuf_r+0x1a>
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <__swbuf_r+0xa0>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	bf08      	it	eq
 8005f28:	68ec      	ldreq	r4, [r5, #12]
 8005f2a:	e7ca      	b.n	8005ec2 <__swbuf_r+0x1a>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f81e 	bl	8005f70 <__swsetup_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0cb      	beq.n	8005ed0 <__swbuf_r+0x28>
 8005f38:	f04f 37ff 	mov.w	r7, #4294967295
 8005f3c:	e7ea      	b.n	8005f14 <__swbuf_r+0x6c>
 8005f3e:	bf00      	nop
 8005f40:	08006cac 	.word	0x08006cac
 8005f44:	08006ccc 	.word	0x08006ccc
 8005f48:	08006c8c 	.word	0x08006c8c

08005f4c <_write_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	2200      	movs	r2, #0
 8005f56:	4d05      	ldr	r5, [pc, #20]	; (8005f6c <_write_r+0x20>)
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fc f856 	bl	800200c <_write>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_write_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_write_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	2000068c 	.word	0x2000068c

08005f70 <__swsetup_r>:
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <__swsetup_r+0xcc>)
 8005f72:	b570      	push	{r4, r5, r6, lr}
 8005f74:	681d      	ldr	r5, [r3, #0]
 8005f76:	4606      	mov	r6, r0
 8005f78:	460c      	mov	r4, r1
 8005f7a:	b125      	cbz	r5, 8005f86 <__swsetup_r+0x16>
 8005f7c:	69ab      	ldr	r3, [r5, #24]
 8005f7e:	b913      	cbnz	r3, 8005f86 <__swsetup_r+0x16>
 8005f80:	4628      	mov	r0, r5
 8005f82:	f7ff fb55 	bl	8005630 <__sinit>
 8005f86:	4b2e      	ldr	r3, [pc, #184]	; (8006040 <__swsetup_r+0xd0>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	d10f      	bne.n	8005fac <__swsetup_r+0x3c>
 8005f8c:	686c      	ldr	r4, [r5, #4]
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f94:	0719      	lsls	r1, r3, #28
 8005f96:	d42c      	bmi.n	8005ff2 <__swsetup_r+0x82>
 8005f98:	06dd      	lsls	r5, r3, #27
 8005f9a:	d411      	bmi.n	8005fc0 <__swsetup_r+0x50>
 8005f9c:	2309      	movs	r3, #9
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	e03e      	b.n	800602a <__swsetup_r+0xba>
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <__swsetup_r+0xd4>)
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d101      	bne.n	8005fb6 <__swsetup_r+0x46>
 8005fb2:	68ac      	ldr	r4, [r5, #8]
 8005fb4:	e7eb      	b.n	8005f8e <__swsetup_r+0x1e>
 8005fb6:	4b24      	ldr	r3, [pc, #144]	; (8006048 <__swsetup_r+0xd8>)
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	bf08      	it	eq
 8005fbc:	68ec      	ldreq	r4, [r5, #12]
 8005fbe:	e7e6      	b.n	8005f8e <__swsetup_r+0x1e>
 8005fc0:	0758      	lsls	r0, r3, #29
 8005fc2:	d512      	bpl.n	8005fea <__swsetup_r+0x7a>
 8005fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc6:	b141      	cbz	r1, 8005fda <__swsetup_r+0x6a>
 8005fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	d002      	beq.n	8005fd6 <__swsetup_r+0x66>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f99d 	bl	8006310 <_free_r>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f043 0308 	orr.w	r3, r3, #8
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	b94b      	cbnz	r3, 800600a <__swsetup_r+0x9a>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006000:	d003      	beq.n	800600a <__swsetup_r+0x9a>
 8006002:	4621      	mov	r1, r4
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f929 	bl	800625c <__smakebuf_r>
 800600a:	89a0      	ldrh	r0, [r4, #12]
 800600c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006010:	f010 0301 	ands.w	r3, r0, #1
 8006014:	d00a      	beq.n	800602c <__swsetup_r+0xbc>
 8006016:	2300      	movs	r3, #0
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	6963      	ldr	r3, [r4, #20]
 800601c:	425b      	negs	r3, r3
 800601e:	61a3      	str	r3, [r4, #24]
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	b943      	cbnz	r3, 8006036 <__swsetup_r+0xc6>
 8006024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006028:	d1ba      	bne.n	8005fa0 <__swsetup_r+0x30>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	0781      	lsls	r1, r0, #30
 800602e:	bf58      	it	pl
 8006030:	6963      	ldrpl	r3, [r4, #20]
 8006032:	60a3      	str	r3, [r4, #8]
 8006034:	e7f4      	b.n	8006020 <__swsetup_r+0xb0>
 8006036:	2000      	movs	r0, #0
 8006038:	e7f7      	b.n	800602a <__swsetup_r+0xba>
 800603a:	bf00      	nop
 800603c:	20000034 	.word	0x20000034
 8006040:	08006cac 	.word	0x08006cac
 8006044:	08006ccc 	.word	0x08006ccc
 8006048:	08006c8c 	.word	0x08006c8c

0800604c <_close_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	2300      	movs	r3, #0
 8006050:	4d05      	ldr	r5, [pc, #20]	; (8006068 <_close_r+0x1c>)
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fb ff6b 	bl	8001f32 <_close>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_close_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_close_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	2000068c 	.word	0x2000068c

0800606c <__sflush_r>:
 800606c:	898a      	ldrh	r2, [r1, #12]
 800606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	0710      	lsls	r0, r2, #28
 8006076:	460c      	mov	r4, r1
 8006078:	d458      	bmi.n	800612c <__sflush_r+0xc0>
 800607a:	684b      	ldr	r3, [r1, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	dc05      	bgt.n	800608c <__sflush_r+0x20>
 8006080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	dc02      	bgt.n	800608c <__sflush_r+0x20>
 8006086:	2000      	movs	r0, #0
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800608e:	2e00      	cmp	r6, #0
 8006090:	d0f9      	beq.n	8006086 <__sflush_r+0x1a>
 8006092:	2300      	movs	r3, #0
 8006094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006098:	682f      	ldr	r7, [r5, #0]
 800609a:	602b      	str	r3, [r5, #0]
 800609c:	d032      	beq.n	8006104 <__sflush_r+0x98>
 800609e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	075a      	lsls	r2, r3, #29
 80060a4:	d505      	bpl.n	80060b2 <__sflush_r+0x46>
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	1ac0      	subs	r0, r0, r3
 80060aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ac:	b10b      	cbz	r3, 80060b2 <__sflush_r+0x46>
 80060ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060b0:	1ac0      	subs	r0, r0, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	4602      	mov	r2, r0
 80060b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060b8:	4628      	mov	r0, r5
 80060ba:	6a21      	ldr	r1, [r4, #32]
 80060bc:	47b0      	blx	r6
 80060be:	1c43      	adds	r3, r0, #1
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	d106      	bne.n	80060d2 <__sflush_r+0x66>
 80060c4:	6829      	ldr	r1, [r5, #0]
 80060c6:	291d      	cmp	r1, #29
 80060c8:	d82c      	bhi.n	8006124 <__sflush_r+0xb8>
 80060ca:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <__sflush_r+0x108>)
 80060cc:	40ca      	lsrs	r2, r1
 80060ce:	07d6      	lsls	r6, r2, #31
 80060d0:	d528      	bpl.n	8006124 <__sflush_r+0xb8>
 80060d2:	2200      	movs	r2, #0
 80060d4:	6062      	str	r2, [r4, #4]
 80060d6:	6922      	ldr	r2, [r4, #16]
 80060d8:	04d9      	lsls	r1, r3, #19
 80060da:	6022      	str	r2, [r4, #0]
 80060dc:	d504      	bpl.n	80060e8 <__sflush_r+0x7c>
 80060de:	1c42      	adds	r2, r0, #1
 80060e0:	d101      	bne.n	80060e6 <__sflush_r+0x7a>
 80060e2:	682b      	ldr	r3, [r5, #0]
 80060e4:	b903      	cbnz	r3, 80060e8 <__sflush_r+0x7c>
 80060e6:	6560      	str	r0, [r4, #84]	; 0x54
 80060e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ea:	602f      	str	r7, [r5, #0]
 80060ec:	2900      	cmp	r1, #0
 80060ee:	d0ca      	beq.n	8006086 <__sflush_r+0x1a>
 80060f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f4:	4299      	cmp	r1, r3
 80060f6:	d002      	beq.n	80060fe <__sflush_r+0x92>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f909 	bl	8006310 <_free_r>
 80060fe:	2000      	movs	r0, #0
 8006100:	6360      	str	r0, [r4, #52]	; 0x34
 8006102:	e7c1      	b.n	8006088 <__sflush_r+0x1c>
 8006104:	6a21      	ldr	r1, [r4, #32]
 8006106:	2301      	movs	r3, #1
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	1c41      	adds	r1, r0, #1
 800610e:	d1c7      	bne.n	80060a0 <__sflush_r+0x34>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c4      	beq.n	80060a0 <__sflush_r+0x34>
 8006116:	2b1d      	cmp	r3, #29
 8006118:	d001      	beq.n	800611e <__sflush_r+0xb2>
 800611a:	2b16      	cmp	r3, #22
 800611c:	d101      	bne.n	8006122 <__sflush_r+0xb6>
 800611e:	602f      	str	r7, [r5, #0]
 8006120:	e7b1      	b.n	8006086 <__sflush_r+0x1a>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	e7ad      	b.n	8006088 <__sflush_r+0x1c>
 800612c:	690f      	ldr	r7, [r1, #16]
 800612e:	2f00      	cmp	r7, #0
 8006130:	d0a9      	beq.n	8006086 <__sflush_r+0x1a>
 8006132:	0793      	lsls	r3, r2, #30
 8006134:	bf18      	it	ne
 8006136:	2300      	movne	r3, #0
 8006138:	680e      	ldr	r6, [r1, #0]
 800613a:	bf08      	it	eq
 800613c:	694b      	ldreq	r3, [r1, #20]
 800613e:	eba6 0807 	sub.w	r8, r6, r7
 8006142:	600f      	str	r7, [r1, #0]
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	f1b8 0f00 	cmp.w	r8, #0
 800614a:	dd9c      	ble.n	8006086 <__sflush_r+0x1a>
 800614c:	4643      	mov	r3, r8
 800614e:	463a      	mov	r2, r7
 8006150:	4628      	mov	r0, r5
 8006152:	6a21      	ldr	r1, [r4, #32]
 8006154:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006156:	47b0      	blx	r6
 8006158:	2800      	cmp	r0, #0
 800615a:	dc06      	bgt.n	800616a <__sflush_r+0xfe>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f04f 30ff 	mov.w	r0, #4294967295
 8006162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	e78e      	b.n	8006088 <__sflush_r+0x1c>
 800616a:	4407      	add	r7, r0
 800616c:	eba8 0800 	sub.w	r8, r8, r0
 8006170:	e7e9      	b.n	8006146 <__sflush_r+0xda>
 8006172:	bf00      	nop
 8006174:	20400001 	.word	0x20400001

08006178 <_fflush_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b913      	cbnz	r3, 8006188 <_fflush_r+0x10>
 8006182:	2500      	movs	r5, #0
 8006184:	4628      	mov	r0, r5
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	b118      	cbz	r0, 8006192 <_fflush_r+0x1a>
 800618a:	6983      	ldr	r3, [r0, #24]
 800618c:	b90b      	cbnz	r3, 8006192 <_fflush_r+0x1a>
 800618e:	f7ff fa4f 	bl	8005630 <__sinit>
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <_fflush_r+0x6c>)
 8006194:	429c      	cmp	r4, r3
 8006196:	d11b      	bne.n	80061d0 <_fflush_r+0x58>
 8006198:	686c      	ldr	r4, [r5, #4]
 800619a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0ef      	beq.n	8006182 <_fflush_r+0xa>
 80061a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061a4:	07d0      	lsls	r0, r2, #31
 80061a6:	d404      	bmi.n	80061b2 <_fflush_r+0x3a>
 80061a8:	0599      	lsls	r1, r3, #22
 80061aa:	d402      	bmi.n	80061b2 <_fflush_r+0x3a>
 80061ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ae:	f7ff fadd 	bl	800576c <__retarget_lock_acquire_recursive>
 80061b2:	4628      	mov	r0, r5
 80061b4:	4621      	mov	r1, r4
 80061b6:	f7ff ff59 	bl	800606c <__sflush_r>
 80061ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061bc:	4605      	mov	r5, r0
 80061be:	07da      	lsls	r2, r3, #31
 80061c0:	d4e0      	bmi.n	8006184 <_fflush_r+0xc>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	059b      	lsls	r3, r3, #22
 80061c6:	d4dd      	bmi.n	8006184 <_fflush_r+0xc>
 80061c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ca:	f7ff fad0 	bl	800576e <__retarget_lock_release_recursive>
 80061ce:	e7d9      	b.n	8006184 <_fflush_r+0xc>
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <_fflush_r+0x70>)
 80061d2:	429c      	cmp	r4, r3
 80061d4:	d101      	bne.n	80061da <_fflush_r+0x62>
 80061d6:	68ac      	ldr	r4, [r5, #8]
 80061d8:	e7df      	b.n	800619a <_fflush_r+0x22>
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <_fflush_r+0x74>)
 80061dc:	429c      	cmp	r4, r3
 80061de:	bf08      	it	eq
 80061e0:	68ec      	ldreq	r4, [r5, #12]
 80061e2:	e7da      	b.n	800619a <_fflush_r+0x22>
 80061e4:	08006cac 	.word	0x08006cac
 80061e8:	08006ccc 	.word	0x08006ccc
 80061ec:	08006c8c 	.word	0x08006c8c

080061f0 <_lseek_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	4d05      	ldr	r5, [pc, #20]	; (8006210 <_lseek_r+0x20>)
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fb febb 	bl	8001f7a <_lseek>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_lseek_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_lseek_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	2000068c 	.word	0x2000068c

08006214 <__swhatbuf_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	460e      	mov	r6, r1
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	4614      	mov	r4, r2
 800621e:	2900      	cmp	r1, #0
 8006220:	461d      	mov	r5, r3
 8006222:	b096      	sub	sp, #88	; 0x58
 8006224:	da07      	bge.n	8006236 <__swhatbuf_r+0x22>
 8006226:	2300      	movs	r3, #0
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	89b3      	ldrh	r3, [r6, #12]
 800622c:	061a      	lsls	r2, r3, #24
 800622e:	d410      	bmi.n	8006252 <__swhatbuf_r+0x3e>
 8006230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006234:	e00e      	b.n	8006254 <__swhatbuf_r+0x40>
 8006236:	466a      	mov	r2, sp
 8006238:	f000 f8c8 	bl	80063cc <_fstat_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	dbf2      	blt.n	8006226 <__swhatbuf_r+0x12>
 8006240:	9a01      	ldr	r2, [sp, #4]
 8006242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800624a:	425a      	negs	r2, r3
 800624c:	415a      	adcs	r2, r3
 800624e:	602a      	str	r2, [r5, #0]
 8006250:	e7ee      	b.n	8006230 <__swhatbuf_r+0x1c>
 8006252:	2340      	movs	r3, #64	; 0x40
 8006254:	2000      	movs	r0, #0
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	b016      	add	sp, #88	; 0x58
 800625a:	bd70      	pop	{r4, r5, r6, pc}

0800625c <__smakebuf_r>:
 800625c:	898b      	ldrh	r3, [r1, #12]
 800625e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006260:	079d      	lsls	r5, r3, #30
 8006262:	4606      	mov	r6, r0
 8006264:	460c      	mov	r4, r1
 8006266:	d507      	bpl.n	8006278 <__smakebuf_r+0x1c>
 8006268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	2301      	movs	r3, #1
 8006272:	6163      	str	r3, [r4, #20]
 8006274:	b002      	add	sp, #8
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	466a      	mov	r2, sp
 800627a:	ab01      	add	r3, sp, #4
 800627c:	f7ff ffca 	bl	8006214 <__swhatbuf_r>
 8006280:	9900      	ldr	r1, [sp, #0]
 8006282:	4605      	mov	r5, r0
 8006284:	4630      	mov	r0, r6
 8006286:	f7ff fa73 	bl	8005770 <_malloc_r>
 800628a:	b948      	cbnz	r0, 80062a0 <__smakebuf_r+0x44>
 800628c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006290:	059a      	lsls	r2, r3, #22
 8006292:	d4ef      	bmi.n	8006274 <__smakebuf_r+0x18>
 8006294:	f023 0303 	bic.w	r3, r3, #3
 8006298:	f043 0302 	orr.w	r3, r3, #2
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	e7e3      	b.n	8006268 <__smakebuf_r+0xc>
 80062a0:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <__smakebuf_r+0x7c>)
 80062a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	6020      	str	r0, [r4, #0]
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	6120      	str	r0, [r4, #16]
 80062b2:	6163      	str	r3, [r4, #20]
 80062b4:	9b01      	ldr	r3, [sp, #4]
 80062b6:	b15b      	cbz	r3, 80062d0 <__smakebuf_r+0x74>
 80062b8:	4630      	mov	r0, r6
 80062ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062be:	f000 f897 	bl	80063f0 <_isatty_r>
 80062c2:	b128      	cbz	r0, 80062d0 <__smakebuf_r+0x74>
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	89a0      	ldrh	r0, [r4, #12]
 80062d2:	4305      	orrs	r5, r0
 80062d4:	81a5      	strh	r5, [r4, #12]
 80062d6:	e7cd      	b.n	8006274 <__smakebuf_r+0x18>
 80062d8:	080055c9 	.word	0x080055c9

080062dc <memchr>:
 80062dc:	4603      	mov	r3, r0
 80062de:	b510      	push	{r4, lr}
 80062e0:	b2c9      	uxtb	r1, r1
 80062e2:	4402      	add	r2, r0
 80062e4:	4293      	cmp	r3, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	d101      	bne.n	80062ee <memchr+0x12>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e003      	b.n	80062f6 <memchr+0x1a>
 80062ee:	7804      	ldrb	r4, [r0, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	428c      	cmp	r4, r1
 80062f4:	d1f6      	bne.n	80062e4 <memchr+0x8>
 80062f6:	bd10      	pop	{r4, pc}

080062f8 <__malloc_lock>:
 80062f8:	4801      	ldr	r0, [pc, #4]	; (8006300 <__malloc_lock+0x8>)
 80062fa:	f7ff ba37 	b.w	800576c <__retarget_lock_acquire_recursive>
 80062fe:	bf00      	nop
 8006300:	20000684 	.word	0x20000684

08006304 <__malloc_unlock>:
 8006304:	4801      	ldr	r0, [pc, #4]	; (800630c <__malloc_unlock+0x8>)
 8006306:	f7ff ba32 	b.w	800576e <__retarget_lock_release_recursive>
 800630a:	bf00      	nop
 800630c:	20000684 	.word	0x20000684

08006310 <_free_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	2900      	cmp	r1, #0
 8006316:	d043      	beq.n	80063a0 <_free_r+0x90>
 8006318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800631c:	1f0c      	subs	r4, r1, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bfb8      	it	lt
 8006322:	18e4      	addlt	r4, r4, r3
 8006324:	f7ff ffe8 	bl	80062f8 <__malloc_lock>
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <_free_r+0x94>)
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	4610      	mov	r0, r2
 800632e:	b933      	cbnz	r3, 800633e <_free_r+0x2e>
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	6014      	str	r4, [r2, #0]
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800633a:	f7ff bfe3 	b.w	8006304 <__malloc_unlock>
 800633e:	42a3      	cmp	r3, r4
 8006340:	d90a      	bls.n	8006358 <_free_r+0x48>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	1862      	adds	r2, r4, r1
 8006346:	4293      	cmp	r3, r2
 8006348:	bf01      	itttt	eq
 800634a:	681a      	ldreq	r2, [r3, #0]
 800634c:	685b      	ldreq	r3, [r3, #4]
 800634e:	1852      	addeq	r2, r2, r1
 8006350:	6022      	streq	r2, [r4, #0]
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	6004      	str	r4, [r0, #0]
 8006356:	e7ed      	b.n	8006334 <_free_r+0x24>
 8006358:	461a      	mov	r2, r3
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b10b      	cbz	r3, 8006362 <_free_r+0x52>
 800635e:	42a3      	cmp	r3, r4
 8006360:	d9fa      	bls.n	8006358 <_free_r+0x48>
 8006362:	6811      	ldr	r1, [r2, #0]
 8006364:	1850      	adds	r0, r2, r1
 8006366:	42a0      	cmp	r0, r4
 8006368:	d10b      	bne.n	8006382 <_free_r+0x72>
 800636a:	6820      	ldr	r0, [r4, #0]
 800636c:	4401      	add	r1, r0
 800636e:	1850      	adds	r0, r2, r1
 8006370:	4283      	cmp	r3, r0
 8006372:	6011      	str	r1, [r2, #0]
 8006374:	d1de      	bne.n	8006334 <_free_r+0x24>
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4401      	add	r1, r0
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	6053      	str	r3, [r2, #4]
 8006380:	e7d8      	b.n	8006334 <_free_r+0x24>
 8006382:	d902      	bls.n	800638a <_free_r+0x7a>
 8006384:	230c      	movs	r3, #12
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	e7d4      	b.n	8006334 <_free_r+0x24>
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	1821      	adds	r1, r4, r0
 800638e:	428b      	cmp	r3, r1
 8006390:	bf01      	itttt	eq
 8006392:	6819      	ldreq	r1, [r3, #0]
 8006394:	685b      	ldreq	r3, [r3, #4]
 8006396:	1809      	addeq	r1, r1, r0
 8006398:	6021      	streq	r1, [r4, #0]
 800639a:	6063      	str	r3, [r4, #4]
 800639c:	6054      	str	r4, [r2, #4]
 800639e:	e7c9      	b.n	8006334 <_free_r+0x24>
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	20000580 	.word	0x20000580

080063a8 <_read_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	4611      	mov	r1, r2
 80063b0:	2200      	movs	r2, #0
 80063b2:	4d05      	ldr	r5, [pc, #20]	; (80063c8 <_read_r+0x20>)
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fb fd9e 	bl	8001ef8 <_read>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_read_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_read_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	2000068c 	.word	0x2000068c

080063cc <_fstat_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	2300      	movs	r3, #0
 80063d0:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_fstat_r+0x20>)
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	f7fb fdb5 	bl	8001f48 <_fstat>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	d102      	bne.n	80063e8 <_fstat_r+0x1c>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	b103      	cbz	r3, 80063e8 <_fstat_r+0x1c>
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	bd38      	pop	{r3, r4, r5, pc}
 80063ea:	bf00      	nop
 80063ec:	2000068c 	.word	0x2000068c

080063f0 <_isatty_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	2300      	movs	r3, #0
 80063f4:	4d05      	ldr	r5, [pc, #20]	; (800640c <_isatty_r+0x1c>)
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fb fdb3 	bl	8001f66 <_isatty>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_isatty_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_isatty_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	2000068c 	.word	0x2000068c

08006410 <_init>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr

0800641c <_fini>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr
