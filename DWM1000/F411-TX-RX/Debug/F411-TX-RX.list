
F411-TX-RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08006d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000048  08006d78  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08006d78  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001357e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ca  00000000  00000000  000335f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  000366c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00037860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6ef  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001651b  00000000  00000000  00052fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dd4  00000000  00000000  000694c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  000fb2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006474 	.word	0x08006474

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	08006474 	.word	0x08006474

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 80004fc:	4b9f      	ldr	r3, [pc, #636]	; (800077c <dwt_initialise+0x290>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000504:	4b9d      	ldr	r3, [pc, #628]	; (800077c <dwt_initialise+0x290>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800050c:	4b9b      	ldr	r3, [pc, #620]	; (800077c <dwt_initialise+0x290>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000514:	4b99      	ldr	r3, [pc, #612]	; (800077c <dwt_initialise+0x290>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 800051c:	4b97      	ldr	r3, [pc, #604]	; (800077c <dwt_initialise+0x290>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000524:	4b95      	ldr	r3, [pc, #596]	; (800077c <dwt_initialise+0x290>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2200      	movs	r2, #0
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 800052c:	4b93      	ldr	r3, [pc, #588]	; (800077c <dwt_initialise+0x290>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000534:	f000 f926 	bl	8000784 <dwt_readdevid>
 8000538:	4603      	mov	r3, r0
 800053a:	4a91      	ldr	r2, [pc, #580]	; (8000780 <dwt_initialise+0x294>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d002      	beq.n	8000546 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	e115      	b.n	8000772 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	2b00      	cmp	r3, #0
 800054e:	d101      	bne.n	8000554 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000550:	f000 fde4 	bl	800111c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <dwt_initialise+0x7c>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fca3 	bl	8000eb4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800056e:	2204      	movs	r2, #4
 8000570:	2100      	movs	r1, #0
 8000572:	2024      	movs	r0, #36	; 0x24
 8000574:	f000 fbcc 	bl	8000d10 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	2b00      	cmp	r3, #0
 8000580:	d116      	bne.n	80005b0 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000582:	2004      	movs	r0, #4
 8000584:	f000 fc1a 	bl	8000dbc <_dwt_otpread>
 8000588:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d01f      	beq.n	80005d2 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000592:	2202      	movs	r2, #2
 8000594:	2112      	movs	r1, #18
 8000596:	202d      	movs	r0, #45	; 0x2d
 8000598:	f000 fbba 	bl	8000d10 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800059c:	4b77      	ldr	r3, [pc, #476]	; (800077c <dwt_initialise+0x290>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	8ada      	ldrh	r2, [r3, #22]
 80005a2:	4b76      	ldr	r3, [pc, #472]	; (800077c <dwt_initialise+0x290>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005aa:	b292      	uxth	r2, r2
 80005ac:	82da      	strh	r2, [r3, #22]
 80005ae:	e010      	b.n	80005d2 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80005b0:	2130      	movs	r1, #48	; 0x30
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fb55 	bl	8000c62 <dwt_read32bitoffsetreg>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80005be:	d008      	beq.n	80005d2 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80005c0:	4b6e      	ldr	r3, [pc, #440]	; (800077c <dwt_initialise+0x290>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	8ada      	ldrh	r2, [r3, #22]
 80005c6:	4b6d      	ldr	r3, [pc, #436]	; (800077c <dwt_initialise+0x290>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005ce:	b292      	uxth	r2, r2
 80005d0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d009      	beq.n	80005f0 <dwt_initialise+0x104>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d011      	beq.n	800060a <dwt_initialise+0x11e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00c      	beq.n	800060a <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80005f0:	201e      	movs	r0, #30
 80005f2:	f000 fbe3 	bl	8000dbc <_dwt_otpread>
 80005f6:	4603      	mov	r3, r0
 80005f8:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80005fa:	8afb      	ldrh	r3, [r7, #22]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b5e      	ldr	r3, [pc, #376]	; (800077c <dwt_initialise+0x290>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	72da      	strb	r2, [r3, #11]
 8000608:	e003      	b.n	8000612 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800060a:	4b5c      	ldr	r3, [pc, #368]	; (800077c <dwt_initialise+0x290>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10b      	bne.n	8000634 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800061c:	8afb      	ldrh	r3, [r7, #22]
 800061e:	f003 031f 	and.w	r3, r3, #31
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8000626:	2310      	movs	r3, #16
 8000628:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800062a:	8afb      	ldrh	r3, [r7, #22]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fd9a 	bl	8001168 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800063e:	4b4f      	ldr	r3, [pc, #316]	; (800077c <dwt_initialise+0x290>)
 8000640:	681c      	ldr	r4, [r3, #0]
 8000642:	2006      	movs	r0, #6
 8000644:	f000 fbba 	bl	8000dbc <_dwt_otpread>
 8000648:	4603      	mov	r3, r0
 800064a:	6023      	str	r3, [r4, #0]
 800064c:	e003      	b.n	8000656 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 800064e:	4b4b      	ldr	r3, [pc, #300]	; (800077c <dwt_initialise+0x290>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000660:	4b46      	ldr	r3, [pc, #280]	; (800077c <dwt_initialise+0x290>)
 8000662:	681c      	ldr	r4, [r3, #0]
 8000664:	2007      	movs	r0, #7
 8000666:	f000 fba9 	bl	8000dbc <_dwt_otpread>
 800066a:	4603      	mov	r3, r0
 800066c:	6063      	str	r3, [r4, #4]
 800066e:	e003      	b.n	8000678 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <dwt_initialise+0x290>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	2b00      	cmp	r3, #0
 8000680:	d008      	beq.n	8000694 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000682:	2008      	movs	r0, #8
 8000684:	f000 fb9a 	bl	8000dbc <_dwt_otpread>
 8000688:	4602      	mov	r2, r0
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <dwt_initialise+0x290>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	721a      	strb	r2, [r3, #8]
 8000692:	e003      	b.n	800069c <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <dwt_initialise+0x290>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d008      	beq.n	80006b8 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80006a6:	2009      	movs	r0, #9
 80006a8:	f000 fb88 	bl	8000dbc <_dwt_otpread>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <dwt_initialise+0x290>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	725a      	strb	r2, [r3, #9]
 80006b6:	e003      	b.n	80006c0 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <dwt_initialise+0x290>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2200      	movs	r2, #0
 80006be:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d121      	bne.n	800070e <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00b      	beq.n	80006ec <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80006d4:	f000 fbbf 	bl	8000e56 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <dwt_initialise+0x290>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	8ada      	ldrh	r2, [r3, #22]
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <dwt_initialise+0x290>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006e6:	b292      	uxth	r2, r2
 80006e8:	82da      	strh	r2, [r3, #22]
 80006ea:	e01e      	b.n	800072a <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80006ec:	2105      	movs	r1, #5
 80006ee:	2036      	movs	r0, #54	; 0x36
 80006f0:	f000 fade 	bl	8000cb0 <dwt_read16bitoffsetreg>
 80006f4:	4603      	mov	r3, r0
 80006f6:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 80006f8:	89fb      	ldrh	r3, [r7, #14]
 80006fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006fe:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	461a      	mov	r2, r3
 8000704:	2105      	movs	r1, #5
 8000706:	2036      	movs	r0, #54	; 0x36
 8000708:	f000 fb15 	bl	8000d36 <dwt_write16bitoffsetreg>
 800070c:	e00d      	b.n	800072a <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	2b00      	cmp	r3, #0
 8000716:	d108      	bne.n	800072a <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <dwt_initialise+0x290>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	8ada      	ldrh	r2, [r3, #22]
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <dwt_initialise+0x290>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000726:	b292      	uxth	r2, r2
 8000728:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fbc2 	bl	8000eb4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8000730:	2200      	movs	r2, #0
 8000732:	210a      	movs	r1, #10
 8000734:	202c      	movs	r0, #44	; 0x2c
 8000736:	f000 faeb 	bl	8000d10 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <dwt_initialise+0x290>)
 800073c:	681c      	ldr	r4, [r3, #0]
 800073e:	2100      	movs	r1, #0
 8000740:	2004      	movs	r0, #4
 8000742:	f000 fa8e 	bl	8000c62 <dwt_read32bitoffsetreg>
 8000746:	4603      	mov	r3, r0
 8000748:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <dwt_initialise+0x290>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	0c1b      	lsrs	r3, r3, #16
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <dwt_initialise+0x290>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f002 0203 	and.w	r2, r2, #3
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <dwt_initialise+0x290>)
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	2100      	movs	r1, #0
 8000766:	2008      	movs	r0, #8
 8000768:	f000 fa7b 	bl	8000c62 <dwt_read32bitoffsetreg>
 800076c:	4603      	mov	r3, r0
 800076e:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000770:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000
 8000780:	deca0130 	.word	0xdeca0130

08000784 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000788:	2100      	movs	r1, #0
 800078a:	2000      	movs	r0, #0
 800078c:	f000 fa69 	bl	8000c62 <dwt_read32bitoffsetreg>
 8000790:	4603      	mov	r3, r0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	461a      	mov	r2, r3
 80007b4:	4ba1      	ldr	r3, [pc, #644]	; (8000a3c <dwt_configure+0x2a4>)
 80007b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ba:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	785b      	ldrb	r3, [r3, #1]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80007c4:	7cfb      	ldrb	r3, [r7, #19]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d002      	beq.n	80007d0 <dwt_configure+0x38>
 80007ca:	7cfb      	ldrb	r3, [r7, #19]
 80007cc:	2b07      	cmp	r3, #7
 80007ce:	d101      	bne.n	80007d4 <dwt_configure+0x3c>
 80007d0:	2301      	movs	r3, #1
 80007d2:	e000      	b.n	80007d6 <dwt_configure+0x3e>
 80007d4:	2300      	movs	r3, #0
 80007d6:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10b      	bne.n	80007f8 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80007e0:	4b97      	ldr	r3, [pc, #604]	; (8000a40 <dwt_configure+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	4b96      	ldr	r3, [pc, #600]	; (8000a40 <dwt_configure+0x2a8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007ee:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80007f0:	8abb      	ldrh	r3, [r7, #20]
 80007f2:	08db      	lsrs	r3, r3, #3
 80007f4:	82bb      	strh	r3, [r7, #20]
 80007f6:	e007      	b.n	8000808 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80007f8:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <dwt_configure+0x2a8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	691a      	ldr	r2, [r3, #16]
 80007fe:	4b90      	ldr	r3, [pc, #576]	; (8000a40 <dwt_configure+0x2a8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000806:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000808:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <dwt_configure+0x2a8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	7a12      	ldrb	r2, [r2, #8]
 8000810:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000812:	4b8b      	ldr	r3, [pc, #556]	; (8000a40 <dwt_configure+0x2a8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <dwt_configure+0x2a8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000820:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000822:	4b87      	ldr	r3, [pc, #540]	; (8000a40 <dwt_configure+0x2a8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6919      	ldr	r1, [r3, #16]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7a1b      	ldrb	r3, [r3, #8]
 800082c:	041b      	lsls	r3, r3, #16
 800082e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <dwt_configure+0x2a8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	430a      	orrs	r2, r1
 8000838:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800083a:	4b81      	ldr	r3, [pc, #516]	; (8000a40 <dwt_configure+0x2a8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	691b      	ldr	r3, [r3, #16]
 8000840:	461a      	mov	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	2004      	movs	r0, #4
 8000846:	f000 fa92 	bl	8000d6e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800084a:	8abb      	ldrh	r3, [r7, #20]
 800084c:	461a      	mov	r2, r3
 800084e:	f642 0104 	movw	r1, #10244	; 0x2804
 8000852:	202e      	movs	r0, #46	; 0x2e
 8000854:	f000 fa6f 	bl	8000d36 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000858:	7cbb      	ldrb	r3, [r7, #18]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fadb 	bl	8000e16 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000860:	7cfb      	ldrb	r3, [r7, #19]
 8000862:	4a78      	ldr	r2, [pc, #480]	; (8000a44 <dwt_configure+0x2ac>)
 8000864:	5cd3      	ldrb	r3, [r2, r3]
 8000866:	461a      	mov	r2, r3
 8000868:	4b77      	ldr	r3, [pc, #476]	; (8000a48 <dwt_configure+0x2b0>)
 800086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086e:	461a      	mov	r2, r3
 8000870:	2107      	movs	r1, #7
 8000872:	202b      	movs	r0, #43	; 0x2b
 8000874:	f000 fa7b 	bl	8000d6e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000878:	7cfb      	ldrb	r3, [r7, #19]
 800087a:	4a72      	ldr	r2, [pc, #456]	; (8000a44 <dwt_configure+0x2ac>)
 800087c:	5cd3      	ldrb	r3, [r2, r3]
 800087e:	461a      	mov	r2, r3
 8000880:	4b72      	ldr	r3, [pc, #456]	; (8000a4c <dwt_configure+0x2b4>)
 8000882:	5c9b      	ldrb	r3, [r3, r2]
 8000884:	461a      	mov	r2, r3
 8000886:	210b      	movs	r1, #11
 8000888:	202b      	movs	r0, #43	; 0x2b
 800088a:	f000 fa41 	bl	8000d10 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800088e:	7c7b      	ldrb	r3, [r7, #17]
 8000890:	4a6f      	ldr	r2, [pc, #444]	; (8000a50 <dwt_configure+0x2b8>)
 8000892:	5cd3      	ldrb	r3, [r2, r3]
 8000894:	461a      	mov	r2, r3
 8000896:	210b      	movs	r1, #11
 8000898:	2028      	movs	r0, #40	; 0x28
 800089a:	f000 fa39 	bl	8000d10 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	4a68      	ldr	r2, [pc, #416]	; (8000a44 <dwt_configure+0x2ac>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b6b      	ldr	r3, [pc, #428]	; (8000a54 <dwt_configure+0x2bc>)
 80008a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ac:	461a      	mov	r2, r3
 80008ae:	210c      	movs	r1, #12
 80008b0:	2028      	movs	r0, #40	; 0x28
 80008b2:	f000 fa5c 	bl	8000d6e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	79db      	ldrb	r3, [r3, #7]
 80008ba:	4618      	mov	r0, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	799b      	ldrb	r3, [r3, #6]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4a65      	ldr	r2, [pc, #404]	; (8000a58 <dwt_configure+0x2c0>)
 80008c4:	0043      	lsls	r3, r0, #1
 80008c6:	440b      	add	r3, r1
 80008c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008cc:	461a      	mov	r2, r3
 80008ce:	2102      	movs	r1, #2
 80008d0:	2027      	movs	r0, #39	; 0x27
 80008d2:	f000 fa30 	bl	8000d36 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80008d6:	7cbb      	ldrb	r3, [r7, #18]
 80008d8:	4a60      	ldr	r2, [pc, #384]	; (8000a5c <dwt_configure+0x2c4>)
 80008da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008de:	461a      	mov	r2, r3
 80008e0:	2104      	movs	r1, #4
 80008e2:	2027      	movs	r0, #39	; 0x27
 80008e4:	f000 fa27 	bl	8000d36 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	79db      	ldrb	r3, [r3, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d105      	bne.n	80008fc <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80008f0:	2264      	movs	r2, #100	; 0x64
 80008f2:	2106      	movs	r1, #6
 80008f4:	2027      	movs	r0, #39	; 0x27
 80008f6:	f000 fa1e 	bl	8000d36 <dwt_write16bitoffsetreg>
 80008fa:	e018      	b.n	800092e <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	2b04      	cmp	r3, #4
 8000902:	d10a      	bne.n	800091a <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000904:	2210      	movs	r2, #16
 8000906:	2106      	movs	r1, #6
 8000908:	2027      	movs	r0, #39	; 0x27
 800090a:	f000 fa14 	bl	8000d36 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800090e:	2210      	movs	r2, #16
 8000910:	2126      	movs	r1, #38	; 0x26
 8000912:	2027      	movs	r0, #39	; 0x27
 8000914:	f000 f9fc 	bl	8000d10 <dwt_write8bitoffsetreg>
 8000918:	e009      	b.n	800092e <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800091a:	2220      	movs	r2, #32
 800091c:	2106      	movs	r1, #6
 800091e:	2027      	movs	r0, #39	; 0x27
 8000920:	f000 fa09 	bl	8000d36 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000924:	2228      	movs	r2, #40	; 0x28
 8000926:	2126      	movs	r1, #38	; 0x26
 8000928:	2027      	movs	r0, #39	; 0x27
 800092a:	f000 f9f1 	bl	8000d10 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800092e:	7cbb      	ldrb	r3, [r7, #18]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	78d2      	ldrb	r2, [r2, #3]
 8000934:	4611      	mov	r1, r2
 8000936:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <dwt_configure+0x2c8>)
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	440b      	add	r3, r1
 800093c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000940:	461a      	mov	r2, r3
 8000942:	2108      	movs	r1, #8
 8000944:	2027      	movs	r0, #39	; 0x27
 8000946:	f000 fa12 	bl	8000d6e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	895b      	ldrh	r3, [r3, #10]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f241 0241 	movw	r2, #4161	; 0x1041
 8000958:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	895b      	ldrh	r3, [r3, #10]
 800095e:	461a      	mov	r2, r3
 8000960:	2120      	movs	r1, #32
 8000962:	2027      	movs	r0, #39	; 0x27
 8000964:	f000 f9e7 	bl	8000d36 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000968:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <dwt_configure+0x2cc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	210c      	movs	r1, #12
 8000970:	2023      	movs	r0, #35	; 0x23
 8000972:	f000 f9fc 	bl	8000d6e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000976:	7cbb      	ldrb	r3, [r7, #18]
 8000978:	4a3a      	ldr	r2, [pc, #232]	; (8000a64 <dwt_configure+0x2cc>)
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	889b      	ldrh	r3, [r3, #4]
 8000980:	461a      	mov	r2, r3
 8000982:	2104      	movs	r1, #4
 8000984:	2023      	movs	r0, #35	; 0x23
 8000986:	f000 f9d6 	bl	8000d36 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	799b      	ldrb	r3, [r3, #6]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00d      	beq.n	80009ae <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	79db      	ldrb	r3, [r3, #7]
 8000996:	461a      	mov	r2, r3
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <dwt_configure+0x2d0>)
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	461a      	mov	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	2021      	movs	r0, #33	; 0x21
 80009a2:	f000 f9b5 	bl	8000d10 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80009a6:	2303      	movs	r3, #3
 80009a8:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80009aa:	2301      	movs	r3, #1
 80009ac:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009ae:	7cfb      	ldrb	r3, [r7, #19]
 80009b0:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009ba:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	785b      	ldrb	r3, [r3, #1]
 80009c0:	049b      	lsls	r3, r3, #18
 80009c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80009c6:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	051b      	lsls	r3, r3, #20
 80009cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80009d0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009d2:	7dbb      	ldrb	r3, [r7, #22]
 80009d4:	045b      	lsls	r3, r3, #17
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80009da:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	059b      	lsls	r3, r3, #22
 80009e2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80009e6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80009ee:	4313      	orrs	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	2100      	movs	r1, #0
 80009f6:	201f      	movs	r0, #31
 80009f8:	f000 f9b9 	bl	8000d6e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	789a      	ldrb	r2, [r3, #2]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	785b      	ldrb	r3, [r3, #1]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	0419      	lsls	r1, r3, #16
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	79db      	ldrb	r3, [r3, #7]
 8000a0e:	035a      	lsls	r2, r3, #13
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <dwt_configure+0x2a8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <dwt_configure+0x2a8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	2008      	movs	r0, #8
 8000a24:	f000 f9a3 	bl	8000d6e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000a28:	2242      	movs	r2, #66	; 0x42
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	200d      	movs	r0, #13
 8000a2e:	f000 f96f 	bl	8000d10 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08006568 	.word	0x08006568
 8000a40:	20000000 	.word	0x20000000
 8000a44:	080064e8 	.word	0x080064e8
 8000a48:	08006508 	.word	0x08006508
 8000a4c:	08006520 	.word	0x08006520
 8000a50:	08006528 	.word	0x08006528
 8000a54:	080064f0 	.word	0x080064f0
 8000a58:	08006538 	.word	0x08006538
 8000a5c:	08006544 	.word	0x08006544
 8000a60:	08006548 	.word	0x08006548
 8000a64:	0800652c 	.word	0x0800652c
 8000a68:	08006534 	.word	0x08006534

08000a6c <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	80fb      	strh	r3, [r7, #6]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	4413      	add	r3, r2
 8000a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a86:	dc09      	bgt.n	8000a9c <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	88b9      	ldrh	r1, [r7, #4]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2009      	movs	r0, #9
 8000a94:	f000 f83a 	bl	8000b0c <dwt_writetodevice>
        return DWT_SUCCESS;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e001      	b.n	8000aa0 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	603a      	str	r2, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <dwt_writetxfctrl+0x3c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	059b      	lsls	r3, r3, #22
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	03db      	lsls	r3, r3, #15
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2008      	movs	r0, #8
 8000ad6:	f000 f94a 	bl	8000d6e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
 8000af4:	4613      	mov	r3, r2
 8000af6:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000af8:	887a      	ldrh	r2, [r7, #2]
 8000afa:	8839      	ldrh	r1, [r7, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2011      	movs	r0, #17
 8000b00:	f000 f85b 	bl	8000bba <dwt_readfromdevice>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4603      	mov	r3, r0
 8000b18:	81fb      	strh	r3, [r7, #14]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b28:	89fb      	ldrh	r3, [r7, #14]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	1c59      	adds	r1, r3, #1
 8000b30:	6179      	str	r1, [r7, #20]
 8000b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	3318      	adds	r3, #24
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b40:	e02f      	b.n	8000ba2 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b42:	89fb      	ldrh	r3, [r7, #14]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	1c59      	adds	r1, r3, #1
 8000b4a:	6179      	str	r1, [r7, #20]
 8000b4c:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	3318      	adds	r3, #24
 8000b54:	443b      	add	r3, r7
 8000b56:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b5a:	89bb      	ldrh	r3, [r7, #12]
 8000b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5e:	d809      	bhi.n	8000b74 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	617a      	str	r2, [r7, #20]
 8000b66:	89ba      	ldrh	r2, [r7, #12]
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	3318      	adds	r3, #24
 8000b6c:	443b      	add	r3, r7
 8000b6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b72:	e016      	b.n	8000ba2 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b74:	89bb      	ldrh	r3, [r7, #12]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	1c59      	adds	r1, r3, #1
 8000b7c:	6179      	str	r1, [r7, #20]
 8000b7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	3318      	adds	r3, #24
 8000b86:	443b      	add	r3, r7
 8000b88:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000b8c:	89bb      	ldrh	r3, [r7, #12]
 8000b8e:	09db      	lsrs	r3, r3, #7
 8000b90:	b299      	uxth	r1, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	617a      	str	r2, [r7, #20]
 8000b98:	b2ca      	uxtb	r2, r1
 8000b9a:	3318      	adds	r3, #24
 8000b9c:	443b      	add	r3, r7
 8000b9e:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	b298      	uxth	r0, r3
 8000ba6:	f107 0110 	add.w	r1, r7, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	f000 fb1d 	bl	80011ec <writetospi>
} // end dwt_writetodevice()
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	81fb      	strh	r3, [r7, #14]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000bd0:	89bb      	ldrh	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d109      	bne.n	8000bea <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	617a      	str	r2, [r7, #20]
 8000bdc:	89fa      	ldrh	r2, [r7, #14]
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	3318      	adds	r3, #24
 8000be2:	443b      	add	r3, r7
 8000be4:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000be8:	e02f      	b.n	8000c4a <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	1c59      	adds	r1, r3, #1
 8000bf2:	6179      	str	r1, [r7, #20]
 8000bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c02:	89bb      	ldrh	r3, [r7, #12]
 8000c04:	2b7f      	cmp	r3, #127	; 0x7f
 8000c06:	d809      	bhi.n	8000c1c <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	617a      	str	r2, [r7, #20]
 8000c0e:	89ba      	ldrh	r2, [r7, #12]
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	3318      	adds	r3, #24
 8000c14:	443b      	add	r3, r7
 8000c16:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c1a:	e016      	b.n	8000c4a <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c1c:	89bb      	ldrh	r3, [r7, #12]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	1c59      	adds	r1, r3, #1
 8000c24:	6179      	str	r1, [r7, #20]
 8000c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	3318      	adds	r3, #24
 8000c2e:	443b      	add	r3, r7
 8000c30:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	09db      	lsrs	r3, r3, #7
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	617a      	str	r2, [r7, #20]
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	3318      	adds	r3, #24
 8000c44:	443b      	add	r3, r7
 8000c46:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	b298      	uxth	r0, r3
 8000c4e:	f107 0110 	add.w	r1, r7, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	f000 fafd 	bl	8001254 <readfromspi>
} // end dwt_readfromdevice()
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	b298      	uxth	r0, r3
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b299      	uxth	r1, r3
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	f7ff ff9c 	bl	8000bba <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000c82:	2303      	movs	r3, #3
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	e00b      	b.n	8000ca0 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	f107 010c 	add.w	r1, r7, #12
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	440a      	add	r2, r1
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	daf0      	bge.n	8000c88 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000ca6:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	b298      	uxth	r0, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2202      	movs	r2, #2
 8000ccc:	f7ff ff75 	bl	8000bba <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000cd0:	7b7b      	ldrb	r3, [r7, #13]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	7b3b      	ldrb	r3, [r7, #12]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4413      	add	r3, r2
 8000cde:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000ce0:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	b298      	uxth	r0, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b299      	uxth	r1, r3
 8000cfc:	f107 030f 	add.w	r3, r7, #15
 8000d00:	2201      	movs	r2, #1
 8000d02:	f7ff ff5a 	bl	8000bba <dwt_readfromdevice>

    return regval ;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	b298      	uxth	r0, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f7ff feef 	bl	8000b0c <dwt_writetodevice>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	4613      	mov	r3, r2
 8000d42:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	b298      	uxth	r0, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	b299      	uxth	r1, r3
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2202      	movs	r2, #2
 8000d62:	f7ff fed3 	bl	8000b0c <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000d66:	bf00      	nop
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e00d      	b.n	8000d9c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	b2d9      	uxtb	r1, r3
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	ddee      	ble.n	8000d80 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	b298      	uxth	r0, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	b299      	uxth	r1, r3
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	2204      	movs	r2, #4
 8000db0:	f7ff feac 	bl	8000b0c <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	2104      	movs	r1, #4
 8000dcc:	202d      	movs	r0, #45	; 0x2d
 8000dce:	f7ff ffb2 	bl	8000d36 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	2106      	movs	r1, #6
 8000dd6:	202d      	movs	r0, #45	; 0x2d
 8000dd8:	f7ff ff9a 	bl	8000d10 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2106      	movs	r1, #6
 8000de0:	202d      	movs	r0, #45	; 0x2d
 8000de2:	f7ff ff95 	bl	8000d10 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000de6:	210a      	movs	r1, #10
 8000de8:	202d      	movs	r0, #45	; 0x2d
 8000dea:	f7ff ff3a 	bl	8000c62 <dwt_read32bitoffsetreg>
 8000dee:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000df0:	68fb      	ldr	r3, [r7, #12]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2102      	movs	r1, #2
 8000e02:	202c      	movs	r0, #44	; 0x2c
 8000e04:	f7ff ff84 	bl	8000d10 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e08:	2202      	movs	r2, #2
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	202c      	movs	r0, #44	; 0x2c
 8000e0e:	f7ff ff7f 	bl	8000d10 <dwt_write8bitoffsetreg>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e1e:	226d      	movs	r2, #109	; 0x6d
 8000e20:	f640 0106 	movw	r1, #2054	; 0x806
 8000e24:	202e      	movs	r0, #46	; 0x2e
 8000e26:	f7ff ff73 	bl	8000d10 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d007      	beq.n	8000e40 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e30:	f240 6207 	movw	r2, #1543	; 0x607
 8000e34:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e38:	202e      	movs	r0, #46	; 0x2e
 8000e3a:	f7ff ff7c 	bl	8000d36 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000e3e:	e006      	b.n	8000e4e <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000e40:	f241 6207 	movw	r2, #5639	; 0x1607
 8000e44:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e48:	202e      	movs	r0, #46	; 0x2e
 8000e4a:	f7ff ff74 	bl	8000d36 <dwt_write16bitoffsetreg>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000e5a:	200e      	movs	r0, #14
 8000e5c:	f000 f82a 	bl	8000eb4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000e60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e64:	2106      	movs	r1, #6
 8000e66:	202d      	movs	r0, #45	; 0x2d
 8000e68:	f7ff ff65 	bl	8000d36 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 f9b1 	bl	80011d4 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 f81e 	bl	8000eb4 <_dwt_enableclocks>
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8000e84:	2100      	movs	r1, #0
 8000e86:	201a      	movs	r0, #26
 8000e88:	f7ff feeb 	bl	8000c62 <dwt_read32bitoffsetreg>
 8000e8c:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	0d1b      	lsrs	r3, r3, #20
 8000e92:	051b      	lsls	r3, r3, #20
 8000e94:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	201a      	movs	r0, #26
 8000ea8:	f7ff ff61 	bl	8000d6e <dwt_write32bitoffsetreg>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2036      	movs	r0, #54	; 0x36
 8000ec6:	f7ff fe78 	bl	8000bba <dwt_readfromdevice>
    switch(clocks)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0e      	cmp	r3, #14
 8000ece:	d876      	bhi.n	8000fbe <_dwt_enableclocks+0x10a>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <_dwt_enableclocks+0x24>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f25 	.word	0x08000f25
 8000edc:	08000f15 	.word	0x08000f15
 8000ee0:	08000f3b 	.word	0x08000f3b
 8000ee4:	08000fbf 	.word	0x08000fbf
 8000ee8:	08000fbf 	.word	0x08000fbf
 8000eec:	08000fbf 	.word	0x08000fbf
 8000ef0:	08000fbf 	.word	0x08000fbf
 8000ef4:	08000f51 	.word	0x08000f51
 8000ef8:	08000f71 	.word	0x08000f71
 8000efc:	08000fbf 	.word	0x08000fbf
 8000f00:	08000fbf 	.word	0x08000fbf
 8000f04:	08000f87 	.word	0x08000f87
 8000f08:	08000f93 	.word	0x08000f93
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000fb5 	.word	0x08000fb5
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f14:	2300      	movs	r3, #0
 8000f16:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f22:	e04d      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f24:	7b3b      	ldrb	r3, [r7, #12]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f023 0303 	bic.w	r3, r3, #3
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f38:	e042      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000f3a:	7b3b      	ldrb	r3, [r7, #12]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f4e:	e037      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f64:	7b7b      	ldrb	r3, [r7, #13]
 8000f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f6e:	e027      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f84:	e01c      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000f86:	7b7b      	ldrb	r3, [r7, #13]
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f90:	e016      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000f92:	7b7b      	ldrb	r3, [r7, #13]
 8000f94:	f023 0302 	bic.w	r3, r3, #2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f9c:	e010      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000f9e:	7b3b      	ldrb	r3, [r7, #12]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	f043 0320 	orr.w	r3, r3, #32
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fb2:	e005      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fbc:	e000      	b.n	8000fc0 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000fbe:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2036      	movs	r0, #54	; 0x36
 8000fca:	f7ff fd9f 	bl	8000b0c <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2036      	movs	r0, #54	; 0x36
 8000fda:	f7ff fd97 	bl	8000b0c <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop

08000fe8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ff61 	bl	8000eb4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	2036      	movs	r0, #54	; 0x36
 8000ff8:	f7ff fe9d 	bl	8000d36 <dwt_write16bitoffsetreg>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001012:	2300      	movs	r3, #0
 8001014:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <dwt_starttx+0x98>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d020      	beq.n	8001078 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	f043 0306 	orr.w	r3, r3, #6
 800103c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	461a      	mov	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	200d      	movs	r0, #13
 8001046:	f7ff fe63 	bl	8000d10 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800104a:	2103      	movs	r1, #3
 800104c:	200f      	movs	r0, #15
 800104e:	f7ff fe2f 	bl	8000cb0 <dwt_read16bitoffsetreg>
 8001052:	4603      	mov	r3, r0
 8001054:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001056:	893b      	ldrh	r3, [r7, #8]
 8001058:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e012      	b.n	800108c <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	2100      	movs	r1, #0
 800106a:	200d      	movs	r0, #13
 800106c:	f7ff fe50 	bl	8000d10 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e009      	b.n	800108c <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	461a      	mov	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	200d      	movs	r0, #13
 8001088:	f7ff fe42 	bl	8000d10 <dwt_write8bitoffsetreg>
    }

    return retval;
 800108c:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000

0800109c <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 80010a6:	2103      	movs	r1, #3
 80010a8:	2004      	movs	r0, #4
 80010aa:	f7ff fe1e 	bl	8000cea <dwt_read8bitoffsetreg>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d018      	beq.n	80010ea <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	461a      	mov	r2, r3
 80010bc:	2100      	movs	r1, #0
 80010be:	200c      	movs	r0, #12
 80010c0:	f7ff fe39 	bl	8000d36 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <dwt_setrxtimeout+0x7c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <dwt_setrxtimeout+0x7c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010da:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	461a      	mov	r2, r3
 80010e0:	2103      	movs	r1, #3
 80010e2:	2004      	movs	r0, #4
 80010e4:	f7ff fe14 	bl	8000d10 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 80010e8:	e011      	b.n	800110e <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	f023 0310 	bic.w	r3, r3, #16
 80010f0:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <dwt_setrxtimeout+0x7c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <dwt_setrxtimeout+0x7c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001100:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	461a      	mov	r2, r3
 8001106:	2103      	movs	r1, #3
 8001108:	2004      	movs	r0, #4
 800110a:	f7ff fe01 	bl	8000d10 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000

0800111c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001120:	f7ff ff62 	bl	8000fe8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	202c      	movs	r0, #44	; 0x2c
 800112a:	f7ff fe04 	bl	8000d36 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800112e:	2200      	movs	r2, #0
 8001130:	2106      	movs	r1, #6
 8001132:	202c      	movs	r0, #44	; 0x2c
 8001134:	f7ff fdec 	bl	8000d10 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001138:	f7ff fe5f 	bl	8000dfa <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800113c:	2200      	movs	r2, #0
 800113e:	2103      	movs	r1, #3
 8001140:	2036      	movs	r0, #54	; 0x36
 8001142:	f7ff fde5 	bl	8000d10 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 f844 	bl	80011d4 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800114c:	22f0      	movs	r2, #240	; 0xf0
 800114e:	2103      	movs	r1, #3
 8001150:	2036      	movs	r0, #54	; 0x36
 8001152:	f7ff fddd 	bl	8000d10 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <dwt_softreset+0x48>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	755a      	strb	r2, [r3, #21]
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000000 	.word	0x20000000

08001168 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	b25b      	sxtb	r3, r3
 800117c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001180:	b25b      	sxtb	r3, r3
 8001182:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	461a      	mov	r2, r3
 8001188:	210e      	movs	r1, #14
 800118a:	202b      	movs	r0, #43	; 0x2b
 800118c:	f7ff fdc0 	bl	8000d10 <dwt_write8bitoffsetreg>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800119e:	f000 f991 	bl	80014c4 <port_GetEXT_IRQStatus>
 80011a2:	4603      	mov	r3, r0
 80011a4:	607b      	str	r3, [r7, #4]

	if(s) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80011ac:	f000 f97c 	bl	80014a8 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80011c8:	f000 f975 	bl	80014b6 <port_EnableEXT_IRQ>
	}
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f8c5 	bl	800136c <Sleep>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80011ec:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80011f0:	4683      	mov	fp, r0
 80011f2:	468a      	mov	sl, r1
 80011f4:	4690      	mov	r8, r2
 80011f6:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80011f8:	f7ff ffce 	bl	8001198 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011fc:	4d13      	ldr	r5, [pc, #76]	; (800124c <writetospi+0x60>)
    stat = decamutexon() ;
 80011fe:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001200:	4628      	mov	r0, r5
 8001202:	f004 fc5d 	bl	8005ac0 <HAL_SPI_GetState>
 8001206:	2801      	cmp	r0, #1
 8001208:	4604      	mov	r4, r0
 800120a:	d1f9      	bne.n	8001200 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <writetospi+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	f001 fbdf 	bl	80029d4 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001216:	465a      	mov	r2, fp
 8001218:	4651      	mov	r1, sl
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	480b      	ldr	r0, [pc, #44]	; (800124c <writetospi+0x60>)
 8001220:	f004 fa07 	bl	8005632 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	4649      	mov	r1, r9
 800122a:	fa1f f288 	uxth.w	r2, r8
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <writetospi+0x60>)
 8001230:	f004 f9ff 	bl	8005632 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001234:	4622      	mov	r2, r4
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <writetospi+0x64>)
 800123a:	f001 fbcb 	bl	80029d4 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800123e:	4630      	mov	r0, r6
 8001240:	f7ff ffbb 	bl	80011ba <decamutexoff>

    return 0;
} // end writetospi()
 8001244:	2000      	movs	r0, #0
 8001246:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800124a:	bf00      	nop
 800124c:	200004f8 	.word	0x200004f8
 8001250:	40020400 	.word	0x40020400

08001254 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001254:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001258:	4681      	mov	r9, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4690      	mov	r8, r2
 800125e:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001260:	f7ff ff9a 	bl	8001198 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001264:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80012e4 <readfromspi+0x90>
    stat = decamutexon() ;
 8001268:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800126a:	4650      	mov	r0, sl
 800126c:	f004 fc28 	bl	8005ac0 <HAL_SPI_GetState>
 8001270:	2801      	cmp	r0, #1
 8001272:	d1fa      	bne.n	800126a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001274:	481a      	ldr	r0, [pc, #104]	; (80012e0 <readfromspi+0x8c>)
 8001276:	2200      	movs	r2, #0
 8001278:	2140      	movs	r1, #64	; 0x40
 800127a:	f001 fbab 	bl	80029d4 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800127e:	f1b9 0f00 	cmp.w	r9, #0
 8001282:	d00c      	beq.n	800129e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001284:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80012e4 <readfromspi+0x90>
 8001288:	44a1      	add	r9, r4
 800128a:	2201      	movs	r2, #1
 800128c:	4621      	mov	r1, r4
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001292:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001294:	4650      	mov	r0, sl
 8001296:	f004 f9cc 	bl	8005632 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800129a:	454c      	cmp	r4, r9
 800129c:	d1f5      	bne.n	800128a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800129e:	f1b8 0f00 	cmp.w	r8, #0
 80012a2:	d012      	beq.n	80012ca <readfromspi+0x76>
 80012a4:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80012e4 <readfromspi+0x90>
 80012a8:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012ac:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80012ae:	f8dc 2000 	ldr.w	r2, [ip]
 80012b2:	6891      	ldr	r1, [r2, #8]
 80012b4:	0789      	lsls	r1, r1, #30
 80012b6:	d5fc      	bpl.n	80012b2 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80012b8:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80012ba:	6891      	ldr	r1, [r2, #8]
 80012bc:	07cb      	lsls	r3, r1, #31
 80012be:	d5fc      	bpl.n	80012ba <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80012c0:	68d3      	ldr	r3, [r2, #12]
 80012c2:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80012c6:	4285      	cmp	r5, r0
 80012c8:	d1f1      	bne.n	80012ae <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <readfromspi+0x8c>)
 80012d0:	f001 fb80 	bl	80029d4 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80012d4:	4630      	mov	r0, r6
 80012d6:	f7ff ff70 	bl	80011ba <decamutexoff>

    return 0;
} // end readfromspi()
 80012da:	2000      	movs	r0, #0
 80012dc:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80012e0:	40020400 	.word	0x40020400
 80012e4:	200004f8 	.word	0x200004f8

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	; (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db12      	blt.n	800135c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	490a      	ldr	r1, [pc, #40]	; (8001368 <__NVIC_DisableIRQ+0x44>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	3320      	adds	r3, #32
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001350:	f3bf 8f4f 	dsb	sy
}
 8001354:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001356:	f3bf 8f6f 	isb	sy
}
 800135a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100

0800136c <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f001 f811 	bl	800239c <HAL_Delay>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <EXTI_GetITEnStatus+0x38>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	095b      	lsrs	r3, r3, #5
 8001392:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80013c6:	2301      	movs	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ca:	2311      	movs	r3, #17
 80013cc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <reset_DW1000+0x40>)
 80013d8:	f001 f978 	bl	80026cc <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <reset_DW1000+0x40>)
 80013e2:	f001 faf7 	bl	80029d4 <HAL_GPIO_WritePin>

    Sleep(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff ffc0 	bl	800136c <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 f809 	bl	8001404 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff ffba 	bl	800136c <Sleep>
}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020000 	.word	0x40020000

08001404 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001416:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800141a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <setup_DW1000RSTnIRQ+0x70>)
 8001428:	f001 f950 	bl	80026cc <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 800142c:	2006      	movs	r0, #6
 800142e:	f001 f8f4 	bl	800261a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2105      	movs	r1, #5
 8001436:	2006      	movs	r0, #6
 8001438:	f001 f8d3 	bl	80025e2 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 800143c:	e015      	b.n	800146a <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800143e:	2006      	movs	r0, #6
 8001440:	f001 f8f9 	bl	8002636 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001448:	2311      	movs	r3, #17
 800144a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2302      	movs	r3, #2
 8001452:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <setup_DW1000RSTnIRQ+0x70>)
 800145c:	f001 f936 	bl	80026cc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2101      	movs	r1, #1
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <setup_DW1000RSTnIRQ+0x70>)
 8001466:	f001 fab5 	bl	80029d4 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40020000 	.word	0x40020000

08001478 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <port_set_dw1000_slowrate+0x14>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <port_set_dw1000_slowrate+0x14>)
 8001484:	f004 f84c 	bl	8005520 <HAL_SPI_Init>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200004f8 	.word	0x200004f8

08001490 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <port_set_dw1000_fastrate+0x14>)
 8001496:	2208      	movs	r2, #8
 8001498:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <port_set_dw1000_fastrate+0x14>)
 800149c:	f004 f840 	bl	8005520 <HAL_SPI_Init>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200004f8 	.word	0x200004f8

080014a8 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80014ac:	2017      	movs	r0, #23
 80014ae:	f7ff ff39 	bl	8001324 <__NVIC_DisableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80014ba:	2017      	movs	r0, #23
 80014bc:	f7ff ff14 	bl	80012e8 <__NVIC_EnableIRQ>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80014c8:	2017      	movs	r0, #23
 80014ca:	f7ff ff5b 	bl	8001384 <EXTI_GetITEnStatus>
 80014ce:	4603      	mov	r3, r0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014da:	f000 fa29 	bl	8001930 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014e2:	2201      	movs	r2, #1
 80014e4:	2178      	movs	r1, #120	; 0x78
 80014e6:	485b      	ldr	r0, [pc, #364]	; (8001654 <SSD1306_Init+0x180>)
 80014e8:	f001 fcd0 	bl	8002e8c <HAL_I2C_IsDeviceReady>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e0a9      	b.n	800164a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fc:	e002      	b.n	8001504 <SSD1306_Init+0x30>
		p--;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3b01      	subs	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f9      	bne.n	80014fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800150a:	22ae      	movs	r2, #174	; 0xae
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fa8a 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 fa85 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800151e:	2210      	movs	r2, #16
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fa80 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001528:	22b0      	movs	r2, #176	; 0xb0
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fa7b 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001532:	22c8      	movs	r2, #200	; 0xc8
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fa76 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 fa71 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001546:	2210      	movs	r2, #16
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fa6c 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	; 0x78
 8001556:	f000 fa67 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800155a:	2281      	movs	r2, #129	; 0x81
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fa62 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001564:	22ff      	movs	r2, #255	; 0xff
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fa5d 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800156e:	22a1      	movs	r2, #161	; 0xa1
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fa58 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001578:	22a6      	movs	r2, #166	; 0xa6
 800157a:	2100      	movs	r1, #0
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 fa53 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001582:	22a8      	movs	r2, #168	; 0xa8
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fa4e 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fa49 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001596:	22a4      	movs	r2, #164	; 0xa4
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fa44 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015a0:	22d3      	movs	r2, #211	; 0xd3
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 fa3f 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 fa3a 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015b4:	22d5      	movs	r2, #213	; 0xd5
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f000 fa35 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015be:	22f0      	movs	r2, #240	; 0xf0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fa30 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015c8:	22d9      	movs	r2, #217	; 0xd9
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 fa2b 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015d2:	2222      	movs	r2, #34	; 0x22
 80015d4:	2100      	movs	r1, #0
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 fa26 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015dc:	22da      	movs	r2, #218	; 0xda
 80015de:	2100      	movs	r1, #0
 80015e0:	2078      	movs	r0, #120	; 0x78
 80015e2:	f000 fa21 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015e6:	2212      	movs	r2, #18
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 fa1c 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015f0:	22db      	movs	r2, #219	; 0xdb
 80015f2:	2100      	movs	r1, #0
 80015f4:	2078      	movs	r0, #120	; 0x78
 80015f6:	f000 fa17 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015fa:	2220      	movs	r2, #32
 80015fc:	2100      	movs	r1, #0
 80015fe:	2078      	movs	r0, #120	; 0x78
 8001600:	f000 fa12 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001604:	228d      	movs	r2, #141	; 0x8d
 8001606:	2100      	movs	r1, #0
 8001608:	2078      	movs	r0, #120	; 0x78
 800160a:	f000 fa0d 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800160e:	2214      	movs	r2, #20
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fa08 	bl	8001a28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001618:	22af      	movs	r2, #175	; 0xaf
 800161a:	2100      	movs	r1, #0
 800161c:	2078      	movs	r0, #120	; 0x78
 800161e:	f000 fa03 	bl	8001a28 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001622:	222e      	movs	r2, #46	; 0x2e
 8001624:	2100      	movs	r1, #0
 8001626:	2078      	movs	r0, #120	; 0x78
 8001628:	f000 f9fe 	bl	8001a28 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800162c:	2000      	movs	r0, #0
 800162e:	f000 f843 	bl	80016b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001632:	f000 f813 	bl	800165c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <SSD1306_Init+0x184>)
 8001638:	2200      	movs	r2, #0
 800163a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SSD1306_Init+0x184>)
 800163e:	2200      	movs	r2, #0
 8001640:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SSD1306_Init+0x184>)
 8001644:	2201      	movs	r2, #1
 8001646:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200004a4 	.word	0x200004a4
 8001658:	2000049c 	.word	0x2000049c

0800165c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	e01d      	b.n	80016a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	3b50      	subs	r3, #80	; 0x50
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f000 f9d8 	bl	8001a28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	; 0x78
 800167e:	f000 f9d3 	bl	8001a28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f000 f9ce 	bl	8001a28 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	01db      	lsls	r3, r3, #7
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <SSD1306_UpdateScreen+0x58>)
 8001692:	441a      	add	r2, r3
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	2140      	movs	r1, #64	; 0x40
 8001698:	2078      	movs	r0, #120	; 0x78
 800169a:	f000 f95f 	bl	800195c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	3301      	adds	r3, #1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d9de      	bls.n	8001668 <SSD1306_UpdateScreen+0xc>
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000009c 	.word	0x2000009c

080016b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <SSD1306_Fill+0x14>
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <SSD1306_Fill+0x16>
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	4619      	mov	r1, r3
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <SSD1306_Fill+0x2c>)
 80016d6:	f004 fec5 	bl	8006464 <memset>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000009c 	.word	0x2000009c

080016e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
 80016f2:	460b      	mov	r3, r1
 80016f4:	80bb      	strh	r3, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	70fb      	strb	r3, [r7, #3]
	if (
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	2b7f      	cmp	r3, #127	; 0x7f
 80016fe:	d848      	bhi.n	8001792 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001700:	88bb      	ldrh	r3, [r7, #4]
 8001702:	2b3f      	cmp	r3, #63	; 0x3f
 8001704:	d845      	bhi.n	8001792 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <SSD1306_DrawPixel+0xb8>)
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d11a      	bne.n	8001758 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	b298      	uxth	r0, r3
 800172a:	4603      	mov	r3, r0
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	4413      	add	r3, r2
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <SSD1306_DrawPixel+0xbc>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	b25a      	sxtb	r2, r3
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	b25b      	sxtb	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b259      	sxtb	r1, r3
 8001748:	88fa      	ldrh	r2, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	4413      	add	r3, r2
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <SSD1306_DrawPixel+0xbc>)
 8001754:	54d1      	strb	r1, [r2, r3]
 8001756:	e01d      	b.n	8001794 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001758:	88fa      	ldrh	r2, [r7, #6]
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	b298      	uxth	r0, r3
 8001760:	4603      	mov	r3, r0
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4413      	add	r3, r2
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <SSD1306_DrawPixel+0xbc>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	b25a      	sxtb	r2, r3
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	b25b      	sxtb	r3, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4013      	ands	r3, r2
 8001780:	b259      	sxtb	r1, r3
 8001782:	88fa      	ldrh	r2, [r7, #6]
 8001784:	4603      	mov	r3, r0
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	4413      	add	r3, r2
 800178a:	b2c9      	uxtb	r1, r1
 800178c:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SSD1306_DrawPixel+0xbc>)
 800178e:	54d1      	strb	r1, [r2, r3]
 8001790:	e000      	b.n	8001794 <SSD1306_DrawPixel+0xac>
		return;
 8001792:	bf00      	nop
	}
}
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000049c 	.word	0x2000049c
 80017a4:	2000009c 	.word	0x2000009c

080017a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	460a      	mov	r2, r1
 80017b2:	80fb      	strh	r3, [r7, #6]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SSD1306_GotoXY+0x28>)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <SSD1306_GotoXY+0x28>)
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	8053      	strh	r3, [r2, #2]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	2000049c 	.word	0x2000049c

080017d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
 80017e0:	4613      	mov	r3, r2
 80017e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <SSD1306_Putc+0xfc>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
	if (
 80017f0:	2b7f      	cmp	r3, #127	; 0x7f
 80017f2:	dc07      	bgt.n	8001804 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <SSD1306_Putc+0xfc>)
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	461a      	mov	r2, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001800:	2b3f      	cmp	r3, #63	; 0x3f
 8001802:	dd01      	ble.n	8001808 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001804:	2300      	movs	r3, #0
 8001806:	e05e      	b.n	80018c6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e04b      	b.n	80018a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	3b20      	subs	r3, #32
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	7849      	ldrb	r1, [r1, #1]
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4619      	mov	r1, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	440b      	add	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e030      	b.n	8001894 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b298      	uxth	r0, r3
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001850:	885a      	ldrh	r2, [r3, #2]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	79ba      	ldrb	r2, [r7, #6]
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff ff43 	bl	80016e8 <SSD1306_DrawPixel>
 8001862:	e014      	b.n	800188e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b298      	uxth	r0, r3
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <SSD1306_Putc+0xfc>)
 8001872:	885a      	ldrh	r2, [r3, #2]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b299      	uxth	r1, r3
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	f7ff ff2d 	bl	80016e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	3301      	adds	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4293      	cmp	r3, r2
 800189e:	d3c8      	bcc.n	8001832 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	461a      	mov	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d3ad      	bcc.n	800180e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <SSD1306_Putc+0xfc>)
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4413      	add	r3, r2
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <SSD1306_Putc+0xfc>)
 80018c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018c4:	79fb      	ldrb	r3, [r7, #7]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000049c 	.word	0x2000049c

080018d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018e2:	e012      	b.n	800190a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	79fa      	ldrb	r2, [r7, #7]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff71 	bl	80017d4 <SSD1306_Putc>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d002      	beq.n	8001904 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	e008      	b.n	8001916 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e8      	bne.n	80018e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fec8 	bl	80016b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001928:	f7ff fe98 	bl	800165c <SSD1306_UpdateScreen>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <ssd1306_I2C_Init+0x28>)
 8001938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800193a:	e002      	b.n	8001942 <ssd1306_I2C_Init+0x12>
		p--;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	0003d090 	.word	0x0003d090

0800195c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b0c7      	sub	sp, #284	; 0x11c
 8001960:	af02      	add	r7, sp, #8
 8001962:	4604      	mov	r4, r0
 8001964:	4608      	mov	r0, r1
 8001966:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800196a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800196e:	600a      	str	r2, [r1, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001976:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800197a:	4622      	mov	r2, r4
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001982:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001986:	4602      	mov	r2, r0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800198e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001992:	460a      	mov	r2, r1
 8001994:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800199a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800199e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019a2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019b0:	e015      	b.n	80019de <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019ba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	441a      	add	r2, r3
 80019c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019c6:	3301      	adds	r3, #1
 80019c8:	7811      	ldrb	r1, [r2, #0]
 80019ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019ce:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80019d2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d8:	3301      	adds	r3, #1
 80019da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80019e8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019ec:	8812      	ldrh	r2, [r2, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d8df      	bhi.n	80019b2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b299      	uxth	r1, r3
 80019fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f107 020c 	add.w	r2, r7, #12
 8001a10:	200a      	movs	r0, #10
 8001a12:	9000      	str	r0, [sp, #0]
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a16:	f001 f93b 	bl	8002c90 <HAL_I2C_Master_Transmit>
}
 8001a1a:	bf00      	nop
 8001a1c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	200004a4 	.word	0x200004a4

08001a28 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	460b      	mov	r3, r1
 8001a34:	71bb      	strb	r3, [r7, #6]
 8001a36:	4613      	mov	r3, r2
 8001a38:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a3e:	797b      	ldrb	r3, [r7, #5]
 8001a40:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	b299      	uxth	r1, r3
 8001a46:	f107 020c 	add.w	r2, r7, #12
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2302      	movs	r3, #2
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <ssd1306_I2C_Write+0x38>)
 8001a52:	f001 f91d 	bl	8002c90 <HAL_I2C_Master_Transmit>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200004a4 	.word	0x200004a4

08001a64 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1d39      	adds	r1, r7, #4
 8001a76:	2201      	movs	r2, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff2b 	bl	80018d4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a7e:	f7ff fded 	bl	800165c <SSD1306_UpdateScreen>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_GPIO_Init+0xdc>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2103      	movs	r1, #3
 8001b16:	4815      	ldr	r0, [pc, #84]	; (8001b6c <MX_GPIO_Init+0xe0>)
 8001b18:	f000 ff5c 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_GPIO_Init+0xe4>)
 8001b22:	f000 ff57 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001b26:	2303      	movs	r3, #3
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <MX_GPIO_Init+0xe0>)
 8001b3e:	f000 fdc5 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001b42:	2340      	movs	r3, #64	; 0x40
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_GPIO_Init+0xe4>)
 8001b5a:	f000 fdb7 	bl	80026cc <HAL_GPIO_Init>

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400

08001b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <MX_I2C1_Init+0x54>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <MX_I2C1_Init+0x58>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001bb2:	f000 ff29 	bl	8002a08 <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 f8d4 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200004a4 	.word	0x200004a4
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	00061a80 	.word	0x00061a80

08001bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_I2C_MspInit+0x94>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d134      	bne.n	8001c5c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_I2C_MspInit+0x98>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_I2C_MspInit+0x98>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_I2C_MspInit+0x98>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c20:	2304      	movs	r3, #4
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4810      	ldr	r0, [pc, #64]	; (8001c6c <HAL_I2C_MspInit+0x9c>)
 8001c2c:	f000 fd4e 	bl	80026cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_I2C_MspInit+0x98>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_I2C_MspInit+0x98>)
 8001c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_I2C_MspInit+0x98>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	201f      	movs	r0, #31
 8001c52:	f000 fcc6 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c56:	201f      	movs	r0, #31
 8001c58:	f000 fcdf 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c74:	f000 fb20 	bl	80022b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c78:	f000 f80e 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7c:	f7ff ff06 	bl	8001a8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c80:	f000 f878 	bl	8001d74 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c84:	f000 fa7c 	bl	8002180 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c88:	f7ff ff74 	bl	8001b74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  setup_DW1000RSTnIRQ(0);
  SSD1306_Init();
 8001c8c:	f7ff fc22 	bl	80014d4 <SSD1306_Init>
      dw_main();
 8001c90:	f000 f96e 	bl	8001f70 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <main+0x24>
	...

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	; 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	; 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fbdc 	bl	8006464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <SystemClock_Config+0xc8>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <SystemClock_Config+0xc8>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <SystemClock_Config+0xc8>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <SystemClock_Config+0xcc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <SystemClock_Config+0xcc>)
 8001ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <SystemClock_Config+0xcc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d08:	230c      	movs	r3, #12
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d0c:	2360      	movs	r3, #96	; 0x60
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d14:	2304      	movs	r3, #4
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 ffa7 	bl	8004c70 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d28:	f000 f81e 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2103      	movs	r1, #3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fa09 	bl	8005160 <HAL_RCC_ClockConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d54:	f000 f808 	bl	8001d68 <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3750      	adds	r7, #80	; 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <Error_Handler+0x8>
	...

08001d74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <MX_SPI1_Init+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_SPI1_Init+0x64>)
 8001dc6:	f003 fbab 	bl	8005520 <HAL_SPI_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dd0:	f7ff ffca 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200004f8 	.word	0x200004f8
 8001ddc:	40013000 	.word	0x40013000

08001de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <HAL_SPI_MspInit+0x94>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d133      	bne.n	8001e6a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_SPI_MspInit+0x98>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_SPI_MspInit+0x98>)
 8001e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_SPI_MspInit+0x98>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_SPI_MspInit+0x98>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <HAL_SPI_MspInit+0x98>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_SPI_MspInit+0x98>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e3a:	23e0      	movs	r3, #224	; 0xe0
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4809      	ldr	r0, [pc, #36]	; (8001e7c <HAL_SPI_MspInit+0x9c>)
 8001e56:	f000 fc39 	bl	80026cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2023      	movs	r0, #35	; 0x23
 8001e60:	f000 fbbf 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e64:	2023      	movs	r0, #35	; 0x23
 8001e66:	f000 fbd8 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40013000 	.word	0x40013000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 fa1e 	bl	800235c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <I2C1_EV_IRQHandler+0x10>)
 8001f2a:	f001 f8dd 	bl	80030e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200004a4 	.word	0x200004a4

08001f38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <SPI1_IRQHandler+0x10>)
 8001f3e:	f003 fcb5 	bl	80058ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200004f8 	.word	0x200004f8

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    HAL_UART_Transmit(&huart2,buff, strlen(buff), 100);
 8001f76:	4871      	ldr	r0, [pc, #452]	; (800213c <dw_main+0x1cc>)
 8001f78:	f7fe f92e 	bl	80001d8 <strlen>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2364      	movs	r3, #100	; 0x64
 8001f82:	496e      	ldr	r1, [pc, #440]	; (800213c <dw_main+0x1cc>)
 8001f84:	486e      	ldr	r0, [pc, #440]	; (8002140 <dw_main+0x1d0>)
 8001f86:	f003 fed4 	bl	8005d32 <HAL_UART_Transmit>
    ssd1306_write(buff, Font_7x10);
 8001f8a:	486c      	ldr	r0, [pc, #432]	; (800213c <dw_main+0x1cc>)
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <dw_main+0x1d4>)
 8001f8e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f92:	f7ff fd67 	bl	8001a64 <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 5 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001f96:	f7ff fa13 	bl	80013c0 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001f9a:	f7ff fa6d 	bl	8001478 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7fe faa4 	bl	80004ec <dwt_initialise>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d110      	bne.n	8001fce <dw_main+0x5e>
    {
    	HAL_UART_Transmit(&huart2,"Init failed!!!\n", 16, 100);
 8001fac:	2364      	movs	r3, #100	; 0x64
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4965      	ldr	r1, [pc, #404]	; (8002148 <dw_main+0x1d8>)
 8001fb2:	4863      	ldr	r0, [pc, #396]	; (8002140 <dw_main+0x1d0>)
 8001fb4:	f003 febd 	bl	8005d32 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10); ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001fb8:	210a      	movs	r1, #10
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fbf4 	bl	80017a8 <SSD1306_GotoXY>
 8001fc0:	4862      	ldr	r0, [pc, #392]	; (800214c <dw_main+0x1dc>)
 8001fc2:	4b60      	ldr	r3, [pc, #384]	; (8002144 <dw_main+0x1d4>)
 8001fc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fc8:	f7ff fd4c 	bl	8001a64 <ssd1306_write>
        while (1)
 8001fcc:	e7fe      	b.n	8001fcc <dw_main+0x5c>
        { };
    }
    port_set_dw1000_fastrate();
 8001fce:	f7ff fa5f 	bl	8001490 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 6 below. */
    dwt_configure(&config);
 8001fd2:	485f      	ldr	r0, [pc, #380]	; (8002150 <dw_main+0x1e0>)
 8001fd4:	f7fe fbe0 	bl	8000798 <dwt_configure>

    /* Set delay to turn reception on after transmission of the frame. See NOTE 2 below. */
    dwt_setrxaftertxdelay(TX_TO_RX_DELAY_UUS);
 8001fd8:	203c      	movs	r0, #60	; 0x3c
 8001fda:	f7fe ff4f 	bl	8000e7c <dwt_setrxaftertxdelay>

    /* Set response frame timeout. */
    dwt_setrxtimeout(RX_RESP_TO_UUS);
 8001fde:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fe2:	f7ff f85b 	bl	800109c <dwt_setrxtimeout>

    /* Loop forever sending and receiving frames periodically. */
    while (1)
    {
    	SSD1306_Clear ();
 8001fe6:	f7ff fc9a 	bl	800191e <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fbdb 	bl	80017a8 <SSD1306_GotoXY>
 8001ff2:	4858      	ldr	r0, [pc, #352]	; (8002154 <dw_main+0x1e4>)
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <dw_main+0x1d4>)
 8001ff6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ffa:	f7ff fd33 	bl	8001a64 <ssd1306_write>
    	SSD1306_GotoXY(0, 30);  ssd1306_write("Received :", Font_7x10);
 8001ffe:	211e      	movs	r1, #30
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff fbd1 	bl	80017a8 <SSD1306_GotoXY>
 8002006:	4854      	ldr	r0, [pc, #336]	; (8002158 <dw_main+0x1e8>)
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <dw_main+0x1d4>)
 800200a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800200e:	f7ff fd29 	bl	8001a64 <ssd1306_write>
        /* Write frame data to DW1000 and prepare transmission. See NOTE 7 below. */
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8002012:	2200      	movs	r2, #0
 8002014:	4951      	ldr	r1, [pc, #324]	; (800215c <dw_main+0x1ec>)
 8002016:	200e      	movs	r0, #14
 8002018:	f7fe fd28 	bl	8000a6c <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	200e      	movs	r0, #14
 8002022:	f7fe fd41 	bl	8000aa8 <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled immediately after the frame is sent. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8002026:	2002      	movs	r0, #2
 8002028:	f7fe ffea 	bl	8001000 <dwt_starttx>

        HAL_UART_Transmit(&huart2,"Transmitted : ", 14, 100);
 800202c:	2364      	movs	r3, #100	; 0x64
 800202e:	220e      	movs	r2, #14
 8002030:	494b      	ldr	r1, [pc, #300]	; (8002160 <dw_main+0x1f0>)
 8002032:	4843      	ldr	r0, [pc, #268]	; (8002140 <dw_main+0x1d0>)
 8002034:	f003 fe7d 	bl	8005d32 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2,tx_msg, sizeof(tx_msg), 100);
 8002038:	2364      	movs	r3, #100	; 0x64
 800203a:	220e      	movs	r2, #14
 800203c:	4947      	ldr	r1, [pc, #284]	; (800215c <dw_main+0x1ec>)
 800203e:	4840      	ldr	r0, [pc, #256]	; (8002140 <dw_main+0x1d0>)
 8002040:	f003 fe77 	bl	8005d32 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2,"\n", 1, 100);
 8002044:	2364      	movs	r3, #100	; 0x64
 8002046:	2201      	movs	r2, #1
 8002048:	4946      	ldr	r1, [pc, #280]	; (8002164 <dw_main+0x1f4>)
 800204a:	483d      	ldr	r0, [pc, #244]	; (8002140 <dw_main+0x1d0>)
 800204c:	f003 fe71 	bl	8005d32 <HAL_UART_Transmit>

        SSD1306_GotoXY(0, 10); ssd1306_write(tx_msg, Font_7x10);
 8002050:	210a      	movs	r1, #10
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff fba8 	bl	80017a8 <SSD1306_GotoXY>
 8002058:	4840      	ldr	r0, [pc, #256]	; (800215c <dw_main+0x1ec>)
 800205a:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <dw_main+0x1d4>)
 800205c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002060:	f7ff fd00 	bl	8001a64 <ssd1306_write>

        /* We assume that the transmission is achieved normally, now poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002064:	bf00      	nop
 8002066:	2100      	movs	r1, #0
 8002068:	200f      	movs	r0, #15
 800206a:	f7fe fdfa 	bl	8000c62 <dwt_read32bitoffsetreg>
 800206e:	4603      	mov	r3, r0
 8002070:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <dw_main+0x1f8>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <dw_main+0x1f8>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b3c      	ldr	r3, [pc, #240]	; (800216c <dw_main+0x1fc>)
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f2      	beq.n	8002066 <dw_main+0xf6>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <dw_main+0x1f8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d046      	beq.n	800211a <dw_main+0x1aa>
        {
            int i;

            /* Clear local RX buffer to avoid having leftovers from previous receptions. This is not necessary but is included here to aid reading
             * the RX buffer. */
            for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	e007      	b.n	80020a2 <dw_main+0x132>
            {
                rx_buffer[i] = 0;
 8002092:	4a37      	ldr	r2, [pc, #220]	; (8002170 <dw_main+0x200>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
            for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3301      	adds	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b7e      	cmp	r3, #126	; 0x7e
 80020a6:	ddf4      	ble.n	8002092 <dw_main+0x122>
            }

            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 80020a8:	2100      	movs	r1, #0
 80020aa:	2010      	movs	r0, #16
 80020ac:	f7fe fdd9 	bl	8000c62 <dwt_read32bitoffsetreg>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <dw_main+0x204>)
 80020bc:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <dw_main+0x204>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	2b7f      	cmp	r3, #127	; 0x7f
 80020c4:	d806      	bhi.n	80020d4 <dw_main+0x164>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <dw_main+0x204>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	4619      	mov	r1, r3
 80020ce:	4828      	ldr	r0, [pc, #160]	; (8002170 <dw_main+0x200>)
 80020d0:	f7fe fd0a 	bl	8000ae8 <dwt_readrxdata>
            }
            HAL_UART_Transmit(&huart2,(char*)"Received : ", 11, 100);
 80020d4:	2364      	movs	r3, #100	; 0x64
 80020d6:	220b      	movs	r2, #11
 80020d8:	4927      	ldr	r1, [pc, #156]	; (8002178 <dw_main+0x208>)
 80020da:	4819      	ldr	r0, [pc, #100]	; (8002140 <dw_main+0x1d0>)
 80020dc:	f003 fe29 	bl	8005d32 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2,rx_buffer, sizeof(rx_buffer), 100);
 80020e0:	2364      	movs	r3, #100	; 0x64
 80020e2:	227f      	movs	r2, #127	; 0x7f
 80020e4:	4922      	ldr	r1, [pc, #136]	; (8002170 <dw_main+0x200>)
 80020e6:	4816      	ldr	r0, [pc, #88]	; (8002140 <dw_main+0x1d0>)
 80020e8:	f003 fe23 	bl	8005d32 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2,(char*)"\n", 1, 100);
 80020ec:	2364      	movs	r3, #100	; 0x64
 80020ee:	2201      	movs	r2, #1
 80020f0:	491c      	ldr	r1, [pc, #112]	; (8002164 <dw_main+0x1f4>)
 80020f2:	4813      	ldr	r0, [pc, #76]	; (8002140 <dw_main+0x1d0>)
 80020f4:	f003 fe1d 	bl	8005d32 <HAL_UART_Transmit>


            SSD1306_GotoXY(0, 40);  ssd1306_write(tx_msg, Font_7x10);
 80020f8:	2128      	movs	r1, #40	; 0x28
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7ff fb54 	bl	80017a8 <SSD1306_GotoXY>
 8002100:	4816      	ldr	r0, [pc, #88]	; (800215c <dw_main+0x1ec>)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <dw_main+0x1d4>)
 8002104:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002108:	f7ff fcac 	bl	8001a64 <ssd1306_write>

            /* At this point, received frame can be examined in global "rx_buffer". An actual application would, for example, start by checking that
             * the format and/or data of the response are the expected ones. A developer might put a breakpoint here to examine this frame. */

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 800210c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002110:	2100      	movs	r1, #0
 8002112:	200f      	movs	r0, #15
 8002114:	f7fe fe2b 	bl	8000d6e <dwt_write32bitoffsetreg>
 8002118:	e004      	b.n	8002124 <dw_main+0x1b4>
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <dw_main+0x20c>)
 800211c:	2100      	movs	r1, #0
 800211e:	200f      	movs	r0, #15
 8002120:	f7fe fe25 	bl	8000d6e <dwt_write32bitoffsetreg>
        }

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8002124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002128:	f7ff f920 	bl	800136c <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <dw_main+0x1ec>)
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	3301      	adds	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <dw_main+0x1ec>)
 8002136:	705a      	strb	r2, [r3, #1]
    	SSD1306_Clear ();
 8002138:	e755      	b.n	8001fe6 <dw_main+0x76>
 800213a:	bf00      	nop
 800213c:	20000010 	.word	0x20000010
 8002140:	200005d8 	.word	0x200005d8
 8002144:	20000004 	.word	0x20000004
 8002148:	0800648c 	.word	0x0800648c
 800214c:	0800649c 	.word	0x0800649c
 8002150:	20000024 	.word	0x20000024
 8002154:	080064ac 	.word	0x080064ac
 8002158:	080064bc 	.word	0x080064bc
 800215c:	20000030 	.word	0x20000030
 8002160:	080064c8 	.word	0x080064c8
 8002164:	080064d8 	.word	0x080064d8
 8002168:	200005d0 	.word	0x200005d0
 800216c:	2427d000 	.word	0x2427d000
 8002170:	20000550 	.word	0x20000550
 8002174:	200005d4 	.word	0x200005d4
 8002178:	080064dc 	.word	0x080064dc
 800217c:	24279000 	.word	0x24279000

08002180 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <MX_USART2_UART_Init+0x50>)
 8002188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 800218c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 80021a6:	220c      	movs	r2, #12
 80021a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_USART2_UART_Init+0x4c>)
 80021b8:	f003 fd6e 	bl	8005c98 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021c2:	f7ff fdd1 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200005d8 	.word	0x200005d8
 80021d0:	40004400 	.word	0x40004400

080021d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_UART_MspInit+0x84>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12b      	bne.n	800224e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_UART_MspInit+0x88>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_UART_MspInit+0x88>)
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_UART_MspInit+0x88>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_UART_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <HAL_UART_MspInit+0x88>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_UART_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800222e:	230c      	movs	r3, #12
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223e:	2307      	movs	r3, #7
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <HAL_UART_MspInit+0x8c>)
 800224a:	f000 fa3f 	bl	80026cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40004400 	.word	0x40004400
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000

08002264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800226a:	490e      	ldr	r1, [pc, #56]	; (80022a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002280:	4c0b      	ldr	r4, [pc, #44]	; (80022b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800228e:	f7ff fe5d 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002292:	f004 f8c3 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7ff fceb 	bl	8001c70 <main>
  bx  lr    
 800229a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800229c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80022a8:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 80022ac:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80022b0:	20000620 	.word	0x20000620

080022b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC_IRQHandler>
	...

080022b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_Init+0x40>)
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_Init+0x40>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_Init+0x40>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f000 f973 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e6:	200f      	movs	r0, #15
 80022e8:	f000 f808 	bl	80022fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ec:	f7ff fdc8 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023c00 	.word	0x40023c00

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_InitTick+0x54>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_InitTick+0x58>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f999 	bl	8002652 <HAL_SYSTICK_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00e      	b.n	8002348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d80a      	bhi.n	8002346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f000 f953 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <HAL_InitTick+0x5c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000000c 	.word	0x2000000c
 8002354:	20000044 	.word	0x20000044
 8002358:	20000040 	.word	0x20000040

0800235c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x20>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x24>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_IncTick+0x24>)
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000044 	.word	0x20000044
 8002380:	2000061c 	.word	0x2000061c

08002384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_GetTick+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	2000061c 	.word	0x2000061c

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff ffee 	bl	8002384 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d005      	beq.n	80023c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_Delay+0x44>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023c2:	bf00      	nop
 80023c4:	f7ff ffde 	bl	8002384 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d8f7      	bhi.n	80023c4 <HAL_Delay+0x28>
  {
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000044 	.word	0x20000044

080023e4 <__NVIC_SetPriorityGrouping>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800240c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_GetPriorityGrouping>:
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <__NVIC_EnableIRQ+0x38>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_DisableIRQ>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db12      	blt.n	80024bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	490a      	ldr	r1, [pc, #40]	; (80024c8 <__NVIC_DisableIRQ+0x44>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	3320      	adds	r3, #32
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80024b0:	f3bf 8f4f 	dsb	sy
}
 80024b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024b6:	f3bf 8f6f 	isb	sy
}
 80024ba:	bf00      	nop
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff05 	bl	80023e4 <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff1a 	bl	800242c <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff0d 	bl	8002448 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff1d 	bl	8002484 <__NVIC_DisableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff94 	bl	8002588 <SysTick_Config>
 8002660:	4603      	mov	r3, r0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e00c      	b.n	80026a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2205      	movs	r2, #5
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e159      	b.n	800299c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8148 	bne.w	8002996 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a2 	beq.w	8002996 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_GPIO_Init+0x2ec>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x202>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a48      	ldr	r2, [pc, #288]	; (80029c0 <HAL_GPIO_Init+0x2f4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x1fe>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a47      	ldr	r2, [pc, #284]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x1fa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <HAL_GPIO_Init+0x2fc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a45      	ldr	r2, [pc, #276]	; (80029cc <HAL_GPIO_Init+0x300>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x1f2>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e008      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028be:	2307      	movs	r3, #7
 80028c0:	e006      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c2:	2303      	movs	r3, #3
 80028c4:	e004      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e002      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_GPIO_Init+0x204>
 80028ce:	2300      	movs	r3, #0
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f002 0203 	and.w	r2, r2, #3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4093      	lsls	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e0:	4935      	ldr	r1, [pc, #212]	; (80029b8 <HAL_GPIO_Init+0x2ec>)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_GPIO_Init+0x304>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002912:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <HAL_GPIO_Init+0x304>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_GPIO_Init+0x304>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293c:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <HAL_GPIO_Init+0x304>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_GPIO_Init+0x304>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_GPIO_Init+0x304>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3301      	adds	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	f67f aea2 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	40020800 	.word	0x40020800
 80029c8:	40020c00 	.word	0x40020c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e12b      	b.n	8002c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff f8ce 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a6c:	f002 fd30 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8002a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4a81      	ldr	r2, [pc, #516]	; (8002c7c <HAL_I2C_Init+0x274>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d807      	bhi.n	8002a8c <HAL_I2C_Init+0x84>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_I2C_Init+0x278>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf94      	ite	ls
 8002a84:	2301      	movls	r3, #1
 8002a86:	2300      	movhi	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e006      	b.n	8002a9a <HAL_I2C_Init+0x92>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a7d      	ldr	r2, [pc, #500]	; (8002c84 <HAL_I2C_Init+0x27c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bf94      	ite	ls
 8002a94:	2301      	movls	r3, #1
 8002a96:	2300      	movhi	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0e7      	b.n	8002c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a78      	ldr	r2, [pc, #480]	; (8002c88 <HAL_I2C_Init+0x280>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_I2C_Init+0x274>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d802      	bhi.n	8002adc <HAL_I2C_Init+0xd4>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	e009      	b.n	8002af0 <HAL_I2C_Init+0xe8>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_I2C_Init+0x284>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	3301      	adds	r3, #1
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	495c      	ldr	r1, [pc, #368]	; (8002c7c <HAL_I2C_Init+0x274>)
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	d819      	bhi.n	8002b44 <HAL_I2C_Init+0x13c>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e59      	subs	r1, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b24:	400b      	ands	r3, r1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_I2C_Init+0x138>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e59      	subs	r1, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	e051      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e04f      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <HAL_I2C_Init+0x168>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1e58      	subs	r0, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	440b      	add	r3, r1
 8002b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e012      	b.n	8002b96 <HAL_I2C_Init+0x18e>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	0099      	lsls	r1, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x196>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e022      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_I2C_Init+0x1bc>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1e58      	subs	r0, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	440b      	add	r3, r1
 8002bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Init+0x1dc>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	0099      	lsls	r1, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	6809      	ldr	r1, [r1, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6911      	ldr	r1, [r2, #16]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	000186a0 	.word	0x000186a0
 8002c80:	001e847f 	.word	0x001e847f
 8002c84:	003d08ff 	.word	0x003d08ff
 8002c88:	431bde83 	.word	0x431bde83
 8002c8c:	10624dd3 	.word	0x10624dd3

08002c90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	817b      	strh	r3, [r7, #10]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff fb6e 	bl	8002384 <HAL_GetTick>
 8002ca8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	f040 80e0 	bne.w	8002e78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2319      	movs	r3, #25
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4970      	ldr	r1, [pc, #448]	; (8002e84 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f001 fe00 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e0d3      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2C_Master_Transmit+0x50>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e0cc      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ea>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d007      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2210      	movs	r2, #16
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	893a      	ldrh	r2, [r7, #8]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6a3a      	ldr	r2, [r7, #32]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f001 fc90 	bl	8004674 <I2C_MasterRequestWrite>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e08d      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d74:	e066      	b.n	8002e44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	6a39      	ldr	r1, [r7, #32]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f001 fe7a 	bl	8004a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d11b      	bne.n	8002e18 <HAL_I2C_Master_Transmit+0x188>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d017      	beq.n	8002e18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	6a39      	ldr	r1, [r7, #32]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f001 fe6a 	bl	8004af6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d107      	bne.n	8002e40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e01a      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d194      	bne.n	8002d76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	00100002 	.word	0x00100002
 8002e88:	ffff0000 	.word	0xffff0000

08002e8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff fa72 	bl	8002384 <HAL_GetTick>
 8002ea0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	f040 8111 	bne.w	80030d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2319      	movs	r3, #25
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4988      	ldr	r1, [pc, #544]	; (80030e0 <HAL_I2C_IsDeviceReady+0x254>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f001 fd02 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e104      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2C_IsDeviceReady+0x50>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0fd      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d007      	beq.n	8002f02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2224      	movs	r2, #36	; 0x24
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a70      	ldr	r2, [pc, #448]	; (80030e4 <HAL_I2C_IsDeviceReady+0x258>)
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f001 fcc0 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5c:	d103      	bne.n	8002f66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0b6      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff fa03 	bl	8002384 <HAL_GetTick>
 8002f7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fae:	e025      	b.n	8002ffc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fb0:	f7ff f9e8 	bl	8002384 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <HAL_I2C_IsDeviceReady+0x13a>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	22a0      	movs	r2, #160	; 0xa0
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2ba0      	cmp	r3, #160	; 0xa0
 8003006:	d005      	beq.n	8003014 <HAL_I2C_IsDeviceReady+0x188>
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <HAL_I2C_IsDeviceReady+0x188>
 800300e:	7dbb      	ldrb	r3, [r7, #22]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0cd      	beq.n	8002fb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d129      	bne.n	800307e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003038:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2319      	movs	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	4921      	ldr	r1, [pc, #132]	; (80030e0 <HAL_I2C_IsDeviceReady+0x254>)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f001 fc34 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e036      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e02c      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003096:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2319      	movs	r3, #25
 800309e:	2201      	movs	r2, #1
 80030a0:	490f      	ldr	r1, [pc, #60]	; (80030e0 <HAL_I2C_IsDeviceReady+0x254>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f001 fc10 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e012      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f4ff af32 	bcc.w	8002f26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030d6:	2302      	movs	r3, #2
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	00100002 	.word	0x00100002
 80030e4:	ffff0000 	.word	0xffff0000

080030e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003108:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b10      	cmp	r3, #16
 8003116:	d003      	beq.n	8003120 <HAL_I2C_EV_IRQHandler+0x38>
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	f040 80c1 	bne.w	80032a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10d      	bne.n	8003156 <HAL_I2C_EV_IRQHandler+0x6e>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003140:	d003      	beq.n	800314a <HAL_I2C_EV_IRQHandler+0x62>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003148:	d101      	bne.n	800314e <HAL_I2C_EV_IRQHandler+0x66>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_I2C_EV_IRQHandler+0x68>
 800314e:	2300      	movs	r3, #0
 8003150:	2b01      	cmp	r3, #1
 8003152:	f000 8132 	beq.w	80033ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0x92>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f001 fd64 	bl	8004c3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fcd2 	bl	8003b1c <I2C_Master_SB>
 8003178:	e092      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0xb2>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	0a5b      	lsrs	r3, r3, #9
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fd48 	bl	8003c28 <I2C_Master_ADD10>
 8003198:	e082      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xd2>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd62 	bl	8003c7c <I2C_Master_ADDR>
 80031b8:	e072      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03b      	beq.n	800323e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d4:	f000 80f3 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	09db      	lsrs	r3, r3, #7
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <HAL_I2C_EV_IRQHandler+0x11c>
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <HAL_I2C_EV_IRQHandler+0x11c>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f94c 	bl	800349a <I2C_MasterTransmit_TXE>
 8003202:	e04d      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80d6 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	0a5b      	lsrs	r3, r3, #9
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80cf 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003220:	7bbb      	ldrb	r3, [r7, #14]
 8003222:	2b21      	cmp	r3, #33	; 0x21
 8003224:	d103      	bne.n	800322e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9d3 	bl	80035d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322c:	e0c7      	b.n	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	f040 80c4 	bne.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa41 	bl	80036be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323c:	e0bf      	b.n	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	f000 80b7 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00f      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0x194>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	0a9b      	lsrs	r3, r3, #10
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0x194>
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d103      	bne.n	800327c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fab6 	bl	80037e6 <I2C_MasterReceive_RXNE>
 800327a:	e011      	b.n	80032a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 809a 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	0a5b      	lsrs	r3, r3, #9
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8093 	beq.w	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fb55 	bl	8003948 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329e:	e08e      	b.n	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
 80032a0:	e08d      	b.n	80033be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e007      	b.n	80032c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x20e>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0a5b      	lsrs	r3, r3, #9
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00c      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 ff13 	bl	800411a <I2C_Slave_ADDR>
 80032f4:	e066      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x22e>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	0a5b      	lsrs	r3, r3, #9
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 ff4e 	bl	80041b0 <I2C_Slave_STOPF>
 8003314:	e056      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003316:	7bbb      	ldrb	r3, [r7, #14]
 8003318:	2b21      	cmp	r3, #33	; 0x21
 800331a:	d002      	beq.n	8003322 <HAL_I2C_EV_IRQHandler+0x23a>
 800331c:	7bbb      	ldrb	r3, [r7, #14]
 800331e:	2b29      	cmp	r3, #41	; 0x29
 8003320:	d125      	bne.n	800336e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	09db      	lsrs	r3, r3, #7
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00f      	beq.n	800334e <HAL_I2C_EV_IRQHandler+0x266>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	0a9b      	lsrs	r3, r3, #10
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_I2C_EV_IRQHandler+0x266>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fe29 	bl	8003f9e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800334c:	e039      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d033      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2da>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	0a5b      	lsrs	r3, r3, #9
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d02d      	beq.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fe56 	bl	8004018 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800336c:	e029      	b.n	80033c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00f      	beq.n	800339a <HAL_I2C_EV_IRQHandler+0x2b2>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	0a9b      	lsrs	r3, r3, #10
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fe61 	bl	800405a <I2C_SlaveReceive_RXNE>
 8003398:	e014      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00e      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	0a5b      	lsrs	r3, r3, #9
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fe8f 	bl	80040d6 <I2C_SlaveReceive_BTF>
 80033b8:	e004      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033ba:	bf00      	nop
 80033bc:	e002      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033be:	bf00      	nop
 80033c0:	e000      	b.n	80033c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	4613      	mov	r3, r2
 8003428:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d150      	bne.n	8003562 <I2C_MasterTransmit_TXE+0xc8>
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b21      	cmp	r3, #33	; 0x21
 80034c4:	d14d      	bne.n	8003562 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d01d      	beq.n	8003508 <I2C_MasterTransmit_TXE+0x6e>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d01a      	beq.n	8003508 <I2C_MasterTransmit_TXE+0x6e>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d8:	d016      	beq.n	8003508 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2211      	movs	r2, #17
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff62 	bl	80033ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003506:	e060      	b.n	80035ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003516:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d107      	bne.n	8003552 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff7d 	bl	800344a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003550:	e03b      	b.n	80035ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff35 	bl	80033ca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003560:	e033      	b.n	80035ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b21      	cmp	r3, #33	; 0x21
 8003566:	d005      	beq.n	8003574 <I2C_MasterTransmit_TXE+0xda>
 8003568:	7bbb      	ldrb	r3, [r7, #14]
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d12d      	bne.n	80035ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b22      	cmp	r3, #34	; 0x22
 8003572:	d12a      	bne.n	80035ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800358e:	e01c      	b.n	80035ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d103      	bne.n	80035a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f88e 	bl	80036be <I2C_MemoryTransmit_TXE_BTF>
}
 80035a2:	e012      	b.n	80035ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035c8:	e7ff      	b.n	80035ca <I2C_MasterTransmit_TXE+0x130>
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b21      	cmp	r3, #33	; 0x21
 80035ea:	d164      	bne.n	80036b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800361a:	e04c      	b.n	80036b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b08      	cmp	r3, #8
 8003620:	d01d      	beq.n	800365e <I2C_MasterTransmit_BTF+0x8c>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b20      	cmp	r3, #32
 8003626:	d01a      	beq.n	800365e <I2C_MasterTransmit_BTF+0x8c>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800362e:	d016      	beq.n	800365e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800363e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2211      	movs	r2, #17
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff feb7 	bl	80033ca <HAL_I2C_MasterTxCpltCallback>
}
 800365c:	e02b      	b.n	80036b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800366c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d107      	bne.n	80036a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fed2 	bl	800344a <HAL_I2C_MemTxCpltCallback>
}
 80036a6:	e006      	b.n	80036b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fe8a 	bl	80033ca <HAL_I2C_MasterTxCpltCallback>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10b      	bne.n	80036f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80036f4:	e073      	b.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	121b      	asrs	r3, r3, #8
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003710:	e065      	b.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10b      	bne.n	8003732 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003730:	e055      	b.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	2b02      	cmp	r3, #2
 8003738:	d151      	bne.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b22      	cmp	r3, #34	; 0x22
 800373e:	d10d      	bne.n	800375c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	651a      	str	r2, [r3, #80]	; 0x50
}
 800375a:	e040      	b.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b21      	cmp	r3, #33	; 0x21
 800376a:	d112      	bne.n	8003792 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003790:	e025      	b.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d120      	bne.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b21      	cmp	r3, #33	; 0x21
 80037a0:	d11d      	bne.n	80037de <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fe36 	bl	800344a <HAL_I2C_MemTxCpltCallback>
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b22      	cmp	r3, #34	; 0x22
 80037f8:	f040 80a2 	bne.w	8003940 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d921      	bls.n	800384e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b03      	cmp	r3, #3
 8003838:	f040 8082 	bne.w	8003940 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800384c:	e078      	b.n	8003940 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	2b02      	cmp	r3, #2
 8003854:	d074      	beq.n	8003940 <I2C_MasterReceive_RXNE+0x15a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d002      	beq.n	8003862 <I2C_MasterReceive_RXNE+0x7c>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d16e      	bne.n	8003940 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f001 f988 	bl	8004b78 <I2C_WaitOnSTOPRequestThroughIT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d142      	bne.n	80038f4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800388c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d10a      	bne.n	80038de <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fdc1 	bl	800345e <HAL_I2C_MemRxCpltCallback>
}
 80038dc:	e030      	b.n	8003940 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2212      	movs	r2, #18
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fd76 	bl	80033de <HAL_I2C_MasterRxCpltCallback>
}
 80038f2:	e025      	b.n	8003940 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003902:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fd99 	bl	8003472 <HAL_I2C_ErrorCallback>
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b04      	cmp	r3, #4
 800395e:	d11b      	bne.n	8003998 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003996:	e0bd      	b.n	8003b14 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d129      	bne.n	80039f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d00a      	beq.n	80039ce <I2C_MasterReceive_BTF+0x86>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d007      	beq.n	80039ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039f4:	e08e      	b.n	8003b14 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d176      	bne.n	8003aee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d002      	beq.n	8003a0c <I2C_MasterReceive_BTF+0xc4>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d108      	bne.n	8003a1e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e019      	b.n	8003a52 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d002      	beq.n	8003a2a <I2C_MasterReceive_BTF+0xe2>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d108      	bne.n	8003a3c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e00a      	b.n	8003a52 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d007      	beq.n	8003a52 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003aac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d10a      	bne.n	8003ad8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fcc4 	bl	800345e <HAL_I2C_MemRxCpltCallback>
}
 8003ad6:	e01d      	b.n	8003b14 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2212      	movs	r2, #18
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fc79 	bl	80033de <HAL_I2C_MasterRxCpltCallback>
}
 8003aec:	e012      	b.n	8003b14 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d117      	bne.n	8003b60 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b48:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b4a:	e067      	b.n	8003c1c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	611a      	str	r2, [r3, #16]
}
 8003b5e:	e05d      	b.n	8003c1c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b68:	d133      	bne.n	8003bd2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b21      	cmp	r3, #33	; 0x21
 8003b74:	d109      	bne.n	8003b8a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b86:	611a      	str	r2, [r3, #16]
 8003b88:	e008      	b.n	8003b9c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <I2C_Master_SB+0x92>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d108      	bne.n	8003bc0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d032      	beq.n	8003c1c <I2C_Master_SB+0x100>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02d      	beq.n	8003c1c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bce:	605a      	str	r2, [r3, #4]
}
 8003bd0:	e024      	b.n	8003c1c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10e      	bne.n	8003bf8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	11db      	asrs	r3, r3, #7
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f003 0306 	and.w	r3, r3, #6
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f063 030f 	orn	r3, r3, #15
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
}
 8003bf6:	e011      	b.n	8003c1c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10d      	bne.n	8003c1c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	11db      	asrs	r3, r3, #7
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 0306 	and.w	r3, r3, #6
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f063 030e 	orn	r3, r3, #14
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <I2C_Master_ADD10+0x26>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <I2C_Master_ADD10+0x48>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6e:	605a      	str	r2, [r3, #4]
  }
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b091      	sub	sp, #68	; 0x44
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b22      	cmp	r3, #34	; 0x22
 8003ca4:	f040 8169 	bne.w	8003f7a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10f      	bne.n	8003cd0 <I2C_Master_ADDR+0x54>
 8003cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d10b      	bne.n	8003cd0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb8:	2300      	movs	r3, #0
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	e160      	b.n	8003f92 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d11d      	bne.n	8003d14 <I2C_Master_ADDR+0x98>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ce0:	d118      	bne.n	8003d14 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d06:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50
 8003d12:	e13e      	b.n	8003f92 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e115      	b.n	8003f72 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	f040 808a 	bne.w	8003e66 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d58:	d137      	bne.n	8003dca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	d113      	bne.n	8003da2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d88:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	e0e7      	b.n	8003f72 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	623b      	str	r3, [r7, #32]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e0d3      	b.n	8003f72 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d02e      	beq.n	8003e2e <I2C_Master_ADDR+0x1b2>
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d02b      	beq.n	8003e2e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	2b12      	cmp	r3, #18
 8003dda:	d102      	bne.n	8003de2 <I2C_Master_ADDR+0x166>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d125      	bne.n	8003e2e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d00e      	beq.n	8003e06 <I2C_Master_ADDR+0x18a>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d00b      	beq.n	8003e06 <I2C_Master_ADDR+0x18a>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d008      	beq.n	8003e06 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e007      	b.n	8003e16 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e14:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	e0a1      	b.n	8003f72 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e085      	b.n	8003f72 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d14d      	bne.n	8003f0c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d016      	beq.n	8003ea4 <I2C_Master_ADDR+0x228>
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d013      	beq.n	8003ea4 <I2C_Master_ADDR+0x228>
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d010      	beq.n	8003ea4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e007      	b.n	8003eb4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec2:	d117      	bne.n	8003ef4 <I2C_Master_ADDR+0x278>
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eca:	d00b      	beq.n	8003ee4 <I2C_Master_ADDR+0x268>
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d008      	beq.n	8003ee4 <I2C_Master_ADDR+0x268>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d005      	beq.n	8003ee4 <I2C_Master_ADDR+0x268>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d002      	beq.n	8003ee4 <I2C_Master_ADDR+0x268>
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d107      	bne.n	8003ef4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ef2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	e032      	b.n	8003f72 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f1a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d117      	bne.n	8003f5c <I2C_Master_ADDR+0x2e0>
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f32:	d00b      	beq.n	8003f4c <I2C_Master_ADDR+0x2d0>
 8003f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d008      	beq.n	8003f4c <I2C_Master_ADDR+0x2d0>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d005      	beq.n	8003f4c <I2C_Master_ADDR+0x2d0>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d002      	beq.n	8003f4c <I2C_Master_ADDR+0x2d0>
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d107      	bne.n	8003f5c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f78:	e00b      	b.n	8003f92 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	e7ff      	b.n	8003f92 <I2C_Master_ADDR+0x316>
 8003f92:	bf00      	nop
 8003f94:	3744      	adds	r7, #68	; 0x44
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02b      	beq.n	8004010 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d114      	bne.n	8004010 <I2C_SlaveTransmit_TXE+0x72>
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b29      	cmp	r3, #41	; 0x29
 8003fea:	d111      	bne.n	8004010 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2221      	movs	r2, #33	; 0x21
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2228      	movs	r2, #40	; 0x28
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff f9f1 	bl	80033f2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d011      	beq.n	800404e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02c      	beq.n	80040ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d114      	bne.n	80040ce <I2C_SlaveReceive_RXNE+0x74>
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b2a      	cmp	r3, #42	; 0x2a
 80040a8:	d111      	bne.n	80040ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2222      	movs	r2, #34	; 0x22
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2228      	movs	r2, #40	; 0x28
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff f99c 	bl	8003406 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d012      	beq.n	800410e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004134:	2b28      	cmp	r3, #40	; 0x28
 8004136:	d127      	bne.n	8004188 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004146:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	81bb      	strh	r3, [r7, #12]
 800416a:	e002      	b.n	8004172 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800417a:	89ba      	ldrh	r2, [r7, #12]
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff f94a 	bl	800341a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004186:	e00e      	b.n	80041a6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041d0:	2300      	movs	r3, #0
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420c:	d172      	bne.n	80042f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b22      	cmp	r3, #34	; 0x22
 8004212:	d002      	beq.n	800421a <I2C_Slave_STOPF+0x6a>
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d135      	bne.n	8004286 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f043 0204 	orr.w	r2, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fa2b 	bl	80026ae <HAL_DMA_GetState>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d049      	beq.n	80042f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	4a69      	ldr	r2, [pc, #420]	; (8004408 <I2C_Slave_STOPF+0x258>)
 8004264:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe f9fd 	bl	800266a <HAL_DMA_Abort_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03d      	beq.n	80042f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004284:	e035      	b.n	80042f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b29a      	uxth	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe f9f5 	bl	80026ae <HAL_DMA_GetState>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d014      	beq.n	80042f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	4a4e      	ldr	r2, [pc, #312]	; (8004408 <I2C_Slave_STOPF+0x258>)
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f9c7 	bl	800266a <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
 80042f0:	e000      	b.n	80042f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03e      	beq.n	800437c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d112      	bne.n	8004332 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d112      	bne.n	8004366 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f843 	bl	8004410 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800438a:	e039      	b.n	8004400 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b2a      	cmp	r3, #42	; 0x2a
 8004390:	d109      	bne.n	80043a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2228      	movs	r2, #40	; 0x28
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff f830 	bl	8003406 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b28      	cmp	r3, #40	; 0x28
 80043b0:	d111      	bne.n	80043d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <I2C_Slave_STOPF+0x25c>)
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff f831 	bl	8003436 <HAL_I2C_ListenCpltCallback>
}
 80043d4:	e014      	b.n	8004400 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	d002      	beq.n	80043e4 <I2C_Slave_STOPF+0x234>
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b22      	cmp	r3, #34	; 0x22
 80043e2:	d10d      	bne.n	8004400 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff f803 	bl	8003406 <HAL_I2C_SlaveRxCpltCallback>
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08004779 	.word	0x08004779
 800440c:	ffff0000 	.word	0xffff0000

08004410 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004426:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d002      	beq.n	8004434 <I2C_ITError+0x24>
 800442e:	7bbb      	ldrb	r3, [r7, #14]
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d10a      	bne.n	800444a <I2C_ITError+0x3a>
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	d107      	bne.n	800444a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004448:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004450:	2b28      	cmp	r3, #40	; 0x28
 8004452:	d107      	bne.n	8004464 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2228      	movs	r2, #40	; 0x28
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004462:	e015      	b.n	8004490 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004472:	d00a      	beq.n	800448a <I2C_ITError+0x7a>
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b60      	cmp	r3, #96	; 0x60
 8004478:	d007      	beq.n	800448a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449e:	d162      	bne.n	8004566 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d020      	beq.n	8004500 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	4a6a      	ldr	r2, [pc, #424]	; (800466c <I2C_ITError+0x25c>)
 80044c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe f8cd 	bl	800266a <HAL_DMA_Abort_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8089 	beq.w	80045ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044fa:	4610      	mov	r0, r2
 80044fc:	4798      	blx	r3
 80044fe:	e074      	b.n	80045ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	4a59      	ldr	r2, [pc, #356]	; (800466c <I2C_ITError+0x25c>)
 8004506:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe f8ac 	bl	800266a <HAL_DMA_Abort_IT>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d068      	beq.n	80045ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d10b      	bne.n	800453e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004560:	4610      	mov	r0, r2
 8004562:	4798      	blx	r3
 8004564:	e041      	b.n	80045ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b60      	cmp	r3, #96	; 0x60
 8004570:	d125      	bne.n	80045be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d10b      	bne.n	80045a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fe ff65 	bl	8003486 <HAL_I2C_AbortCpltCallback>
 80045bc:	e015      	b.n	80045ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d10b      	bne.n	80045e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fe ff44 	bl	8003472 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d113      	bne.n	8004664 <I2C_ITError+0x254>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b28      	cmp	r3, #40	; 0x28
 8004640:	d110      	bne.n	8004664 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <I2C_ITError+0x260>)
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fe fee9 	bl	8003436 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	08004779 	.word	0x08004779
 8004670:	ffff0000 	.word	0xffff0000

08004674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	460b      	mov	r3, r1
 8004682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d006      	beq.n	800469e <I2C_MasterRequestWrite+0x2a>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d003      	beq.n	800469e <I2C_MasterRequestWrite+0x2a>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800469c:	d108      	bne.n	80046b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e00b      	b.n	80046c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	2b12      	cmp	r3, #18
 80046b6:	d107      	bne.n	80046c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f8f7 	bl	80048c8 <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d103      	bne.n	80046f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e035      	b.n	8004768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004704:	d108      	bne.n	8004718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004714:	611a      	str	r2, [r3, #16]
 8004716:	e01b      	b.n	8004750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004718:	897b      	ldrh	r3, [r7, #10]
 800471a:	11db      	asrs	r3, r3, #7
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0306 	and.w	r3, r3, #6
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f063 030f 	orn	r3, r3, #15
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	490e      	ldr	r1, [pc, #56]	; (8004770 <I2C_MasterRequestWrite+0xfc>)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f91d 	bl	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e010      	b.n	8004768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4907      	ldr	r1, [pc, #28]	; (8004774 <I2C_MasterRequestWrite+0x100>)
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f90d 	bl	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	00010008 	.word	0x00010008
 8004774:	00010002 	.word	0x00010002

08004778 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004792:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <I2C_DMAAbort+0x148>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	08db      	lsrs	r3, r3, #3
 8004798:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <I2C_DMAAbort+0x14c>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	0a1a      	lsrs	r2, r3, #8
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00da      	lsls	r2, r3, #3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047be:	e00a      	b.n	80047d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d4:	d0ea      	beq.n	80047ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	2200      	movs	r2, #0
 80047e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	2200      	movs	r2, #0
 80047f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	2200      	movs	r2, #0
 800481a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	2200      	movs	r2, #0
 800482a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d10e      	bne.n	8004866 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2200      	movs	r2, #0
 800485c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800485e:	6978      	ldr	r0, [r7, #20]
 8004860:	f7fe fe11 	bl	8003486 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004864:	e027      	b.n	80048b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800486c:	2b28      	cmp	r3, #40	; 0x28
 800486e:	d117      	bne.n	80048a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800488e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2228      	movs	r2, #40	; 0x28
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800489e:	e007      	b.n	80048b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048b0:	6978      	ldr	r0, [r7, #20]
 80048b2:	f7fe fdde 	bl	8003472 <HAL_I2C_ErrorCallback>
}
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	14f8b589 	.word	0x14f8b589

080048c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d8:	e025      	b.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d021      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fd fd4f 	bl	8002384 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0220 	orr.w	r2, r3, #32
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e023      	b.n	800496e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10d      	bne.n	800494c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	e00c      	b.n	8004966 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	429a      	cmp	r2, r3
 800496a:	d0b6      	beq.n	80048da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004984:	e051      	b.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	d123      	bne.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0204 	orr.w	r2, r3, #4
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e046      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d021      	beq.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fd fccd 	bl	8002384 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d116      	bne.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e020      	b.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e00b      	b.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d18d      	bne.n	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a80:	e02d      	b.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8aa 	bl	8004bdc <I2C_IsAcknowledgeFailed>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e02d      	b.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d021      	beq.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fd fc73 	bl	8002384 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d116      	bne.n	8004ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e007      	b.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d1ca      	bne.n	8004a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b02:	e02d      	b.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f869 	bl	8004bdc <I2C_IsAcknowledgeFailed>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e02d      	b.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1a:	d021      	beq.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1c:	f7fd fc32 	bl	8002384 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d302      	bcc.n	8004b32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d116      	bne.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d1ca      	bne.n	8004b04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	0a1a      	lsrs	r2, r3, #8
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e008      	b.n	8004bc8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc4:	d0e9      	beq.n	8004b9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	2000000c 	.word	0x2000000c
 8004bd8:	14f8b589 	.word	0x14f8b589

08004bdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf2:	d11b      	bne.n	8004c2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0204 	orr.w	r2, r3, #4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c4a:	d103      	bne.n	8004c54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c52:	e007      	b.n	8004c64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c5c:	d102      	bne.n	8004c64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e267      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d075      	beq.n	8004d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d00c      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b85      	ldr	r3, [pc, #532]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d112      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca6:	4b82      	ldr	r3, [pc, #520]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb2:	d10b      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	4b7e      	ldr	r3, [pc, #504]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05b      	beq.n	8004d78 <HAL_RCC_OscConfig+0x108>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d157      	bne.n	8004d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e242      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x74>
 8004cd6:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a75      	ldr	r2, [pc, #468]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e01d      	b.n	8004d20 <HAL_RCC_OscConfig+0xb0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x98>
 8004cee:	4b70      	ldr	r3, [pc, #448]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6f      	ldr	r2, [pc, #444]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b6d      	ldr	r3, [pc, #436]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a6c      	ldr	r2, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_OscConfig+0xb0>
 8004d08:	4b69      	ldr	r3, [pc, #420]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a68      	ldr	r2, [pc, #416]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b66      	ldr	r3, [pc, #408]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a65      	ldr	r2, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fd fb2c 	bl	8002384 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d30:	f7fd fb28 	bl	8002384 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b64      	cmp	r3, #100	; 0x64
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e207      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0xc0>
 8004d4e:	e014      	b.n	8004d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fd fb18 	bl	8002384 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fd fb14 	bl	8002384 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1f3      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6a:	4b51      	ldr	r3, [pc, #324]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0xe8>
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d063      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d86:	4b4a      	ldr	r3, [pc, #296]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d11c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	4b44      	ldr	r3, [pc, #272]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d116      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004daa:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x152>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d001      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e1c7      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc2:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4937      	ldr	r1, [pc, #220]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	e03a      	b.n	8004e4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de0:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de6:	f7fd facd 	bl	8002384 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dee:	f7fd fac9 	bl	8002384 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e1a8      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e00:	4b2b      	ldr	r3, [pc, #172]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0c:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4925      	ldr	r1, [pc, #148]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
 8004e20:	e015      	b.n	8004e4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <HAL_RCC_OscConfig+0x244>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd faac 	bl	8002384 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fd faa8 	bl	8002384 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e187      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d036      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d016      	beq.n	8004e90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <HAL_RCC_OscConfig+0x248>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fd fa8c 	bl	8002384 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fd fa88 	bl	8002384 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e167      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_OscConfig+0x240>)
 8004e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x200>
 8004e8e:	e01b      	b.n	8004ec8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_RCC_OscConfig+0x248>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e96:	f7fd fa75 	bl	8002384 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9c:	e00e      	b.n	8004ebc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9e:	f7fd fa71 	bl	8002384 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d907      	bls.n	8004ebc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e150      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	42470000 	.word	0x42470000
 8004eb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ebc:	4b88      	ldr	r3, [pc, #544]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ea      	bne.n	8004e9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8097 	beq.w	8005004 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eda:	4b81      	ldr	r3, [pc, #516]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10f      	bne.n	8004f06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	4b7d      	ldr	r3, [pc, #500]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef6:	4b7a      	ldr	r3, [pc, #488]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f06:	4b77      	ldr	r3, [pc, #476]	; (80050e4 <HAL_RCC_OscConfig+0x474>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f12:	4b74      	ldr	r3, [pc, #464]	; (80050e4 <HAL_RCC_OscConfig+0x474>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a73      	ldr	r2, [pc, #460]	; (80050e4 <HAL_RCC_OscConfig+0x474>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1e:	f7fd fa31 	bl	8002384 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fd fa2d 	bl	8002384 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e10c      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f38:	4b6a      	ldr	r3, [pc, #424]	; (80050e4 <HAL_RCC_OscConfig+0x474>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCC_OscConfig+0x2ea>
 8004f4c:	4b64      	ldr	r3, [pc, #400]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	4a63      	ldr	r2, [pc, #396]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6713      	str	r3, [r2, #112]	; 0x70
 8004f58:	e01c      	b.n	8004f94 <HAL_RCC_OscConfig+0x324>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x30c>
 8004f62:	4b5f      	ldr	r3, [pc, #380]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	4a5e      	ldr	r2, [pc, #376]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f68:	f043 0304 	orr.w	r3, r3, #4
 8004f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f6e:	4b5c      	ldr	r3, [pc, #368]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a5b      	ldr	r2, [pc, #364]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCC_OscConfig+0x324>
 8004f7c:	4b58      	ldr	r3, [pc, #352]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a57      	ldr	r2, [pc, #348]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
 8004f88:	4b55      	ldr	r3, [pc, #340]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	4a54      	ldr	r2, [pc, #336]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	f023 0304 	bic.w	r3, r3, #4
 8004f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fd f9f2 	bl	8002384 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa4:	f7fd f9ee 	bl	8002384 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e0cb      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fba:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ee      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x334>
 8004fc6:	e014      	b.n	8004ff2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc8:	f7fd f9dc 	bl	8002384 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fd f9d8 	bl	8002384 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0b5      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe6:	4b3e      	ldr	r3, [pc, #248]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ee      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d105      	bne.n	8005004 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff8:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005002:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80a1 	beq.w	8005150 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800500e:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b08      	cmp	r3, #8
 8005018:	d05c      	beq.n	80050d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d141      	bne.n	80050a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <HAL_RCC_OscConfig+0x478>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fd f9ac 	bl	8002384 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005030:	f7fd f9a8 	bl	8002384 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e087      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	019b      	lsls	r3, r3, #6
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	3b01      	subs	r3, #1
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	491b      	ldr	r1, [pc, #108]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <HAL_RCC_OscConfig+0x478>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507e:	f7fd f981 	bl	8002384 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005086:	f7fd f97d 	bl	8002384 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e05c      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005098:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x416>
 80050a4:	e054      	b.n	8005150 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a6:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_RCC_OscConfig+0x478>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fd f96a 	bl	8002384 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fd f966 	bl	8002384 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e045      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <HAL_RCC_OscConfig+0x470>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x444>
 80050d2:	e03d      	b.n	8005150 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d107      	bne.n	80050ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e038      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40007000 	.word	0x40007000
 80050e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <HAL_RCC_OscConfig+0x4ec>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d028      	beq.n	800514c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d121      	bne.n	800514c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d11a      	bne.n	800514c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800511c:	4013      	ands	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	4293      	cmp	r3, r2
 8005126:	d111      	bne.n	800514c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	3b01      	subs	r3, #1
 8005136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d107      	bne.n	800514c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800

08005160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0cc      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005174:	4b68      	ldr	r3, [pc, #416]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d90c      	bls.n	800519c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b65      	ldr	r3, [pc, #404]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b63      	ldr	r3, [pc, #396]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0b8      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b4:	4b59      	ldr	r3, [pc, #356]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4a58      	ldr	r2, [pc, #352]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051cc:	4b53      	ldr	r3, [pc, #332]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a52      	ldr	r2, [pc, #328]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d8:	4b50      	ldr	r3, [pc, #320]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	494d      	ldr	r1, [pc, #308]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d044      	beq.n	8005280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	4b47      	ldr	r3, [pc, #284]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d119      	bne.n	800523e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e07f      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d003      	beq.n	800521e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800521a:	2b03      	cmp	r3, #3
 800521c:	d107      	bne.n	800522e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521e:	4b3f      	ldr	r3, [pc, #252]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e06f      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522e:	4b3b      	ldr	r3, [pc, #236]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e067      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f023 0203 	bic.w	r2, r3, #3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4934      	ldr	r1, [pc, #208]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	4313      	orrs	r3, r2
 800524e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005250:	f7fd f898 	bl	8002384 <HAL_GetTick>
 8005254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005256:	e00a      	b.n	800526e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005258:	f7fd f894 	bl	8002384 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	f241 3288 	movw	r2, #5000	; 0x1388
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e04f      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526e:	4b2b      	ldr	r3, [pc, #172]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 020c 	and.w	r2, r3, #12
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	429a      	cmp	r2, r3
 800527e:	d1eb      	bne.n	8005258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d20c      	bcs.n	80052a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b22      	ldr	r3, [pc, #136]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b20      	ldr	r3, [pc, #128]	; (8005318 <HAL_RCC_ClockConfig+0x1b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e032      	b.n	800530e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b4:	4b19      	ldr	r3, [pc, #100]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4916      	ldr	r1, [pc, #88]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	490e      	ldr	r1, [pc, #56]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052e6:	f000 f821 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	490a      	ldr	r1, [pc, #40]	; (8005320 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	5ccb      	ldrb	r3, [r1, r3]
 80052fa:	fa22 f303 	lsr.w	r3, r2, r3
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_RCC_ClockConfig+0x1c8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7fc fff8 	bl	80022fc <HAL_InitTick>

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40023c00 	.word	0x40023c00
 800531c:	40023800 	.word	0x40023800
 8005320:	08006d08 	.word	0x08006d08
 8005324:	2000000c 	.word	0x2000000c
 8005328:	20000040 	.word	0x20000040

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005330:	b090      	sub	sp, #64	; 0x40
 8005332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	637b      	str	r3, [r7, #52]	; 0x34
 8005338:	2300      	movs	r3, #0
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533c:	2300      	movs	r3, #0
 800533e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005344:	4b59      	ldr	r3, [pc, #356]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d00d      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x40>
 8005350:	2b08      	cmp	r3, #8
 8005352:	f200 80a1 	bhi.w	8005498 <HAL_RCC_GetSysClockFreq+0x16c>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x34>
 800535a:	2b04      	cmp	r3, #4
 800535c:	d003      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x3a>
 800535e:	e09b      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005360:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005364:	e09b      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005366:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800536a:	e098      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800536c:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005376:	4b4d      	ldr	r3, [pc, #308]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d028      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005382:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	099b      	lsrs	r3, r3, #6
 8005388:	2200      	movs	r2, #0
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	627a      	str	r2, [r7, #36]	; 0x24
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005394:	2100      	movs	r1, #0
 8005396:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005398:	fb03 f201 	mul.w	r2, r3, r1
 800539c:	2300      	movs	r3, #0
 800539e:	fb00 f303 	mul.w	r3, r0, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	4a43      	ldr	r2, [pc, #268]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80053a6:	fba0 1202 	umull	r1, r2, r0, r2
 80053aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ac:	460a      	mov	r2, r1
 80053ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80053b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b2:	4413      	add	r3, r2
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	2200      	movs	r2, #0
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053c6:	f7fa ff0f 	bl	80001e8 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4613      	mov	r3, r2
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d2:	e053      	b.n	800547c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d4:	4b35      	ldr	r3, [pc, #212]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	099b      	lsrs	r3, r3, #6
 80053da:	2200      	movs	r2, #0
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	617a      	str	r2, [r7, #20]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053e6:	f04f 0b00 	mov.w	fp, #0
 80053ea:	4652      	mov	r2, sl
 80053ec:	465b      	mov	r3, fp
 80053ee:	f04f 0000 	mov.w	r0, #0
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	0159      	lsls	r1, r3, #5
 80053f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053fc:	0150      	lsls	r0, r2, #5
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	ebb2 080a 	subs.w	r8, r2, sl
 8005406:	eb63 090b 	sbc.w	r9, r3, fp
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005416:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800541a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800541e:	ebb2 0408 	subs.w	r4, r2, r8
 8005422:	eb63 0509 	sbc.w	r5, r3, r9
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	00eb      	lsls	r3, r5, #3
 8005430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005434:	00e2      	lsls	r2, r4, #3
 8005436:	4614      	mov	r4, r2
 8005438:	461d      	mov	r5, r3
 800543a:	eb14 030a 	adds.w	r3, r4, sl
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	eb45 030b 	adc.w	r3, r5, fp
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005452:	4629      	mov	r1, r5
 8005454:	028b      	lsls	r3, r1, #10
 8005456:	4621      	mov	r1, r4
 8005458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800545c:	4621      	mov	r1, r4
 800545e:	028a      	lsls	r2, r1, #10
 8005460:	4610      	mov	r0, r2
 8005462:	4619      	mov	r1, r3
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	2200      	movs	r2, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	60fa      	str	r2, [r7, #12]
 800546c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005470:	f7fa feba 	bl	80001e8 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_GetSysClockFreq+0x180>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	3301      	adds	r3, #1
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800548c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005496:	e002      	b.n	800549e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800549c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3740      	adds	r7, #64	; 0x40
 80054a4:	46bd      	mov	sp, r7
 80054a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	017d7840 	.word	0x017d7840

080054b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCC_GetHCLKFreq+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d4:	f7ff fff0 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0a9b      	lsrs	r3, r3, #10
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4903      	ldr	r1, [pc, #12]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40023800 	.word	0x40023800
 80054f4:	08006d18 	.word	0x08006d18

080054f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054fc:	f7ff ffdc 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0b5b      	lsrs	r3, r3, #13
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4903      	ldr	r1, [pc, #12]	; (800551c <HAL_RCC_GetPCLK2Freq+0x24>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	08006d18 	.word	0x08006d18

08005520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07b      	b.n	800562a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d009      	beq.n	8005558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	e005      	b.n	8005558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fc34 	bl	8001de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	ea42 0103 	orr.w	r1, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	f003 0104 	and.w	r1, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0210 	and.w	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b088      	sub	sp, #32
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_SPI_Transmit+0x22>
 8005650:	2302      	movs	r3, #2
 8005652:	e126      	b.n	80058a2 <HAL_SPI_Transmit+0x270>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800565c:	f7fc fe92 	bl	8002384 <HAL_GetTick>
 8005660:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005676:	e10b      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_Transmit+0x52>
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005688:	e102      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2203      	movs	r2, #3
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	88fa      	ldrh	r2, [r7, #6]
 80056a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d0:	d10f      	bne.n	80056f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d007      	beq.n	8005710 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005718:	d14b      	bne.n	80057b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_SPI_Transmit+0xf6>
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d13e      	bne.n	80057a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	1c9a      	adds	r2, r3, #2
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800574c:	e02b      	b.n	80057a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b02      	cmp	r3, #2
 800575a:	d112      	bne.n	8005782 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	1c9a      	adds	r2, r3, #2
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005780:	e011      	b.n	80057a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005782:	f7fc fdff 	bl	8002384 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d803      	bhi.n	800579a <HAL_SPI_Transmit+0x168>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d102      	bne.n	80057a0 <HAL_SPI_Transmit+0x16e>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057a4:	e074      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ce      	bne.n	800574e <HAL_SPI_Transmit+0x11c>
 80057b0:	e04c      	b.n	800584c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_SPI_Transmit+0x18e>
 80057ba:	8afb      	ldrh	r3, [r7, #22]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d140      	bne.n	8005842 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057e6:	e02c      	b.n	8005842 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d113      	bne.n	800581e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36
 800581c:	e011      	b.n	8005842 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581e:	f7fc fdb1 	bl	8002384 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d803      	bhi.n	8005836 <HAL_SPI_Transmit+0x204>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d102      	bne.n	800583c <HAL_SPI_Transmit+0x20a>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005840:	e026      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1cd      	bne.n	80057e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9df 	bl	8005c14 <SPI_EndRxTxTransaction>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e000      	b.n	8005890 <HAL_SPI_Transmit+0x25e>
  }

error:
 800588e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10f      	bne.n	80058f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	099b      	lsrs	r3, r3, #6
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
    return;
 80058ee:	e0d7      	b.n	8005aa0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_SPI_IRQHandler+0x66>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
    return;
 8005910:	e0c6      	b.n	8005aa0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10c      	bne.n	8005938 <HAL_SPI_IRQHandler+0x8c>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	099b      	lsrs	r3, r3, #6
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80b4 	beq.w	8005aa0 <HAL_SPI_IRQHandler+0x1f4>
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80ad 	beq.w	8005aa0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	099b      	lsrs	r3, r3, #6
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d023      	beq.n	800599a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b03      	cmp	r3, #3
 800595c:	d011      	beq.n	8005982 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	e00b      	b.n	800599a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005982:	2300      	movs	r3, #0
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	693b      	ldr	r3, [r7, #16]
        return;
 8005998:	e082      	b.n	8005aa0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d014      	beq.n	80059d0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f043 0201 	orr.w	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	f043 0208 	orr.w	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80059e8:	2300      	movs	r3, #0
 80059ea:	60bb      	str	r3, [r7, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04f      	beq.n	8005a9e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a0c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_SPI_IRQHandler+0x17e>
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d034      	beq.n	8005a94 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0203 	bic.w	r2, r2, #3
 8005a38:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d011      	beq.n	8005a66 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <HAL_SPI_IRQHandler+0x1fc>)
 8005a48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fc fe0b 	bl	800266a <HAL_DMA_Abort_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a72:	4a0d      	ldr	r2, [pc, #52]	; (8005aa8 <HAL_SPI_IRQHandler+0x1fc>)
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fc fdf5 	bl	800266a <HAL_DMA_Abort_IT>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005a92:	e003      	b.n	8005a9c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f809 	bl	8005aac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a9a:	e000      	b.n	8005a9e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005a9c:	bf00      	nop
    return;
 8005a9e:	bf00      	nop
  }
}
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005add 	.word	0x08005add

08005aac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ace:	b2db      	uxtb	r3, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ffd8 	bl	8005aac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b14:	f7fc fc36 	bl	8002384 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	4413      	add	r3, r2
 8005b22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b24:	f7fc fc2e 	bl	8002384 <HAL_GetTick>
 8005b28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b2a:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	015b      	lsls	r3, r3, #5
 8005b30:	0d1b      	lsrs	r3, r3, #20
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b3a:	e054      	b.n	8005be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d050      	beq.n	8005be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b44:	f7fc fc1e 	bl	8002384 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d902      	bls.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d13d      	bne.n	8005bd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b72:	d111      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7c:	d004      	beq.n	8005b88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b86:	d107      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba0:	d10f      	bne.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e017      	b.n	8005c06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d19b      	bne.n	8005b3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	2000000c 	.word	0x2000000c

08005c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <SPI_EndRxTxTransaction+0x7c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <SPI_EndRxTxTransaction+0x80>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	0d5b      	lsrs	r3, r3, #21
 8005c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c30:	fb02 f303 	mul.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3e:	d112      	bne.n	8005c66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2200      	movs	r2, #0
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ff5a 	bl	8005b04 <SPI_WaitFlagStateUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00f      	b.n	8005c86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d0f2      	beq.n	8005c66 <SPI_EndRxTxTransaction+0x52>
 8005c80:	e000      	b.n	8005c84 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c82:	bf00      	nop
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	2000000c 	.word	0x2000000c
 8005c94:	165e9f81 	.word	0x165e9f81

08005c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e03f      	b.n	8005d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fc fa88 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f929 	bl	8005f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b08a      	sub	sp, #40	; 0x28
 8005d36:	af02      	add	r7, sp, #8
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d17c      	bne.n	8005e4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_UART_Transmit+0x2c>
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e075      	b.n	8005e4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Transmit+0x3e>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e06e      	b.n	8005e4e <HAL_UART_Transmit+0x11c>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2221      	movs	r2, #33	; 0x21
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d86:	f7fc fafd 	bl	8002384 <HAL_GetTick>
 8005d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da0:	d108      	bne.n	8005db4 <HAL_UART_Transmit+0x82>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e003      	b.n	8005dbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dc4:	e02a      	b.n	8005e1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f840 	bl	8005e56 <UART_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e036      	b.n	8005e4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	3302      	adds	r3, #2
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e007      	b.n	8005e0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1cf      	bne.n	8005dc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f810 	bl	8005e56 <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e006      	b.n	8005e4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e000      	b.n	8005e4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
  }
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b090      	sub	sp, #64	; 0x40
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	e050      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d04c      	beq.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e76:	f7fc fa85 	bl	8002384 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d241      	bcs.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eda:	623a      	str	r2, [r7, #32]
 8005edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e00f      	b.n	8005f2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4013      	ands	r3, r2
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d09f      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3740      	adds	r7, #64	; 0x40
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f38:	b0c0      	sub	sp, #256	; 0x100
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	68d9      	ldr	r1, [r3, #12]
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	ea40 0301 	orr.w	r3, r0, r1
 8005f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f8c:	f021 010c 	bic.w	r1, r1, #12
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	6999      	ldr	r1, [r3, #24]
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	ea40 0301 	orr.w	r3, r0, r1
 8005fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b8f      	ldr	r3, [pc, #572]	; (8006200 <UART_SetConfig+0x2cc>)
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d005      	beq.n	8005fd4 <UART_SetConfig+0xa0>
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b8d      	ldr	r3, [pc, #564]	; (8006204 <UART_SetConfig+0x2d0>)
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d104      	bne.n	8005fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7ff fa90 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fdc:	e003      	b.n	8005fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fde:	f7ff fa77 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
 8005fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff0:	f040 810c 	bne.w	800620c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006006:	4622      	mov	r2, r4
 8006008:	462b      	mov	r3, r5
 800600a:	1891      	adds	r1, r2, r2
 800600c:	65b9      	str	r1, [r7, #88]	; 0x58
 800600e:	415b      	adcs	r3, r3
 8006010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006016:	4621      	mov	r1, r4
 8006018:	eb12 0801 	adds.w	r8, r2, r1
 800601c:	4629      	mov	r1, r5
 800601e:	eb43 0901 	adc.w	r9, r3, r1
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800602e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006036:	4690      	mov	r8, r2
 8006038:	4699      	mov	r9, r3
 800603a:	4623      	mov	r3, r4
 800603c:	eb18 0303 	adds.w	r3, r8, r3
 8006040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006044:	462b      	mov	r3, r5
 8006046:	eb49 0303 	adc.w	r3, r9, r3
 800604a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800605a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800605e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006062:	460b      	mov	r3, r1
 8006064:	18db      	adds	r3, r3, r3
 8006066:	653b      	str	r3, [r7, #80]	; 0x50
 8006068:	4613      	mov	r3, r2
 800606a:	eb42 0303 	adc.w	r3, r2, r3
 800606e:	657b      	str	r3, [r7, #84]	; 0x54
 8006070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006078:	f7fa f8b6 	bl	80001e8 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4b61      	ldr	r3, [pc, #388]	; (8006208 <UART_SetConfig+0x2d4>)
 8006082:	fba3 2302 	umull	r2, r3, r3, r2
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	011c      	lsls	r4, r3, #4
 800608a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006094:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800609c:	4642      	mov	r2, r8
 800609e:	464b      	mov	r3, r9
 80060a0:	1891      	adds	r1, r2, r2
 80060a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80060a4:	415b      	adcs	r3, r3
 80060a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060ac:	4641      	mov	r1, r8
 80060ae:	eb12 0a01 	adds.w	sl, r2, r1
 80060b2:	4649      	mov	r1, r9
 80060b4:	eb43 0b01 	adc.w	fp, r3, r1
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060cc:	4692      	mov	sl, r2
 80060ce:	469b      	mov	fp, r3
 80060d0:	4643      	mov	r3, r8
 80060d2:	eb1a 0303 	adds.w	r3, sl, r3
 80060d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060da:	464b      	mov	r3, r9
 80060dc:	eb4b 0303 	adc.w	r3, fp, r3
 80060e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060f8:	460b      	mov	r3, r1
 80060fa:	18db      	adds	r3, r3, r3
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
 80060fe:	4613      	mov	r3, r2
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
 8006106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800610a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800610e:	f7fa f86b 	bl	80001e8 <__aeabi_uldivmod>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4611      	mov	r1, r2
 8006118:	4b3b      	ldr	r3, [pc, #236]	; (8006208 <UART_SetConfig+0x2d4>)
 800611a:	fba3 2301 	umull	r2, r3, r3, r1
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	2264      	movs	r2, #100	; 0x64
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	1acb      	subs	r3, r1, r3
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <UART_SetConfig+0x2d4>)
 8006130:	fba3 2302 	umull	r2, r3, r3, r2
 8006134:	095b      	lsrs	r3, r3, #5
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800613c:	441c      	add	r4, r3
 800613e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006148:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800614c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	1891      	adds	r1, r2, r2
 8006156:	63b9      	str	r1, [r7, #56]	; 0x38
 8006158:	415b      	adcs	r3, r3
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006160:	4641      	mov	r1, r8
 8006162:	1851      	adds	r1, r2, r1
 8006164:	6339      	str	r1, [r7, #48]	; 0x30
 8006166:	4649      	mov	r1, r9
 8006168:	414b      	adcs	r3, r1
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006178:	4659      	mov	r1, fp
 800617a:	00cb      	lsls	r3, r1, #3
 800617c:	4651      	mov	r1, sl
 800617e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006182:	4651      	mov	r1, sl
 8006184:	00ca      	lsls	r2, r1, #3
 8006186:	4610      	mov	r0, r2
 8006188:	4619      	mov	r1, r3
 800618a:	4603      	mov	r3, r0
 800618c:	4642      	mov	r2, r8
 800618e:	189b      	adds	r3, r3, r2
 8006190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006194:	464b      	mov	r3, r9
 8006196:	460a      	mov	r2, r1
 8006198:	eb42 0303 	adc.w	r3, r2, r3
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061b4:	460b      	mov	r3, r1
 80061b6:	18db      	adds	r3, r3, r3
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ba:	4613      	mov	r3, r2
 80061bc:	eb42 0303 	adc.w	r3, r2, r3
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061ca:	f7fa f80d 	bl	80001e8 <__aeabi_uldivmod>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <UART_SetConfig+0x2d4>)
 80061d4:	fba3 1302 	umull	r1, r3, r3, r2
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	2164      	movs	r1, #100	; 0x64
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	3332      	adds	r3, #50	; 0x32
 80061e6:	4a08      	ldr	r2, [pc, #32]	; (8006208 <UART_SetConfig+0x2d4>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f003 0207 	and.w	r2, r3, #7
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4422      	add	r2, r4
 80061fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061fc:	e105      	b.n	800640a <UART_SetConfig+0x4d6>
 80061fe:	bf00      	nop
 8006200:	40011000 	.word	0x40011000
 8006204:	40011400 	.word	0x40011400
 8006208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800620c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006210:	2200      	movs	r2, #0
 8006212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006216:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800621a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800621e:	4642      	mov	r2, r8
 8006220:	464b      	mov	r3, r9
 8006222:	1891      	adds	r1, r2, r2
 8006224:	6239      	str	r1, [r7, #32]
 8006226:	415b      	adcs	r3, r3
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
 800622a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800622e:	4641      	mov	r1, r8
 8006230:	1854      	adds	r4, r2, r1
 8006232:	4649      	mov	r1, r9
 8006234:	eb43 0501 	adc.w	r5, r3, r1
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	00eb      	lsls	r3, r5, #3
 8006242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006246:	00e2      	lsls	r2, r4, #3
 8006248:	4614      	mov	r4, r2
 800624a:	461d      	mov	r5, r3
 800624c:	4643      	mov	r3, r8
 800624e:	18e3      	adds	r3, r4, r3
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006254:	464b      	mov	r3, r9
 8006256:	eb45 0303 	adc.w	r3, r5, r3
 800625a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800626a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800627a:	4629      	mov	r1, r5
 800627c:	008b      	lsls	r3, r1, #2
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006284:	4621      	mov	r1, r4
 8006286:	008a      	lsls	r2, r1, #2
 8006288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800628c:	f7f9 ffac 	bl	80001e8 <__aeabi_uldivmod>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4b60      	ldr	r3, [pc, #384]	; (8006418 <UART_SetConfig+0x4e4>)
 8006296:	fba3 2302 	umull	r2, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	011c      	lsls	r4, r3, #4
 800629e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	61b9      	str	r1, [r7, #24]
 80062b8:	415b      	adcs	r3, r3
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6139      	str	r1, [r7, #16]
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062f4:	464b      	mov	r3, r9
 80062f6:	460a      	mov	r2, r1
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	67bb      	str	r3, [r7, #120]	; 0x78
 800630a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006318:	4649      	mov	r1, r9
 800631a:	008b      	lsls	r3, r1, #2
 800631c:	4641      	mov	r1, r8
 800631e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006322:	4641      	mov	r1, r8
 8006324:	008a      	lsls	r2, r1, #2
 8006326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800632a:	f7f9 ff5d 	bl	80001e8 <__aeabi_uldivmod>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4b39      	ldr	r3, [pc, #228]	; (8006418 <UART_SetConfig+0x4e4>)
 8006334:	fba3 1302 	umull	r1, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	2164      	movs	r1, #100	; 0x64
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	3332      	adds	r3, #50	; 0x32
 8006346:	4a34      	ldr	r2, [pc, #208]	; (8006418 <UART_SetConfig+0x4e4>)
 8006348:	fba2 2303 	umull	r2, r3, r2, r3
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006352:	441c      	add	r4, r3
 8006354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006358:	2200      	movs	r2, #0
 800635a:	673b      	str	r3, [r7, #112]	; 0x70
 800635c:	677a      	str	r2, [r7, #116]	; 0x74
 800635e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	1891      	adds	r1, r2, r2
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	415b      	adcs	r3, r3
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006372:	4641      	mov	r1, r8
 8006374:	1851      	adds	r1, r2, r1
 8006376:	6039      	str	r1, [r7, #0]
 8006378:	4649      	mov	r1, r9
 800637a:	414b      	adcs	r3, r1
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800638a:	4659      	mov	r1, fp
 800638c:	00cb      	lsls	r3, r1, #3
 800638e:	4651      	mov	r1, sl
 8006390:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006394:	4651      	mov	r1, sl
 8006396:	00ca      	lsls	r2, r1, #3
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	4603      	mov	r3, r0
 800639e:	4642      	mov	r2, r8
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a4:	464b      	mov	r3, r9
 80063a6:	460a      	mov	r2, r1
 80063a8:	eb42 0303 	adc.w	r3, r2, r3
 80063ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	663b      	str	r3, [r7, #96]	; 0x60
 80063b8:	667a      	str	r2, [r7, #100]	; 0x64
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063c6:	4649      	mov	r1, r9
 80063c8:	008b      	lsls	r3, r1, #2
 80063ca:	4641      	mov	r1, r8
 80063cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d0:	4641      	mov	r1, r8
 80063d2:	008a      	lsls	r2, r1, #2
 80063d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063d8:	f7f9 ff06 	bl	80001e8 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <UART_SetConfig+0x4e4>)
 80063e2:	fba3 1302 	umull	r1, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2164      	movs	r1, #100	; 0x64
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	3332      	adds	r3, #50	; 0x32
 80063f4:	4a08      	ldr	r2, [pc, #32]	; (8006418 <UART_SetConfig+0x4e4>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4422      	add	r2, r4
 8006408:	609a      	str	r2, [r3, #8]
}
 800640a:	bf00      	nop
 800640c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006410:	46bd      	mov	sp, r7
 8006412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006416:	bf00      	nop
 8006418:	51eb851f 	.word	0x51eb851f

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4d0d      	ldr	r5, [pc, #52]	; (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2600      	movs	r6, #0
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4d0b      	ldr	r5, [pc, #44]	; (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	; (8006460 <__libc_init_array+0x44>)
 8006430:	f000 f820 	bl	8006474 <_init>
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2600      	movs	r6, #0
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f855 3b04 	ldr.w	r3, [r5], #4
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f855 3b04 	ldr.w	r3, [r5], #4
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	08006d28 	.word	0x08006d28
 8006458:	08006d28 	.word	0x08006d28
 800645c:	08006d28 	.word	0x08006d28
 8006460:	08006d2c 	.word	0x08006d2c

08006464 <memset>:
 8006464:	4402      	add	r2, r0
 8006466:	4603      	mov	r3, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
