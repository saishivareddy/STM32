
dwm1000-twr-initiator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abbc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  0800ad00  0800ad00  0001ad00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba44  0800ba44  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba44  0800ba44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba4c  0800ba4c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800ba54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000240  0800bc94  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800bc94  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a937  00000000  00000000  00020269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ad4  00000000  00000000  0003aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0003e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  0003f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001066d  00000000  00000000  00040a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004f17  00000000  00000000  0005106d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00055f84  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005f80  00000000  00000000  00055fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000240 	.word	0x20000240
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ace4 	.word	0x0800ace4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000244 	.word	0x20000244
 800017c:	0800ace4 	.word	0x0800ace4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b9a6 	b.w	8000efc <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83e 	bl	8000c38 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	460c      	mov	r4, r1
 8000bcc:	4605      	mov	r5, r0
 8000bce:	4621      	mov	r1, r4
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f7ff ff09 	bl	80009ec <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x20>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fc7f 	bl	8000508 <__aeabi_dmul>
 8000c0a:	f7ff ff55 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc00 	bl	8000414 <__aeabi_ui2d>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c18:	f7ff fc76 	bl	8000508 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fab8 	bl	8000198 <__aeabi_dsub>
 8000c28:	f7ff ff46 	bl	8000ab8 <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	468e      	mov	lr, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f040 8083 	bne.w	8000d50 <__udivmoddi4+0x118>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4617      	mov	r7, r2
 8000c4e:	d947      	bls.n	8000ce0 <__udivmoddi4+0xa8>
 8000c50:	fab2 f382 	clz	r3, r2
 8000c54:	b14b      	cbz	r3, 8000c6a <__udivmoddi4+0x32>
 8000c56:	f1c3 0120 	rsb	r1, r3, #32
 8000c5a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	409f      	lsls	r7, r3
 8000c64:	ea41 0e0e 	orr.w	lr, r1, lr
 8000c68:	409c      	lsls	r4, r3
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	fbbe fcf8 	udiv	ip, lr, r8
 8000c72:	fa1f f987 	uxth.w	r9, r7
 8000c76:	fb08 e21c 	mls	r2, r8, ip, lr
 8000c7a:	fb0c f009 	mul.w	r0, ip, r9
 8000c7e:	0c21      	lsrs	r1, r4, #16
 8000c80:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000c84:	4290      	cmp	r0, r2
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x66>
 8000c88:	18ba      	adds	r2, r7, r2
 8000c8a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000c8e:	f080 8118 	bcs.w	8000ec2 <__udivmoddi4+0x28a>
 8000c92:	4290      	cmp	r0, r2
 8000c94:	f240 8115 	bls.w	8000ec2 <__udivmoddi4+0x28a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	443a      	add	r2, r7
 8000c9e:	1a12      	subs	r2, r2, r0
 8000ca0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000ca4:	fb08 2210 	mls	r2, r8, r0, r2
 8000ca8:	fb00 f109 	mul.w	r1, r0, r9
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb2:	42a1      	cmp	r1, r4
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbc:	f080 8103 	bcs.w	8000ec6 <__udivmoddi4+0x28e>
 8000cc0:	42a1      	cmp	r1, r4
 8000cc2:	f240 8100 	bls.w	8000ec6 <__udivmoddi4+0x28e>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	443c      	add	r4, r7
 8000cca:	1a64      	subs	r4, r4, r1
 8000ccc:	2100      	movs	r1, #0
 8000cce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd2:	b11e      	cbz	r6, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	40dc      	lsrs	r4, r3
 8000cd8:	e9c6 4200 	strd	r4, r2, [r6]
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xac>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f382 	clz	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d14f      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cec:	1a8d      	subs	r5, r1, r2
 8000cee:	2101      	movs	r1, #1
 8000cf0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cf4:	fa1f f882 	uxth.w	r8, r2
 8000cf8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000cfc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000d00:	fb08 f00c 	mul.w	r0, r8, ip
 8000d04:	0c22      	lsrs	r2, r4, #16
 8000d06:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0xe6>
 8000d0e:	197d      	adds	r5, r7, r5
 8000d10:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0xe4>
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	f200 80e9 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	1a2d      	subs	r5, r5, r0
 8000d20:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d24:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d28:	fb08 f800 	mul.w	r8, r8, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d32:	45a0      	cmp	r8, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x10e>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x10c>
 8000d3e:	45a0      	cmp	r8, r4
 8000d40:	f200 80d9 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 0408 	sub.w	r4, r4, r8
 8000d4a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4e:	e7c0      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	f000 80b1 	beq.w	8000ebc <__udivmoddi4+0x284>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e9c6 0500 	strd	r0, r5, [r6]
 8000d60:	4608      	mov	r0, r1
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f183 	clz	r1, r3
 8000d6a:	2900      	cmp	r1, #0
 8000d6c:	d14b      	bne.n	8000e06 <__udivmoddi4+0x1ce>
 8000d6e:	42ab      	cmp	r3, r5
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b9 	bhi.w	8000eea <__udivmoddi4+0x2b2>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb65 0303 	sbc.w	r3, r5, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	469e      	mov	lr, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0aa      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d86:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d8a:	e7a7      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d8c:	409f      	lsls	r7, r3
 8000d8e:	f1c3 0220 	rsb	r2, r3, #32
 8000d92:	40d1      	lsrs	r1, r2
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da4:	fa24 f202 	lsr.w	r2, r4, r2
 8000da8:	409d      	lsls	r5, r3
 8000daa:	fb00 fc08 	mul.w	ip, r0, r8
 8000dae:	432a      	orrs	r2, r5
 8000db0:	0c15      	lsrs	r5, r2, #16
 8000db2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000db6:	45ac      	cmp	ip, r5
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x19a>
 8000dbe:	197d      	adds	r5, r7, r5
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	f080 808f 	bcs.w	8000ee6 <__udivmoddi4+0x2ae>
 8000dc8:	45ac      	cmp	ip, r5
 8000dca:	f240 808c 	bls.w	8000ee6 <__udivmoddi4+0x2ae>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	443d      	add	r5, r7
 8000dd2:	eba5 050c 	sub.w	r5, r5, ip
 8000dd6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000dda:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000dde:	fb01 f908 	mul.w	r9, r1, r8
 8000de2:	b295      	uxth	r5, r2
 8000de4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000de8:	45a9      	cmp	r9, r5
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	197d      	adds	r5, r7, r5
 8000dee:	f101 32ff 	add.w	r2, r1, #4294967295
 8000df2:	d274      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000df4:	45a9      	cmp	r9, r5
 8000df6:	d972      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000df8:	3902      	subs	r1, #2
 8000dfa:	443d      	add	r5, r7
 8000dfc:	eba5 0509 	sub.w	r5, r5, r9
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e778      	b.n	8000cf8 <__udivmoddi4+0xc0>
 8000e06:	f1c1 0720 	rsb	r7, r1, #32
 8000e0a:	408b      	lsls	r3, r1
 8000e0c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e10:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e14:	fa25 f407 	lsr.w	r4, r5, r7
 8000e18:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e1c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e20:	fa1f f88c 	uxth.w	r8, ip
 8000e24:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e28:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2c:	fb09 fa08 	mul.w	sl, r9, r8
 8000e30:	408d      	lsls	r5, r1
 8000e32:	431d      	orrs	r5, r3
 8000e34:	0c2b      	lsrs	r3, r5, #16
 8000e36:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e40:	fa00 f301 	lsl.w	r3, r0, r1
 8000e44:	d909      	bls.n	8000e5a <__udivmoddi4+0x222>
 8000e46:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4e:	d248      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d946      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e54:	f1a9 0902 	sub.w	r9, r9, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e62:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e66:	fb00 fa08 	mul.w	sl, r0, r8
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e70:	45a2      	cmp	sl, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x24e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e7c:	d22d      	bcs.n	8000eda <__udivmoddi4+0x2a2>
 8000e7e:	45a2      	cmp	sl, r4
 8000e80:	d92b      	bls.n	8000eda <__udivmoddi4+0x2a2>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	eba4 040a 	sub.w	r4, r4, sl
 8000e92:	454c      	cmp	r4, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	464d      	mov	r5, r9
 8000e98:	d319      	bcc.n	8000ece <__udivmoddi4+0x296>
 8000e9a:	d016      	beq.n	8000eca <__udivmoddi4+0x292>
 8000e9c:	b15e      	cbz	r6, 8000eb6 <__udivmoddi4+0x27e>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb64 0405 	sbc.w	r4, r4, r5
 8000ea6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e70c      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ec2:	468c      	mov	ip, r1
 8000ec4:	e6eb      	b.n	8000c9e <__udivmoddi4+0x66>
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	e6ff      	b.n	8000cca <__udivmoddi4+0x92>
 8000eca:	4543      	cmp	r3, r8
 8000ecc:	d2e6      	bcs.n	8000e9c <__udivmoddi4+0x264>
 8000ece:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed2:	eb69 050c 	sbc.w	r5, r9, ip
 8000ed6:	3801      	subs	r0, #1
 8000ed8:	e7e0      	b.n	8000e9c <__udivmoddi4+0x264>
 8000eda:	4628      	mov	r0, r5
 8000edc:	e7d3      	b.n	8000e86 <__udivmoddi4+0x24e>
 8000ede:	4611      	mov	r1, r2
 8000ee0:	e78c      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee2:	4681      	mov	r9, r0
 8000ee4:	e7b9      	b.n	8000e5a <__udivmoddi4+0x222>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e773      	b.n	8000dd2 <__udivmoddi4+0x19a>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e749      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eee:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef2:	443d      	add	r5, r7
 8000ef4:	e713      	b.n	8000d1e <__udivmoddi4+0xe6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	e724      	b.n	8000d46 <__udivmoddi4+0x10e>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000f10:	4b9f      	ldr	r3, [pc, #636]	; (8001190 <dwt_initialise+0x290>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000f18:	4b9d      	ldr	r3, [pc, #628]	; (8001190 <dwt_initialise+0x290>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000f20:	4b9b      	ldr	r3, [pc, #620]	; (8001190 <dwt_initialise+0x290>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2200      	movs	r2, #0
 8000f26:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8000f28:	4b99      	ldr	r3, [pc, #612]	; (8001190 <dwt_initialise+0x290>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8000f30:	4b97      	ldr	r3, [pc, #604]	; (8001190 <dwt_initialise+0x290>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8000f38:	4b95      	ldr	r3, [pc, #596]	; (8001190 <dwt_initialise+0x290>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8000f40:	4b93      	ldr	r3, [pc, #588]	; (8001190 <dwt_initialise+0x290>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8000f48:	f000 f926 	bl	8001198 <dwt_readdevid>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a91      	ldr	r2, [pc, #580]	; (8001194 <dwt_initialise+0x294>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d002      	beq.n	8000f5a <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e115      	b.n	8001186 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8000f64:	f000 fe56 	bl	8001c14 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <dwt_initialise+0x7c>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fce9 	bl	8001954 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000f82:	2204      	movs	r2, #4
 8000f84:	2100      	movs	r1, #0
 8000f86:	2024      	movs	r0, #36	; 0x24
 8000f88:	f000 fc12 	bl	80017b0 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f000 fc60 	bl	800185c <_dwt_otpread>
 8000f9c:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d01f      	beq.n	8000fe6 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	2112      	movs	r1, #18
 8000faa:	202d      	movs	r0, #45	; 0x2d
 8000fac:	f000 fc00 	bl	80017b0 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000fb0:	4b77      	ldr	r3, [pc, #476]	; (8001190 <dwt_initialise+0x290>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	8ada      	ldrh	r2, [r3, #22]
 8000fb6:	4b76      	ldr	r3, [pc, #472]	; (8001190 <dwt_initialise+0x290>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	82da      	strh	r2, [r3, #22]
 8000fc2:	e010      	b.n	8000fe6 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000fc4:	2130      	movs	r1, #48	; 0x30
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f000 fb9b 	bl	8001702 <dwt_read32bitoffsetreg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000fd2:	d008      	beq.n	8000fe6 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000fd4:	4b6e      	ldr	r3, [pc, #440]	; (8001190 <dwt_initialise+0x290>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	8ada      	ldrh	r2, [r3, #22]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <dwt_initialise+0x290>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d009      	beq.n	8001004 <dwt_initialise+0x104>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d011      	beq.n	800101e <dwt_initialise+0x11e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00c      	beq.n	800101e <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8001004:	201e      	movs	r0, #30
 8001006:	f000 fc29 	bl	800185c <_dwt_otpread>
 800100a:	4603      	mov	r3, r0
 800100c:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800100e:	8afb      	ldrh	r3, [r7, #22]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <dwt_initialise+0x290>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	72da      	strb	r2, [r3, #11]
 800101c:	e003      	b.n	8001026 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800101e:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <dwt_initialise+0x290>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 800103a:	2310      	movs	r3, #16
 800103c:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800103e:	8afb      	ldrh	r3, [r7, #22]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fe0c 	bl	8001c60 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8001052:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <dwt_initialise+0x290>)
 8001054:	681c      	ldr	r4, [r3, #0]
 8001056:	2006      	movs	r0, #6
 8001058:	f000 fc00 	bl	800185c <_dwt_otpread>
 800105c:	4603      	mov	r3, r0
 800105e:	6023      	str	r3, [r4, #0]
 8001060:	e003      	b.n	800106a <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <dwt_initialise+0x290>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <dwt_initialise+0x290>)
 8001076:	681c      	ldr	r4, [r3, #0]
 8001078:	2007      	movs	r0, #7
 800107a:	f000 fbef 	bl	800185c <_dwt_otpread>
 800107e:	4603      	mov	r3, r0
 8001080:	6063      	str	r3, [r4, #4]
 8001082:	e003      	b.n	800108c <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8001084:	4b42      	ldr	r3, [pc, #264]	; (8001190 <dwt_initialise+0x290>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8001096:	2008      	movs	r0, #8
 8001098:	f000 fbe0 	bl	800185c <_dwt_otpread>
 800109c:	4602      	mov	r2, r0
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <dwt_initialise+0x290>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	721a      	strb	r2, [r3, #8]
 80010a6:	e003      	b.n	80010b0 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <dwt_initialise+0x290>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80010ba:	2009      	movs	r0, #9
 80010bc:	f000 fbce 	bl	800185c <_dwt_otpread>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <dwt_initialise+0x290>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	725a      	strb	r2, [r3, #9]
 80010ca:	e003      	b.n	80010d4 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <dwt_initialise+0x290>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d121      	bne.n	8001122 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80010e8:	f000 fc05 	bl	80018f6 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <dwt_initialise+0x290>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	8ada      	ldrh	r2, [r3, #22]
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <dwt_initialise+0x290>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010fa:	b292      	uxth	r2, r2
 80010fc:	82da      	strh	r2, [r3, #22]
 80010fe:	e01e      	b.n	800113e <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8001100:	2105      	movs	r1, #5
 8001102:	2036      	movs	r0, #54	; 0x36
 8001104:	f000 fb24 	bl	8001750 <dwt_read16bitoffsetreg>
 8001108:	4603      	mov	r3, r0
 800110a:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001112:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	461a      	mov	r2, r3
 8001118:	2105      	movs	r1, #5
 800111a:	2036      	movs	r0, #54	; 0x36
 800111c:	f000 fb5b 	bl	80017d6 <dwt_write16bitoffsetreg>
 8001120:	e00d      	b.n	800113e <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d108      	bne.n	800113e <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <dwt_initialise+0x290>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	8ada      	ldrh	r2, [r3, #22]
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <dwt_initialise+0x290>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800113a:	b292      	uxth	r2, r2
 800113c:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fc08 	bl	8001954 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8001144:	2200      	movs	r2, #0
 8001146:	210a      	movs	r1, #10
 8001148:	202c      	movs	r0, #44	; 0x2c
 800114a:	f000 fb31 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <dwt_initialise+0x290>)
 8001150:	681c      	ldr	r4, [r3, #0]
 8001152:	2100      	movs	r1, #0
 8001154:	2004      	movs	r0, #4
 8001156:	f000 fad4 	bl	8001702 <dwt_read32bitoffsetreg>
 800115a:	4603      	mov	r3, r0
 800115c:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <dwt_initialise+0x290>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <dwt_initialise+0x290>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <dwt_initialise+0x290>)
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	2100      	movs	r1, #0
 800117a:	2008      	movs	r0, #8
 800117c:	f000 fac1 	bl	8001702 <dwt_read32bitoffsetreg>
 8001180:	4603      	mov	r3, r0
 8001182:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001184:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000
 8001194:	deca0130 	.word	0xdeca0130

08001198 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800119c:	2100      	movs	r1, #0
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 faaf 	bl	8001702 <dwt_read32bitoffsetreg>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	795b      	ldrb	r3, [r3, #5]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <dwt_configure+0x2a4>)
 80011ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011ce:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80011d8:	7cfb      	ldrb	r3, [r7, #19]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d002      	beq.n	80011e4 <dwt_configure+0x38>
 80011de:	7cfb      	ldrb	r3, [r7, #19]
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d101      	bne.n	80011e8 <dwt_configure+0x3c>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <dwt_configure+0x3e>
 80011e8:	2300      	movs	r3, #0
 80011ea:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	79db      	ldrb	r3, [r3, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80011f4:	4b97      	ldr	r3, [pc, #604]	; (8001454 <dwt_configure+0x2a8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	4b96      	ldr	r3, [pc, #600]	; (8001454 <dwt_configure+0x2a8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001202:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8001204:	8abb      	ldrh	r3, [r7, #20]
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	82bb      	strh	r3, [r7, #20]
 800120a:	e007      	b.n	800121c <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800120c:	4b91      	ldr	r3, [pc, #580]	; (8001454 <dwt_configure+0x2a8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	4b90      	ldr	r3, [pc, #576]	; (8001454 <dwt_configure+0x2a8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800121a:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 800121c:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <dwt_configure+0x2a8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	7a12      	ldrb	r2, [r2, #8]
 8001224:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8001226:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <dwt_configure+0x2a8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	4b89      	ldr	r3, [pc, #548]	; (8001454 <dwt_configure+0x2a8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001234:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001236:	4b87      	ldr	r3, [pc, #540]	; (8001454 <dwt_configure+0x2a8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6919      	ldr	r1, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7a1b      	ldrb	r3, [r3, #8]
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001246:	4b83      	ldr	r3, [pc, #524]	; (8001454 <dwt_configure+0x2a8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800124e:	4b81      	ldr	r3, [pc, #516]	; (8001454 <dwt_configure+0x2a8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	461a      	mov	r2, r3
 8001256:	2100      	movs	r1, #0
 8001258:	2004      	movs	r0, #4
 800125a:	f000 fad8 	bl	800180e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800125e:	8abb      	ldrh	r3, [r7, #20]
 8001260:	461a      	mov	r2, r3
 8001262:	f642 0104 	movw	r1, #10244	; 0x2804
 8001266:	202e      	movs	r0, #46	; 0x2e
 8001268:	f000 fab5 	bl	80017d6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 800126c:	7cbb      	ldrb	r3, [r7, #18]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fb21 	bl	80018b6 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	4a78      	ldr	r2, [pc, #480]	; (8001458 <dwt_configure+0x2ac>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	461a      	mov	r2, r3
 800127c:	4b77      	ldr	r3, [pc, #476]	; (800145c <dwt_configure+0x2b0>)
 800127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001282:	461a      	mov	r2, r3
 8001284:	2107      	movs	r1, #7
 8001286:	202b      	movs	r0, #43	; 0x2b
 8001288:	f000 fac1 	bl	800180e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	4a72      	ldr	r2, [pc, #456]	; (8001458 <dwt_configure+0x2ac>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	461a      	mov	r2, r3
 8001294:	4b72      	ldr	r3, [pc, #456]	; (8001460 <dwt_configure+0x2b4>)
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	461a      	mov	r2, r3
 800129a:	210b      	movs	r1, #11
 800129c:	202b      	movs	r0, #43	; 0x2b
 800129e:	f000 fa87 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80012a2:	7c7b      	ldrb	r3, [r7, #17]
 80012a4:	4a6f      	ldr	r2, [pc, #444]	; (8001464 <dwt_configure+0x2b8>)
 80012a6:	5cd3      	ldrb	r3, [r2, r3]
 80012a8:	461a      	mov	r2, r3
 80012aa:	210b      	movs	r1, #11
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f000 fa7f 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80012b2:	7cfb      	ldrb	r3, [r7, #19]
 80012b4:	4a68      	ldr	r2, [pc, #416]	; (8001458 <dwt_configure+0x2ac>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <dwt_configure+0x2bc>)
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	461a      	mov	r2, r3
 80012c2:	210c      	movs	r1, #12
 80012c4:	2028      	movs	r0, #40	; 0x28
 80012c6:	f000 faa2 	bl	800180e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	79db      	ldrb	r3, [r3, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	799b      	ldrb	r3, [r3, #6]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <dwt_configure+0x2c0>)
 80012d8:	0043      	lsls	r3, r0, #1
 80012da:	440b      	add	r3, r1
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2102      	movs	r1, #2
 80012e4:	2027      	movs	r0, #39	; 0x27
 80012e6:	f000 fa76 	bl	80017d6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80012ea:	7cbb      	ldrb	r3, [r7, #18]
 80012ec:	4a60      	ldr	r2, [pc, #384]	; (8001470 <dwt_configure+0x2c4>)
 80012ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f2:	461a      	mov	r2, r3
 80012f4:	2104      	movs	r1, #4
 80012f6:	2027      	movs	r0, #39	; 0x27
 80012f8:	f000 fa6d 	bl	80017d6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	79db      	ldrb	r3, [r3, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8001304:	2264      	movs	r2, #100	; 0x64
 8001306:	2106      	movs	r1, #6
 8001308:	2027      	movs	r0, #39	; 0x27
 800130a:	f000 fa64 	bl	80017d6 <dwt_write16bitoffsetreg>
 800130e:	e018      	b.n	8001342 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d10a      	bne.n	800132e <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001318:	2210      	movs	r2, #16
 800131a:	2106      	movs	r1, #6
 800131c:	2027      	movs	r0, #39	; 0x27
 800131e:	f000 fa5a 	bl	80017d6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8001322:	2210      	movs	r2, #16
 8001324:	2126      	movs	r1, #38	; 0x26
 8001326:	2027      	movs	r0, #39	; 0x27
 8001328:	f000 fa42 	bl	80017b0 <dwt_write8bitoffsetreg>
 800132c:	e009      	b.n	8001342 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800132e:	2220      	movs	r2, #32
 8001330:	2106      	movs	r1, #6
 8001332:	2027      	movs	r0, #39	; 0x27
 8001334:	f000 fa4f 	bl	80017d6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001338:	2228      	movs	r2, #40	; 0x28
 800133a:	2126      	movs	r1, #38	; 0x26
 800133c:	2027      	movs	r0, #39	; 0x27
 800133e:	f000 fa37 	bl	80017b0 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8001342:	7cbb      	ldrb	r3, [r7, #18]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	78d2      	ldrb	r2, [r2, #3]
 8001348:	4611      	mov	r1, r2
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <dwt_configure+0x2c8>)
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	461a      	mov	r2, r3
 8001356:	2108      	movs	r1, #8
 8001358:	2027      	movs	r0, #39	; 0x27
 800135a:	f000 fa58 	bl	800180e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	895b      	ldrh	r3, [r3, #10]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d103      	bne.n	800136e <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f241 0241 	movw	r2, #4161	; 0x1041
 800136c:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	895b      	ldrh	r3, [r3, #10]
 8001372:	461a      	mov	r2, r3
 8001374:	2120      	movs	r1, #32
 8001376:	2027      	movs	r0, #39	; 0x27
 8001378:	f000 fa2d 	bl	80017d6 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <dwt_configure+0x2cc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	210c      	movs	r1, #12
 8001384:	2023      	movs	r0, #35	; 0x23
 8001386:	f000 fa42 	bl	800180e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 800138a:	7cbb      	ldrb	r3, [r7, #18]
 800138c:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <dwt_configure+0x2cc>)
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	461a      	mov	r2, r3
 8001396:	2104      	movs	r1, #4
 8001398:	2023      	movs	r0, #35	; 0x23
 800139a:	f000 fa1c 	bl	80017d6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	799b      	ldrb	r3, [r3, #6]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	79db      	ldrb	r3, [r3, #7]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <dwt_configure+0x2d0>)
 80013ae:	5c9b      	ldrb	r3, [r3, r2]
 80013b0:	461a      	mov	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	2021      	movs	r0, #33	; 0x21
 80013b6:	f000 f9fb 	bl	80017b0 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80013ba:	2303      	movs	r3, #3
 80013bc:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80013be:	2301      	movs	r3, #1
 80013c0:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80013ce:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	049b      	lsls	r3, r3, #18
 80013d6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80013da:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	051b      	lsls	r3, r3, #20
 80013e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80013e4:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80013e6:	7dbb      	ldrb	r3, [r7, #22]
 80013e8:	045b      	lsls	r3, r3, #17
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80013ee:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	791b      	ldrb	r3, [r3, #4]
 80013f4:	059b      	lsls	r3, r3, #22
 80013f6:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80013fa:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	795b      	ldrb	r3, [r3, #5]
 8001400:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	2100      	movs	r1, #0
 800140a:	201f      	movs	r0, #31
 800140c:	f000 f9ff 	bl	800180e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	789a      	ldrb	r2, [r3, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	785b      	ldrb	r3, [r3, #1]
 8001418:	4313      	orrs	r3, r2
 800141a:	b2db      	uxtb	r3, r3
 800141c:	0419      	lsls	r1, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	79db      	ldrb	r3, [r3, #7]
 8001422:	035a      	lsls	r2, r3, #13
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <dwt_configure+0x2a8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <dwt_configure+0x2a8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	461a      	mov	r2, r3
 8001434:	2100      	movs	r1, #0
 8001436:	2008      	movs	r0, #8
 8001438:	f000 f9e9 	bl	800180e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800143c:	2242      	movs	r2, #66	; 0x42
 800143e:	2100      	movs	r1, #0
 8001440:	200d      	movs	r0, #13
 8001442:	f000 f9b5 	bl	80017b0 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	0800adc8 	.word	0x0800adc8
 8001454:	20000000 	.word	0x20000000
 8001458:	0800ad48 	.word	0x0800ad48
 800145c:	0800ad68 	.word	0x0800ad68
 8001460:	0800ad80 	.word	0x0800ad80
 8001464:	0800ad88 	.word	0x0800ad88
 8001468:	0800ad50 	.word	0x0800ad50
 800146c:	0800ad98 	.word	0x0800ad98
 8001470:	0800ada4 	.word	0x0800ada4
 8001474:	0800ada8 	.word	0x0800ada8
 8001478:	0800ad8c 	.word	0x0800ad8c
 800147c:	0800ad94 	.word	0x0800ad94

08001480 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	461a      	mov	r2, r3
 800148e:	f641 0104 	movw	r1, #6148	; 0x1804
 8001492:	202e      	movs	r0, #46	; 0x2e
 8001494:	f000 f99f 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2018      	movs	r0, #24
 80014b2:	f000 f990 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	6039      	str	r1, [r7, #0]
 80014c8:	80fb      	strh	r3, [r7, #6]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 80014ce:	88ba      	ldrh	r2, [r7, #4]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	4413      	add	r3, r2
 80014d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d8:	dc09      	bgt.n	80014ee <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3b02      	subs	r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	88b9      	ldrh	r1, [r7, #4]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2009      	movs	r0, #9
 80014e6:	f000 f857 	bl	8001598 <dwt_writetodevice>
        return DWT_SUCCESS;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e001      	b.n	80014f2 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	603a      	str	r2, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	460b      	mov	r3, r1
 800150a:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <dwt_writetxfctrl+0x3c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	431a      	orrs	r2, r3
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	059b      	lsls	r3, r3, #22
 800151a:	431a      	orrs	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	03db      	lsls	r3, r3, #15
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	2008      	movs	r0, #8
 800152a:	f000 f970 	bl	800180e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000

0800153c <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	8839      	ldrh	r1, [r7, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2011      	movs	r0, #17
 8001554:	f000 f87c 	bl	8001650 <dwt_readfromdevice>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2205      	movs	r2, #5
 800156c:	2100      	movs	r1, #0
 800156e:	2017      	movs	r0, #23
 8001570:	f000 f86e 	bl	8001650 <dwt_readfromdevice>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2205      	movs	r2, #5
 8001588:	2100      	movs	r1, #0
 800158a:	2015      	movs	r0, #21
 800158c:	f000 f860 	bl	8001650 <dwt_readfromdevice>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4603      	mov	r3, r0
 80015a4:	81fb      	strh	r3, [r7, #14]
 80015a6:	460b      	mov	r3, r1
 80015a8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80015ae:	89bb      	ldrh	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	1c59      	adds	r1, r3, #1
 80015bc:	6179      	str	r1, [r7, #20]
 80015be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f107 0118 	add.w	r1, r7, #24
 80015c8:	440b      	add	r3, r1
 80015ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 80015ce:	e033      	b.n	8001638 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	6179      	str	r1, [r7, #20]
 80015da:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f107 0118 	add.w	r1, r7, #24
 80015e4:	440b      	add	r3, r1
 80015e6:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80015ea:	89bb      	ldrh	r3, [r7, #12]
 80015ec:	2b7f      	cmp	r3, #127	; 0x7f
 80015ee:	d80a      	bhi.n	8001606 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	617a      	str	r2, [r7, #20]
 80015f6:	89ba      	ldrh	r2, [r7, #12]
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f107 0118 	add.w	r1, r7, #24
 80015fe:	440b      	add	r3, r1
 8001600:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001604:	e018      	b.n	8001638 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	6179      	str	r1, [r7, #20]
 8001610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	f107 0118 	add.w	r1, r7, #24
 800161a:	440b      	add	r3, r1
 800161c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001620:	89bb      	ldrh	r3, [r7, #12]
 8001622:	09db      	lsrs	r3, r3, #7
 8001624:	b299      	uxth	r1, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	617a      	str	r2, [r7, #20]
 800162c:	b2ca      	uxtb	r2, r1
 800162e:	f107 0118 	add.w	r1, r7, #24
 8001632:	440b      	add	r3, r1
 8001634:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	b298      	uxth	r0, r3
 800163c:	f107 0110 	add.w	r1, r7, #16
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f000 fb4e 	bl	8001ce4 <writetospi>
} // end dwt_writetodevice()
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4603      	mov	r3, r0
 800165c:	81fb      	strh	r3, [r7, #14]
 800165e:	460b      	mov	r3, r1
 8001660:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001666:	89bb      	ldrh	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	617a      	str	r2, [r7, #20]
 8001672:	89fa      	ldrh	r2, [r7, #14]
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f107 0118 	add.w	r1, r7, #24
 800167a:	440b      	add	r3, r1
 800167c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001680:	e033      	b.n	80016ea <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	1c59      	adds	r1, r3, #1
 800168a:	6179      	str	r1, [r7, #20]
 800168c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f107 0118 	add.w	r1, r7, #24
 8001696:	440b      	add	r3, r1
 8001698:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	2b7f      	cmp	r3, #127	; 0x7f
 80016a0:	d80a      	bhi.n	80016b8 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	617a      	str	r2, [r7, #20]
 80016a8:	89ba      	ldrh	r2, [r7, #12]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f107 0118 	add.w	r1, r7, #24
 80016b0:	440b      	add	r3, r1
 80016b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80016b6:	e018      	b.n	80016ea <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	6179      	str	r1, [r7, #20]
 80016c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f107 0118 	add.w	r1, r7, #24
 80016cc:	440b      	add	r3, r1
 80016ce:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	09db      	lsrs	r3, r3, #7
 80016d6:	b299      	uxth	r1, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	617a      	str	r2, [r7, #20]
 80016de:	b2ca      	uxtb	r2, r1
 80016e0:	f107 0118 	add.w	r1, r7, #24
 80016e4:	440b      	add	r3, r1
 80016e6:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	b298      	uxth	r0, r3
 80016ee:	f107 0110 	add.w	r1, r7, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	f000 fb29 	bl	8001d4c <readfromspi>
} // end dwt_readfromdevice()
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	b298      	uxth	r0, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b299      	uxth	r1, r3
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	f7ff ff97 	bl	8001650 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001722:	2303      	movs	r3, #3
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e00b      	b.n	8001740 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	f107 010c 	add.w	r1, r7, #12
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	440a      	add	r2, r1
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3b01      	subs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	daf0      	bge.n	8001728 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8001746:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800175a:	2300      	movs	r3, #0
 800175c:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	b298      	uxth	r0, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b299      	uxth	r1, r3
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2202      	movs	r2, #2
 800176c:	f7ff ff70 	bl	8001650 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	b29b      	uxth	r3, r3
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b29a      	uxth	r2, r3
 8001778:	7b3b      	ldrb	r3, [r7, #12]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001780:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b298      	uxth	r0, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b299      	uxth	r1, r3
 800179c:	f107 030f 	add.w	r3, r7, #15
 80017a0:	2201      	movs	r2, #1
 80017a2:	f7ff ff55 	bl	8001650 <dwt_readfromdevice>

    return regval ;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	b298      	uxth	r0, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	b299      	uxth	r1, r3
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	2201      	movs	r2, #1
 80017ca:	f7ff fee5 	bl	8001598 <dwt_writetodevice>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	4613      	mov	r3, r2
 80017e2:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	b298      	uxth	r0, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	b299      	uxth	r1, r3
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2202      	movs	r2, #2
 8001802:	f7ff fec9 	bl	8001598 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e00d      	b.n	800183c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	b2d9      	uxtb	r1, r3
 8001824:	f107 0210 	add.w	r2, r7, #16
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4413      	add	r3, r2
 800182c:	460a      	mov	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b03      	cmp	r3, #3
 8001840:	ddee      	ble.n	8001820 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b298      	uxth	r0, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	b299      	uxth	r1, r3
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2204      	movs	r2, #4
 8001850:	f7ff fea2 	bl	8001598 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	461a      	mov	r2, r3
 800186a:	2104      	movs	r1, #4
 800186c:	202d      	movs	r0, #45	; 0x2d
 800186e:	f7ff ffb2 	bl	80017d6 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8001872:	2203      	movs	r2, #3
 8001874:	2106      	movs	r1, #6
 8001876:	202d      	movs	r0, #45	; 0x2d
 8001878:	f7ff ff9a 	bl	80017b0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 800187c:	2200      	movs	r2, #0
 800187e:	2106      	movs	r1, #6
 8001880:	202d      	movs	r0, #45	; 0x2d
 8001882:	f7ff ff95 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8001886:	210a      	movs	r1, #10
 8001888:	202d      	movs	r0, #45	; 0x2d
 800188a:	f7ff ff3a 	bl	8001702 <dwt_read32bitoffsetreg>
 800188e:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800189e:	2200      	movs	r2, #0
 80018a0:	2102      	movs	r1, #2
 80018a2:	202c      	movs	r0, #44	; 0x2c
 80018a4:	f7ff ff84 	bl	80017b0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80018a8:	2202      	movs	r2, #2
 80018aa:	2102      	movs	r1, #2
 80018ac:	202c      	movs	r0, #44	; 0x2c
 80018ae:	f7ff ff7f 	bl	80017b0 <dwt_write8bitoffsetreg>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80018be:	226d      	movs	r2, #109	; 0x6d
 80018c0:	f640 0106 	movw	r1, #2054	; 0x806
 80018c4:	202e      	movs	r0, #46	; 0x2e
 80018c6:	f7ff ff73 	bl	80017b0 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80018d0:	f240 6207 	movw	r2, #1543	; 0x607
 80018d4:	f641 0106 	movw	r1, #6150	; 0x1806
 80018d8:	202e      	movs	r0, #46	; 0x2e
 80018da:	f7ff ff7c 	bl	80017d6 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80018de:	e006      	b.n	80018ee <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80018e0:	f241 6207 	movw	r2, #5639	; 0x1607
 80018e4:	f641 0106 	movw	r1, #6150	; 0x1806
 80018e8:	202e      	movs	r0, #46	; 0x2e
 80018ea:	f7ff ff74 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80018fa:	200e      	movs	r0, #14
 80018fc:	f000 f82a 	bl	8001954 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8001900:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001904:	2106      	movs	r1, #6
 8001906:	202d      	movs	r0, #45	; 0x2d
 8001908:	f7ff ff65 	bl	80017d6 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800190c:	2001      	movs	r0, #1
 800190e:	f000 f9dd 	bl	8001ccc <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f81e 	bl	8001954 <_dwt_enableclocks>
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001924:	2100      	movs	r1, #0
 8001926:	201a      	movs	r0, #26
 8001928:	f7ff feeb 	bl	8001702 <dwt_read32bitoffsetreg>
 800192c:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	0d1b      	lsrs	r3, r3, #20
 8001932:	051b      	lsls	r3, r3, #20
 8001934:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	2100      	movs	r1, #0
 8001946:	201a      	movs	r0, #26
 8001948:	f7ff ff61 	bl	800180e <dwt_write32bitoffsetreg>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2202      	movs	r2, #2
 8001962:	2100      	movs	r1, #0
 8001964:	2036      	movs	r0, #54	; 0x36
 8001966:	f7ff fe73 	bl	8001650 <dwt_readfromdevice>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0e      	cmp	r3, #14
 800196e:	d876      	bhi.n	8001a5e <_dwt_enableclocks+0x10a>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <_dwt_enableclocks+0x24>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	080019c5 	.word	0x080019c5
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019db 	.word	0x080019db
 8001984:	08001a5f 	.word	0x08001a5f
 8001988:	08001a5f 	.word	0x08001a5f
 800198c:	08001a5f 	.word	0x08001a5f
 8001990:	08001a5f 	.word	0x08001a5f
 8001994:	080019f1 	.word	0x080019f1
 8001998:	08001a11 	.word	0x08001a11
 800199c:	08001a5f 	.word	0x08001a5f
 80019a0:	08001a5f 	.word	0x08001a5f
 80019a4:	08001a27 	.word	0x08001a27
 80019a8:	08001a33 	.word	0x08001a33
 80019ac:	08001a3f 	.word	0x08001a3f
 80019b0:	08001a55 	.word	0x08001a55
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80019b4:	2300      	movs	r3, #0
 80019b6:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80019b8:	7b7b      	ldrb	r3, [r7, #13]
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	737b      	strb	r3, [r7, #13]
        }
        break;
 80019c2:	e04d      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	f023 0303 	bic.w	r3, r3, #3
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	b25b      	sxtb	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	733b      	strb	r3, [r7, #12]
        }
        break;
 80019d8:	e042      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 80019da:	7b3b      	ldrb	r3, [r7, #12]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	733b      	strb	r3, [r7, #12]
        }
        break;
 80019ee:	e037      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 80019f0:	7b3b      	ldrb	r3, [r7, #12]
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a0e:	e027      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001a10:	7b3b      	ldrb	r3, [r7, #12]
 8001a12:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a24:	e01c      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a30:	e016      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a3c:	e010      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001a3e:	7b3b      	ldrb	r3, [r7, #12]
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001a52:	e005      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001a54:	2301      	movs	r3, #1
 8001a56:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001a5c:	e000      	b.n	8001a60 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001a5e:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2201      	movs	r2, #1
 8001a66:	2100      	movs	r1, #0
 8001a68:	2036      	movs	r0, #54	; 0x36
 8001a6a:	f7ff fd95 	bl	8001598 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	3301      	adds	r3, #1
 8001a74:	2201      	movs	r2, #1
 8001a76:	2101      	movs	r1, #1
 8001a78:	2036      	movs	r0, #54	; 0x36
 8001a7a:	f7ff fd8d 	bl	8001598 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop

08001a88 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff ff61 	bl	8001954 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001a92:	2200      	movs	r2, #0
 8001a94:	2104      	movs	r1, #4
 8001a96:	2036      	movs	r0, #54	; 0x36
 8001a98:	f7ff fe9d 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	200a      	movs	r0, #10
 8001aae:	f7ff feae 	bl	800180e <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <dwt_starttx+0x98>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d020      	beq.n	8001b34 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	f043 0306 	orr.w	r3, r3, #6
 8001af8:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	461a      	mov	r2, r3
 8001afe:	2100      	movs	r1, #0
 8001b00:	200d      	movs	r0, #13
 8001b02:	f7ff fe55 	bl	80017b0 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001b06:	2103      	movs	r1, #3
 8001b08:	200f      	movs	r0, #15
 8001b0a:	f7ff fe21 	bl	8001750 <dwt_read16bitoffsetreg>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001b12:	893b      	ldrh	r3, [r7, #8]
 8001b14:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	e012      	b.n	8001b48 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	2100      	movs	r1, #0
 8001b26:	200d      	movs	r0, #13
 8001b28:	f7ff fe42 	bl	80017b0 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	e009      	b.n	8001b48 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	200d      	movs	r0, #13
 8001b44:	f7ff fe34 	bl	80017b0 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001b48:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001b62:	2103      	movs	r1, #3
 8001b64:	2004      	movs	r0, #4
 8001b66:	f7ff fe10 	bl	800178a <dwt_read8bitoffsetreg>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d018      	beq.n	8001ba6 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	461a      	mov	r2, r3
 8001b78:	2100      	movs	r1, #0
 8001b7a:	200c      	movs	r0, #12
 8001b7c:	f7ff fe2b 	bl	80017d6 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <dwt_setrxtimeout+0x7c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <dwt_setrxtimeout+0x7c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b96:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	2004      	movs	r0, #4
 8001ba0:	f7ff fe06 	bl	80017b0 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001ba4:	e011      	b.n	8001bca <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	f023 0310 	bic.w	r3, r3, #16
 8001bac:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <dwt_setrxtimeout+0x7c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <dwt_setrxtimeout+0x7c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001bbc:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f7ff fdf3 	bl	80017b0 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2124      	movs	r1, #36	; 0x24
 8001be8:	2027      	movs	r0, #39	; 0x27
 8001bea:	f7ff fdf4 	bl	80017d6 <dwt_write16bitoffsetreg>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8001bfa:	22e0      	movs	r2, #224	; 0xe0
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	2036      	movs	r0, #54	; 0x36
 8001c00:	f7ff fdd6 	bl	80017b0 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001c04:	22f0      	movs	r2, #240	; 0xf0
 8001c06:	2103      	movs	r1, #3
 8001c08:	2036      	movs	r0, #54	; 0x36
 8001c0a:	f7ff fdd1 	bl	80017b0 <dwt_write8bitoffsetreg>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001c18:	f7ff ff36 	bl	8001a88 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	202c      	movs	r0, #44	; 0x2c
 8001c22:	f7ff fdd8 	bl	80017d6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2106      	movs	r1, #6
 8001c2a:	202c      	movs	r0, #44	; 0x2c
 8001c2c:	f7ff fdc0 	bl	80017b0 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001c30:	f7ff fe33 	bl	800189a <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2103      	movs	r1, #3
 8001c38:	2036      	movs	r0, #54	; 0x36
 8001c3a:	f7ff fdb9 	bl	80017b0 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f000 f844 	bl	8001ccc <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001c44:	22f0      	movs	r2, #240	; 0xf0
 8001c46:	2103      	movs	r1, #3
 8001c48:	2036      	movs	r0, #54	; 0x36
 8001c4a:	f7ff fdb1 	bl	80017b0 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001c4e:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <dwt_softreset+0x48>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	755a      	strb	r2, [r3, #21]
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000

08001c60 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	210e      	movs	r1, #14
 8001c82:	202b      	movs	r0, #43	; 0x2b
 8001c84:	f7ff fd94 	bl	80017b0 <dwt_write8bitoffsetreg>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001c96:	f000 f98d 	bl	8001fb4 <port_GetEXT_IRQStatus>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	607b      	str	r3, [r7, #4]

	if(s) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001ca4:	f000 f978 	bl	8001f98 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001cc0:	f000 f971 	bl	8001fa6 <port_EnableEXT_IRQ>
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8c3 	bl	8001e60 <Sleep>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001ce4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001ce8:	4683      	mov	fp, r0
 8001cea:	468a      	mov	sl, r1
 8001cec:	4691      	mov	r9, r2
 8001cee:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001cf0:	f7ff ffce 	bl	8001c90 <decamutexon>
 8001cf4:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001cf6:	4d13      	ldr	r5, [pc, #76]	; (8001d44 <writetospi+0x60>)
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f003 fc46 	bl	800558a <HAL_SPI_GetState>
 8001cfe:	2801      	cmp	r0, #1
 8001d00:	4604      	mov	r4, r0
 8001d02:	d1f9      	bne.n	8001cf8 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001d04:	2200      	movs	r2, #0
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <writetospi+0x64>)
 8001d0a:	f001 fdc3 	bl	8003894 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001d0e:	465a      	mov	r2, fp
 8001d10:	4651      	mov	r1, sl
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <writetospi+0x60>)
 8001d18:	f003 f9eb 	bl	80050f2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	4641      	mov	r1, r8
 8001d22:	fa1f f289 	uxth.w	r2, r9
 8001d26:	4807      	ldr	r0, [pc, #28]	; (8001d44 <writetospi+0x60>)
 8001d28:	f003 f9e3 	bl	80050f2 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <writetospi+0x64>)
 8001d32:	f001 fdaf 	bl	8003894 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001d36:	4630      	mov	r0, r6
 8001d38:	f7ff ffbb 	bl	8001cb2 <decamutexoff>

    return 0;
} // end writetospi()
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001d42:	bf00      	nop
 8001d44:	20000734 	.word	0x20000734
 8001d48:	40020400 	.word	0x40020400

08001d4c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001d4c:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001d50:	4681      	mov	r9, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	4690      	mov	r8, r2
 8001d56:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001d58:	f7ff ff9a 	bl	8001c90 <decamutexon>
 8001d5c:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001d5e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001ddc <readfromspi+0x90>
 8001d62:	4650      	mov	r0, sl
 8001d64:	f003 fc11 	bl	800558a <HAL_SPI_GetState>
 8001d68:	2801      	cmp	r0, #1
 8001d6a:	d1fa      	bne.n	8001d62 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <readfromspi+0x8c>)
 8001d72:	f001 fd8f 	bl	8003894 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001d76:	f1b9 0f00 	cmp.w	r9, #0
 8001d7a:	d00c      	beq.n	8001d96 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001d7c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001ddc <readfromspi+0x90>
 8001d80:	44a1      	add	r9, r4
 8001d82:	2201      	movs	r2, #1
 8001d84:	4621      	mov	r1, r4
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	4414      	add	r4, r2
 8001d8c:	4650      	mov	r0, sl
 8001d8e:	f003 f9b0 	bl	80050f2 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001d92:	454c      	cmp	r4, r9
 8001d94:	d1f5      	bne.n	8001d82 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001d96:	f1b8 0f00 	cmp.w	r8, #0
 8001d9a:	d012      	beq.n	8001dc2 <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001d9c:	2400      	movs	r4, #0
 8001d9e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001ddc <readfromspi+0x90>
 8001da2:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001da6:	f8dc 2000 	ldr.w	r2, [ip]
 8001daa:	6891      	ldr	r1, [r2, #8]
 8001dac:	0789      	lsls	r1, r1, #30
 8001dae:	d5fc      	bpl.n	8001daa <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001db0:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001db2:	6891      	ldr	r1, [r2, #8]
 8001db4:	07cb      	lsls	r3, r1, #31
 8001db6:	d5fc      	bpl.n	8001db2 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001db8:	68d3      	ldr	r3, [r2, #12]
 8001dba:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001dbe:	4285      	cmp	r5, r0
 8001dc0:	d1f1      	bne.n	8001da6 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <readfromspi+0x8c>)
 8001dc8:	f001 fd64 	bl	8003894 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f7ff ff70 	bl	8001cb2 <decamutexoff>

    return 0;
} // end readfromspi()
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	20000734 	.word	0x20000734

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4906      	ldr	r1, [pc, #24]	; (8001e14 <__NVIC_EnableIRQ+0x34>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db12      	blt.n	8001e50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	490a      	ldr	r1, [pc, #40]	; (8001e5c <__NVIC_DisableIRQ+0x44>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	3320      	adds	r3, #32
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e44:	f3bf 8f4f 	dsb	sy
}
 8001e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e4a:	f3bf 8f6f 	isb	sy
}
 8001e4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f001 f9a3 	bl	80031b4 <HAL_Delay>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <EXTI_GetITEnStatus+0x34>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001eba:	2311      	movs	r3, #17
 8001ebc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <reset_DW1000+0x40>)
 8001ec8:	f001 fb54 	bl	8003574 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <reset_DW1000+0x40>)
 8001ed2:	f001 fcdf 	bl	8003894 <HAL_GPIO_WritePin>

    Sleep(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff ffc2 	bl	8001e60 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 f809 	bl	8001ef4 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7ff ffbc 	bl	8001e60 <Sleep>
}
 8001ee8:	bf00      	nop
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d015      	beq.n	8001f2e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001f02:	2301      	movs	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f0a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	4619      	mov	r1, r3
 8001f16:	4813      	ldr	r0, [pc, #76]	; (8001f64 <setup_DW1000RSTnIRQ+0x70>)
 8001f18:	f001 fb2c 	bl	8003574 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001f1c:	2006      	movs	r0, #6
 8001f1e:	f001 fa82 	bl	8003426 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2105      	movs	r1, #5
 8001f26:	2006      	movs	r0, #6
 8001f28:	f001 fa61 	bl	80033ee <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001f2c:	e015      	b.n	8001f5a <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001f2e:	2006      	movs	r0, #6
 8001f30:	f001 fa87 	bl	8003442 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001f34:	2301      	movs	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f38:	2311      	movs	r3, #17
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <setup_DW1000RSTnIRQ+0x70>)
 8001f4c:	f001 fb12 	bl	8003574 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2101      	movs	r1, #1
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <setup_DW1000RSTnIRQ+0x70>)
 8001f56:	f001 fc9d 	bl	8003894 <HAL_GPIO_WritePin>
}
 8001f5a:	bf00      	nop
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40020000 	.word	0x40020000

08001f68 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <port_set_dw1000_slowrate+0x14>)
 8001f6e:	2220      	movs	r2, #32
 8001f70:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001f72:	4802      	ldr	r0, [pc, #8]	; (8001f7c <port_set_dw1000_slowrate+0x14>)
 8001f74:	f003 f834 	bl	8004fe0 <HAL_SPI_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000734 	.word	0x20000734

08001f80 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <port_set_dw1000_fastrate+0x14>)
 8001f86:	2208      	movs	r2, #8
 8001f88:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001f8a:	4802      	ldr	r0, [pc, #8]	; (8001f94 <port_set_dw1000_fastrate+0x14>)
 8001f8c:	f003 f828 	bl	8004fe0 <HAL_SPI_Init>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000734 	.word	0x20000734

08001f98 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001f9c:	2017      	movs	r0, #23
 8001f9e:	f7ff ff3b 	bl	8001e18 <__NVIC_DisableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001faa:	2017      	movs	r0, #23
 8001fac:	f7ff ff18 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001fb8:	2017      	movs	r0, #23
 8001fba:	f7ff ff5d 	bl	8001e78 <EXTI_GetITEnStatus>
 8001fbe:	4603      	mov	r3, r0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fca:	f000 fa27 	bl	800241c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2178      	movs	r1, #120	; 0x78
 8001fd6:	485b      	ldr	r0, [pc, #364]	; (8002144 <SSD1306_Init+0x180>)
 8001fd8:	f001 feb6 	bl	8003d48 <HAL_I2C_IsDeviceReady>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e0a9      	b.n	800213a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001fe6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001fea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fec:	e002      	b.n	8001ff4 <SSD1306_Init+0x30>
		p--;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ffa:	22ae      	movs	r2, #174	; 0xae
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2078      	movs	r0, #120	; 0x78
 8002000:	f000 fa68 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002004:	2220      	movs	r2, #32
 8002006:	2100      	movs	r1, #0
 8002008:	2078      	movs	r0, #120	; 0x78
 800200a:	f000 fa63 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800200e:	2210      	movs	r2, #16
 8002010:	2100      	movs	r1, #0
 8002012:	2078      	movs	r0, #120	; 0x78
 8002014:	f000 fa5e 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002018:	22b0      	movs	r2, #176	; 0xb0
 800201a:	2100      	movs	r1, #0
 800201c:	2078      	movs	r0, #120	; 0x78
 800201e:	f000 fa59 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002022:	22c8      	movs	r2, #200	; 0xc8
 8002024:	2100      	movs	r1, #0
 8002026:	2078      	movs	r0, #120	; 0x78
 8002028:	f000 fa54 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2078      	movs	r0, #120	; 0x78
 8002032:	f000 fa4f 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002036:	2210      	movs	r2, #16
 8002038:	2100      	movs	r1, #0
 800203a:	2078      	movs	r0, #120	; 0x78
 800203c:	f000 fa4a 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002040:	2240      	movs	r2, #64	; 0x40
 8002042:	2100      	movs	r1, #0
 8002044:	2078      	movs	r0, #120	; 0x78
 8002046:	f000 fa45 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800204a:	2281      	movs	r2, #129	; 0x81
 800204c:	2100      	movs	r1, #0
 800204e:	2078      	movs	r0, #120	; 0x78
 8002050:	f000 fa40 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	2100      	movs	r1, #0
 8002058:	2078      	movs	r0, #120	; 0x78
 800205a:	f000 fa3b 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800205e:	22a1      	movs	r2, #161	; 0xa1
 8002060:	2100      	movs	r1, #0
 8002062:	2078      	movs	r0, #120	; 0x78
 8002064:	f000 fa36 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002068:	22a6      	movs	r2, #166	; 0xa6
 800206a:	2100      	movs	r1, #0
 800206c:	2078      	movs	r0, #120	; 0x78
 800206e:	f000 fa31 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002072:	22a8      	movs	r2, #168	; 0xa8
 8002074:	2100      	movs	r1, #0
 8002076:	2078      	movs	r0, #120	; 0x78
 8002078:	f000 fa2c 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800207c:	223f      	movs	r2, #63	; 0x3f
 800207e:	2100      	movs	r1, #0
 8002080:	2078      	movs	r0, #120	; 0x78
 8002082:	f000 fa27 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002086:	22a4      	movs	r2, #164	; 0xa4
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f000 fa22 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002090:	22d3      	movs	r2, #211	; 0xd3
 8002092:	2100      	movs	r1, #0
 8002094:	2078      	movs	r0, #120	; 0x78
 8002096:	f000 fa1d 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 fa18 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80020a4:	22d5      	movs	r2, #213	; 0xd5
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 fa13 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80020ae:	22f0      	movs	r2, #240	; 0xf0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 fa0e 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020b8:	22d9      	movs	r2, #217	; 0xd9
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 fa09 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020c2:	2222      	movs	r2, #34	; 0x22
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 fa04 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020cc:	22da      	movs	r2, #218	; 0xda
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f000 f9ff 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020d6:	2212      	movs	r2, #18
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 f9fa 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020e0:	22db      	movs	r2, #219	; 0xdb
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 f9f5 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020ea:	2220      	movs	r2, #32
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 f9f0 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020f4:	228d      	movs	r2, #141	; 0x8d
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 f9eb 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020fe:	2214      	movs	r2, #20
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 f9e6 	bl	80024d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002108:	22af      	movs	r2, #175	; 0xaf
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 f9e1 	bl	80024d4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002112:	222e      	movs	r2, #46	; 0x2e
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 f9dc 	bl	80024d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800211c:	2000      	movs	r0, #0
 800211e:	f000 f843 	bl	80021a8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002122:	f000 f813 	bl	800214c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <SSD1306_Init+0x184>)
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SSD1306_Init+0x184>)
 800212e:	2200      	movs	r2, #0
 8002130:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SSD1306_Init+0x184>)
 8002134:	2201      	movs	r2, #1
 8002136:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002138:	2301      	movs	r3, #1
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200006e0 	.word	0x200006e0
 8002148:	20000694 	.word	0x20000694

0800214c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	e01d      	b.n	8002194 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3b50      	subs	r3, #80	; 0x50
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	2078      	movs	r0, #120	; 0x78
 8002164:	f000 f9b6 	bl	80024d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2078      	movs	r0, #120	; 0x78
 800216e:	f000 f9b1 	bl	80024d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002172:	2210      	movs	r2, #16
 8002174:	2100      	movs	r1, #0
 8002176:	2078      	movs	r0, #120	; 0x78
 8002178:	f000 f9ac 	bl	80024d4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <SSD1306_UpdateScreen+0x58>)
 8002182:	441a      	add	r2, r3
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	2078      	movs	r0, #120	; 0x78
 800218a:	f000 f95b 	bl	8002444 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3301      	adds	r3, #1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b07      	cmp	r3, #7
 8002198:	d9de      	bls.n	8002158 <SSD1306_UpdateScreen+0xc>
	}
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000294 	.word	0x20000294

080021a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <SSD1306_Fill+0x14>
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <SSD1306_Fill+0x16>
 80021bc:	23ff      	movs	r3, #255	; 0xff
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	4619      	mov	r1, r3
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <SSD1306_Fill+0x2c>)
 80021c6:	f004 f97d 	bl	80064c4 <memset>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000294 	.word	0x20000294

080021d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	460b      	mov	r3, r1
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	70fb      	strb	r3, [r7, #3]
	if (
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b7f      	cmp	r3, #127	; 0x7f
 80021ee:	d848      	bhi.n	8002282 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80021f0:	88bb      	ldrh	r3, [r7, #4]
 80021f2:	2b3f      	cmp	r3, #63	; 0x3f
 80021f4:	d845      	bhi.n	8002282 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <SSD1306_DrawPixel+0xb4>)
 80021f8:	791b      	ldrb	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d11a      	bne.n	8002248 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	b298      	uxth	r0, r3
 800221a:	4603      	mov	r3, r0
 800221c:	01db      	lsls	r3, r3, #7
 800221e:	4413      	add	r3, r2
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <SSD1306_DrawPixel+0xb8>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	b25a      	sxtb	r2, r3
 8002226:	88bb      	ldrh	r3, [r7, #4]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	b25b      	sxtb	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b259      	sxtb	r1, r3
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	4603      	mov	r3, r0
 800223c:	01db      	lsls	r3, r3, #7
 800223e:	4413      	add	r3, r2
 8002240:	b2c9      	uxtb	r1, r1
 8002242:	4a13      	ldr	r2, [pc, #76]	; (8002290 <SSD1306_DrawPixel+0xb8>)
 8002244:	54d1      	strb	r1, [r2, r3]
 8002246:	e01d      	b.n	8002284 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	b298      	uxth	r0, r3
 8002250:	4603      	mov	r3, r0
 8002252:	01db      	lsls	r3, r3, #7
 8002254:	4413      	add	r3, r2
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <SSD1306_DrawPixel+0xb8>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	b25a      	sxtb	r2, r3
 800225c:	88bb      	ldrh	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	b25b      	sxtb	r3, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	b25b      	sxtb	r3, r3
 800226e:	4013      	ands	r3, r2
 8002270:	b259      	sxtb	r1, r3
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	4603      	mov	r3, r0
 8002276:	01db      	lsls	r3, r3, #7
 8002278:	4413      	add	r3, r2
 800227a:	b2c9      	uxtb	r1, r1
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <SSD1306_DrawPixel+0xb8>)
 800227e:	54d1      	strb	r1, [r2, r3]
 8002280:	e000      	b.n	8002284 <SSD1306_DrawPixel+0xac>
		return;
 8002282:	bf00      	nop
	}
}
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000694 	.word	0x20000694
 8002290:	20000294 	.word	0x20000294

08002294 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	80fb      	strh	r3, [r7, #6]
 80022a0:	4613      	mov	r3, r2
 80022a2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <SSD1306_GotoXY+0x28>)
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <SSD1306_GotoXY+0x28>)
 80022ac:	88bb      	ldrh	r3, [r7, #4]
 80022ae:	8053      	strh	r3, [r2, #2]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000694 	.word	0x20000694

080022c0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
 80022cc:	4613      	mov	r3, r2
 80022ce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022d0:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <SSD1306_Putc+0xfc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
	if (
 80022dc:	2b7f      	cmp	r3, #127	; 0x7f
 80022de:	dc07      	bgt.n	80022f0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <SSD1306_Putc+0xfc>)
 80022e2:	885b      	ldrh	r3, [r3, #2]
 80022e4:	461a      	mov	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022ec:	2b3f      	cmp	r3, #63	; 0x3f
 80022ee:	dd01      	ble.n	80022f4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e05e      	b.n	80023b2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e04b      	b.n	8002392 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	3b20      	subs	r3, #32
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	7849      	ldrb	r1, [r1, #1]
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4619      	mov	r1, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	440b      	add	r3, r1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e030      	b.n	8002380 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <SSD1306_Putc+0xfc>)
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4413      	add	r3, r2
 8002338:	b298      	uxth	r0, r3
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <SSD1306_Putc+0xfc>)
 800233c:	885a      	ldrh	r2, [r3, #2]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	b29b      	uxth	r3, r3
 8002342:	4413      	add	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	79ba      	ldrb	r2, [r7, #6]
 8002348:	4619      	mov	r1, r3
 800234a:	f7ff ff45 	bl	80021d8 <SSD1306_DrawPixel>
 800234e:	e014      	b.n	800237a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <SSD1306_Putc+0xfc>)
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4413      	add	r3, r2
 800235a:	b298      	uxth	r0, r3
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <SSD1306_Putc+0xfc>)
 800235e:	885a      	ldrh	r2, [r3, #2]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b299      	uxth	r1, r3
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	f7ff ff2f 	bl	80021d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	3301      	adds	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4293      	cmp	r3, r2
 800238a:	d3c8      	bcc.n	800231e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	461a      	mov	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4293      	cmp	r3, r2
 800239c:	d3ad      	bcc.n	80022fa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <SSD1306_Putc+0xfc>)
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <SSD1306_Putc+0xfc>)
 80023ae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000694 	.word	0x20000694

080023c0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	4613      	mov	r3, r2
 80023cc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80023ce:	e012      	b.n	80023f6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff71 	bl	80022c0 <SSD1306_Putc>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d002      	beq.n	80023f0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	e008      	b.n	8002402 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e8      	bne.n	80023d0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	781b      	ldrb	r3, [r3, #0]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff feca 	bl	80021a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002414:	f7ff fe9a 	bl	800214c <SSD1306_UpdateScreen>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <ssd1306_I2C_Init+0x24>)
 8002424:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002426:	e002      	b.n	800242e <ssd1306_I2C_Init+0x12>
		p--;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	0003d090 	.word	0x0003d090

08002444 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b0c7      	sub	sp, #284	; 0x11c
 8002448:	af02      	add	r7, sp, #8
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	4639      	mov	r1, r7
 8002450:	600a      	str	r2, [r1, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	4622      	mov	r2, r4
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	4602      	mov	r2, r0
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	460a      	mov	r2, r1
 8002464:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	1dba      	adds	r2, r7, #6
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002476:	e010      	b.n	800249a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002478:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800247c:	463a      	mov	r2, r7
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	441a      	add	r2, r3
 8002482:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002486:	3301      	adds	r3, #1
 8002488:	7811      	ldrb	r1, [r2, #0]
 800248a:	f107 020c 	add.w	r2, r7, #12
 800248e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002490:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002494:	3301      	adds	r3, #1
 8002496:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800249a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800249e:	b29b      	uxth	r3, r3
 80024a0:	1d3a      	adds	r2, r7, #4
 80024a2:	8812      	ldrh	r2, [r2, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8e7      	bhi.n	8002478 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b299      	uxth	r1, r3
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f107 020c 	add.w	r2, r7, #12
 80024ba:	200a      	movs	r0, #10
 80024bc:	9000      	str	r0, [sp, #0]
 80024be:	4804      	ldr	r0, [pc, #16]	; (80024d0 <ssd1306_I2C_WriteMulti+0x8c>)
 80024c0:	f001 fb44 	bl	8003b4c <HAL_I2C_Master_Transmit>
}
 80024c4:	bf00      	nop
 80024c6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200006e0 	.word	0x200006e0

080024d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	460b      	mov	r3, r1
 80024e0:	71bb      	strb	r3, [r7, #6]
 80024e2:	4613      	mov	r3, r2
 80024e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80024ea:	797b      	ldrb	r3, [r7, #5]
 80024ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	b299      	uxth	r1, r3
 80024f2:	f107 020c 	add.w	r2, r7, #12
 80024f6:	230a      	movs	r3, #10
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2302      	movs	r3, #2
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <ssd1306_I2C_Write+0x38>)
 80024fe:	f001 fb25 	bl	8003b4c <HAL_I2C_Master_Transmit>
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200006e0 	.word	0x200006e0

08002510 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1d39      	adds	r1, r7, #4
 8002522:	2201      	movs	r2, #1
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff4b 	bl	80023c0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800252a:	f7ff fe0f 	bl	800214c <SSD1306_UpdateScreen>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <MX_GPIO_Init+0xe4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a32      	ldr	r2, [pc, #200]	; (800261c <MX_GPIO_Init+0xe4>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <MX_GPIO_Init+0xe4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <MX_GPIO_Init+0xe4>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <MX_GPIO_Init+0xe4>)
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <MX_GPIO_Init+0xe4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <MX_GPIO_Init+0xe4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a26      	ldr	r2, [pc, #152]	; (800261c <MX_GPIO_Init+0xe4>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <MX_GPIO_Init+0xe4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <MX_GPIO_Init+0xe4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a20      	ldr	r2, [pc, #128]	; (800261c <MX_GPIO_Init+0xe4>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <MX_GPIO_Init+0xe4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2101      	movs	r1, #1
 80025b2:	481b      	ldr	r0, [pc, #108]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025b4:	f001 f96e 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	4819      	ldr	r0, [pc, #100]	; (8002624 <MX_GPIO_Init+0xec>)
 80025be:	f001 f969 	bl	8003894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 80025c2:	2301      	movs	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4811      	ldr	r0, [pc, #68]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025da:	f000 ffcb 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 80025de:	2302      	movs	r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	480b      	ldr	r0, [pc, #44]	; (8002620 <MX_GPIO_Init+0xe8>)
 80025f4:	f000 ffbe 	bl	8003574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 80025f8:	2340      	movs	r3, #64	; 0x40
 80025fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_GPIO_Init+0xec>)
 8002610:	f000 ffb0 	bl	8003574 <HAL_GPIO_Init>

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400

08002628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <MX_I2C1_Init+0x50>)
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <MX_I2C1_Init+0x54>)
 8002630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_I2C1_Init+0x50>)
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <MX_I2C1_Init+0x58>)
 8002636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_I2C1_Init+0x50>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_I2C1_Init+0x50>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_I2C1_Init+0x50>)
 8002646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800264a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <MX_I2C1_Init+0x50>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_I2C1_Init+0x50>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <MX_I2C1_Init+0x50>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_I2C1_Init+0x50>)
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <MX_I2C1_Init+0x50>)
 8002666:	f001 f92d 	bl	80038c4 <HAL_I2C_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002670:	f000 f8b0 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200006e0 	.word	0x200006e0
 800267c:	40005400 	.word	0x40005400
 8002680:	00061a80 	.word	0x00061a80

08002684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_I2C_MspInit+0x7c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d128      	bne.n	80026f8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_I2C_MspInit+0x80>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <HAL_I2C_MspInit+0x80>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	61d3      	str	r3, [r2, #28]
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_I2C_MspInit+0x80>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c4:	2312      	movs	r3, #18
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026d0:	2304      	movs	r3, #4
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	480b      	ldr	r0, [pc, #44]	; (8002708 <HAL_I2C_MspInit+0x84>)
 80026dc:	f000 ff4a 	bl	8003574 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_I2C_MspInit+0x80>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_I2C_MspInit+0x80>)
 80026e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ea:	6253      	str	r3, [r2, #36]	; 0x24
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_I2C_MspInit+0x80>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40005400 	.word	0x40005400
 8002704:	40023800 	.word	0x40023800
 8002708:	40020400 	.word	0x40020400

0800270c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f000 fce1 	bl	80030d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f000 f810 	bl	8002738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002718:	f7ff ff0e 	bl	8002538 <MX_GPIO_Init>
  MX_SPI1_Init();
 800271c:	f000 f860 	bl	80027e0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002720:	f000 fc3e 	bl	8002fa0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002724:	f7ff ff80 	bl	8002628 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff fbe3 	bl	8001ef4 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 800272e:	f7ff fc49 	bl	8001fc4 <SSD1306_Init>
  dw_main();
 8002732:	f000 f9ed 	bl	8002b10 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002736:	e7fe      	b.n	8002736 <main+0x2a>

08002738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b092      	sub	sp, #72	; 0x48
 800273c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	2234      	movs	r2, #52	; 0x34
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f003 febc 	bl	80064c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800274c:	463b      	mov	r3, r7
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <SystemClock_Config+0x98>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <SystemClock_Config+0x98>)
 8002764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002768:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800276a:	2302      	movs	r3, #2
 800276c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800276e:	2301      	movs	r3, #1
 8002770:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002772:	2310      	movs	r3, #16
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002776:	2302      	movs	r3, #2
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800277a:	2300      	movs	r3, #0
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800277e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002784:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002788:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fe62 	bl	8004458 <HAL_RCC_OscConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800279a:	f000 f81b 	bl	80027d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279e:	230f      	movs	r3, #15
 80027a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a2:	2303      	movs	r3, #3
 80027a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027b2:	463b      	mov	r3, r7
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 f97e 	bl	8004ab8 <HAL_RCC_ClockConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80027c2:	f000 f807 	bl	80027d4 <Error_Handler>
  }
}
 80027c6:	bf00      	nop
 80027c8:	3748      	adds	r7, #72	; 0x48
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40007000 	.word	0x40007000

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027dc:	e7fe      	b.n	80027dc <Error_Handler+0x8>
	...

080027e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <MX_SPI1_Init+0x64>)
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <MX_SPI1_Init+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_SPI1_Init+0x64>)
 80027ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_SPI1_Init+0x64>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_SPI1_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_SPI1_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <MX_SPI1_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_SPI1_Init+0x64>)
 800280c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_SPI1_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <MX_SPI1_Init+0x64>)
 800281a:	2200      	movs	r2, #0
 800281c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_SPI1_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <MX_SPI1_Init+0x64>)
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_SPI1_Init+0x64>)
 800282c:	220a      	movs	r2, #10
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_SPI1_Init+0x64>)
 8002832:	f002 fbd5 	bl	8004fe0 <HAL_SPI_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800283c:	f7ff ffca 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000734 	.word	0x20000734
 8002848:	40013000 	.word	0x40013000

0800284c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12f      	bne.n	80028ce <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286e:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_SPI_MspInit+0x90>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_SPI_MspInit+0x90>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800289e:	23e0      	movs	r3, #224	; 0xe0
 80028a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ae:	2305      	movs	r3, #5
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <HAL_SPI_MspInit+0x94>)
 80028ba:	f000 fe5b 	bl	8003574 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2023      	movs	r0, #35	; 0x23
 80028c4:	f000 fd93 	bl	80033ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028c8:	2023      	movs	r0, #35	; 0x23
 80028ca:	f000 fdac 	bl	8003426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40013000 	.word	0x40013000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_MspInit+0x5c>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_MspInit+0x5c>)
 80028f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028f4:	6253      	str	r3, [r2, #36]	; 0x24
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_MspInit+0x5c>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_MspInit+0x5c>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_MspInit+0x5c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_MspInit+0x5c>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_MspInit+0x5c>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MspInit+0x5c>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6253      	str	r3, [r2, #36]	; 0x24
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_MspInit+0x5c>)
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002932:	2007      	movs	r0, #7
 8002934:	f000 fd50 	bl	80033d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800

08002944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <NMI_Handler+0x4>

0800294a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <HardFault_Handler+0x4>

08002950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <MemManage_Handler+0x4>

08002956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <UsageFault_Handler+0x4>

08002962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298a:	f000 fbf7 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <SPI1_IRQHandler+0x10>)
 800299a:	f002 fced 	bl	8005378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000734 	.word	0x20000734

080029a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <USART2_IRQHandler+0x10>)
 80029ae:	f002 ffab 	bl	8005908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	2000078c 	.word	0x2000078c

080029bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return 1;
 80029c0:	2301      	movs	r3, #1
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <_kill>:

int _kill(int pid, int sig)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029d4:	f003 fd3e 	bl	8006454 <__errno>
 80029d8:	4603      	mov	r3, r0
 80029da:	2216      	movs	r2, #22
 80029dc:	601a      	str	r2, [r3, #0]
  return -1;
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_exit>:

void _exit (int status)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029f2:	f04f 31ff 	mov.w	r1, #4294967295
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffe7 	bl	80029ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80029fc:	e7fe      	b.n	80029fc <_exit+0x12>

080029fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e00a      	b.n	8002a26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a10:	f3af 8000 	nop.w
 8002a14:	4601      	mov	r1, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	60ba      	str	r2, [r7, #8]
 8002a1c:	b2ca      	uxtb	r2, r1
 8002a1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3301      	adds	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dbf0      	blt.n	8002a10 <_read+0x12>
  }

  return len;
 8002a2e:	687b      	ldr	r3, [r7, #4]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <_isatty>:

int _isatty(int file)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <_sbrk+0x5c>)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <_sbrk+0x60>)
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <_sbrk+0x64>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <_sbrk+0x68>)
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac8:	f003 fcc4 	bl	8006454 <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e009      	b.n	8002aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <_sbrk+0x64>)
 8002ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20014000 	.word	0x20014000
 8002af8:	00000400 	.word	0x00000400
 8002afc:	2000069c 	.word	0x2000069c
 8002b00:	200007e8 	.word	0x200007e8

08002b04 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8002b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
//    lcd_display_str(APP_NAME);
	ssd1306_write(buff, Font_7x10);
 8002b18:	48b2      	ldr	r0, [pc, #712]	; (8002de4 <dw_main+0x2d4>)
 8002b1a:	4bb3      	ldr	r3, [pc, #716]	; (8002de8 <dw_main+0x2d8>)
 8002b1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b20:	f7ff fcf6 	bl	8002510 <ssd1306_write>
    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002b24:	f7ff f9c4 	bl	8001eb0 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002b28:	f7ff fa1e 	bl	8001f68 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7fe f9e7 	bl	8000f00 <dwt_initialise>
 8002b32:	4603      	mov	r3, r0
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d110      	bne.n	8002b5c <dw_main+0x4c>
    {
//        lcd_display_str("INIT FAILED");
    	HAL_UART_Transmit(&huart2, "Init Failed\n", 12, 100);
 8002b3a:	2364      	movs	r3, #100	; 0x64
 8002b3c:	220c      	movs	r2, #12
 8002b3e:	49ab      	ldr	r1, [pc, #684]	; (8002dec <dw_main+0x2dc>)
 8002b40:	48ab      	ldr	r0, [pc, #684]	; (8002df0 <dw_main+0x2e0>)
 8002b42:	f002 fe5d 	bl	8005800 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0 ,10); ssd1306_write("Init Failed!!!", Font_7x10);
 8002b46:	210a      	movs	r1, #10
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff fba3 	bl	8002294 <SSD1306_GotoXY>
 8002b4e:	48a9      	ldr	r0, [pc, #676]	; (8002df4 <dw_main+0x2e4>)
 8002b50:	4ba5      	ldr	r3, [pc, #660]	; (8002de8 <dw_main+0x2d8>)
 8002b52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b56:	f7ff fcdb 	bl	8002510 <ssd1306_write>
        while (1)
 8002b5a:	e7fe      	b.n	8002b5a <dw_main+0x4a>
        { };
    }
    port_set_dw1000_fastrate();
 8002b5c:	f7ff fa10 	bl	8001f80 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002b60:	48a5      	ldr	r0, [pc, #660]	; (8002df8 <dw_main+0x2e8>)
 8002b62:	f7fe fb23 	bl	80011ac <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002b66:	f244 0034 	movw	r0, #16436	; 0x4034
 8002b6a:	f7fe fc89 	bl	8001480 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002b6e:	f244 0034 	movw	r0, #16436	; 0x4034
 8002b72:	f7fe fc95 	bl	80014a0 <dwt_settxantennadelay>

    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8002b76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b7a:	f7fe fecf 	bl	800191c <dwt_setrxaftertxdelay>
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8002b7e:	f640 208c 	movw	r0, #2700	; 0xa8c
 8002b82:	f7fe ffe9 	bl	8001b58 <dwt_setrxtimeout>
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8002b86:	2008      	movs	r0, #8
 8002b88:	f7ff f826 	bl	8001bd8 <dwt_setpreambledetecttimeout>

    /* Loop forever initiating ranging exchanges. */
    while (1)
    {

    	SSD1306_Clear ();
 8002b8c:	f7ff fc3d 	bl	800240a <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Transmitted :", Font_7x10);
 8002b90:	2100      	movs	r1, #0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7ff fb7e 	bl	8002294 <SSD1306_GotoXY>
 8002b98:	4898      	ldr	r0, [pc, #608]	; (8002dfc <dw_main+0x2ec>)
 8002b9a:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <dw_main+0x2d8>)
 8002b9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ba0:	f7ff fcb6 	bl	8002510 <ssd1306_write>
    	SSD1306_GotoXY(0, 20);  ssd1306_write("Received :", Font_7x10);
 8002ba4:	2114      	movs	r1, #20
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f7ff fb74 	bl	8002294 <SSD1306_GotoXY>
 8002bac:	4894      	ldr	r0, [pc, #592]	; (8002e00 <dw_main+0x2f0>)
 8002bae:	4b8e      	ldr	r3, [pc, #568]	; (8002de8 <dw_main+0x2d8>)
 8002bb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bb4:	f7ff fcac 	bl	8002510 <ssd1306_write>

        /* Write frame data to DW1000 and prepare transmission. See NOTE 8 below. */
        tx_poll_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002bb8:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <dw_main+0x2f4>)
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <dw_main+0x2f8>)
 8002bbe:	709a      	strb	r2, [r3, #2]
        dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4991      	ldr	r1, [pc, #580]	; (8002e08 <dw_main+0x2f8>)
 8002bc4:	200c      	movs	r0, #12
 8002bc6:	f7fe fc7a 	bl	80014be <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2100      	movs	r1, #0
 8002bce:	200c      	movs	r0, #12
 8002bd0:	f7fe fc94 	bl	80014fc <dwt_writetxfctrl>

        /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
         * set by dwt_setrxaftertxdelay() has elapsed. */
        dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f7fe ff71 	bl	8001abc <dwt_starttx>
        HAL_UART_Transmit(&huart2, tx_poll_msg, sizeof(tx_poll_msg), 100);
 8002bda:	2364      	movs	r3, #100	; 0x64
 8002bdc:	220c      	movs	r2, #12
 8002bde:	498a      	ldr	r1, [pc, #552]	; (8002e08 <dw_main+0x2f8>)
 8002be0:	4883      	ldr	r0, [pc, #524]	; (8002df0 <dw_main+0x2e0>)
 8002be2:	f002 fe0d 	bl	8005800 <HAL_UART_Transmit>
        SSD1306_GotoXY(0, 10); ssd1306_write(tx_poll_msg, Font_7x10);
 8002be6:	210a      	movs	r1, #10
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7ff fb53 	bl	8002294 <SSD1306_GotoXY>
 8002bee:	4886      	ldr	r0, [pc, #536]	; (8002e08 <dw_main+0x2f8>)
 8002bf0:	4b7d      	ldr	r3, [pc, #500]	; (8002de8 <dw_main+0x2d8>)
 8002bf2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bf6:	f7ff fc8b 	bl	8002510 <ssd1306_write>
        /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002bfa:	bf00      	nop
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	200f      	movs	r0, #15
 8002c00:	f7fe fd7f 	bl	8001702 <dwt_read32bitoffsetreg>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4a81      	ldr	r2, [pc, #516]	; (8002e0c <dw_main+0x2fc>)
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b80      	ldr	r3, [pc, #512]	; (8002e0c <dw_main+0x2fc>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <dw_main+0x300>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f2      	beq.n	8002bfc <dw_main+0xec>
        { };

        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
        frame_seq_nb++;
 8002c16:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <dw_main+0x2f4>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b79      	ldr	r3, [pc, #484]	; (8002e04 <dw_main+0x2f4>)
 8002c20:	701a      	strb	r2, [r3, #0]

        if (status_reg & SYS_STATUS_RXFCG)
 8002c22:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <dw_main+0x2fc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80cd 	beq.w	8002dca <dw_main+0x2ba>
        {
            uint32 frame_len;

            /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002c30:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8002c34:	2100      	movs	r1, #0
 8002c36:	200f      	movs	r0, #15
 8002c38:	f7fe fde9 	bl	800180e <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2010      	movs	r0, #16
 8002c40:	f7fe fd5f 	bl	8001702 <dwt_read32bitoffsetreg>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c4a:	617b      	str	r3, [r7, #20]
            if (frame_len <= RX_BUF_LEN)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b14      	cmp	r3, #20
 8002c50:	d806      	bhi.n	8002c60 <dw_main+0x150>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2200      	movs	r2, #0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	486e      	ldr	r0, [pc, #440]	; (8002e14 <dw_main+0x304>)
 8002c5c:	f7fe fc6e 	bl	800153c <dwt_readrxdata>
            }
            HAL_UART_Transmit(&huart2,rx_buffer , sizeof(rx_buffer), 100);
 8002c60:	2364      	movs	r3, #100	; 0x64
 8002c62:	2214      	movs	r2, #20
 8002c64:	496b      	ldr	r1, [pc, #428]	; (8002e14 <dw_main+0x304>)
 8002c66:	4862      	ldr	r0, [pc, #392]	; (8002df0 <dw_main+0x2e0>)
 8002c68:	f002 fdca 	bl	8005800 <HAL_UART_Transmit>
            SSD1306_GotoXY(0, 30); ssd1306_write(rx_buffer, Font_7x10);
 8002c6c:	211e      	movs	r1, #30
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7ff fb10 	bl	8002294 <SSD1306_GotoXY>
 8002c74:	4867      	ldr	r0, [pc, #412]	; (8002e14 <dw_main+0x304>)
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <dw_main+0x2d8>)
 8002c78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c7c:	f7ff fc48 	bl	8002510 <ssd1306_write>
            /* Check that the frame is the expected response from the companion "DS TWR responder" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002c80:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <dw_main+0x304>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8002c86:	220a      	movs	r2, #10
 8002c88:	4963      	ldr	r1, [pc, #396]	; (8002e18 <dw_main+0x308>)
 8002c8a:	4862      	ldr	r0, [pc, #392]	; (8002e14 <dw_main+0x304>)
 8002c8c:	f003 fc0c 	bl	80064a8 <memcmp>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 80a0 	bne.w	8002dd8 <dw_main+0x2c8>
            {
                uint32 final_tx_time;
                int ret;

                /* Retrieve poll transmission and response reception timestamp. */
                poll_tx_ts = get_tx_timestamp_u64();
 8002c98:	f000 f8d6 	bl	8002e48 <get_tx_timestamp_u64>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	495e      	ldr	r1, [pc, #376]	; (8002e1c <dw_main+0x30c>)
 8002ca2:	e9c1 2300 	strd	r2, r3, [r1]
                resp_rx_ts = get_rx_timestamp_u64();
 8002ca6:	f000 f907 	bl	8002eb8 <get_rx_timestamp_u64>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	495c      	ldr	r1, [pc, #368]	; (8002e20 <dw_main+0x310>)
 8002cb0:	e9c1 2300 	strd	r2, r3, [r1]

                /* Compute final message transmission time. See NOTE 10 below. */
                final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002cb4:	4b5a      	ldr	r3, [pc, #360]	; (8002e20 <dw_main+0x310>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	485a      	ldr	r0, [pc, #360]	; (8002e24 <dw_main+0x314>)
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	1814      	adds	r4, r2, r0
 8002cc2:	eb43 0501 	adc.w	r5, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	0a22      	lsrs	r2, r4, #8
 8002cd0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8002cd4:	0a2b      	lsrs	r3, r5, #8
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
                dwt_setdelayedtrxtime(final_tx_time);
 8002cda:	6938      	ldr	r0, [r7, #16]
 8002cdc:	f7fe fee0 	bl	8001aa0 <dwt_setdelayedtrxtime>

                /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
                final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8002cec:	ea4f 2802 	mov.w	r8, r2, lsl #8
 8002cf0:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <dw_main+0x318>)
 8002cf2:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8002cf6:	ea08 0a02 	and.w	sl, r8, r2
 8002cfa:	ea09 0b03 	and.w	fp, r9, r3
 8002cfe:	f244 0234 	movw	r2, #16436	; 0x4034
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	eb1a 0102 	adds.w	r1, sl, r2
 8002d0a:	6039      	str	r1, [r7, #0]
 8002d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <dw_main+0x31c>)
 8002d14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d18:	e9c3 1200 	strd	r1, r2, [r3]

                /* Write all timestamps in the final message. See NOTE 11 below. */
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <dw_main+0x30c>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	4843      	ldr	r0, [pc, #268]	; (8002e30 <dw_main+0x320>)
 8002d24:	f000 f900 	bl	8002f28 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 8002d28:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <dw_main+0x310>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	4841      	ldr	r0, [pc, #260]	; (8002e34 <dw_main+0x324>)
 8002d30:	f000 f8fa 	bl	8002f28 <final_msg_set_ts>
                final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 8002d34:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <dw_main+0x31c>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	483f      	ldr	r0, [pc, #252]	; (8002e38 <dw_main+0x328>)
 8002d3c:	f000 f8f4 	bl	8002f28 <final_msg_set_ts>

                /* Write and send final message. See NOTE 8 below. */
                tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <dw_main+0x2f4>)
 8002d42:	781a      	ldrb	r2, [r3, #0]
 8002d44:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <dw_main+0x32c>)
 8002d46:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8002d48:	2200      	movs	r2, #0
 8002d4a:	493c      	ldr	r1, [pc, #240]	; (8002e3c <dw_main+0x32c>)
 8002d4c:	2018      	movs	r0, #24
 8002d4e:	f7fe fbb6 	bl	80014be <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002d52:	2201      	movs	r2, #1
 8002d54:	2100      	movs	r1, #0
 8002d56:	2018      	movs	r0, #24
 8002d58:	f7fe fbd0 	bl	80014fc <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f7fe fead 	bl	8001abc <dwt_starttx>
 8002d62:	60f8      	str	r0, [r7, #12]

                HAL_UART_Transmit(&huart2,tx_final_msg , sizeof(tx_final_msg), 100);
 8002d64:	2364      	movs	r3, #100	; 0x64
 8002d66:	2218      	movs	r2, #24
 8002d68:	4934      	ldr	r1, [pc, #208]	; (8002e3c <dw_main+0x32c>)
 8002d6a:	4821      	ldr	r0, [pc, #132]	; (8002df0 <dw_main+0x2e0>)
 8002d6c:	f002 fd48 	bl	8005800 <HAL_UART_Transmit>
                SSD1306_GotoXY(0, 40); ssd1306_write("Final Msg :", Font_7x10);
 8002d70:	2128      	movs	r1, #40	; 0x28
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7ff fa8e 	bl	8002294 <SSD1306_GotoXY>
 8002d78:	4831      	ldr	r0, [pc, #196]	; (8002e40 <dw_main+0x330>)
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <dw_main+0x2d8>)
 8002d7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d80:	f7ff fbc6 	bl	8002510 <ssd1306_write>
                SSD1306_GotoXY(0, 50); ssd1306_write(tx_final_msg, Font_7x10);
 8002d84:	2132      	movs	r1, #50	; 0x32
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff fa84 	bl	8002294 <SSD1306_GotoXY>
 8002d8c:	482b      	ldr	r0, [pc, #172]	; (8002e3c <dw_main+0x32c>)
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <dw_main+0x2d8>)
 8002d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d94:	f7ff fbbc 	bl	8002510 <ssd1306_write>
                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
                if (ret == DWT_SUCCESS)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11c      	bne.n	8002dd8 <dw_main+0x2c8>
                {
                    /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                    while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8002d9e:	bf00      	nop
 8002da0:	2100      	movs	r1, #0
 8002da2:	200f      	movs	r0, #15
 8002da4:	f7fe fcad 	bl	8001702 <dwt_read32bitoffsetreg>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f6      	beq.n	8002da0 <dw_main+0x290>
                    { };

                    /* Clear TXFRS event. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	2100      	movs	r1, #0
 8002db6:	200f      	movs	r0, #15
 8002db8:	f7fe fd29 	bl	800180e <dwt_write32bitoffsetreg>

                    /* Increment frame sequence number after transmission of the final message (modulo 256). */
                    frame_seq_nb++;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <dw_main+0x2f4>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <dw_main+0x2f4>)
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e006      	b.n	8002dd8 <dw_main+0x2c8>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8002dca:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <dw_main+0x334>)
 8002dcc:	2100      	movs	r1, #0
 8002dce:	200f      	movs	r0, #15
 8002dd0:	f7fe fd1d 	bl	800180e <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8002dd4:	f7fe ff0f 	bl	8001bf6 <dwt_rxreset>
        }

        /* Execute a delay between ranging exchanges. */
        Sleep(RNG_DELAY_MS);
 8002dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ddc:	f7ff f840 	bl	8001e60 <Sleep>
    	SSD1306_Clear ();
 8002de0:	e6d4      	b.n	8002b8c <dw_main+0x7c>
 8002de2:	bf00      	nop
 8002de4:	20000010 	.word	0x20000010
 8002de8:	20000004 	.word	0x20000004
 8002dec:	0800ad00 	.word	0x0800ad00
 8002df0:	2000078c 	.word	0x2000078c
 8002df4:	0800ad10 	.word	0x0800ad10
 8002df8:	20000024 	.word	0x20000024
 8002dfc:	0800ad20 	.word	0x0800ad20
 8002e00:	0800ad30 	.word	0x0800ad30
 8002e04:	200006a0 	.word	0x200006a0
 8002e08:	20000030 	.word	0x20000030
 8002e0c:	200006b8 	.word	0x200006b8
 8002e10:	2427d000 	.word	0x2427d000
 8002e14:	200006a4 	.word	0x200006a4
 8002e18:	2000003c 	.word	0x2000003c
 8002e1c:	200006c0 	.word	0x200006c0
 8002e20:	200006c8 	.word	0x200006c8
 8002e24:	0c1c0000 	.word	0x0c1c0000
 8002e28:	fffffe00 	.word	0xfffffe00
 8002e2c:	200006d0 	.word	0x200006d0
 8002e30:	20000056 	.word	0x20000056
 8002e34:	2000005a 	.word	0x2000005a
 8002e38:	2000005e 	.word	0x2000005e
 8002e3c:	2000004c 	.word	0x2000004c
 8002e40:	0800ad3c 	.word	0x0800ad3c
 8002e44:	24279000 	.word	0x24279000

08002e48 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fb7f 	bl	8001560 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8002e62:	2304      	movs	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e01d      	b.n	8002ea4 <get_tx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 8002e68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	020b      	lsls	r3, r1, #8
 8002e76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e7a:	0202      	lsls	r2, r0, #8
 8002e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8002e80:	1d3a      	adds	r2, r7, #4
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e92:	ea40 0402 	orr.w	r4, r0, r2
 8002e96:	ea41 0503 	orr.w	r5, r1, r3
 8002e9a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dade      	bge.n	8002e68 <get_tx_timestamp_u64+0x20>
    }
    return ts;
 8002eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bdb0      	pop	{r4, r5, r7, pc}

08002eb8 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8002eb8:	b5b0      	push	{r4, r5, r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fb55 	bl	800157c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e01d      	b.n	8002f14 <get_rx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 8002ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	020b      	lsls	r3, r1, #8
 8002ee6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002eea:	0202      	lsls	r2, r0, #8
 8002eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 8002ef0:	1d3a      	adds	r2, r7, #4
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f02:	ea40 0402 	orr.w	r4, r0, r2
 8002f06:	ea41 0503 	orr.w	r5, r1, r3
 8002f0a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	dade      	bge.n	8002ed8 <get_rx_timestamp_u64+0x20>
    }
    return ts;
 8002f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}

08002f28 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	e9c7 2300 	strd	r2, r3, [r7]
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e013      	b.n	8002f62 <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8) ts;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	783a      	ldrb	r2, [r7, #0]
 8002f42:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 8002f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	0a02      	lsrs	r2, r0, #8
 8002f52:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f56:	0a0b      	lsrs	r3, r1, #8
 8002f58:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	dde8      	ble.n	8002f3a <final_msg_set_ts+0x12>
    }
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4804      	ldr	r0, [pc, #16]	; (8002f9c <_write+0x28>)
 8002f8c:	f002 fc38 	bl	8005800 <HAL_UART_Transmit>
    return len;
 8002f90:	687b      	ldr	r3, [r7, #4]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000078c 	.word	0x2000078c

08002fa0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <MX_USART2_UART_Init+0x50>)
 8002fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <MX_USART2_UART_Init+0x4c>)
 8002fd8:	f002 fbc2 	bl	8005760 <HAL_UART_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fe2:	f7ff fbf7 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000078c 	.word	0x2000078c
 8002ff0:	40004400 	.word	0x40004400

08002ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_UART_MspInit+0x8c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12f      	bne.n	8003076 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_UART_MspInit+0x90>)
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <HAL_UART_MspInit+0x90>)
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	6253      	str	r3, [r2, #36]	; 0x24
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_UART_MspInit+0x90>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_UART_MspInit+0x90>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <HAL_UART_MspInit+0x90>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	61d3      	str	r3, [r2, #28]
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_UART_MspInit+0x90>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003046:	230c      	movs	r3, #12
 8003048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003056:	2307      	movs	r3, #7
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <HAL_UART_MspInit+0x94>)
 8003062:	f000 fa87 	bl	8003574 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	2026      	movs	r0, #38	; 0x26
 800306c:	f000 f9bf 	bl	80033ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003070:	2026      	movs	r0, #38	; 0x26
 8003072:	f000 f9d8 	bl	8003426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003076:	bf00      	nop
 8003078:	3728      	adds	r7, #40	; 0x28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40004400 	.word	0x40004400
 8003084:	40023800 	.word	0x40023800
 8003088:	40020000 	.word	0x40020000

0800308c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800308c:	f7ff fd3a 	bl	8002b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003090:	480b      	ldr	r0, [pc, #44]	; (80030c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003092:	490c      	ldr	r1, [pc, #48]	; (80030c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003094:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003098:	e002      	b.n	80030a0 <LoopCopyDataInit>

0800309a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800309c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309e:	3304      	adds	r3, #4

080030a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a4:	d3f9      	bcc.n	800309a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030a8:	4c09      	ldr	r4, [pc, #36]	; (80030d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ac:	e001      	b.n	80030b2 <LoopFillZerobss>

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b0:	3204      	adds	r2, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030b6:	f003 f9d3 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ba:	f7ff fb27 	bl	800270c <main>
  bx lr
 80030be:	4770      	bx	lr
  ldr r0, =_sdata
 80030c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c4:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80030c8:	0800ba54 	.word	0x0800ba54
  ldr r2, =_sbss
 80030cc:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80030d0:	200007e8 	.word	0x200007e8

080030d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030d4:	e7fe      	b.n	80030d4 <ADC1_IRQHandler>

080030d6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 f979 	bl	80033d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f80e 	bl	8003108 <HAL_InitTick>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	e001      	b.n	80030fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030f8:	f7ff fbf4 	bl	80028e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030fc:	79fb      	ldrb	r3, [r7, #7]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_InitTick+0x68>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d022      	beq.n	8003162 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_InitTick+0x6c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_InitTick+0x68>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f994 	bl	800345e <HAL_SYSTICK_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10f      	bne.n	800315c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b0f      	cmp	r3, #15
 8003140:	d809      	bhi.n	8003156 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003142:	2200      	movs	r2, #0
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	f000 f950 	bl	80033ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_InitTick+0x70>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e007      	b.n	8003166 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e004      	b.n	8003166 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e001      	b.n	8003166 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000068 	.word	0x20000068
 8003174:	2000000c 	.word	0x2000000c
 8003178:	20000064 	.word	0x20000064

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_IncTick+0x1c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_IncTick+0x20>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4413      	add	r3, r2
 800318a:	4a03      	ldr	r2, [pc, #12]	; (8003198 <HAL_IncTick+0x1c>)
 800318c:	6013      	str	r3, [r2, #0]
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200007d4 	.word	0x200007d4
 800319c:	20000068 	.word	0x20000068

080031a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <HAL_GetTick+0x10>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	200007d4 	.word	0x200007d4

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d004      	beq.n	80031d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_Delay+0x40>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031d8:	bf00      	nop
 80031da:	f7ff ffe1 	bl	80031a0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d8f7      	bhi.n	80031da <HAL_Delay+0x26>
  {
  }
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000068 	.word	0x20000068

080031f8 <__NVIC_SetPriorityGrouping>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_GetPriorityGrouping>:
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <__NVIC_GetPriorityGrouping+0x18>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 0307 	and.w	r3, r3, #7
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_EnableIRQ>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	2b00      	cmp	r3, #0
 800326c:	db0b      	blt.n	8003286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4906      	ldr	r1, [pc, #24]	; (8003290 <__NVIC_EnableIRQ+0x34>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2001      	movs	r0, #1
 800327e:	fa00 f202 	lsl.w	r2, r0, r2
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_DisableIRQ>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db12      	blt.n	80032cc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	490a      	ldr	r1, [pc, #40]	; (80032d8 <__NVIC_DisableIRQ+0x44>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	3320      	adds	r3, #32
 80032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032c0:	f3bf 8f4f 	dsb	sy
}
 80032c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032c6:	f3bf 8f6f 	isb	sy
}
 80032ca:	bf00      	nop
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100

080032dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	db0a      	blt.n	8003306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <__NVIC_SetPriority+0x4c>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	440b      	add	r3, r1
 8003300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003304:	e00a      	b.n	800331c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4908      	ldr	r1, [pc, #32]	; (800332c <__NVIC_SetPriority+0x50>)
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3b04      	subs	r3, #4
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	440b      	add	r3, r1
 800331a:	761a      	strb	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000e100 	.word	0xe000e100
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf28      	it	cs
 800334e:	2304      	movcs	r3, #4
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3304      	adds	r3, #4
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b03      	subs	r3, #3
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43d9      	mvns	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	4313      	orrs	r3, r2
         );
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a4:	d301      	bcc.n	80033aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00f      	b.n	80033ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <SysTick_Config+0x40>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033b2:	210f      	movs	r1, #15
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	f7ff ff90 	bl	80032dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <SysTick_Config+0x40>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <SysTick_Config+0x40>)
 80033c4:	2207      	movs	r2, #7
 80033c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	e000e010 	.word	0xe000e010

080033d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff09 	bl	80031f8 <__NVIC_SetPriorityGrouping>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003400:	f7ff ff1e 	bl	8003240 <__NVIC_GetPriorityGrouping>
 8003404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	6978      	ldr	r0, [r7, #20]
 800340c:	f7ff ff90 	bl	8003330 <NVIC_EncodePriority>
 8003410:	4602      	mov	r2, r0
 8003412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff5f 	bl	80032dc <__NVIC_SetPriority>
}
 800341e:	bf00      	nop
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	4603      	mov	r3, r0
 800342e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff11 	bl	800325c <__NVIC_EnableIRQ>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	4603      	mov	r3, r0
 800344a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff1f 	bl	8003294 <__NVIC_DisableIRQ>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ff94 	bl	8003394 <SysTick_Config>
 800346c:	4603      	mov	r3, r0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d008      	beq.n	80034a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2204      	movs	r2, #4
 8003492:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e022      	b.n	80034e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 020e 	bic.w	r2, r2, #14
 80034ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f003 021c 	and.w	r2, r3, #28
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f202 	lsl.w	r2, r1, r2
 80034d2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d005      	beq.n	8003514 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2204      	movs	r2, #4
 800350c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e029      	b.n	8003568 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 020e 	bic.w	r2, r2, #14
 8003522:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f003 021c 	and.w	r2, r3, #28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
    }
  }
  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800358a:	e160      	b.n	800384e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2101      	movs	r1, #1
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	4013      	ands	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8152 	beq.w	8003848 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d005      	beq.n	80035bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d130      	bne.n	800361e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80035f2:	2201      	movs	r2, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0201 	and.w	r2, r3, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b03      	cmp	r3, #3
 8003628:	d017      	beq.n	800365a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d123      	bne.n	80036ae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	08da      	lsrs	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3208      	adds	r2, #8
 800366e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003672:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	220f      	movs	r2, #15
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	08da      	lsrs	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3208      	adds	r2, #8
 80036a8:	6939      	ldr	r1, [r7, #16]
 80036aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	2203      	movs	r2, #3
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0203 	and.w	r2, r3, #3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80ac 	beq.w	8003848 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f0:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_GPIO_Init+0x2f8>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4a5d      	ldr	r2, [pc, #372]	; (800386c <HAL_GPIO_Init+0x2f8>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6213      	str	r3, [r2, #32]
 80036fc:	4b5b      	ldr	r3, [pc, #364]	; (800386c <HAL_GPIO_Init+0x2f8>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003708:	4a59      	ldr	r2, [pc, #356]	; (8003870 <HAL_GPIO_Init+0x2fc>)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	220f      	movs	r2, #15
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a51      	ldr	r2, [pc, #324]	; (8003874 <HAL_GPIO_Init+0x300>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d025      	beq.n	8003780 <HAL_GPIO_Init+0x20c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a50      	ldr	r2, [pc, #320]	; (8003878 <HAL_GPIO_Init+0x304>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d01f      	beq.n	800377c <HAL_GPIO_Init+0x208>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a4f      	ldr	r2, [pc, #316]	; (800387c <HAL_GPIO_Init+0x308>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d019      	beq.n	8003778 <HAL_GPIO_Init+0x204>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <HAL_GPIO_Init+0x30c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_GPIO_Init+0x200>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a4d      	ldr	r2, [pc, #308]	; (8003884 <HAL_GPIO_Init+0x310>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00d      	beq.n	8003770 <HAL_GPIO_Init+0x1fc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a4c      	ldr	r2, [pc, #304]	; (8003888 <HAL_GPIO_Init+0x314>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <HAL_GPIO_Init+0x1f8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a4b      	ldr	r2, [pc, #300]	; (800388c <HAL_GPIO_Init+0x318>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d101      	bne.n	8003768 <HAL_GPIO_Init+0x1f4>
 8003764:	2306      	movs	r3, #6
 8003766:	e00c      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 8003768:	2307      	movs	r3, #7
 800376a:	e00a      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 800376c:	2305      	movs	r3, #5
 800376e:	e008      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 8003770:	2304      	movs	r3, #4
 8003772:	e006      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 8003774:	2303      	movs	r3, #3
 8003776:	e004      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 8003778:	2302      	movs	r3, #2
 800377a:	e002      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_GPIO_Init+0x20e>
 8003780:	2300      	movs	r3, #0
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	f002 0203 	and.w	r2, r2, #3
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	4093      	lsls	r3, r2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003792:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_GPIO_Init+0x2fc>)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	3302      	adds	r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <HAL_GPIO_Init+0x31c>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037c4:	4a32      	ldr	r2, [pc, #200]	; (8003890 <HAL_GPIO_Init+0x31c>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_GPIO_Init+0x31c>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037ee:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_GPIO_Init+0x31c>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037f4:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_GPIO_Init+0x31c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_GPIO_Init+0x31c>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_GPIO_Init+0x31c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	43db      	mvns	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_GPIO_Init+0x31c>)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f ae97 	bne.w	800358c <HAL_GPIO_Init+0x18>
  }
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40010000 	.word	0x40010000
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40021400 	.word	0x40021400
 800388c:	40021800 	.word	0x40021800
 8003890:	40010400 	.word	0x40010400

08003894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
 80038a0:	4613      	mov	r3, r2
 80038a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038a4:	787b      	ldrb	r3, [r7, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80038b0:	e003      	b.n	80038ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	619a      	str	r2, [r3, #24]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e12b      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe feca 	bl	8002684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003928:	f001 fad2 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4a81      	ldr	r2, [pc, #516]	; (8003b38 <HAL_I2C_Init+0x274>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d807      	bhi.n	8003948 <HAL_I2C_Init+0x84>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a80      	ldr	r2, [pc, #512]	; (8003b3c <HAL_I2C_Init+0x278>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e006      	b.n	8003956 <HAL_I2C_Init+0x92>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a7d      	ldr	r2, [pc, #500]	; (8003b40 <HAL_I2C_Init+0x27c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e7      	b.n	8003b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a78      	ldr	r2, [pc, #480]	; (8003b44 <HAL_I2C_Init+0x280>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0c9b      	lsrs	r3, r3, #18
 8003968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a6a      	ldr	r2, [pc, #424]	; (8003b38 <HAL_I2C_Init+0x274>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d802      	bhi.n	8003998 <HAL_I2C_Init+0xd4>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	3301      	adds	r3, #1
 8003996:	e009      	b.n	80039ac <HAL_I2C_Init+0xe8>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	4a69      	ldr	r2, [pc, #420]	; (8003b48 <HAL_I2C_Init+0x284>)
 80039a4:	fba2 2303 	umull	r2, r3, r2, r3
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	3301      	adds	r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	495c      	ldr	r1, [pc, #368]	; (8003b38 <HAL_I2C_Init+0x274>)
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d819      	bhi.n	8003a00 <HAL_I2C_Init+0x13c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e59      	subs	r1, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e0:	400b      	ands	r3, r1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_I2C_Init+0x138>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e59      	subs	r1, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fa:	e051      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 80039fc:	2304      	movs	r3, #4
 80039fe:	e04f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <HAL_I2C_Init+0x168>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e012      	b.n	8003a52 <HAL_I2C_Init+0x18e>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1e58      	subs	r0, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	0099      	lsls	r1, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Init+0x196>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e022      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <HAL_I2C_Init+0x1bc>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1e58      	subs	r0, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	440b      	add	r3, r1
 8003a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	e00f      	b.n	8003aa0 <HAL_I2C_Init+0x1dc>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	0099      	lsls	r1, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a96:	3301      	adds	r3, #1
 8003a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	6809      	ldr	r1, [r1, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6911      	ldr	r1, [r2, #16]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	000186a0 	.word	0x000186a0
 8003b3c:	001e847f 	.word	0x001e847f
 8003b40:	003d08ff 	.word	0x003d08ff
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7ff fb1e 	bl	80031a0 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	f040 80e0 	bne.w	8003d34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2319      	movs	r3, #25
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4970      	ldr	r1, [pc, #448]	; (8003d40 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa92 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0d3      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x50>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0cc      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d007      	beq.n	8003bc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2221      	movs	r2, #33	; 0x21
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2210      	movs	r2, #16
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	893a      	ldrh	r2, [r7, #8]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f9ca 	bl	8003fa4 <I2C_MasterRequestWrite>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e08d      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c30:	e066      	b.n	8003d00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fb50 	bl	80042dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_I2C_Master_Transmit+0x188>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	6a39      	ldr	r1, [r7, #32]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fb47 	bl	800436c <I2C_WaitOnBTFFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00d      	beq.n	8003d00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d107      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e01a      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d194      	bne.n	8003c32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	00100002 	.word	0x00100002
 8003d44:	ffff0000 	.word	0xffff0000

08003d48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	460b      	mov	r3, r1
 8003d56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7ff fa22 	bl	80031a0 <HAL_GetTick>
 8003d5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	f040 8111 	bne.w	8003f92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2319      	movs	r3, #25
 8003d76:	2201      	movs	r2, #1
 8003d78:	4988      	ldr	r1, [pc, #544]	; (8003f9c <HAL_I2C_IsDeviceReady+0x254>)
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f994 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
 8003d88:	e104      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_I2C_IsDeviceReady+0x50>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e0fd      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d007      	beq.n	8003dbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0201 	orr.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2224      	movs	r2, #36	; 0x24
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a70      	ldr	r2, [pc, #448]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x258>)
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f952 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e18:	d103      	bne.n	8003e22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e0b6      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e36:	f7ff f9b3 	bl	80031a0 <HAL_GetTick>
 8003e3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e6a:	e025      	b.n	8003eb8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7ff f998 	bl	80031a0 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <HAL_I2C_IsDeviceReady+0x13a>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	22a0      	movs	r2, #160	; 0xa0
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_I2C_IsDeviceReady+0x188>
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_I2C_IsDeviceReady+0x188>
 8003eca:	7dbb      	ldrb	r3, [r7, #22]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0cd      	beq.n	8003e6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d129      	bne.n	8003f3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2319      	movs	r3, #25
 8003f12:	2201      	movs	r2, #1
 8003f14:	4921      	ldr	r1, [pc, #132]	; (8003f9c <HAL_I2C_IsDeviceReady+0x254>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f8c6 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e036      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e02c      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2319      	movs	r3, #25
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	490f      	ldr	r1, [pc, #60]	; (8003f9c <HAL_I2C_IsDeviceReady+0x254>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f8a2 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e012      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	f4ff af32 	bcc.w	8003de2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000

08003fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d006      	beq.n	8003fce <I2C_MasterRequestWrite+0x2a>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d003      	beq.n	8003fce <I2C_MasterRequestWrite+0x2a>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fcc:	d108      	bne.n	8003fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e00b      	b.n	8003ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	2b12      	cmp	r3, #18
 8003fe6:	d107      	bne.n	8003ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f84f 	bl	80040a8 <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401e:	d103      	bne.n	8004028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e035      	b.n	8004098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004034:	d108      	bne.n	8004048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004044:	611a      	str	r2, [r3, #16]
 8004046:	e01b      	b.n	8004080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	11db      	asrs	r3, r3, #7
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f003 0306 	and.w	r3, r3, #6
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f063 030f 	orn	r3, r3, #15
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	490e      	ldr	r1, [pc, #56]	; (80040a0 <I2C_MasterRequestWrite+0xfc>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f898 	bl	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e010      	b.n	8004098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4907      	ldr	r1, [pc, #28]	; (80040a4 <I2C_MasterRequestWrite+0x100>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f888 	bl	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	00010008 	.word	0x00010008
 80040a4:	00010002 	.word	0x00010002

080040a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b8:	e048      	b.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d044      	beq.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7ff f86d 	bl	80031a0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d139      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10d      	bne.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	e00c      	b.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	43da      	mvns	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	429a      	cmp	r2, r3
 800411c:	d116      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e023      	b.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10d      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	e00c      	b.n	800418c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	d093      	beq.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041aa:	e071      	b.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d123      	bne.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f043 0204 	orr.w	r2, r3, #4
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e067      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d041      	beq.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fe ffc8 	bl	80031a0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d136      	bne.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10c      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e00b      	b.n	800425e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	43da      	mvns	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4013      	ands	r3, r2
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e021      	b.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10c      	bne.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e00b      	b.n	80042cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	43da      	mvns	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f af6d 	bne.w	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e8:	e034      	b.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f886 	bl	80043fc <I2C_IsAcknowledgeFailed>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e034      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d028      	beq.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004302:	f7fe ff4d 	bl	80031a0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d016      	beq.n	8004354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d1c3      	bne.n	80042ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004378:	e034      	b.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f83e 	bl	80043fc <I2C_IsAcknowledgeFailed>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e034      	b.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d028      	beq.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe ff05 	bl	80031a0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11d      	bne.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d016      	beq.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f043 0220 	orr.w	r2, r3, #32
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e007      	b.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d1c3      	bne.n	800437a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d11b      	bne.n	800444c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800441c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0204 	orr.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e31d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446a:	4b94      	ldr	r3, [pc, #592]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004474:	4b91      	ldr	r3, [pc, #580]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d07b      	beq.n	8004582 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d006      	beq.n	800449e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b0c      	cmp	r3, #12
 8004494:	d10f      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5e>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449c:	d10b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449e:	4b87      	ldr	r3, [pc, #540]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06a      	beq.n	8004580 <HAL_RCC_OscConfig+0x128>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d166      	bne.n	8004580 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e2f7      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d106      	bne.n	80044cc <HAL_RCC_OscConfig+0x74>
 80044be:	4b7f      	ldr	r3, [pc, #508]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7e      	ldr	r2, [pc, #504]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e02d      	b.n	8004528 <HAL_RCC_OscConfig+0xd0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <HAL_RCC_OscConfig+0x96>
 80044d4:	4b79      	ldr	r3, [pc, #484]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a78      	ldr	r2, [pc, #480]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b76      	ldr	r3, [pc, #472]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a75      	ldr	r2, [pc, #468]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	e01c      	b.n	8004528 <HAL_RCC_OscConfig+0xd0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0xb8>
 80044f6:	4b71      	ldr	r3, [pc, #452]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a70      	ldr	r2, [pc, #448]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b6e      	ldr	r3, [pc, #440]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_OscConfig+0xd0>
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a69      	ldr	r2, [pc, #420]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b67      	ldr	r3, [pc, #412]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a66      	ldr	r2, [pc, #408]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fe fe36 	bl	80031a0 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004538:	f7fe fe32 	bl	80031a0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e2ad      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800454a:	4b5c      	ldr	r3, [pc, #368]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCC_OscConfig+0xe0>
 8004556:	e014      	b.n	8004582 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe fe22 	bl	80031a0 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004560:	f7fe fe1e 	bl	80031a0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e299      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004572:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x108>
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d05a      	beq.n	8004644 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d119      	bne.n	80045ce <HAL_RCC_OscConfig+0x176>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d116      	bne.n	80045ce <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a0:	4b46      	ldr	r3, [pc, #280]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_OscConfig+0x160>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e276      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4b40      	ldr	r3, [pc, #256]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	493d      	ldr	r1, [pc, #244]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045cc:	e03a      	b.n	8004644 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d020      	beq.n	8004618 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d6:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCC_OscConfig+0x268>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fe fde0 	bl	80031a0 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fe fddc 	bl	80031a0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e257      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f6:	4b31      	ldr	r3, [pc, #196]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	492a      	ldr	r1, [pc, #168]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]
 8004616:	e015      	b.n	8004644 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCC_OscConfig+0x268>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fe fdbf 	bl	80031a0 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fdbb 	bl	80031a0 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e236      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004638:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80b8 	beq.w	80047c2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d170      	bne.n	800473a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_OscConfig+0x218>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e21a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	4b11      	ldr	r3, [pc, #68]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800467c:	429a      	cmp	r2, r3
 800467e:	d921      	bls.n	80046c4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fc4b 	bl	8004f20 <RCC_SetFlashLatencyFromMSIRange>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e208      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4906      	ldr	r1, [pc, #24]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	4901      	ldr	r1, [pc, #4]	; (80046bc <HAL_RCC_OscConfig+0x264>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
 80046ba:	e020      	b.n	80046fe <HAL_RCC_OscConfig+0x2a6>
 80046bc:	40023800 	.word	0x40023800
 80046c0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c4:	4ba4      	ldr	r3, [pc, #656]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	49a1      	ldr	r1, [pc, #644]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d6:	4ba0      	ldr	r3, [pc, #640]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	499c      	ldr	r1, [pc, #624]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fc16 	bl	8004f20 <RCC_SetFlashLatencyFromMSIRange>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1d3      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	0b5b      	lsrs	r3, r3, #13
 8004704:	3301      	adds	r3, #1
 8004706:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800470e:	4a92      	ldr	r2, [pc, #584]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004710:	6892      	ldr	r2, [r2, #8]
 8004712:	0912      	lsrs	r2, r2, #4
 8004714:	f002 020f 	and.w	r2, r2, #15
 8004718:	4990      	ldr	r1, [pc, #576]	; (800495c <HAL_RCC_OscConfig+0x504>)
 800471a:	5c8a      	ldrb	r2, [r1, r2]
 800471c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800471e:	4a90      	ldr	r2, [pc, #576]	; (8004960 <HAL_RCC_OscConfig+0x508>)
 8004720:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004722:	4b90      	ldr	r3, [pc, #576]	; (8004964 <HAL_RCC_OscConfig+0x50c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fcee 	bl	8003108 <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d045      	beq.n	80047c2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	e1b5      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d029      	beq.n	8004796 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_OscConfig+0x510>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe fd2a 	bl	80031a0 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004750:	f7fe fd26 	bl	80031a0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1a1      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004762:	4b7d      	ldr	r3, [pc, #500]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4977      	ldr	r1, [pc, #476]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004780:	4b75      	ldr	r3, [pc, #468]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	061b      	lsls	r3, r3, #24
 800478e:	4972      	ldr	r1, [pc, #456]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004790:	4313      	orrs	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
 8004794:	e015      	b.n	80047c2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004796:	4b74      	ldr	r3, [pc, #464]	; (8004968 <HAL_RCC_OscConfig+0x510>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fe fd00 	bl	80031a0 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047a4:	f7fe fcfc 	bl	80031a0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e177      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047b6:	4b68      	ldr	r3, [pc, #416]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d030      	beq.n	8004830 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <HAL_RCC_OscConfig+0x514>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047dc:	f7fe fce0 	bl	80031a0 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fe fcdc 	bl	80031a0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e157      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047f6:	4b58      	ldr	r3, [pc, #352]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x38c>
 8004802:	e015      	b.n	8004830 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCC_OscConfig+0x514>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe fcc9 	bl	80031a0 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004812:	f7fe fcc5 	bl	80031a0 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e140      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004824:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80b5 	beq.w	80049a8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4b45      	ldr	r3, [pc, #276]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b42      	ldr	r3, [pc, #264]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	4a41      	ldr	r2, [pc, #260]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6253      	str	r3, [r2, #36]	; 0x24
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <HAL_RCC_OscConfig+0x518>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <HAL_RCC_OscConfig+0x518>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3d      	ldr	r2, [pc, #244]	; (8004970 <HAL_RCC_OscConfig+0x518>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fe fc8d 	bl	80031a0 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fe fc89 	bl	80031a0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	; 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e104      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b34      	ldr	r3, [pc, #208]	; (8004970 <HAL_RCC_OscConfig+0x518>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x466>
 80048b0:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	4a28      	ldr	r2, [pc, #160]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ba:	6353      	str	r3, [r2, #52]	; 0x34
 80048bc:	e02d      	b.n	800491a <HAL_RCC_OscConfig+0x4c2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x488>
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	4a23      	ldr	r2, [pc, #140]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d0:	6353      	str	r3, [r2, #52]	; 0x34
 80048d2:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	4a20      	ldr	r2, [pc, #128]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048dc:	6353      	str	r3, [r2, #52]	; 0x34
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x4c2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x4aa>
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f2:	6353      	str	r3, [r2, #52]	; 0x34
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 80048fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fe:	6353      	str	r3, [r2, #52]	; 0x34
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x4c2>
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490c:	6353      	str	r3, [r2, #52]	; 0x34
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	4a11      	ldr	r2, [pc, #68]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004918:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fe fc3d 	bl	80031a0 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe fc39 	bl	80031a0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0b2      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_OscConfig+0x500>)
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x4d2>
 800494c:	e023      	b.n	8004996 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe fc27 	bl	80031a0 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004954:	e019      	b.n	800498a <HAL_RCC_OscConfig+0x532>
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	0800b574 	.word	0x0800b574
 8004960:	2000000c 	.word	0x2000000c
 8004964:	20000064 	.word	0x20000064
 8004968:	42470020 	.word	0x42470020
 800496c:	42470680 	.word	0x42470680
 8004970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fe fc14 	bl	80031a0 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e08d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800498a:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ee      	bne.n	8004974 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004996:	7ffb      	ldrb	r3, [r7, #31]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499c:	4b44      	ldr	r3, [pc, #272]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	4a43      	ldr	r2, [pc, #268]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 80049a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d079      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d056      	beq.n	8004a64 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d13b      	bne.n	8004a36 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_RCC_OscConfig+0x65c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe fbec 	bl	80031a0 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe fbe8 	bl	80031a0 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e063      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049de:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ea:	4b31      	ldr	r3, [pc, #196]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4319      	orrs	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	430b      	orrs	r3, r1
 8004a02:	492b      	ldr	r1, [pc, #172]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <HAL_RCC_OscConfig+0x65c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fe fbc7 	bl	80031a0 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fe fbc3 	bl	80031a0 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e03e      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x5be>
 8004a34:	e036      	b.n	8004aa4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <HAL_RCC_OscConfig+0x65c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fbb0 	bl	80031a0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe fbac 	bl	80031a0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e027      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5ec>
 8004a62:	e01f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e01a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_RCC_OscConfig+0x658>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	42470060 	.word	0x42470060

08004ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e11a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b8f      	ldr	r3, [pc, #572]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d919      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <HAL_RCC_ClockConfig+0x34>
 8004ae0:	4b8a      	ldr	r3, [pc, #552]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a89      	ldr	r2, [pc, #548]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 0201 	bic.w	r2, r3, #1
 8004af4:	4985      	ldr	r1, [pc, #532]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afc:	4b83      	ldr	r3, [pc, #524]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e0f9      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1a:	4b7d      	ldr	r3, [pc, #500]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	497a      	ldr	r1, [pc, #488]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 808e 	beq.w	8004c56 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b42:	4b73      	ldr	r3, [pc, #460]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d121      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0d7      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b5a:	4b6d      	ldr	r3, [pc, #436]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d115      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0cb      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0bf      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0b7      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	4b5f      	ldr	r3, [pc, #380]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	495c      	ldr	r1, [pc, #368]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba4:	f7fe fafc 	bl	80031a0 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d112      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fe faf4 	bl	80031a0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e09b      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bca:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d1ee      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xfc>
 8004bd6:	e03e      	b.n	8004c56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d112      	bne.n	8004c06 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be2:	f7fe fadd 	bl	80031a0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e084      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf8:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030c 	and.w	r3, r3, #12
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d1ee      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x12a>
 8004c04:	e027      	b.n	8004c56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d11d      	bne.n	8004c4a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c10:	f7fe fac6 	bl	80031a0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e06d      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d1ee      	bne.n	8004c10 <HAL_RCC_ClockConfig+0x158>
 8004c32:	e010      	b.n	8004c56 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fe fab4 	bl	80031a0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e05b      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ee      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c56:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d219      	bcs.n	8004c98 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d105      	bne.n	8004c76 <HAL_RCC_ClockConfig+0x1be>
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	4923      	ldr	r1, [pc, #140]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <HAL_RCC_ClockConfig+0x254>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e034      	b.n	8004d02 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4917      	ldr	r1, [pc, #92]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	490f      	ldr	r1, [pc, #60]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cd6:	f000 f823 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <HAL_RCC_ClockConfig+0x258>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	490b      	ldr	r1, [pc, #44]	; (8004d14 <HAL_RCC_ClockConfig+0x25c>)
 8004ce8:	5ccb      	ldrb	r3, [r1, r3]
 8004cea:	fa22 f303 	lsr.w	r3, r2, r3
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <HAL_RCC_ClockConfig+0x260>)
 8004cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x264>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fa06 	bl	8003108 <HAL_InitTick>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d00:	7afb      	ldrb	r3, [r7, #11]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	0800b574 	.word	0x0800b574
 8004d18:	2000000c 	.word	0x2000000c
 8004d1c:	20000064 	.word	0x20000064

08004d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	b5b0      	push	{r4, r5, r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d26:	4b61      	ldr	r3, [pc, #388]	; (8004eac <HAL_RCC_GetSysClockFreq+0x18c>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d00d      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x32>
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	f200 80a4 	bhi.w	8004e84 <HAL_RCC_GetSysClockFreq+0x164>
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d002      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0x26>
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d003      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x2c>
 8004d44:	e09e      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d46:	4b5a      	ldr	r3, [pc, #360]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x190>)
 8004d48:	613b      	str	r3, [r7, #16]
      break;
 8004d4a:	e0a9      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x194>)
 8004d4e:	613b      	str	r3, [r7, #16]
      break;
 8004d50:	e0a6      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	0c9b      	lsrs	r3, r3, #18
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x198>)
 8004d5c:	5cd3      	ldrb	r3, [r2, r3]
 8004d5e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	0d9b      	lsrs	r3, r3, #22
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	3301      	adds	r3, #1
 8004d6a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d6c:	4b4f      	ldr	r3, [pc, #316]	; (8004eac <HAL_RCC_GetSysClockFreq+0x18c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d041      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	461c      	mov	r4, r3
 8004d7c:	f04f 0500 	mov.w	r5, #0
 8004d80:	4620      	mov	r0, r4
 8004d82:	4629      	mov	r1, r5
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	014b      	lsls	r3, r1, #5
 8004d8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d92:	0142      	lsls	r2, r0, #5
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	1b00      	subs	r0, r0, r4
 8004d9a:	eb61 0105 	sbc.w	r1, r1, r5
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	018b      	lsls	r3, r1, #6
 8004da8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dac:	0182      	lsls	r2, r0, #6
 8004dae:	1a12      	subs	r2, r2, r0
 8004db0:	eb63 0301 	sbc.w	r3, r3, r1
 8004db4:	f04f 0000 	mov.w	r0, #0
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	00d9      	lsls	r1, r3, #3
 8004dbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dc2:	00d0      	lsls	r0, r2, #3
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	1912      	adds	r2, r2, r4
 8004dca:	eb45 0303 	adc.w	r3, r5, r3
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	0259      	lsls	r1, r3, #9
 8004dd8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ddc:	0250      	lsls	r0, r2, #9
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	461a      	mov	r2, r3
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	f7fb fed3 	bl	8000b98 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4613      	mov	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e040      	b.n	8004e7e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	461c      	mov	r4, r3
 8004e00:	f04f 0500 	mov.w	r5, #0
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	014b      	lsls	r3, r1, #5
 8004e12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e16:	0142      	lsls	r2, r0, #5
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	1b00      	subs	r0, r0, r4
 8004e1e:	eb61 0105 	sbc.w	r1, r1, r5
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	018b      	lsls	r3, r1, #6
 8004e2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e30:	0182      	lsls	r2, r0, #6
 8004e32:	1a12      	subs	r2, r2, r0
 8004e34:	eb63 0301 	sbc.w	r3, r3, r1
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	00d9      	lsls	r1, r3, #3
 8004e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e46:	00d0      	lsls	r0, r2, #3
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	1912      	adds	r2, r2, r4
 8004e4e:	eb45 0303 	adc.w	r3, r5, r3
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	0299      	lsls	r1, r3, #10
 8004e5c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e60:	0290      	lsls	r0, r2, #10
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	f7fb fe91 	bl	8000b98 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	613b      	str	r3, [r7, #16]
      break;
 8004e82:	e00d      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_GetSysClockFreq+0x18c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	0b5b      	lsrs	r3, r3, #13
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	613b      	str	r3, [r7, #16]
      break;
 8004e9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ea0:	693b      	ldr	r3, [r7, #16]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	007a1200 	.word	0x007a1200
 8004eb8:	0800b568 	.word	0x0800b568

08004ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec0:	4b02      	ldr	r3, [pc, #8]	; (8004ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	2000000c 	.word	0x2000000c

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ed4:	f7ff fff2 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4903      	ldr	r1, [pc, #12]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	0800b584 	.word	0x0800b584

08004ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004efc:	f7ff ffde 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	0adb      	lsrs	r3, r3, #11
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4903      	ldr	r1, [pc, #12]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	0800b584 	.word	0x0800b584

08004f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f2c:	4b29      	ldr	r3, [pc, #164]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d12c      	bne.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f38:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e016      	b.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	6253      	str	r3, [r2, #36]	; 0x24
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004f70:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004f84:	d105      	bne.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f8c:	d101      	bne.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f8e:	2301      	movs	r3, #1
 8004f90:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d105      	bne.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0f      	ldr	r2, [pc, #60]	; (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 0201 	bic.w	r2, r3, #1
 8004fac:	490b      	ldr	r1, [pc, #44]	; (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	40023c00 	.word	0x40023c00

08004fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e07b      	b.n	80050ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d009      	beq.n	8005018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
 800500a:	e005      	b.n	8005018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fd fc0a 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	ea42 0103 	orr.w	r1, r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	f003 0104 	and.w	r1, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0210 	and.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b088      	sub	sp, #32
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	4613      	mov	r3, r2
 8005100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_SPI_Transmit+0x22>
 8005110:	2302      	movs	r3, #2
 8005112:	e12d      	b.n	8005370 <HAL_SPI_Transmit+0x27e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511c:	f7fe f840 	bl	80031a0 <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005136:	e116      	b.n	8005366 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Transmit+0x52>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005148:	e10d      	b.n	8005366 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d10f      	bne.n	80051b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d007      	beq.n	80051d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d14f      	bne.n	800527a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_Transmit+0xf6>
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d142      	bne.n	800526e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	1c9a      	adds	r2, r3, #2
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800520c:	e02f      	b.n	800526e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d112      	bne.n	8005242 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	1c9a      	adds	r2, r3, #2
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005240:	e015      	b.n	800526e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005242:	f7fd ffad 	bl	80031a0 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d803      	bhi.n	800525a <HAL_SPI_Transmit+0x168>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d102      	bne.n	8005260 <HAL_SPI_Transmit+0x16e>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800526c:	e07b      	b.n	8005366 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ca      	bne.n	800520e <HAL_SPI_Transmit+0x11c>
 8005278:	e050      	b.n	800531c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_SPI_Transmit+0x196>
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d144      	bne.n	8005312 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052ae:	e030      	b.n	8005312 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d113      	bne.n	80052e6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	7812      	ldrb	r2, [r2, #0]
 80052ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80052e4:	e015      	b.n	8005312 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e6:	f7fd ff5b 	bl	80031a0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <HAL_SPI_Transmit+0x20c>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_Transmit+0x212>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005310:	e029      	b.n	8005366 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1c9      	bne.n	80052b0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f9db 	bl	80056dc <SPI_EndRxTxTransaction>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e003      	b.n	8005366 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800536e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	099b      	lsrs	r3, r3, #6
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10f      	bne.n	80053bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	099b      	lsrs	r3, r3, #6
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
    return;
 80053ba:	e0d7      	b.n	800556c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_SPI_IRQHandler+0x66>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	09db      	lsrs	r3, r3, #7
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
    return;
 80053dc:	e0c6      	b.n	800556c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10c      	bne.n	8005404 <HAL_SPI_IRQHandler+0x8c>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	099b      	lsrs	r3, r3, #6
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 80b4 	beq.w	800556c <HAL_SPI_IRQHandler+0x1f4>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80ad 	beq.w	800556c <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	099b      	lsrs	r3, r3, #6
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d023      	beq.n	8005466 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b03      	cmp	r3, #3
 8005428:	d011      	beq.n	800544e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	e00b      	b.n	8005466 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
        return;
 8005464:	e082      	b.n	800556c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d014      	beq.n	800549c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f043 0201 	orr.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	f043 0208 	orr.w	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054b4:	2300      	movs	r3, #0
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04f      	beq.n	800556a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <HAL_SPI_IRQHandler+0x17e>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d034      	beq.n	8005560 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0203 	bic.w	r2, r2, #3
 8005504:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d011      	beq.n	8005532 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_SPI_IRQHandler+0x1fc>)
 8005514:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd ffe8 	bl	80034f0 <HAL_DMA_Abort_IT>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <HAL_SPI_IRQHandler+0x1fc>)
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005546:	4618      	mov	r0, r3
 8005548:	f7fd ffd2 	bl	80034f0 <HAL_DMA_Abort_IT>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800555e:	e003      	b.n	8005568 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f809 	bl	8005578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005566:	e000      	b.n	800556a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005568:	bf00      	nop
    return;
 800556a:	bf00      	nop
  }
}
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	080055a5 	.word	0x080055a5

08005578 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005598:	b2db      	uxtb	r3, r3
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ffda 	bl	8005578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055dc:	f7fd fde0 	bl	80031a0 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055ec:	f7fd fdd8 	bl	80031a0 <HAL_GetTick>
 80055f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055f2:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	015b      	lsls	r3, r3, #5
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005602:	e054      	b.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d050      	beq.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800560c:	f7fd fdc8 	bl	80031a0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	429a      	cmp	r2, r3
 800561a:	d902      	bls.n	8005622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13d      	bne.n	800569e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800563a:	d111      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005644:	d004      	beq.n	8005650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564e:	d107      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005668:	d10f      	bne.n	800568a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e017      	b.n	80056ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d19b      	bne.n	8005604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000000c 	.word	0x2000000c

080056dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056e8:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <SPI_EndRxTxTransaction+0x7c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1b      	ldr	r2, [pc, #108]	; (800575c <SPI_EndRxTxTransaction+0x80>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	0d5b      	lsrs	r3, r3, #21
 80056f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d112      	bne.n	800572e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff ff5a 	bl	80055cc <SPI_WaitFlagStateUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f043 0220 	orr.w	r2, r3, #32
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e00f      	b.n	800574e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	3b01      	subs	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	2b80      	cmp	r3, #128	; 0x80
 8005746:	d0f2      	beq.n	800572e <SPI_EndRxTxTransaction+0x52>
 8005748:	e000      	b.n	800574c <SPI_EndRxTxTransaction+0x70>
        break;
 800574a:	bf00      	nop
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	2000000c 	.word	0x2000000c
 800575c:	165e9f81 	.word	0x165e9f81

08005760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e042      	b.n	80057f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fd fc34 	bl	8002ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2224      	movs	r2, #36	; 0x24
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fd71 	bl	800628c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695a      	ldr	r2, [r3, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b20      	cmp	r3, #32
 800581e:	d16d      	bne.n	80058fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_UART_Transmit+0x2c>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e066      	b.n	80058fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2221      	movs	r2, #33	; 0x21
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800583e:	f7fd fcaf 	bl	80031a0 <HAL_GetTick>
 8005842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005858:	d108      	bne.n	800586c <HAL_UART_Transmit+0x6c>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e003      	b.n	8005874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005874:	e02a      	b.n	80058cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 faf9 	bl	8005e78 <UART_WaitOnFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e036      	b.n	80058fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	3302      	adds	r3, #2
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e007      	b.n	80058be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1cf      	bne.n	8005876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2200      	movs	r2, #0
 80058de:	2140      	movs	r1, #64	; 0x40
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fac9 	bl	8005e78 <UART_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e006      	b.n	80058fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e000      	b.n	80058fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b0ba      	sub	sp, #232	; 0xe8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800592e:	2300      	movs	r3, #0
 8005930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10f      	bne.n	800596e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d009      	beq.n	800596e <HAL_UART_IRQHandler+0x66>
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fbd1 	bl	800610e <UART_Receive_IT>
      return;
 800596c:	e25b      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800596e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80de 	beq.w	8005b34 <HAL_UART_IRQHandler+0x22c>
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005988:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80d1 	beq.w	8005b34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_UART_IRQHandler+0xae>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_UART_IRQHandler+0xd2>
 80059c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <HAL_UART_IRQHandler+0xf6>
 80059e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	f043 0204 	orr.w	r2, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d011      	beq.n	8005a2e <HAL_UART_IRQHandler+0x126>
 8005a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	f043 0208 	orr.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 81f2 	beq.w	8005e1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_UART_IRQHandler+0x14e>
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fb5c 	bl	800610e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <HAL_UART_IRQHandler+0x17a>
 8005a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04f      	beq.n	8005b22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fa66 	bl	8005f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d141      	bne.n	8005b1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1d9      	bne.n	8005a96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <HAL_UART_IRQHandler+0x3e0>)
 8005af0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd fcfa 	bl	80034f0 <HAL_DMA_Abort_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e00e      	b.n	8005b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f99c 	bl	8005e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e00a      	b.n	8005b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f998 	bl	8005e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e006      	b.n	8005b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f994 	bl	8005e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b2e:	e175      	b.n	8005e1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	bf00      	nop
    return;
 8005b32:	e173      	b.n	8005e1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	f040 814f 	bne.w	8005ddc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b42:	f003 0310 	and.w	r3, r3, #16
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8148 	beq.w	8005ddc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8141 	beq.w	8005ddc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	f040 80b6 	bne.w	8005cec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8145 	beq.w	8005e20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	f080 813e 	bcs.w	8005e20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005baa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	f000 8088 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005be4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1d9      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e1      	bne.n	8005c04 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c98:	f023 0310 	bic.w	r3, r3, #16
 8005c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005caa:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fd fbd7 	bl	8003476 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8bf 	bl	8005e62 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ce4:	e09c      	b.n	8005e20 <HAL_UART_IRQHandler+0x518>
 8005ce6:	bf00      	nop
 8005ce8:	08006019 	.word	0x08006019
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 808e 	beq.w	8005e24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 8089 	beq.w	8005e24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d36:	647a      	str	r2, [r7, #68]	; 0x44
 8005d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e3      	bne.n	8005d12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	623b      	str	r3, [r7, #32]
   return(result);
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e3      	bne.n	8005d4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005db4:	61fa      	str	r2, [r7, #28]
 8005db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e3      	bne.n	8005d90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f844 	bl	8005e62 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dda:	e023      	b.n	8005e24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d009      	beq.n	8005dfc <HAL_UART_IRQHandler+0x4f4>
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f923 	bl	8006040 <UART_Transmit_IT>
    return;
 8005dfa:	e014      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <HAL_UART_IRQHandler+0x51e>
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f962 	bl	80060de <UART_EndTransmit_IT>
    return;
 8005e1a:	e004      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e1c:	bf00      	nop
 8005e1e:	e002      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e20:	bf00      	nop
 8005e22:	e000      	b.n	8005e26 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e24:	bf00      	nop
  }
}
 8005e26:	37e8      	adds	r7, #232	; 0xe8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr

08005e3e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b090      	sub	sp, #64	; 0x40
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e88:	e050      	b.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d04c      	beq.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e98:	f7fd f982 	bl	80031a0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d241      	bcs.n	8005f2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec8:	637a      	str	r2, [r7, #52]	; 0x34
 8005eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e5      	bne.n	8005ea8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	613b      	str	r3, [r7, #16]
   return(result);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3314      	adds	r3, #20
 8005efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005efc:	623a      	str	r2, [r7, #32]
 8005efe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e5      	bne.n	8005edc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e00f      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4013      	ands	r3, r2
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d09f      	beq.n	8005e8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3740      	adds	r7, #64	; 0x40
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b095      	sub	sp, #84	; 0x54
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	330c      	adds	r3, #12
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e5      	bne.n	8005f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3314      	adds	r3, #20
 8005fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d119      	bne.n	8006000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0310 	bic.w	r3, r3, #16
 8005fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fec:	61ba      	str	r2, [r7, #24]
 8005fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6979      	ldr	r1, [r7, #20]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e5      	bne.n	8005fcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800600e:	bf00      	nop
 8006010:	3754      	adds	r7, #84	; 0x54
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff0c 	bl	8005e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b21      	cmp	r3, #33	; 0x21
 8006052:	d13e      	bne.n	80060d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605c:	d114      	bne.n	8006088 <UART_Transmit_IT+0x48>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800607a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	1c9a      	adds	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	621a      	str	r2, [r3, #32]
 8006086:	e008      	b.n	800609a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6211      	str	r1, [r2, #32]
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4619      	mov	r1, r3
 80060a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e000      	b.n	80060d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
  }
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe94 	bl	8005e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b08c      	sub	sp, #48	; 0x30
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b22      	cmp	r3, #34	; 0x22
 8006120:	f040 80ae 	bne.w	8006280 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612c:	d117      	bne.n	800615e <UART_Receive_IT+0x50>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d113      	bne.n	800615e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614c:	b29a      	uxth	r2, r3
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	1c9a      	adds	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	629a      	str	r2, [r3, #40]	; 0x28
 800615c:	e026      	b.n	80061ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006170:	d007      	beq.n	8006182 <UART_Receive_IT+0x74>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <UART_Receive_IT+0x82>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e008      	b.n	80061a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619c:	b2da      	uxtb	r2, r3
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4619      	mov	r1, r3
 80061ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d15d      	bne.n	800627c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0220 	bic.w	r2, r2, #32
 80061ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695a      	ldr	r2, [r3, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0201 	bic.w	r2, r2, #1
 80061ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	2b01      	cmp	r3, #1
 8006204:	d135      	bne.n	8006272 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	613b      	str	r3, [r7, #16]
   return(result);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	623a      	str	r2, [r7, #32]
 800622e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	61bb      	str	r3, [r7, #24]
   return(result);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b10      	cmp	r3, #16
 800624c:	d10a      	bne.n	8006264 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fdf9 	bl	8005e62 <HAL_UARTEx_RxEventCallback>
 8006270:	e002      	b.n	8006278 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fde3 	bl	8005e3e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e002      	b.n	8006282 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e000      	b.n	8006282 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3730      	adds	r7, #48	; 0x30
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062cc:	f023 030c 	bic.w	r3, r3, #12
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	430b      	orrs	r3, r1
 80062d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a55      	ldr	r2, [pc, #340]	; (800644c <UART_SetConfig+0x1c0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d103      	bne.n	8006302 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062fa:	f7fe fdfd 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	e002      	b.n	8006308 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006302:	f7fe fde5 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8006306:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006310:	d14c      	bne.n	80063ac <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009a      	lsls	r2, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	4a49      	ldr	r2, [pc, #292]	; (8006450 <UART_SetConfig+0x1c4>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	0119      	lsls	r1, r3, #4
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009a      	lsls	r2, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	fbb2 f2f3 	udiv	r2, r2, r3
 8006348:	4b41      	ldr	r3, [pc, #260]	; (8006450 <UART_SetConfig+0x1c4>)
 800634a:	fba3 0302 	umull	r0, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	2064      	movs	r0, #100	; 0x64
 8006352:	fb00 f303 	mul.w	r3, r0, r3
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	3332      	adds	r3, #50	; 0x32
 800635c:	4a3c      	ldr	r2, [pc, #240]	; (8006450 <UART_SetConfig+0x1c4>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800636a:	4419      	add	r1, r3
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009a      	lsls	r2, r3, #2
 8006376:	441a      	add	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006382:	4b33      	ldr	r3, [pc, #204]	; (8006450 <UART_SetConfig+0x1c4>)
 8006384:	fba3 0302 	umull	r0, r3, r3, r2
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	2064      	movs	r0, #100	; 0x64
 800638c:	fb00 f303 	mul.w	r3, r0, r3
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	3332      	adds	r3, #50	; 0x32
 8006396:	4a2e      	ldr	r2, [pc, #184]	; (8006450 <UART_SetConfig+0x1c4>)
 8006398:	fba2 2303 	umull	r2, r3, r2, r3
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	f003 0207 	and.w	r2, r3, #7
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	440a      	add	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063aa:	e04a      	b.n	8006442 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009a      	lsls	r2, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c2:	4a23      	ldr	r2, [pc, #140]	; (8006450 <UART_SetConfig+0x1c4>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	0119      	lsls	r1, r3, #4
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009a      	lsls	r2, r3, #2
 80063d6:	441a      	add	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e2:	4b1b      	ldr	r3, [pc, #108]	; (8006450 <UART_SetConfig+0x1c4>)
 80063e4:	fba3 0302 	umull	r0, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	2064      	movs	r0, #100	; 0x64
 80063ec:	fb00 f303 	mul.w	r3, r0, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	3332      	adds	r3, #50	; 0x32
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <UART_SetConfig+0x1c4>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006402:	4419      	add	r1, r3
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009a      	lsls	r2, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	fbb2 f2f3 	udiv	r2, r2, r3
 800641a:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <UART_SetConfig+0x1c4>)
 800641c:	fba3 0302 	umull	r0, r3, r3, r2
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	2064      	movs	r0, #100	; 0x64
 8006424:	fb00 f303 	mul.w	r3, r0, r3
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	3332      	adds	r3, #50	; 0x32
 800642e:	4a08      	ldr	r2, [pc, #32]	; (8006450 <UART_SetConfig+0x1c4>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f003 020f 	and.w	r2, r3, #15
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	440a      	add	r2, r1
 8006440:	609a      	str	r2, [r3, #8]
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40013800 	.word	0x40013800
 8006450:	51eb851f 	.word	0x51eb851f

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	; (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	2000006c 	.word	0x2000006c

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	2600      	movs	r6, #0
 8006464:	4d0c      	ldr	r5, [pc, #48]	; (8006498 <__libc_init_array+0x38>)
 8006466:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006468:	1b64      	subs	r4, r4, r5
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	f004 fc38 	bl	800ace4 <_init>
 8006474:	2600      	movs	r6, #0
 8006476:	4d0a      	ldr	r5, [pc, #40]	; (80064a0 <__libc_init_array+0x40>)
 8006478:	4c0a      	ldr	r4, [pc, #40]	; (80064a4 <__libc_init_array+0x44>)
 800647a:	1b64      	subs	r4, r4, r5
 800647c:	10a4      	asrs	r4, r4, #2
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f855 3b04 	ldr.w	r3, [r5], #4
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	0800ba4c 	.word	0x0800ba4c
 800649c:	0800ba4c 	.word	0x0800ba4c
 80064a0:	0800ba4c 	.word	0x0800ba4c
 80064a4:	0800ba50 	.word	0x0800ba50

080064a8 <memcmp>:
 80064a8:	b530      	push	{r4, r5, lr}
 80064aa:	2400      	movs	r4, #0
 80064ac:	3901      	subs	r1, #1
 80064ae:	42a2      	cmp	r2, r4
 80064b0:	d101      	bne.n	80064b6 <memcmp+0xe>
 80064b2:	2000      	movs	r0, #0
 80064b4:	e005      	b.n	80064c2 <memcmp+0x1a>
 80064b6:	5d03      	ldrb	r3, [r0, r4]
 80064b8:	3401      	adds	r4, #1
 80064ba:	5d0d      	ldrb	r5, [r1, r4]
 80064bc:	42ab      	cmp	r3, r5
 80064be:	d0f6      	beq.n	80064ae <memcmp+0x6>
 80064c0:	1b58      	subs	r0, r3, r5
 80064c2:	bd30      	pop	{r4, r5, pc}

080064c4 <memset>:
 80064c4:	4603      	mov	r3, r0
 80064c6:	4402      	add	r2, r0
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d100      	bne.n	80064ce <memset+0xa>
 80064cc:	4770      	bx	lr
 80064ce:	f803 1b01 	strb.w	r1, [r3], #1
 80064d2:	e7f9      	b.n	80064c8 <memset+0x4>

080064d4 <__cvt>:
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064da:	461f      	mov	r7, r3
 80064dc:	bfbb      	ittet	lt
 80064de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80064e2:	461f      	movlt	r7, r3
 80064e4:	2300      	movge	r3, #0
 80064e6:	232d      	movlt	r3, #45	; 0x2d
 80064e8:	b088      	sub	sp, #32
 80064ea:	4614      	mov	r4, r2
 80064ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80064f0:	7013      	strb	r3, [r2, #0]
 80064f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80064f8:	f023 0820 	bic.w	r8, r3, #32
 80064fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006500:	d005      	beq.n	800650e <__cvt+0x3a>
 8006502:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006506:	d100      	bne.n	800650a <__cvt+0x36>
 8006508:	3501      	adds	r5, #1
 800650a:	2302      	movs	r3, #2
 800650c:	e000      	b.n	8006510 <__cvt+0x3c>
 800650e:	2303      	movs	r3, #3
 8006510:	aa07      	add	r2, sp, #28
 8006512:	9204      	str	r2, [sp, #16]
 8006514:	aa06      	add	r2, sp, #24
 8006516:	e9cd a202 	strd	sl, r2, [sp, #8]
 800651a:	e9cd 3500 	strd	r3, r5, [sp]
 800651e:	4622      	mov	r2, r4
 8006520:	463b      	mov	r3, r7
 8006522:	f001 fda1 	bl	8008068 <_dtoa_r>
 8006526:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800652a:	4606      	mov	r6, r0
 800652c:	d102      	bne.n	8006534 <__cvt+0x60>
 800652e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006530:	07db      	lsls	r3, r3, #31
 8006532:	d522      	bpl.n	800657a <__cvt+0xa6>
 8006534:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006538:	eb06 0905 	add.w	r9, r6, r5
 800653c:	d110      	bne.n	8006560 <__cvt+0x8c>
 800653e:	7833      	ldrb	r3, [r6, #0]
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d10a      	bne.n	800655a <__cvt+0x86>
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	4620      	mov	r0, r4
 800654a:	4639      	mov	r1, r7
 800654c:	f7fa fa44 	bl	80009d8 <__aeabi_dcmpeq>
 8006550:	b918      	cbnz	r0, 800655a <__cvt+0x86>
 8006552:	f1c5 0501 	rsb	r5, r5, #1
 8006556:	f8ca 5000 	str.w	r5, [sl]
 800655a:	f8da 3000 	ldr.w	r3, [sl]
 800655e:	4499      	add	r9, r3
 8006560:	2200      	movs	r2, #0
 8006562:	2300      	movs	r3, #0
 8006564:	4620      	mov	r0, r4
 8006566:	4639      	mov	r1, r7
 8006568:	f7fa fa36 	bl	80009d8 <__aeabi_dcmpeq>
 800656c:	b108      	cbz	r0, 8006572 <__cvt+0x9e>
 800656e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006572:	2230      	movs	r2, #48	; 0x30
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	454b      	cmp	r3, r9
 8006578:	d307      	bcc.n	800658a <__cvt+0xb6>
 800657a:	4630      	mov	r0, r6
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006580:	1b9b      	subs	r3, r3, r6
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	b008      	add	sp, #32
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	9107      	str	r1, [sp, #28]
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e7f0      	b.n	8006574 <__cvt+0xa0>

08006592 <__exponent>:
 8006592:	4603      	mov	r3, r0
 8006594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006596:	2900      	cmp	r1, #0
 8006598:	f803 2b02 	strb.w	r2, [r3], #2
 800659c:	bfb6      	itet	lt
 800659e:	222d      	movlt	r2, #45	; 0x2d
 80065a0:	222b      	movge	r2, #43	; 0x2b
 80065a2:	4249      	neglt	r1, r1
 80065a4:	2909      	cmp	r1, #9
 80065a6:	7042      	strb	r2, [r0, #1]
 80065a8:	dd2b      	ble.n	8006602 <__exponent+0x70>
 80065aa:	f10d 0407 	add.w	r4, sp, #7
 80065ae:	46a4      	mov	ip, r4
 80065b0:	270a      	movs	r7, #10
 80065b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80065b6:	460a      	mov	r2, r1
 80065b8:	46a6      	mov	lr, r4
 80065ba:	fb07 1516 	mls	r5, r7, r6, r1
 80065be:	2a63      	cmp	r2, #99	; 0x63
 80065c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80065c4:	4631      	mov	r1, r6
 80065c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80065ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065ce:	dcf0      	bgt.n	80065b2 <__exponent+0x20>
 80065d0:	3130      	adds	r1, #48	; 0x30
 80065d2:	f1ae 0502 	sub.w	r5, lr, #2
 80065d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065da:	4629      	mov	r1, r5
 80065dc:	1c44      	adds	r4, r0, #1
 80065de:	4561      	cmp	r1, ip
 80065e0:	d30a      	bcc.n	80065f8 <__exponent+0x66>
 80065e2:	f10d 0209 	add.w	r2, sp, #9
 80065e6:	eba2 020e 	sub.w	r2, r2, lr
 80065ea:	4565      	cmp	r5, ip
 80065ec:	bf88      	it	hi
 80065ee:	2200      	movhi	r2, #0
 80065f0:	4413      	add	r3, r2
 80065f2:	1a18      	subs	r0, r3, r0
 80065f4:	b003      	add	sp, #12
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006600:	e7ed      	b.n	80065de <__exponent+0x4c>
 8006602:	2330      	movs	r3, #48	; 0x30
 8006604:	3130      	adds	r1, #48	; 0x30
 8006606:	7083      	strb	r3, [r0, #2]
 8006608:	70c1      	strb	r1, [r0, #3]
 800660a:	1d03      	adds	r3, r0, #4
 800660c:	e7f1      	b.n	80065f2 <__exponent+0x60>
	...

08006610 <_printf_float>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	b091      	sub	sp, #68	; 0x44
 8006616:	460c      	mov	r4, r1
 8006618:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800661c:	4616      	mov	r6, r2
 800661e:	461f      	mov	r7, r3
 8006620:	4605      	mov	r5, r0
 8006622:	f002 fe75 	bl	8009310 <_localeconv_r>
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	9309      	str	r3, [sp, #36]	; 0x24
 800662c:	f7f9 fda8 	bl	8000180 <strlen>
 8006630:	2300      	movs	r3, #0
 8006632:	930e      	str	r3, [sp, #56]	; 0x38
 8006634:	f8d8 3000 	ldr.w	r3, [r8]
 8006638:	900a      	str	r0, [sp, #40]	; 0x28
 800663a:	3307      	adds	r3, #7
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	f103 0208 	add.w	r2, r3, #8
 8006644:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006648:	f8d4 b000 	ldr.w	fp, [r4]
 800664c:	f8c8 2000 	str.w	r2, [r8]
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006658:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800665c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006660:	930b      	str	r3, [sp, #44]	; 0x2c
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	4640      	mov	r0, r8
 8006668:	4b9c      	ldr	r3, [pc, #624]	; (80068dc <_printf_float+0x2cc>)
 800666a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800666c:	f7fa f9e6 	bl	8000a3c <__aeabi_dcmpun>
 8006670:	bb70      	cbnz	r0, 80066d0 <_printf_float+0xc0>
 8006672:	f04f 32ff 	mov.w	r2, #4294967295
 8006676:	4640      	mov	r0, r8
 8006678:	4b98      	ldr	r3, [pc, #608]	; (80068dc <_printf_float+0x2cc>)
 800667a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800667c:	f7fa f9c0 	bl	8000a00 <__aeabi_dcmple>
 8006680:	bb30      	cbnz	r0, 80066d0 <_printf_float+0xc0>
 8006682:	2200      	movs	r2, #0
 8006684:	2300      	movs	r3, #0
 8006686:	4640      	mov	r0, r8
 8006688:	4651      	mov	r1, sl
 800668a:	f7fa f9af 	bl	80009ec <__aeabi_dcmplt>
 800668e:	b110      	cbz	r0, 8006696 <_printf_float+0x86>
 8006690:	232d      	movs	r3, #45	; 0x2d
 8006692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006696:	4b92      	ldr	r3, [pc, #584]	; (80068e0 <_printf_float+0x2d0>)
 8006698:	4892      	ldr	r0, [pc, #584]	; (80068e4 <_printf_float+0x2d4>)
 800669a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800669e:	bf94      	ite	ls
 80066a0:	4698      	movls	r8, r3
 80066a2:	4680      	movhi	r8, r0
 80066a4:	2303      	movs	r3, #3
 80066a6:	f04f 0a00 	mov.w	sl, #0
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	f02b 0304 	bic.w	r3, fp, #4
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	4633      	mov	r3, r6
 80066b4:	4621      	mov	r1, r4
 80066b6:	4628      	mov	r0, r5
 80066b8:	9700      	str	r7, [sp, #0]
 80066ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80066bc:	f000 f9d4 	bl	8006a68 <_printf_common>
 80066c0:	3001      	adds	r0, #1
 80066c2:	f040 8090 	bne.w	80067e6 <_printf_float+0x1d6>
 80066c6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ca:	b011      	add	sp, #68	; 0x44
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	4642      	mov	r2, r8
 80066d2:	4653      	mov	r3, sl
 80066d4:	4640      	mov	r0, r8
 80066d6:	4651      	mov	r1, sl
 80066d8:	f7fa f9b0 	bl	8000a3c <__aeabi_dcmpun>
 80066dc:	b148      	cbz	r0, 80066f2 <_printf_float+0xe2>
 80066de:	f1ba 0f00 	cmp.w	sl, #0
 80066e2:	bfb8      	it	lt
 80066e4:	232d      	movlt	r3, #45	; 0x2d
 80066e6:	4880      	ldr	r0, [pc, #512]	; (80068e8 <_printf_float+0x2d8>)
 80066e8:	bfb8      	it	lt
 80066ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066ee:	4b7f      	ldr	r3, [pc, #508]	; (80068ec <_printf_float+0x2dc>)
 80066f0:	e7d3      	b.n	800669a <_printf_float+0x8a>
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	d142      	bne.n	8006782 <_printf_float+0x172>
 80066fc:	2306      	movs	r3, #6
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	9206      	str	r2, [sp, #24]
 8006704:	aa0e      	add	r2, sp, #56	; 0x38
 8006706:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800670a:	aa0d      	add	r2, sp, #52	; 0x34
 800670c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006710:	9203      	str	r2, [sp, #12]
 8006712:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	4642      	mov	r2, r8
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	4628      	mov	r0, r5
 8006724:	4653      	mov	r3, sl
 8006726:	910b      	str	r1, [sp, #44]	; 0x2c
 8006728:	f7ff fed4 	bl	80064d4 <__cvt>
 800672c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800672e:	4680      	mov	r8, r0
 8006730:	2947      	cmp	r1, #71	; 0x47
 8006732:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006734:	d108      	bne.n	8006748 <_printf_float+0x138>
 8006736:	1cc8      	adds	r0, r1, #3
 8006738:	db02      	blt.n	8006740 <_printf_float+0x130>
 800673a:	6863      	ldr	r3, [r4, #4]
 800673c:	4299      	cmp	r1, r3
 800673e:	dd40      	ble.n	80067c2 <_printf_float+0x1b2>
 8006740:	f1a9 0902 	sub.w	r9, r9, #2
 8006744:	fa5f f989 	uxtb.w	r9, r9
 8006748:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800674c:	d81f      	bhi.n	800678e <_printf_float+0x17e>
 800674e:	464a      	mov	r2, r9
 8006750:	3901      	subs	r1, #1
 8006752:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006756:	910d      	str	r1, [sp, #52]	; 0x34
 8006758:	f7ff ff1b 	bl	8006592 <__exponent>
 800675c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800675e:	4682      	mov	sl, r0
 8006760:	1813      	adds	r3, r2, r0
 8006762:	2a01      	cmp	r2, #1
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	dc02      	bgt.n	800676e <_printf_float+0x15e>
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	07d2      	lsls	r2, r2, #31
 800676c:	d501      	bpl.n	8006772 <_printf_float+0x162>
 800676e:	3301      	adds	r3, #1
 8006770:	6123      	str	r3, [r4, #16]
 8006772:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006776:	2b00      	cmp	r3, #0
 8006778:	d09b      	beq.n	80066b2 <_printf_float+0xa2>
 800677a:	232d      	movs	r3, #45	; 0x2d
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006780:	e797      	b.n	80066b2 <_printf_float+0xa2>
 8006782:	2947      	cmp	r1, #71	; 0x47
 8006784:	d1bc      	bne.n	8006700 <_printf_float+0xf0>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1ba      	bne.n	8006700 <_printf_float+0xf0>
 800678a:	2301      	movs	r3, #1
 800678c:	e7b7      	b.n	80066fe <_printf_float+0xee>
 800678e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006792:	d118      	bne.n	80067c6 <_printf_float+0x1b6>
 8006794:	2900      	cmp	r1, #0
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	dd0b      	ble.n	80067b2 <_printf_float+0x1a2>
 800679a:	6121      	str	r1, [r4, #16]
 800679c:	b913      	cbnz	r3, 80067a4 <_printf_float+0x194>
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	07d0      	lsls	r0, r2, #31
 80067a2:	d502      	bpl.n	80067aa <_printf_float+0x19a>
 80067a4:	3301      	adds	r3, #1
 80067a6:	440b      	add	r3, r1
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	f04f 0a00 	mov.w	sl, #0
 80067ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80067b0:	e7df      	b.n	8006772 <_printf_float+0x162>
 80067b2:	b913      	cbnz	r3, 80067ba <_printf_float+0x1aa>
 80067b4:	6822      	ldr	r2, [r4, #0]
 80067b6:	07d2      	lsls	r2, r2, #31
 80067b8:	d501      	bpl.n	80067be <_printf_float+0x1ae>
 80067ba:	3302      	adds	r3, #2
 80067bc:	e7f4      	b.n	80067a8 <_printf_float+0x198>
 80067be:	2301      	movs	r3, #1
 80067c0:	e7f2      	b.n	80067a8 <_printf_float+0x198>
 80067c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80067c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067c8:	4299      	cmp	r1, r3
 80067ca:	db05      	blt.n	80067d8 <_printf_float+0x1c8>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	6121      	str	r1, [r4, #16]
 80067d0:	07d8      	lsls	r0, r3, #31
 80067d2:	d5ea      	bpl.n	80067aa <_printf_float+0x19a>
 80067d4:	1c4b      	adds	r3, r1, #1
 80067d6:	e7e7      	b.n	80067a8 <_printf_float+0x198>
 80067d8:	2900      	cmp	r1, #0
 80067da:	bfcc      	ite	gt
 80067dc:	2201      	movgt	r2, #1
 80067de:	f1c1 0202 	rsble	r2, r1, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	e7e0      	b.n	80067a8 <_printf_float+0x198>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	055a      	lsls	r2, r3, #21
 80067ea:	d407      	bmi.n	80067fc <_printf_float+0x1ec>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	4642      	mov	r2, r8
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	d12b      	bne.n	8006852 <_printf_float+0x242>
 80067fa:	e764      	b.n	80066c6 <_printf_float+0xb6>
 80067fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006800:	f240 80dd 	bls.w	80069be <_printf_float+0x3ae>
 8006804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006808:	2200      	movs	r2, #0
 800680a:	2300      	movs	r3, #0
 800680c:	f7fa f8e4 	bl	80009d8 <__aeabi_dcmpeq>
 8006810:	2800      	cmp	r0, #0
 8006812:	d033      	beq.n	800687c <_printf_float+0x26c>
 8006814:	2301      	movs	r3, #1
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	4a35      	ldr	r2, [pc, #212]	; (80068f0 <_printf_float+0x2e0>)
 800681c:	47b8      	blx	r7
 800681e:	3001      	adds	r0, #1
 8006820:	f43f af51 	beq.w	80066c6 <_printf_float+0xb6>
 8006824:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006828:	429a      	cmp	r2, r3
 800682a:	db02      	blt.n	8006832 <_printf_float+0x222>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	07d8      	lsls	r0, r3, #31
 8006830:	d50f      	bpl.n	8006852 <_printf_float+0x242>
 8006832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f af42 	beq.w	80066c6 <_printf_float+0xb6>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	f104 091a 	add.w	r9, r4, #26
 800684a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800684c:	3b01      	subs	r3, #1
 800684e:	4543      	cmp	r3, r8
 8006850:	dc09      	bgt.n	8006866 <_printf_float+0x256>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	079b      	lsls	r3, r3, #30
 8006856:	f100 8102 	bmi.w	8006a5e <_printf_float+0x44e>
 800685a:	68e0      	ldr	r0, [r4, #12]
 800685c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800685e:	4298      	cmp	r0, r3
 8006860:	bfb8      	it	lt
 8006862:	4618      	movlt	r0, r3
 8006864:	e731      	b.n	80066ca <_printf_float+0xba>
 8006866:	2301      	movs	r3, #1
 8006868:	464a      	mov	r2, r9
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f af28 	beq.w	80066c6 <_printf_float+0xb6>
 8006876:	f108 0801 	add.w	r8, r8, #1
 800687a:	e7e6      	b.n	800684a <_printf_float+0x23a>
 800687c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800687e:	2b00      	cmp	r3, #0
 8006880:	dc38      	bgt.n	80068f4 <_printf_float+0x2e4>
 8006882:	2301      	movs	r3, #1
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <_printf_float+0x2e0>)
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f af1a 	beq.w	80066c6 <_printf_float+0xb6>
 8006892:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006896:	4313      	orrs	r3, r2
 8006898:	d102      	bne.n	80068a0 <_printf_float+0x290>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	07d9      	lsls	r1, r3, #31
 800689e:	d5d8      	bpl.n	8006852 <_printf_float+0x242>
 80068a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f af0b 	beq.w	80066c6 <_printf_float+0xb6>
 80068b0:	f04f 0900 	mov.w	r9, #0
 80068b4:	f104 0a1a 	add.w	sl, r4, #26
 80068b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ba:	425b      	negs	r3, r3
 80068bc:	454b      	cmp	r3, r9
 80068be:	dc01      	bgt.n	80068c4 <_printf_float+0x2b4>
 80068c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c2:	e794      	b.n	80067ee <_printf_float+0x1de>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4652      	mov	r2, sl
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	47b8      	blx	r7
 80068ce:	3001      	adds	r0, #1
 80068d0:	f43f aef9 	beq.w	80066c6 <_printf_float+0xb6>
 80068d4:	f109 0901 	add.w	r9, r9, #1
 80068d8:	e7ee      	b.n	80068b8 <_printf_float+0x2a8>
 80068da:	bf00      	nop
 80068dc:	7fefffff 	.word	0x7fefffff
 80068e0:	0800b590 	.word	0x0800b590
 80068e4:	0800b594 	.word	0x0800b594
 80068e8:	0800b59c 	.word	0x0800b59c
 80068ec:	0800b598 	.word	0x0800b598
 80068f0:	0800b5a0 	.word	0x0800b5a0
 80068f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bfa8      	it	ge
 80068fc:	461a      	movge	r2, r3
 80068fe:	2a00      	cmp	r2, #0
 8006900:	4691      	mov	r9, r2
 8006902:	dc37      	bgt.n	8006974 <_printf_float+0x364>
 8006904:	f04f 0b00 	mov.w	fp, #0
 8006908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690c:	f104 021a 	add.w	r2, r4, #26
 8006910:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006914:	ebaa 0309 	sub.w	r3, sl, r9
 8006918:	455b      	cmp	r3, fp
 800691a:	dc33      	bgt.n	8006984 <_printf_float+0x374>
 800691c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006920:	429a      	cmp	r2, r3
 8006922:	db3b      	blt.n	800699c <_printf_float+0x38c>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	07da      	lsls	r2, r3, #31
 8006928:	d438      	bmi.n	800699c <_printf_float+0x38c>
 800692a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800692c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800692e:	eba2 030a 	sub.w	r3, r2, sl
 8006932:	eba2 0901 	sub.w	r9, r2, r1
 8006936:	4599      	cmp	r9, r3
 8006938:	bfa8      	it	ge
 800693a:	4699      	movge	r9, r3
 800693c:	f1b9 0f00 	cmp.w	r9, #0
 8006940:	dc34      	bgt.n	80069ac <_printf_float+0x39c>
 8006942:	f04f 0800 	mov.w	r8, #0
 8006946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800694a:	f104 0a1a 	add.w	sl, r4, #26
 800694e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	eba3 0309 	sub.w	r3, r3, r9
 8006958:	4543      	cmp	r3, r8
 800695a:	f77f af7a 	ble.w	8006852 <_printf_float+0x242>
 800695e:	2301      	movs	r3, #1
 8006960:	4652      	mov	r2, sl
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	f43f aeac 	beq.w	80066c6 <_printf_float+0xb6>
 800696e:	f108 0801 	add.w	r8, r8, #1
 8006972:	e7ec      	b.n	800694e <_printf_float+0x33e>
 8006974:	4613      	mov	r3, r2
 8006976:	4631      	mov	r1, r6
 8006978:	4642      	mov	r2, r8
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	d1c0      	bne.n	8006904 <_printf_float+0x2f4>
 8006982:	e6a0      	b.n	80066c6 <_printf_float+0xb6>
 8006984:	2301      	movs	r3, #1
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	920b      	str	r2, [sp, #44]	; 0x2c
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	f43f ae99 	beq.w	80066c6 <_printf_float+0xb6>
 8006994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006996:	f10b 0b01 	add.w	fp, fp, #1
 800699a:	e7b9      	b.n	8006910 <_printf_float+0x300>
 800699c:	4631      	mov	r1, r6
 800699e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	d1bf      	bne.n	800692a <_printf_float+0x31a>
 80069aa:	e68c      	b.n	80066c6 <_printf_float+0xb6>
 80069ac:	464b      	mov	r3, r9
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	eb08 020a 	add.w	r2, r8, sl
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d1c2      	bne.n	8006942 <_printf_float+0x332>
 80069bc:	e683      	b.n	80066c6 <_printf_float+0xb6>
 80069be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069c0:	2a01      	cmp	r2, #1
 80069c2:	dc01      	bgt.n	80069c8 <_printf_float+0x3b8>
 80069c4:	07db      	lsls	r3, r3, #31
 80069c6:	d537      	bpl.n	8006a38 <_printf_float+0x428>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4642      	mov	r2, r8
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	f43f ae77 	beq.w	80066c6 <_printf_float+0xb6>
 80069d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	f43f ae6f 	beq.w	80066c6 <_printf_float+0xb6>
 80069e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069ec:	2200      	movs	r2, #0
 80069ee:	2300      	movs	r3, #0
 80069f0:	f7f9 fff2 	bl	80009d8 <__aeabi_dcmpeq>
 80069f4:	b9d8      	cbnz	r0, 8006a2e <_printf_float+0x41e>
 80069f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f8:	f108 0201 	add.w	r2, r8, #1
 80069fc:	3b01      	subs	r3, #1
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	d10e      	bne.n	8006a26 <_printf_float+0x416>
 8006a08:	e65d      	b.n	80066c6 <_printf_float+0xb6>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	464a      	mov	r2, r9
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	f43f ae56 	beq.w	80066c6 <_printf_float+0xb6>
 8006a1a:	f108 0801 	add.w	r8, r8, #1
 8006a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a20:	3b01      	subs	r3, #1
 8006a22:	4543      	cmp	r3, r8
 8006a24:	dcf1      	bgt.n	8006a0a <_printf_float+0x3fa>
 8006a26:	4653      	mov	r3, sl
 8006a28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a2c:	e6e0      	b.n	80067f0 <_printf_float+0x1e0>
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	f104 091a 	add.w	r9, r4, #26
 8006a36:	e7f2      	b.n	8006a1e <_printf_float+0x40e>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	e7df      	b.n	80069fe <_printf_float+0x3ee>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	464a      	mov	r2, r9
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f43f ae3c 	beq.w	80066c6 <_printf_float+0xb6>
 8006a4e:	f108 0801 	add.w	r8, r8, #1
 8006a52:	68e3      	ldr	r3, [r4, #12]
 8006a54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a56:	1a5b      	subs	r3, r3, r1
 8006a58:	4543      	cmp	r3, r8
 8006a5a:	dcf0      	bgt.n	8006a3e <_printf_float+0x42e>
 8006a5c:	e6fd      	b.n	800685a <_printf_float+0x24a>
 8006a5e:	f04f 0800 	mov.w	r8, #0
 8006a62:	f104 0919 	add.w	r9, r4, #25
 8006a66:	e7f4      	b.n	8006a52 <_printf_float+0x442>

08006a68 <_printf_common>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	4699      	mov	r9, r3
 8006a70:	688a      	ldr	r2, [r1, #8]
 8006a72:	690b      	ldr	r3, [r1, #16]
 8006a74:	4607      	mov	r7, r0
 8006a76:	4293      	cmp	r3, r2
 8006a78:	bfb8      	it	lt
 8006a7a:	4613      	movlt	r3, r2
 8006a7c:	6033      	str	r3, [r6, #0]
 8006a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a82:	460c      	mov	r4, r1
 8006a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a88:	b10a      	cbz	r2, 8006a8e <_printf_common+0x26>
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	0699      	lsls	r1, r3, #26
 8006a92:	bf42      	ittt	mi
 8006a94:	6833      	ldrmi	r3, [r6, #0]
 8006a96:	3302      	addmi	r3, #2
 8006a98:	6033      	strmi	r3, [r6, #0]
 8006a9a:	6825      	ldr	r5, [r4, #0]
 8006a9c:	f015 0506 	ands.w	r5, r5, #6
 8006aa0:	d106      	bne.n	8006ab0 <_printf_common+0x48>
 8006aa2:	f104 0a19 	add.w	sl, r4, #25
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	6832      	ldr	r2, [r6, #0]
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	42ab      	cmp	r3, r5
 8006aae:	dc28      	bgt.n	8006b02 <_printf_common+0x9a>
 8006ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ab4:	1e13      	subs	r3, r2, #0
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	bf18      	it	ne
 8006aba:	2301      	movne	r3, #1
 8006abc:	0692      	lsls	r2, r2, #26
 8006abe:	d42d      	bmi.n	8006b1c <_printf_common+0xb4>
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ac8:	47c0      	blx	r8
 8006aca:	3001      	adds	r0, #1
 8006acc:	d020      	beq.n	8006b10 <_printf_common+0xa8>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	68e5      	ldr	r5, [r4, #12]
 8006ad2:	f003 0306 	and.w	r3, r3, #6
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	bf18      	it	ne
 8006ada:	2500      	movne	r5, #0
 8006adc:	6832      	ldr	r2, [r6, #0]
 8006ade:	f04f 0600 	mov.w	r6, #0
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	bf08      	it	eq
 8006ae6:	1aad      	subeq	r5, r5, r2
 8006ae8:	6922      	ldr	r2, [r4, #16]
 8006aea:	bf08      	it	eq
 8006aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af0:	4293      	cmp	r3, r2
 8006af2:	bfc4      	itt	gt
 8006af4:	1a9b      	subgt	r3, r3, r2
 8006af6:	18ed      	addgt	r5, r5, r3
 8006af8:	341a      	adds	r4, #26
 8006afa:	42b5      	cmp	r5, r6
 8006afc:	d11a      	bne.n	8006b34 <_printf_common+0xcc>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e008      	b.n	8006b14 <_printf_common+0xac>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4652      	mov	r2, sl
 8006b06:	4649      	mov	r1, r9
 8006b08:	4638      	mov	r0, r7
 8006b0a:	47c0      	blx	r8
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d103      	bne.n	8006b18 <_printf_common+0xb0>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	3501      	adds	r5, #1
 8006b1a:	e7c4      	b.n	8006aa6 <_printf_common+0x3e>
 8006b1c:	2030      	movs	r0, #48	; 0x30
 8006b1e:	18e1      	adds	r1, r4, r3
 8006b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b2a:	4422      	add	r2, r4
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b32:	e7c5      	b.n	8006ac0 <_printf_common+0x58>
 8006b34:	2301      	movs	r3, #1
 8006b36:	4622      	mov	r2, r4
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	47c0      	blx	r8
 8006b3e:	3001      	adds	r0, #1
 8006b40:	d0e6      	beq.n	8006b10 <_printf_common+0xa8>
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7d9      	b.n	8006afa <_printf_common+0x92>
	...

08006b48 <_printf_i>:
 8006b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	7e27      	ldrb	r7, [r4, #24]
 8006b50:	4691      	mov	r9, r2
 8006b52:	2f78      	cmp	r7, #120	; 0x78
 8006b54:	4680      	mov	r8, r0
 8006b56:	469a      	mov	sl, r3
 8006b58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b5e:	d807      	bhi.n	8006b70 <_printf_i+0x28>
 8006b60:	2f62      	cmp	r7, #98	; 0x62
 8006b62:	d80a      	bhi.n	8006b7a <_printf_i+0x32>
 8006b64:	2f00      	cmp	r7, #0
 8006b66:	f000 80d9 	beq.w	8006d1c <_printf_i+0x1d4>
 8006b6a:	2f58      	cmp	r7, #88	; 0x58
 8006b6c:	f000 80a4 	beq.w	8006cb8 <_printf_i+0x170>
 8006b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b78:	e03a      	b.n	8006bf0 <_printf_i+0xa8>
 8006b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b7e:	2b15      	cmp	r3, #21
 8006b80:	d8f6      	bhi.n	8006b70 <_printf_i+0x28>
 8006b82:	a001      	add	r0, pc, #4	; (adr r0, 8006b88 <_printf_i+0x40>)
 8006b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b88:	08006be1 	.word	0x08006be1
 8006b8c:	08006bf5 	.word	0x08006bf5
 8006b90:	08006b71 	.word	0x08006b71
 8006b94:	08006b71 	.word	0x08006b71
 8006b98:	08006b71 	.word	0x08006b71
 8006b9c:	08006b71 	.word	0x08006b71
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006b71 	.word	0x08006b71
 8006ba8:	08006b71 	.word	0x08006b71
 8006bac:	08006b71 	.word	0x08006b71
 8006bb0:	08006b71 	.word	0x08006b71
 8006bb4:	08006d03 	.word	0x08006d03
 8006bb8:	08006c25 	.word	0x08006c25
 8006bbc:	08006ce5 	.word	0x08006ce5
 8006bc0:	08006b71 	.word	0x08006b71
 8006bc4:	08006b71 	.word	0x08006b71
 8006bc8:	08006d25 	.word	0x08006d25
 8006bcc:	08006b71 	.word	0x08006b71
 8006bd0:	08006c25 	.word	0x08006c25
 8006bd4:	08006b71 	.word	0x08006b71
 8006bd8:	08006b71 	.word	0x08006b71
 8006bdc:	08006ced 	.word	0x08006ced
 8006be0:	680b      	ldr	r3, [r1, #0]
 8006be2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	600a      	str	r2, [r1, #0]
 8006bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0a4      	b.n	8006d3e <_printf_i+0x1f6>
 8006bf4:	6825      	ldr	r5, [r4, #0]
 8006bf6:	6808      	ldr	r0, [r1, #0]
 8006bf8:	062e      	lsls	r6, r5, #24
 8006bfa:	f100 0304 	add.w	r3, r0, #4
 8006bfe:	d50a      	bpl.n	8006c16 <_printf_i+0xce>
 8006c00:	6805      	ldr	r5, [r0, #0]
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	da03      	bge.n	8006c10 <_printf_i+0xc8>
 8006c08:	232d      	movs	r3, #45	; 0x2d
 8006c0a:	426d      	negs	r5, r5
 8006c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c10:	230a      	movs	r3, #10
 8006c12:	485e      	ldr	r0, [pc, #376]	; (8006d8c <_printf_i+0x244>)
 8006c14:	e019      	b.n	8006c4a <_printf_i+0x102>
 8006c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c1a:	6805      	ldr	r5, [r0, #0]
 8006c1c:	600b      	str	r3, [r1, #0]
 8006c1e:	bf18      	it	ne
 8006c20:	b22d      	sxthne	r5, r5
 8006c22:	e7ef      	b.n	8006c04 <_printf_i+0xbc>
 8006c24:	680b      	ldr	r3, [r1, #0]
 8006c26:	6825      	ldr	r5, [r4, #0]
 8006c28:	1d18      	adds	r0, r3, #4
 8006c2a:	6008      	str	r0, [r1, #0]
 8006c2c:	0628      	lsls	r0, r5, #24
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0xec>
 8006c30:	681d      	ldr	r5, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0xf2>
 8006c34:	0669      	lsls	r1, r5, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0xe8>
 8006c38:	881d      	ldrh	r5, [r3, #0]
 8006c3a:	2f6f      	cmp	r7, #111	; 0x6f
 8006c3c:	bf0c      	ite	eq
 8006c3e:	2308      	moveq	r3, #8
 8006c40:	230a      	movne	r3, #10
 8006c42:	4852      	ldr	r0, [pc, #328]	; (8006d8c <_printf_i+0x244>)
 8006c44:	2100      	movs	r1, #0
 8006c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c4a:	6866      	ldr	r6, [r4, #4]
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	bfa8      	it	ge
 8006c50:	6821      	ldrge	r1, [r4, #0]
 8006c52:	60a6      	str	r6, [r4, #8]
 8006c54:	bfa4      	itt	ge
 8006c56:	f021 0104 	bicge.w	r1, r1, #4
 8006c5a:	6021      	strge	r1, [r4, #0]
 8006c5c:	b90d      	cbnz	r5, 8006c62 <_printf_i+0x11a>
 8006c5e:	2e00      	cmp	r6, #0
 8006c60:	d04d      	beq.n	8006cfe <_printf_i+0x1b6>
 8006c62:	4616      	mov	r6, r2
 8006c64:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c68:	fb03 5711 	mls	r7, r3, r1, r5
 8006c6c:	5dc7      	ldrb	r7, [r0, r7]
 8006c6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c72:	462f      	mov	r7, r5
 8006c74:	42bb      	cmp	r3, r7
 8006c76:	460d      	mov	r5, r1
 8006c78:	d9f4      	bls.n	8006c64 <_printf_i+0x11c>
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d10b      	bne.n	8006c96 <_printf_i+0x14e>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	07df      	lsls	r7, r3, #31
 8006c82:	d508      	bpl.n	8006c96 <_printf_i+0x14e>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	6861      	ldr	r1, [r4, #4]
 8006c88:	4299      	cmp	r1, r3
 8006c8a:	bfde      	ittt	le
 8006c8c:	2330      	movle	r3, #48	; 0x30
 8006c8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c96:	1b92      	subs	r2, r2, r6
 8006c98:	6122      	str	r2, [r4, #16]
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	f8cd a000 	str.w	sl, [sp]
 8006ca4:	aa03      	add	r2, sp, #12
 8006ca6:	f7ff fedf 	bl	8006a68 <_printf_common>
 8006caa:	3001      	adds	r0, #1
 8006cac:	d14c      	bne.n	8006d48 <_printf_i+0x200>
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	b004      	add	sp, #16
 8006cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb8:	4834      	ldr	r0, [pc, #208]	; (8006d8c <_printf_i+0x244>)
 8006cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cbe:	680e      	ldr	r6, [r1, #0]
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006cc6:	061f      	lsls	r7, r3, #24
 8006cc8:	600e      	str	r6, [r1, #0]
 8006cca:	d514      	bpl.n	8006cf6 <_printf_i+0x1ae>
 8006ccc:	07d9      	lsls	r1, r3, #31
 8006cce:	bf44      	itt	mi
 8006cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd4:	6023      	strmi	r3, [r4, #0]
 8006cd6:	b91d      	cbnz	r5, 8006ce0 <_printf_i+0x198>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	f023 0320 	bic.w	r3, r3, #32
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	e7af      	b.n	8006c44 <_printf_i+0xfc>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	f043 0320 	orr.w	r3, r3, #32
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	2378      	movs	r3, #120	; 0x78
 8006cee:	4828      	ldr	r0, [pc, #160]	; (8006d90 <_printf_i+0x248>)
 8006cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cf4:	e7e3      	b.n	8006cbe <_printf_i+0x176>
 8006cf6:	065e      	lsls	r6, r3, #25
 8006cf8:	bf48      	it	mi
 8006cfa:	b2ad      	uxthmi	r5, r5
 8006cfc:	e7e6      	b.n	8006ccc <_printf_i+0x184>
 8006cfe:	4616      	mov	r6, r2
 8006d00:	e7bb      	b.n	8006c7a <_printf_i+0x132>
 8006d02:	680b      	ldr	r3, [r1, #0]
 8006d04:	6826      	ldr	r6, [r4, #0]
 8006d06:	1d1d      	adds	r5, r3, #4
 8006d08:	6960      	ldr	r0, [r4, #20]
 8006d0a:	600d      	str	r5, [r1, #0]
 8006d0c:	0635      	lsls	r5, r6, #24
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	d501      	bpl.n	8006d16 <_printf_i+0x1ce>
 8006d12:	6018      	str	r0, [r3, #0]
 8006d14:	e002      	b.n	8006d1c <_printf_i+0x1d4>
 8006d16:	0671      	lsls	r1, r6, #25
 8006d18:	d5fb      	bpl.n	8006d12 <_printf_i+0x1ca>
 8006d1a:	8018      	strh	r0, [r3, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4616      	mov	r6, r2
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	e7ba      	b.n	8006c9a <_printf_i+0x152>
 8006d24:	680b      	ldr	r3, [r1, #0]
 8006d26:	1d1a      	adds	r2, r3, #4
 8006d28:	600a      	str	r2, [r1, #0]
 8006d2a:	681e      	ldr	r6, [r3, #0]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4630      	mov	r0, r6
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	f002 fb0b 	bl	800934c <memchr>
 8006d36:	b108      	cbz	r0, 8006d3c <_printf_i+0x1f4>
 8006d38:	1b80      	subs	r0, r0, r6
 8006d3a:	6060      	str	r0, [r4, #4]
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	2300      	movs	r3, #0
 8006d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d46:	e7a8      	b.n	8006c9a <_printf_i+0x152>
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	47d0      	blx	sl
 8006d52:	3001      	adds	r0, #1
 8006d54:	d0ab      	beq.n	8006cae <_printf_i+0x166>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	079b      	lsls	r3, r3, #30
 8006d5a:	d413      	bmi.n	8006d84 <_printf_i+0x23c>
 8006d5c:	68e0      	ldr	r0, [r4, #12]
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	4298      	cmp	r0, r3
 8006d62:	bfb8      	it	lt
 8006d64:	4618      	movlt	r0, r3
 8006d66:	e7a4      	b.n	8006cb2 <_printf_i+0x16a>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4632      	mov	r2, r6
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	4640      	mov	r0, r8
 8006d70:	47d0      	blx	sl
 8006d72:	3001      	adds	r0, #1
 8006d74:	d09b      	beq.n	8006cae <_printf_i+0x166>
 8006d76:	3501      	adds	r5, #1
 8006d78:	68e3      	ldr	r3, [r4, #12]
 8006d7a:	9903      	ldr	r1, [sp, #12]
 8006d7c:	1a5b      	subs	r3, r3, r1
 8006d7e:	42ab      	cmp	r3, r5
 8006d80:	dcf2      	bgt.n	8006d68 <_printf_i+0x220>
 8006d82:	e7eb      	b.n	8006d5c <_printf_i+0x214>
 8006d84:	2500      	movs	r5, #0
 8006d86:	f104 0619 	add.w	r6, r4, #25
 8006d8a:	e7f5      	b.n	8006d78 <_printf_i+0x230>
 8006d8c:	0800b5a2 	.word	0x0800b5a2
 8006d90:	0800b5b3 	.word	0x0800b5b3

08006d94 <_scanf_float>:
 8006d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	9303      	str	r3, [sp, #12]
 8006d9c:	688b      	ldr	r3, [r1, #8]
 8006d9e:	4617      	mov	r7, r2
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006da6:	bf85      	ittet	hi
 8006da8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006dac:	195b      	addhi	r3, r3, r5
 8006dae:	2300      	movls	r3, #0
 8006db0:	9302      	strhi	r3, [sp, #8]
 8006db2:	bf88      	it	hi
 8006db4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006db8:	468b      	mov	fp, r1
 8006dba:	f04f 0500 	mov.w	r5, #0
 8006dbe:	bf8c      	ite	hi
 8006dc0:	608b      	strhi	r3, [r1, #8]
 8006dc2:	9302      	strls	r3, [sp, #8]
 8006dc4:	680b      	ldr	r3, [r1, #0]
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006dcc:	f84b 3b1c 	str.w	r3, [fp], #28
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	465e      	mov	r6, fp
 8006dd4:	46aa      	mov	sl, r5
 8006dd6:	46a9      	mov	r9, r5
 8006dd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ddc:	9501      	str	r5, [sp, #4]
 8006dde:	68a2      	ldr	r2, [r4, #8]
 8006de0:	b152      	cbz	r2, 8006df8 <_scanf_float+0x64>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b4e      	cmp	r3, #78	; 0x4e
 8006de8:	d864      	bhi.n	8006eb4 <_scanf_float+0x120>
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d83c      	bhi.n	8006e68 <_scanf_float+0xd4>
 8006dee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006df2:	b2c8      	uxtb	r0, r1
 8006df4:	280e      	cmp	r0, #14
 8006df6:	d93a      	bls.n	8006e6e <_scanf_float+0xda>
 8006df8:	f1b9 0f00 	cmp.w	r9, #0
 8006dfc:	d003      	beq.n	8006e06 <_scanf_float+0x72>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e0a:	f1ba 0f01 	cmp.w	sl, #1
 8006e0e:	f200 8113 	bhi.w	8007038 <_scanf_float+0x2a4>
 8006e12:	455e      	cmp	r6, fp
 8006e14:	f200 8105 	bhi.w	8007022 <_scanf_float+0x28e>
 8006e18:	2501      	movs	r5, #1
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	b007      	add	sp, #28
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e26:	2a0d      	cmp	r2, #13
 8006e28:	d8e6      	bhi.n	8006df8 <_scanf_float+0x64>
 8006e2a:	a101      	add	r1, pc, #4	; (adr r1, 8006e30 <_scanf_float+0x9c>)
 8006e2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e30:	08006f6f 	.word	0x08006f6f
 8006e34:	08006df9 	.word	0x08006df9
 8006e38:	08006df9 	.word	0x08006df9
 8006e3c:	08006df9 	.word	0x08006df9
 8006e40:	08006fcf 	.word	0x08006fcf
 8006e44:	08006fa7 	.word	0x08006fa7
 8006e48:	08006df9 	.word	0x08006df9
 8006e4c:	08006df9 	.word	0x08006df9
 8006e50:	08006f7d 	.word	0x08006f7d
 8006e54:	08006df9 	.word	0x08006df9
 8006e58:	08006df9 	.word	0x08006df9
 8006e5c:	08006df9 	.word	0x08006df9
 8006e60:	08006df9 	.word	0x08006df9
 8006e64:	08006f35 	.word	0x08006f35
 8006e68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e6c:	e7db      	b.n	8006e26 <_scanf_float+0x92>
 8006e6e:	290e      	cmp	r1, #14
 8006e70:	d8c2      	bhi.n	8006df8 <_scanf_float+0x64>
 8006e72:	a001      	add	r0, pc, #4	; (adr r0, 8006e78 <_scanf_float+0xe4>)
 8006e74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e78:	08006f27 	.word	0x08006f27
 8006e7c:	08006df9 	.word	0x08006df9
 8006e80:	08006f27 	.word	0x08006f27
 8006e84:	08006fbb 	.word	0x08006fbb
 8006e88:	08006df9 	.word	0x08006df9
 8006e8c:	08006ed5 	.word	0x08006ed5
 8006e90:	08006f11 	.word	0x08006f11
 8006e94:	08006f11 	.word	0x08006f11
 8006e98:	08006f11 	.word	0x08006f11
 8006e9c:	08006f11 	.word	0x08006f11
 8006ea0:	08006f11 	.word	0x08006f11
 8006ea4:	08006f11 	.word	0x08006f11
 8006ea8:	08006f11 	.word	0x08006f11
 8006eac:	08006f11 	.word	0x08006f11
 8006eb0:	08006f11 	.word	0x08006f11
 8006eb4:	2b6e      	cmp	r3, #110	; 0x6e
 8006eb6:	d809      	bhi.n	8006ecc <_scanf_float+0x138>
 8006eb8:	2b60      	cmp	r3, #96	; 0x60
 8006eba:	d8b2      	bhi.n	8006e22 <_scanf_float+0x8e>
 8006ebc:	2b54      	cmp	r3, #84	; 0x54
 8006ebe:	d077      	beq.n	8006fb0 <_scanf_float+0x21c>
 8006ec0:	2b59      	cmp	r3, #89	; 0x59
 8006ec2:	d199      	bne.n	8006df8 <_scanf_float+0x64>
 8006ec4:	2d07      	cmp	r5, #7
 8006ec6:	d197      	bne.n	8006df8 <_scanf_float+0x64>
 8006ec8:	2508      	movs	r5, #8
 8006eca:	e029      	b.n	8006f20 <_scanf_float+0x18c>
 8006ecc:	2b74      	cmp	r3, #116	; 0x74
 8006ece:	d06f      	beq.n	8006fb0 <_scanf_float+0x21c>
 8006ed0:	2b79      	cmp	r3, #121	; 0x79
 8006ed2:	e7f6      	b.n	8006ec2 <_scanf_float+0x12e>
 8006ed4:	6821      	ldr	r1, [r4, #0]
 8006ed6:	05c8      	lsls	r0, r1, #23
 8006ed8:	d51a      	bpl.n	8006f10 <_scanf_float+0x17c>
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ee0:	6021      	str	r1, [r4, #0]
 8006ee2:	f109 0901 	add.w	r9, r9, #1
 8006ee6:	b11b      	cbz	r3, 8006ef0 <_scanf_float+0x15c>
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	3201      	adds	r2, #1
 8006eec:	9302      	str	r3, [sp, #8]
 8006eee:	60a2      	str	r2, [r4, #8]
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	6123      	str	r3, [r4, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	f340 8084 	ble.w	8007010 <_scanf_float+0x27c>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	e766      	b.n	8006dde <_scanf_float+0x4a>
 8006f10:	eb1a 0f05 	cmn.w	sl, r5
 8006f14:	f47f af70 	bne.w	8006df8 <_scanf_float+0x64>
 8006f18:	6822      	ldr	r2, [r4, #0]
 8006f1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f1e:	6022      	str	r2, [r4, #0]
 8006f20:	f806 3b01 	strb.w	r3, [r6], #1
 8006f24:	e7e4      	b.n	8006ef0 <_scanf_float+0x15c>
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	0610      	lsls	r0, r2, #24
 8006f2a:	f57f af65 	bpl.w	8006df8 <_scanf_float+0x64>
 8006f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f32:	e7f4      	b.n	8006f1e <_scanf_float+0x18a>
 8006f34:	f1ba 0f00 	cmp.w	sl, #0
 8006f38:	d10e      	bne.n	8006f58 <_scanf_float+0x1c4>
 8006f3a:	f1b9 0f00 	cmp.w	r9, #0
 8006f3e:	d10e      	bne.n	8006f5e <_scanf_float+0x1ca>
 8006f40:	6822      	ldr	r2, [r4, #0]
 8006f42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f4a:	d108      	bne.n	8006f5e <_scanf_float+0x1ca>
 8006f4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f50:	f04f 0a01 	mov.w	sl, #1
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	e7e3      	b.n	8006f20 <_scanf_float+0x18c>
 8006f58:	f1ba 0f02 	cmp.w	sl, #2
 8006f5c:	d055      	beq.n	800700a <_scanf_float+0x276>
 8006f5e:	2d01      	cmp	r5, #1
 8006f60:	d002      	beq.n	8006f68 <_scanf_float+0x1d4>
 8006f62:	2d04      	cmp	r5, #4
 8006f64:	f47f af48 	bne.w	8006df8 <_scanf_float+0x64>
 8006f68:	3501      	adds	r5, #1
 8006f6a:	b2ed      	uxtb	r5, r5
 8006f6c:	e7d8      	b.n	8006f20 <_scanf_float+0x18c>
 8006f6e:	f1ba 0f01 	cmp.w	sl, #1
 8006f72:	f47f af41 	bne.w	8006df8 <_scanf_float+0x64>
 8006f76:	f04f 0a02 	mov.w	sl, #2
 8006f7a:	e7d1      	b.n	8006f20 <_scanf_float+0x18c>
 8006f7c:	b97d      	cbnz	r5, 8006f9e <_scanf_float+0x20a>
 8006f7e:	f1b9 0f00 	cmp.w	r9, #0
 8006f82:	f47f af3c 	bne.w	8006dfe <_scanf_float+0x6a>
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f90:	f47f af39 	bne.w	8006e06 <_scanf_float+0x72>
 8006f94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f98:	2501      	movs	r5, #1
 8006f9a:	6022      	str	r2, [r4, #0]
 8006f9c:	e7c0      	b.n	8006f20 <_scanf_float+0x18c>
 8006f9e:	2d03      	cmp	r5, #3
 8006fa0:	d0e2      	beq.n	8006f68 <_scanf_float+0x1d4>
 8006fa2:	2d05      	cmp	r5, #5
 8006fa4:	e7de      	b.n	8006f64 <_scanf_float+0x1d0>
 8006fa6:	2d02      	cmp	r5, #2
 8006fa8:	f47f af26 	bne.w	8006df8 <_scanf_float+0x64>
 8006fac:	2503      	movs	r5, #3
 8006fae:	e7b7      	b.n	8006f20 <_scanf_float+0x18c>
 8006fb0:	2d06      	cmp	r5, #6
 8006fb2:	f47f af21 	bne.w	8006df8 <_scanf_float+0x64>
 8006fb6:	2507      	movs	r5, #7
 8006fb8:	e7b2      	b.n	8006f20 <_scanf_float+0x18c>
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	0591      	lsls	r1, r2, #22
 8006fbe:	f57f af1b 	bpl.w	8006df8 <_scanf_float+0x64>
 8006fc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006fc6:	6022      	str	r2, [r4, #0]
 8006fc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fcc:	e7a8      	b.n	8006f20 <_scanf_float+0x18c>
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006fd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fd8:	d006      	beq.n	8006fe8 <_scanf_float+0x254>
 8006fda:	0550      	lsls	r0, r2, #21
 8006fdc:	f57f af0c 	bpl.w	8006df8 <_scanf_float+0x64>
 8006fe0:	f1b9 0f00 	cmp.w	r9, #0
 8006fe4:	f43f af0f 	beq.w	8006e06 <_scanf_float+0x72>
 8006fe8:	0591      	lsls	r1, r2, #22
 8006fea:	bf58      	it	pl
 8006fec:	9901      	ldrpl	r1, [sp, #4]
 8006fee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ff2:	bf58      	it	pl
 8006ff4:	eba9 0101 	subpl.w	r1, r9, r1
 8006ff8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ffc:	f04f 0900 	mov.w	r9, #0
 8007000:	bf58      	it	pl
 8007002:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	e78a      	b.n	8006f20 <_scanf_float+0x18c>
 800700a:	f04f 0a03 	mov.w	sl, #3
 800700e:	e787      	b.n	8006f20 <_scanf_float+0x18c>
 8007010:	4639      	mov	r1, r7
 8007012:	4640      	mov	r0, r8
 8007014:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007018:	4798      	blx	r3
 800701a:	2800      	cmp	r0, #0
 800701c:	f43f aedf 	beq.w	8006dde <_scanf_float+0x4a>
 8007020:	e6ea      	b.n	8006df8 <_scanf_float+0x64>
 8007022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007026:	463a      	mov	r2, r7
 8007028:	4640      	mov	r0, r8
 800702a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800702e:	4798      	blx	r3
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	3b01      	subs	r3, #1
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	e6ec      	b.n	8006e12 <_scanf_float+0x7e>
 8007038:	1e6b      	subs	r3, r5, #1
 800703a:	2b06      	cmp	r3, #6
 800703c:	d825      	bhi.n	800708a <_scanf_float+0x2f6>
 800703e:	2d02      	cmp	r5, #2
 8007040:	d836      	bhi.n	80070b0 <_scanf_float+0x31c>
 8007042:	455e      	cmp	r6, fp
 8007044:	f67f aee8 	bls.w	8006e18 <_scanf_float+0x84>
 8007048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800704c:	463a      	mov	r2, r7
 800704e:	4640      	mov	r0, r8
 8007050:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007054:	4798      	blx	r3
 8007056:	6923      	ldr	r3, [r4, #16]
 8007058:	3b01      	subs	r3, #1
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	e7f1      	b.n	8007042 <_scanf_float+0x2ae>
 800705e:	9802      	ldr	r0, [sp, #8]
 8007060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007064:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007068:	463a      	mov	r2, r7
 800706a:	9002      	str	r0, [sp, #8]
 800706c:	4640      	mov	r0, r8
 800706e:	4798      	blx	r3
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	3b01      	subs	r3, #1
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800707a:	fa5f fa8a 	uxtb.w	sl, sl
 800707e:	f1ba 0f02 	cmp.w	sl, #2
 8007082:	d1ec      	bne.n	800705e <_scanf_float+0x2ca>
 8007084:	3d03      	subs	r5, #3
 8007086:	b2ed      	uxtb	r5, r5
 8007088:	1b76      	subs	r6, r6, r5
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	05da      	lsls	r2, r3, #23
 800708e:	d52f      	bpl.n	80070f0 <_scanf_float+0x35c>
 8007090:	055b      	lsls	r3, r3, #21
 8007092:	d510      	bpl.n	80070b6 <_scanf_float+0x322>
 8007094:	455e      	cmp	r6, fp
 8007096:	f67f aebf 	bls.w	8006e18 <_scanf_float+0x84>
 800709a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800709e:	463a      	mov	r2, r7
 80070a0:	4640      	mov	r0, r8
 80070a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070a6:	4798      	blx	r3
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	6123      	str	r3, [r4, #16]
 80070ae:	e7f1      	b.n	8007094 <_scanf_float+0x300>
 80070b0:	46aa      	mov	sl, r5
 80070b2:	9602      	str	r6, [sp, #8]
 80070b4:	e7df      	b.n	8007076 <_scanf_float+0x2e2>
 80070b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	2965      	cmp	r1, #101	; 0x65
 80070be:	f103 33ff 	add.w	r3, r3, #4294967295
 80070c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	d00c      	beq.n	80070e4 <_scanf_float+0x350>
 80070ca:	2945      	cmp	r1, #69	; 0x45
 80070cc:	d00a      	beq.n	80070e4 <_scanf_float+0x350>
 80070ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d2:	463a      	mov	r2, r7
 80070d4:	4640      	mov	r0, r8
 80070d6:	4798      	blx	r3
 80070d8:	6923      	ldr	r3, [r4, #16]
 80070da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80070de:	3b01      	subs	r3, #1
 80070e0:	1eb5      	subs	r5, r6, #2
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	463a      	mov	r2, r7
 80070e6:	4640      	mov	r0, r8
 80070e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070ec:	4798      	blx	r3
 80070ee:	462e      	mov	r6, r5
 80070f0:	6825      	ldr	r5, [r4, #0]
 80070f2:	f015 0510 	ands.w	r5, r5, #16
 80070f6:	d159      	bne.n	80071ac <_scanf_float+0x418>
 80070f8:	7035      	strb	r5, [r6, #0]
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007104:	d11c      	bne.n	8007140 <_scanf_float+0x3ac>
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	454b      	cmp	r3, r9
 800710a:	eba3 0209 	sub.w	r2, r3, r9
 800710e:	d124      	bne.n	800715a <_scanf_float+0x3c6>
 8007110:	2200      	movs	r2, #0
 8007112:	4659      	mov	r1, fp
 8007114:	4640      	mov	r0, r8
 8007116:	f000 fe8b 	bl	8007e30 <_strtod_r>
 800711a:	f8d4 c000 	ldr.w	ip, [r4]
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	f01c 0f02 	tst.w	ip, #2
 8007124:	4606      	mov	r6, r0
 8007126:	460f      	mov	r7, r1
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	d021      	beq.n	8007170 <_scanf_float+0x3dc>
 800712c:	9903      	ldr	r1, [sp, #12]
 800712e:	1d1a      	adds	r2, r3, #4
 8007130:	600a      	str	r2, [r1, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	e9c3 6700 	strd	r6, r7, [r3]
 8007138:	68e3      	ldr	r3, [r4, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60e3      	str	r3, [r4, #12]
 800713e:	e66c      	b.n	8006e1a <_scanf_float+0x86>
 8007140:	9b04      	ldr	r3, [sp, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0e4      	beq.n	8007110 <_scanf_float+0x37c>
 8007146:	9905      	ldr	r1, [sp, #20]
 8007148:	230a      	movs	r3, #10
 800714a:	462a      	mov	r2, r5
 800714c:	4640      	mov	r0, r8
 800714e:	3101      	adds	r1, #1
 8007150:	f000 fefa 	bl	8007f48 <_strtol_r>
 8007154:	9b04      	ldr	r3, [sp, #16]
 8007156:	9e05      	ldr	r6, [sp, #20]
 8007158:	1ac2      	subs	r2, r0, r3
 800715a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800715e:	429e      	cmp	r6, r3
 8007160:	bf28      	it	cs
 8007162:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007166:	4630      	mov	r0, r6
 8007168:	4911      	ldr	r1, [pc, #68]	; (80071b0 <_scanf_float+0x41c>)
 800716a:	f000 f829 	bl	80071c0 <siprintf>
 800716e:	e7cf      	b.n	8007110 <_scanf_float+0x37c>
 8007170:	f01c 0f04 	tst.w	ip, #4
 8007174:	f103 0e04 	add.w	lr, r3, #4
 8007178:	d003      	beq.n	8007182 <_scanf_float+0x3ee>
 800717a:	9903      	ldr	r1, [sp, #12]
 800717c:	f8c1 e000 	str.w	lr, [r1]
 8007180:	e7d7      	b.n	8007132 <_scanf_float+0x39e>
 8007182:	9a03      	ldr	r2, [sp, #12]
 8007184:	f8c2 e000 	str.w	lr, [r2]
 8007188:	f8d3 8000 	ldr.w	r8, [r3]
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	f7f9 fc54 	bl	8000a3c <__aeabi_dcmpun>
 8007194:	b128      	cbz	r0, 80071a2 <_scanf_float+0x40e>
 8007196:	4807      	ldr	r0, [pc, #28]	; (80071b4 <_scanf_float+0x420>)
 8007198:	f000 f80e 	bl	80071b8 <nanf>
 800719c:	f8c8 0000 	str.w	r0, [r8]
 80071a0:	e7ca      	b.n	8007138 <_scanf_float+0x3a4>
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 fca7 	bl	8000af8 <__aeabi_d2f>
 80071aa:	e7f7      	b.n	800719c <_scanf_float+0x408>
 80071ac:	2500      	movs	r5, #0
 80071ae:	e634      	b.n	8006e1a <_scanf_float+0x86>
 80071b0:	0800b5c4 	.word	0x0800b5c4
 80071b4:	0800b9e0 	.word	0x0800b9e0

080071b8 <nanf>:
 80071b8:	4800      	ldr	r0, [pc, #0]	; (80071bc <nanf+0x4>)
 80071ba:	4770      	bx	lr
 80071bc:	7fc00000 	.word	0x7fc00000

080071c0 <siprintf>:
 80071c0:	b40e      	push	{r1, r2, r3}
 80071c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071c6:	b500      	push	{lr}
 80071c8:	b09c      	sub	sp, #112	; 0x70
 80071ca:	ab1d      	add	r3, sp, #116	; 0x74
 80071cc:	9002      	str	r0, [sp, #8]
 80071ce:	9006      	str	r0, [sp, #24]
 80071d0:	9107      	str	r1, [sp, #28]
 80071d2:	9104      	str	r1, [sp, #16]
 80071d4:	4808      	ldr	r0, [pc, #32]	; (80071f8 <siprintf+0x38>)
 80071d6:	4909      	ldr	r1, [pc, #36]	; (80071fc <siprintf+0x3c>)
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	a902      	add	r1, sp, #8
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	f002 fe96 	bl	8009f14 <_svfiprintf_r>
 80071e8:	2200      	movs	r2, #0
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	b01c      	add	sp, #112	; 0x70
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b003      	add	sp, #12
 80071f6:	4770      	bx	lr
 80071f8:	2000006c 	.word	0x2000006c
 80071fc:	ffff0208 	.word	0xffff0208

08007200 <sulp>:
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	460f      	mov	r7, r1
 8007206:	4690      	mov	r8, r2
 8007208:	f002 fc2c 	bl	8009a64 <__ulp>
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	f1b8 0f00 	cmp.w	r8, #0
 8007214:	d011      	beq.n	800723a <sulp+0x3a>
 8007216:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800721a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800721e:	2b00      	cmp	r3, #0
 8007220:	dd0b      	ble.n	800723a <sulp+0x3a>
 8007222:	2400      	movs	r4, #0
 8007224:	051b      	lsls	r3, r3, #20
 8007226:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800722a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 f969 	bl	8000508 <__aeabi_dmul>
 8007236:	4604      	mov	r4, r0
 8007238:	460d      	mov	r5, r1
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007242:	0000      	movs	r0, r0
 8007244:	0000      	movs	r0, r0
	...

08007248 <_strtod_l>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	469b      	mov	fp, r3
 800724e:	2300      	movs	r3, #0
 8007250:	b0a1      	sub	sp, #132	; 0x84
 8007252:	931c      	str	r3, [sp, #112]	; 0x70
 8007254:	4ba1      	ldr	r3, [pc, #644]	; (80074dc <_strtod_l+0x294>)
 8007256:	4682      	mov	sl, r0
 8007258:	681f      	ldr	r7, [r3, #0]
 800725a:	460e      	mov	r6, r1
 800725c:	4638      	mov	r0, r7
 800725e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007260:	f7f8 ff8e 	bl	8000180 <strlen>
 8007264:	f04f 0800 	mov.w	r8, #0
 8007268:	4604      	mov	r4, r0
 800726a:	f04f 0900 	mov.w	r9, #0
 800726e:	961b      	str	r6, [sp, #108]	; 0x6c
 8007270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007272:	781a      	ldrb	r2, [r3, #0]
 8007274:	2a2b      	cmp	r2, #43	; 0x2b
 8007276:	d04c      	beq.n	8007312 <_strtod_l+0xca>
 8007278:	d83a      	bhi.n	80072f0 <_strtod_l+0xa8>
 800727a:	2a0d      	cmp	r2, #13
 800727c:	d833      	bhi.n	80072e6 <_strtod_l+0x9e>
 800727e:	2a08      	cmp	r2, #8
 8007280:	d833      	bhi.n	80072ea <_strtod_l+0xa2>
 8007282:	2a00      	cmp	r2, #0
 8007284:	d03d      	beq.n	8007302 <_strtod_l+0xba>
 8007286:	2300      	movs	r3, #0
 8007288:	930c      	str	r3, [sp, #48]	; 0x30
 800728a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800728c:	782b      	ldrb	r3, [r5, #0]
 800728e:	2b30      	cmp	r3, #48	; 0x30
 8007290:	f040 80af 	bne.w	80073f2 <_strtod_l+0x1aa>
 8007294:	786b      	ldrb	r3, [r5, #1]
 8007296:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800729a:	2b58      	cmp	r3, #88	; 0x58
 800729c:	d16c      	bne.n	8007378 <_strtod_l+0x130>
 800729e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a0:	4650      	mov	r0, sl
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	ab1c      	add	r3, sp, #112	; 0x70
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4a8d      	ldr	r2, [pc, #564]	; (80074e0 <_strtod_l+0x298>)
 80072aa:	f8cd b008 	str.w	fp, [sp, #8]
 80072ae:	ab1d      	add	r3, sp, #116	; 0x74
 80072b0:	a91b      	add	r1, sp, #108	; 0x6c
 80072b2:	f001 fd2f 	bl	8008d14 <__gethex>
 80072b6:	f010 0607 	ands.w	r6, r0, #7
 80072ba:	4604      	mov	r4, r0
 80072bc:	d005      	beq.n	80072ca <_strtod_l+0x82>
 80072be:	2e06      	cmp	r6, #6
 80072c0:	d129      	bne.n	8007316 <_strtod_l+0xce>
 80072c2:	2300      	movs	r3, #0
 80072c4:	3501      	adds	r5, #1
 80072c6:	951b      	str	r5, [sp, #108]	; 0x6c
 80072c8:	930c      	str	r3, [sp, #48]	; 0x30
 80072ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8596 	bne.w	8007dfe <_strtod_l+0xbb6>
 80072d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d4:	b1d3      	cbz	r3, 800730c <_strtod_l+0xc4>
 80072d6:	4642      	mov	r2, r8
 80072d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	b021      	add	sp, #132	; 0x84
 80072e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e6:	2a20      	cmp	r2, #32
 80072e8:	d1cd      	bne.n	8007286 <_strtod_l+0x3e>
 80072ea:	3301      	adds	r3, #1
 80072ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80072ee:	e7bf      	b.n	8007270 <_strtod_l+0x28>
 80072f0:	2a2d      	cmp	r2, #45	; 0x2d
 80072f2:	d1c8      	bne.n	8007286 <_strtod_l+0x3e>
 80072f4:	2201      	movs	r2, #1
 80072f6:	920c      	str	r2, [sp, #48]	; 0x30
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1c3      	bne.n	800728a <_strtod_l+0x42>
 8007302:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007304:	961b      	str	r6, [sp, #108]	; 0x6c
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 8577 	bne.w	8007dfa <_strtod_l+0xbb2>
 800730c:	4642      	mov	r2, r8
 800730e:	464b      	mov	r3, r9
 8007310:	e7e4      	b.n	80072dc <_strtod_l+0x94>
 8007312:	2200      	movs	r2, #0
 8007314:	e7ef      	b.n	80072f6 <_strtod_l+0xae>
 8007316:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007318:	b13a      	cbz	r2, 800732a <_strtod_l+0xe2>
 800731a:	2135      	movs	r1, #53	; 0x35
 800731c:	a81e      	add	r0, sp, #120	; 0x78
 800731e:	f002 fca5 	bl	8009c6c <__copybits>
 8007322:	4650      	mov	r0, sl
 8007324:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007326:	f002 f86d 	bl	8009404 <_Bfree>
 800732a:	3e01      	subs	r6, #1
 800732c:	2e05      	cmp	r6, #5
 800732e:	d807      	bhi.n	8007340 <_strtod_l+0xf8>
 8007330:	e8df f006 	tbb	[pc, r6]
 8007334:	1d180b0e 	.word	0x1d180b0e
 8007338:	030e      	.short	0x030e
 800733a:	f04f 0900 	mov.w	r9, #0
 800733e:	46c8      	mov	r8, r9
 8007340:	0721      	lsls	r1, r4, #28
 8007342:	d5c2      	bpl.n	80072ca <_strtod_l+0x82>
 8007344:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007348:	e7bf      	b.n	80072ca <_strtod_l+0x82>
 800734a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800734e:	e7f7      	b.n	8007340 <_strtod_l+0xf8>
 8007350:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007352:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007356:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800735a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800735e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007362:	e7ed      	b.n	8007340 <_strtod_l+0xf8>
 8007364:	f04f 0800 	mov.w	r8, #0
 8007368:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80074e4 <_strtod_l+0x29c>
 800736c:	e7e8      	b.n	8007340 <_strtod_l+0xf8>
 800736e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007372:	f04f 38ff 	mov.w	r8, #4294967295
 8007376:	e7e3      	b.n	8007340 <_strtod_l+0xf8>
 8007378:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	921b      	str	r2, [sp, #108]	; 0x6c
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b30      	cmp	r3, #48	; 0x30
 8007382:	d0f9      	beq.n	8007378 <_strtod_l+0x130>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0a0      	beq.n	80072ca <_strtod_l+0x82>
 8007388:	2301      	movs	r3, #1
 800738a:	9307      	str	r3, [sp, #28]
 800738c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800738e:	220a      	movs	r2, #10
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	2300      	movs	r3, #0
 8007394:	469b      	mov	fp, r3
 8007396:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800739a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800739c:	7805      	ldrb	r5, [r0, #0]
 800739e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80073a2:	b2d9      	uxtb	r1, r3
 80073a4:	2909      	cmp	r1, #9
 80073a6:	d926      	bls.n	80073f6 <_strtod_l+0x1ae>
 80073a8:	4622      	mov	r2, r4
 80073aa:	4639      	mov	r1, r7
 80073ac:	f002 fec8 	bl	800a140 <strncmp>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d032      	beq.n	800741a <_strtod_l+0x1d2>
 80073b4:	2000      	movs	r0, #0
 80073b6:	462b      	mov	r3, r5
 80073b8:	465c      	mov	r4, fp
 80073ba:	4602      	mov	r2, r0
 80073bc:	9004      	str	r0, [sp, #16]
 80073be:	2b65      	cmp	r3, #101	; 0x65
 80073c0:	d001      	beq.n	80073c6 <_strtod_l+0x17e>
 80073c2:	2b45      	cmp	r3, #69	; 0x45
 80073c4:	d113      	bne.n	80073ee <_strtod_l+0x1a6>
 80073c6:	b91c      	cbnz	r4, 80073d0 <_strtod_l+0x188>
 80073c8:	9b07      	ldr	r3, [sp, #28]
 80073ca:	4303      	orrs	r3, r0
 80073cc:	d099      	beq.n	8007302 <_strtod_l+0xba>
 80073ce:	2400      	movs	r4, #0
 80073d0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80073d2:	1c73      	adds	r3, r6, #1
 80073d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80073d6:	7873      	ldrb	r3, [r6, #1]
 80073d8:	2b2b      	cmp	r3, #43	; 0x2b
 80073da:	d078      	beq.n	80074ce <_strtod_l+0x286>
 80073dc:	2b2d      	cmp	r3, #45	; 0x2d
 80073de:	d07b      	beq.n	80074d8 <_strtod_l+0x290>
 80073e0:	2700      	movs	r7, #0
 80073e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80073e6:	2909      	cmp	r1, #9
 80073e8:	f240 8082 	bls.w	80074f0 <_strtod_l+0x2a8>
 80073ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80073ee:	2500      	movs	r5, #0
 80073f0:	e09e      	b.n	8007530 <_strtod_l+0x2e8>
 80073f2:	2300      	movs	r3, #0
 80073f4:	e7c9      	b.n	800738a <_strtod_l+0x142>
 80073f6:	f1bb 0f08 	cmp.w	fp, #8
 80073fa:	bfd5      	itete	le
 80073fc:	9906      	ldrle	r1, [sp, #24]
 80073fe:	9905      	ldrgt	r1, [sp, #20]
 8007400:	fb02 3301 	mlale	r3, r2, r1, r3
 8007404:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007408:	f100 0001 	add.w	r0, r0, #1
 800740c:	bfd4      	ite	le
 800740e:	9306      	strle	r3, [sp, #24]
 8007410:	9305      	strgt	r3, [sp, #20]
 8007412:	f10b 0b01 	add.w	fp, fp, #1
 8007416:	901b      	str	r0, [sp, #108]	; 0x6c
 8007418:	e7bf      	b.n	800739a <_strtod_l+0x152>
 800741a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800741c:	191a      	adds	r2, r3, r4
 800741e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007420:	5d1b      	ldrb	r3, [r3, r4]
 8007422:	f1bb 0f00 	cmp.w	fp, #0
 8007426:	d036      	beq.n	8007496 <_strtod_l+0x24e>
 8007428:	465c      	mov	r4, fp
 800742a:	9004      	str	r0, [sp, #16]
 800742c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007430:	2a09      	cmp	r2, #9
 8007432:	d912      	bls.n	800745a <_strtod_l+0x212>
 8007434:	2201      	movs	r2, #1
 8007436:	e7c2      	b.n	80073be <_strtod_l+0x176>
 8007438:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800743a:	3001      	adds	r0, #1
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b30      	cmp	r3, #48	; 0x30
 8007444:	d0f8      	beq.n	8007438 <_strtod_l+0x1f0>
 8007446:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800744a:	2a08      	cmp	r2, #8
 800744c:	f200 84dc 	bhi.w	8007e08 <_strtod_l+0xbc0>
 8007450:	9004      	str	r0, [sp, #16]
 8007452:	2000      	movs	r0, #0
 8007454:	4604      	mov	r4, r0
 8007456:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007458:	9208      	str	r2, [sp, #32]
 800745a:	3b30      	subs	r3, #48	; 0x30
 800745c:	f100 0201 	add.w	r2, r0, #1
 8007460:	d013      	beq.n	800748a <_strtod_l+0x242>
 8007462:	9904      	ldr	r1, [sp, #16]
 8007464:	1905      	adds	r5, r0, r4
 8007466:	4411      	add	r1, r2
 8007468:	9104      	str	r1, [sp, #16]
 800746a:	4622      	mov	r2, r4
 800746c:	210a      	movs	r1, #10
 800746e:	42aa      	cmp	r2, r5
 8007470:	d113      	bne.n	800749a <_strtod_l+0x252>
 8007472:	1822      	adds	r2, r4, r0
 8007474:	2a08      	cmp	r2, #8
 8007476:	f104 0401 	add.w	r4, r4, #1
 800747a:	4404      	add	r4, r0
 800747c:	dc1b      	bgt.n	80074b6 <_strtod_l+0x26e>
 800747e:	220a      	movs	r2, #10
 8007480:	9906      	ldr	r1, [sp, #24]
 8007482:	fb02 3301 	mla	r3, r2, r1, r3
 8007486:	9306      	str	r3, [sp, #24]
 8007488:	2200      	movs	r2, #0
 800748a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800748c:	4610      	mov	r0, r2
 800748e:	1c59      	adds	r1, r3, #1
 8007490:	911b      	str	r1, [sp, #108]	; 0x6c
 8007492:	785b      	ldrb	r3, [r3, #1]
 8007494:	e7ca      	b.n	800742c <_strtod_l+0x1e4>
 8007496:	4658      	mov	r0, fp
 8007498:	e7d3      	b.n	8007442 <_strtod_l+0x1fa>
 800749a:	2a08      	cmp	r2, #8
 800749c:	dc04      	bgt.n	80074a8 <_strtod_l+0x260>
 800749e:	9f06      	ldr	r7, [sp, #24]
 80074a0:	434f      	muls	r7, r1
 80074a2:	9706      	str	r7, [sp, #24]
 80074a4:	3201      	adds	r2, #1
 80074a6:	e7e2      	b.n	800746e <_strtod_l+0x226>
 80074a8:	1c57      	adds	r7, r2, #1
 80074aa:	2f10      	cmp	r7, #16
 80074ac:	bfde      	ittt	le
 80074ae:	9f05      	ldrle	r7, [sp, #20]
 80074b0:	434f      	mulle	r7, r1
 80074b2:	9705      	strle	r7, [sp, #20]
 80074b4:	e7f6      	b.n	80074a4 <_strtod_l+0x25c>
 80074b6:	2c10      	cmp	r4, #16
 80074b8:	bfdf      	itttt	le
 80074ba:	220a      	movle	r2, #10
 80074bc:	9905      	ldrle	r1, [sp, #20]
 80074be:	fb02 3301 	mlale	r3, r2, r1, r3
 80074c2:	9305      	strle	r3, [sp, #20]
 80074c4:	e7e0      	b.n	8007488 <_strtod_l+0x240>
 80074c6:	2300      	movs	r3, #0
 80074c8:	2201      	movs	r2, #1
 80074ca:	9304      	str	r3, [sp, #16]
 80074cc:	e77c      	b.n	80073c8 <_strtod_l+0x180>
 80074ce:	2700      	movs	r7, #0
 80074d0:	1cb3      	adds	r3, r6, #2
 80074d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80074d4:	78b3      	ldrb	r3, [r6, #2]
 80074d6:	e784      	b.n	80073e2 <_strtod_l+0x19a>
 80074d8:	2701      	movs	r7, #1
 80074da:	e7f9      	b.n	80074d0 <_strtod_l+0x288>
 80074dc:	0800b820 	.word	0x0800b820
 80074e0:	0800b5cc 	.word	0x0800b5cc
 80074e4:	7ff00000 	.word	0x7ff00000
 80074e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ea:	1c59      	adds	r1, r3, #1
 80074ec:	911b      	str	r1, [sp, #108]	; 0x6c
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	d0f9      	beq.n	80074e8 <_strtod_l+0x2a0>
 80074f4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80074f8:	2908      	cmp	r1, #8
 80074fa:	f63f af78 	bhi.w	80073ee <_strtod_l+0x1a6>
 80074fe:	f04f 0e0a 	mov.w	lr, #10
 8007502:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007508:	9309      	str	r3, [sp, #36]	; 0x24
 800750a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800750c:	1c59      	adds	r1, r3, #1
 800750e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007516:	2d09      	cmp	r5, #9
 8007518:	d935      	bls.n	8007586 <_strtod_l+0x33e>
 800751a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800751c:	1b49      	subs	r1, r1, r5
 800751e:	2908      	cmp	r1, #8
 8007520:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007524:	dc02      	bgt.n	800752c <_strtod_l+0x2e4>
 8007526:	4565      	cmp	r5, ip
 8007528:	bfa8      	it	ge
 800752a:	4665      	movge	r5, ip
 800752c:	b107      	cbz	r7, 8007530 <_strtod_l+0x2e8>
 800752e:	426d      	negs	r5, r5
 8007530:	2c00      	cmp	r4, #0
 8007532:	d14c      	bne.n	80075ce <_strtod_l+0x386>
 8007534:	9907      	ldr	r1, [sp, #28]
 8007536:	4301      	orrs	r1, r0
 8007538:	f47f aec7 	bne.w	80072ca <_strtod_l+0x82>
 800753c:	2a00      	cmp	r2, #0
 800753e:	f47f aee0 	bne.w	8007302 <_strtod_l+0xba>
 8007542:	2b69      	cmp	r3, #105	; 0x69
 8007544:	d026      	beq.n	8007594 <_strtod_l+0x34c>
 8007546:	dc23      	bgt.n	8007590 <_strtod_l+0x348>
 8007548:	2b49      	cmp	r3, #73	; 0x49
 800754a:	d023      	beq.n	8007594 <_strtod_l+0x34c>
 800754c:	2b4e      	cmp	r3, #78	; 0x4e
 800754e:	f47f aed8 	bne.w	8007302 <_strtod_l+0xba>
 8007552:	499c      	ldr	r1, [pc, #624]	; (80077c4 <_strtod_l+0x57c>)
 8007554:	a81b      	add	r0, sp, #108	; 0x6c
 8007556:	f001 fe2b 	bl	80091b0 <__match>
 800755a:	2800      	cmp	r0, #0
 800755c:	f43f aed1 	beq.w	8007302 <_strtod_l+0xba>
 8007560:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b28      	cmp	r3, #40	; 0x28
 8007566:	d12c      	bne.n	80075c2 <_strtod_l+0x37a>
 8007568:	4997      	ldr	r1, [pc, #604]	; (80077c8 <_strtod_l+0x580>)
 800756a:	aa1e      	add	r2, sp, #120	; 0x78
 800756c:	a81b      	add	r0, sp, #108	; 0x6c
 800756e:	f001 fe33 	bl	80091d8 <__hexnan>
 8007572:	2805      	cmp	r0, #5
 8007574:	d125      	bne.n	80075c2 <_strtod_l+0x37a>
 8007576:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007578:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800757c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007580:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007584:	e6a1      	b.n	80072ca <_strtod_l+0x82>
 8007586:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800758a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800758e:	e7bc      	b.n	800750a <_strtod_l+0x2c2>
 8007590:	2b6e      	cmp	r3, #110	; 0x6e
 8007592:	e7dc      	b.n	800754e <_strtod_l+0x306>
 8007594:	498d      	ldr	r1, [pc, #564]	; (80077cc <_strtod_l+0x584>)
 8007596:	a81b      	add	r0, sp, #108	; 0x6c
 8007598:	f001 fe0a 	bl	80091b0 <__match>
 800759c:	2800      	cmp	r0, #0
 800759e:	f43f aeb0 	beq.w	8007302 <_strtod_l+0xba>
 80075a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075a4:	498a      	ldr	r1, [pc, #552]	; (80077d0 <_strtod_l+0x588>)
 80075a6:	3b01      	subs	r3, #1
 80075a8:	a81b      	add	r0, sp, #108	; 0x6c
 80075aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80075ac:	f001 fe00 	bl	80091b0 <__match>
 80075b0:	b910      	cbnz	r0, 80075b8 <_strtod_l+0x370>
 80075b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075b4:	3301      	adds	r3, #1
 80075b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80075b8:	f04f 0800 	mov.w	r8, #0
 80075bc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80077e0 <_strtod_l+0x598>
 80075c0:	e683      	b.n	80072ca <_strtod_l+0x82>
 80075c2:	4884      	ldr	r0, [pc, #528]	; (80077d4 <_strtod_l+0x58c>)
 80075c4:	f002 fda6 	bl	800a114 <nan>
 80075c8:	4680      	mov	r8, r0
 80075ca:	4689      	mov	r9, r1
 80075cc:	e67d      	b.n	80072ca <_strtod_l+0x82>
 80075ce:	9b04      	ldr	r3, [sp, #16]
 80075d0:	f1bb 0f00 	cmp.w	fp, #0
 80075d4:	bf08      	it	eq
 80075d6:	46a3      	moveq	fp, r4
 80075d8:	1aeb      	subs	r3, r5, r3
 80075da:	2c10      	cmp	r4, #16
 80075dc:	9806      	ldr	r0, [sp, #24]
 80075de:	4626      	mov	r6, r4
 80075e0:	9307      	str	r3, [sp, #28]
 80075e2:	bfa8      	it	ge
 80075e4:	2610      	movge	r6, #16
 80075e6:	f7f8 ff15 	bl	8000414 <__aeabi_ui2d>
 80075ea:	2c09      	cmp	r4, #9
 80075ec:	4680      	mov	r8, r0
 80075ee:	4689      	mov	r9, r1
 80075f0:	dd13      	ble.n	800761a <_strtod_l+0x3d2>
 80075f2:	4b79      	ldr	r3, [pc, #484]	; (80077d8 <_strtod_l+0x590>)
 80075f4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075fc:	f7f8 ff84 	bl	8000508 <__aeabi_dmul>
 8007600:	4680      	mov	r8, r0
 8007602:	9805      	ldr	r0, [sp, #20]
 8007604:	4689      	mov	r9, r1
 8007606:	f7f8 ff05 	bl	8000414 <__aeabi_ui2d>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f8 fdc3 	bl	800019c <__adddf3>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	2c0f      	cmp	r4, #15
 800761c:	dc36      	bgt.n	800768c <_strtod_l+0x444>
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f43f ae52 	beq.w	80072ca <_strtod_l+0x82>
 8007626:	dd22      	ble.n	800766e <_strtod_l+0x426>
 8007628:	2b16      	cmp	r3, #22
 800762a:	dc09      	bgt.n	8007640 <_strtod_l+0x3f8>
 800762c:	4c6a      	ldr	r4, [pc, #424]	; (80077d8 <_strtod_l+0x590>)
 800762e:	4642      	mov	r2, r8
 8007630:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007634:	464b      	mov	r3, r9
 8007636:	e9d4 0100 	ldrd	r0, r1, [r4]
 800763a:	f7f8 ff65 	bl	8000508 <__aeabi_dmul>
 800763e:	e7c3      	b.n	80075c8 <_strtod_l+0x380>
 8007640:	9a07      	ldr	r2, [sp, #28]
 8007642:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007646:	4293      	cmp	r3, r2
 8007648:	db20      	blt.n	800768c <_strtod_l+0x444>
 800764a:	4d63      	ldr	r5, [pc, #396]	; (80077d8 <_strtod_l+0x590>)
 800764c:	f1c4 040f 	rsb	r4, r4, #15
 8007650:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007654:	4642      	mov	r2, r8
 8007656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800765a:	464b      	mov	r3, r9
 800765c:	f7f8 ff54 	bl	8000508 <__aeabi_dmul>
 8007660:	9b07      	ldr	r3, [sp, #28]
 8007662:	1b1c      	subs	r4, r3, r4
 8007664:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800766c:	e7e5      	b.n	800763a <_strtod_l+0x3f2>
 800766e:	9b07      	ldr	r3, [sp, #28]
 8007670:	3316      	adds	r3, #22
 8007672:	db0b      	blt.n	800768c <_strtod_l+0x444>
 8007674:	9b04      	ldr	r3, [sp, #16]
 8007676:	4a58      	ldr	r2, [pc, #352]	; (80077d8 <_strtod_l+0x590>)
 8007678:	1b5d      	subs	r5, r3, r5
 800767a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800767e:	4640      	mov	r0, r8
 8007680:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007684:	4649      	mov	r1, r9
 8007686:	f7f9 f869 	bl	800075c <__aeabi_ddiv>
 800768a:	e79d      	b.n	80075c8 <_strtod_l+0x380>
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	1ba6      	subs	r6, r4, r6
 8007690:	441e      	add	r6, r3
 8007692:	2e00      	cmp	r6, #0
 8007694:	dd71      	ble.n	800777a <_strtod_l+0x532>
 8007696:	f016 030f 	ands.w	r3, r6, #15
 800769a:	d00a      	beq.n	80076b2 <_strtod_l+0x46a>
 800769c:	494e      	ldr	r1, [pc, #312]	; (80077d8 <_strtod_l+0x590>)
 800769e:	4642      	mov	r2, r8
 80076a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a8:	464b      	mov	r3, r9
 80076aa:	f7f8 ff2d 	bl	8000508 <__aeabi_dmul>
 80076ae:	4680      	mov	r8, r0
 80076b0:	4689      	mov	r9, r1
 80076b2:	f036 060f 	bics.w	r6, r6, #15
 80076b6:	d050      	beq.n	800775a <_strtod_l+0x512>
 80076b8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80076bc:	dd27      	ble.n	800770e <_strtod_l+0x4c6>
 80076be:	f04f 0b00 	mov.w	fp, #0
 80076c2:	f8cd b010 	str.w	fp, [sp, #16]
 80076c6:	f8cd b020 	str.w	fp, [sp, #32]
 80076ca:	f8cd b018 	str.w	fp, [sp, #24]
 80076ce:	2322      	movs	r3, #34	; 0x22
 80076d0:	f04f 0800 	mov.w	r8, #0
 80076d4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80077e0 <_strtod_l+0x598>
 80076d8:	f8ca 3000 	str.w	r3, [sl]
 80076dc:	9b08      	ldr	r3, [sp, #32]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f43f adf3 	beq.w	80072ca <_strtod_l+0x82>
 80076e4:	4650      	mov	r0, sl
 80076e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076e8:	f001 fe8c 	bl	8009404 <_Bfree>
 80076ec:	4650      	mov	r0, sl
 80076ee:	9906      	ldr	r1, [sp, #24]
 80076f0:	f001 fe88 	bl	8009404 <_Bfree>
 80076f4:	4650      	mov	r0, sl
 80076f6:	9904      	ldr	r1, [sp, #16]
 80076f8:	f001 fe84 	bl	8009404 <_Bfree>
 80076fc:	4650      	mov	r0, sl
 80076fe:	9908      	ldr	r1, [sp, #32]
 8007700:	f001 fe80 	bl	8009404 <_Bfree>
 8007704:	4659      	mov	r1, fp
 8007706:	4650      	mov	r0, sl
 8007708:	f001 fe7c 	bl	8009404 <_Bfree>
 800770c:	e5dd      	b.n	80072ca <_strtod_l+0x82>
 800770e:	2300      	movs	r3, #0
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	461f      	mov	r7, r3
 8007716:	1136      	asrs	r6, r6, #4
 8007718:	2e01      	cmp	r6, #1
 800771a:	dc21      	bgt.n	8007760 <_strtod_l+0x518>
 800771c:	b10b      	cbz	r3, 8007722 <_strtod_l+0x4da>
 800771e:	4680      	mov	r8, r0
 8007720:	4689      	mov	r9, r1
 8007722:	4b2e      	ldr	r3, [pc, #184]	; (80077dc <_strtod_l+0x594>)
 8007724:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007728:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800772c:	4642      	mov	r2, r8
 800772e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007732:	464b      	mov	r3, r9
 8007734:	f7f8 fee8 	bl	8000508 <__aeabi_dmul>
 8007738:	4b29      	ldr	r3, [pc, #164]	; (80077e0 <_strtod_l+0x598>)
 800773a:	460a      	mov	r2, r1
 800773c:	400b      	ands	r3, r1
 800773e:	4929      	ldr	r1, [pc, #164]	; (80077e4 <_strtod_l+0x59c>)
 8007740:	4680      	mov	r8, r0
 8007742:	428b      	cmp	r3, r1
 8007744:	d8bb      	bhi.n	80076be <_strtod_l+0x476>
 8007746:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800774a:	428b      	cmp	r3, r1
 800774c:	bf86      	itte	hi
 800774e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007752:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80077e8 <_strtod_l+0x5a0>
 8007756:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800775a:	2300      	movs	r3, #0
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	e07e      	b.n	800785e <_strtod_l+0x616>
 8007760:	07f2      	lsls	r2, r6, #31
 8007762:	d507      	bpl.n	8007774 <_strtod_l+0x52c>
 8007764:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <_strtod_l+0x594>)
 8007766:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 fecb 	bl	8000508 <__aeabi_dmul>
 8007772:	2301      	movs	r3, #1
 8007774:	3701      	adds	r7, #1
 8007776:	1076      	asrs	r6, r6, #1
 8007778:	e7ce      	b.n	8007718 <_strtod_l+0x4d0>
 800777a:	d0ee      	beq.n	800775a <_strtod_l+0x512>
 800777c:	4276      	negs	r6, r6
 800777e:	f016 020f 	ands.w	r2, r6, #15
 8007782:	d00a      	beq.n	800779a <_strtod_l+0x552>
 8007784:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <_strtod_l+0x590>)
 8007786:	4640      	mov	r0, r8
 8007788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800778c:	4649      	mov	r1, r9
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 ffe3 	bl	800075c <__aeabi_ddiv>
 8007796:	4680      	mov	r8, r0
 8007798:	4689      	mov	r9, r1
 800779a:	1136      	asrs	r6, r6, #4
 800779c:	d0dd      	beq.n	800775a <_strtod_l+0x512>
 800779e:	2e1f      	cmp	r6, #31
 80077a0:	dd24      	ble.n	80077ec <_strtod_l+0x5a4>
 80077a2:	f04f 0b00 	mov.w	fp, #0
 80077a6:	f8cd b010 	str.w	fp, [sp, #16]
 80077aa:	f8cd b020 	str.w	fp, [sp, #32]
 80077ae:	f8cd b018 	str.w	fp, [sp, #24]
 80077b2:	2322      	movs	r3, #34	; 0x22
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	f8ca 3000 	str.w	r3, [sl]
 80077c0:	e78c      	b.n	80076dc <_strtod_l+0x494>
 80077c2:	bf00      	nop
 80077c4:	0800b59d 	.word	0x0800b59d
 80077c8:	0800b5e0 	.word	0x0800b5e0
 80077cc:	0800b595 	.word	0x0800b595
 80077d0:	0800b724 	.word	0x0800b724
 80077d4:	0800b9e0 	.word	0x0800b9e0
 80077d8:	0800b8c0 	.word	0x0800b8c0
 80077dc:	0800b898 	.word	0x0800b898
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	7ca00000 	.word	0x7ca00000
 80077e8:	7fefffff 	.word	0x7fefffff
 80077ec:	f016 0310 	ands.w	r3, r6, #16
 80077f0:	bf18      	it	ne
 80077f2:	236a      	movne	r3, #106	; 0x6a
 80077f4:	4640      	mov	r0, r8
 80077f6:	9305      	str	r3, [sp, #20]
 80077f8:	4649      	mov	r1, r9
 80077fa:	2300      	movs	r3, #0
 80077fc:	4fb2      	ldr	r7, [pc, #712]	; (8007ac8 <_strtod_l+0x880>)
 80077fe:	07f2      	lsls	r2, r6, #31
 8007800:	d504      	bpl.n	800780c <_strtod_l+0x5c4>
 8007802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007806:	f7f8 fe7f 	bl	8000508 <__aeabi_dmul>
 800780a:	2301      	movs	r3, #1
 800780c:	1076      	asrs	r6, r6, #1
 800780e:	f107 0708 	add.w	r7, r7, #8
 8007812:	d1f4      	bne.n	80077fe <_strtod_l+0x5b6>
 8007814:	b10b      	cbz	r3, 800781a <_strtod_l+0x5d2>
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	b1bb      	cbz	r3, 800784e <_strtod_l+0x606>
 800781e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007822:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007826:	2b00      	cmp	r3, #0
 8007828:	4649      	mov	r1, r9
 800782a:	dd10      	ble.n	800784e <_strtod_l+0x606>
 800782c:	2b1f      	cmp	r3, #31
 800782e:	f340 812b 	ble.w	8007a88 <_strtod_l+0x840>
 8007832:	2b34      	cmp	r3, #52	; 0x34
 8007834:	bfd8      	it	le
 8007836:	f04f 32ff 	movle.w	r2, #4294967295
 800783a:	f04f 0800 	mov.w	r8, #0
 800783e:	bfcf      	iteee	gt
 8007840:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007844:	3b20      	suble	r3, #32
 8007846:	fa02 f303 	lslle.w	r3, r2, r3
 800784a:	ea03 0901 	andle.w	r9, r3, r1
 800784e:	2200      	movs	r2, #0
 8007850:	2300      	movs	r3, #0
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f7f9 f8bf 	bl	80009d8 <__aeabi_dcmpeq>
 800785a:	2800      	cmp	r0, #0
 800785c:	d1a1      	bne.n	80077a2 <_strtod_l+0x55a>
 800785e:	9b06      	ldr	r3, [sp, #24]
 8007860:	465a      	mov	r2, fp
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4650      	mov	r0, sl
 8007866:	4623      	mov	r3, r4
 8007868:	9908      	ldr	r1, [sp, #32]
 800786a:	f001 fe37 	bl	80094dc <__s2b>
 800786e:	9008      	str	r0, [sp, #32]
 8007870:	2800      	cmp	r0, #0
 8007872:	f43f af24 	beq.w	80076be <_strtod_l+0x476>
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	f04f 0b00 	mov.w	fp, #0
 800787c:	1b5d      	subs	r5, r3, r5
 800787e:	9b07      	ldr	r3, [sp, #28]
 8007880:	f8cd b010 	str.w	fp, [sp, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	bfb4      	ite	lt
 8007888:	462b      	movlt	r3, r5
 800788a:	2300      	movge	r3, #0
 800788c:	930e      	str	r3, [sp, #56]	; 0x38
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007894:	9316      	str	r3, [sp, #88]	; 0x58
 8007896:	9b08      	ldr	r3, [sp, #32]
 8007898:	4650      	mov	r0, sl
 800789a:	6859      	ldr	r1, [r3, #4]
 800789c:	f001 fd72 	bl	8009384 <_Balloc>
 80078a0:	9006      	str	r0, [sp, #24]
 80078a2:	2800      	cmp	r0, #0
 80078a4:	f43f af13 	beq.w	80076ce <_strtod_l+0x486>
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	300c      	adds	r0, #12
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	f103 010c 	add.w	r1, r3, #12
 80078b2:	3202      	adds	r2, #2
 80078b4:	0092      	lsls	r2, r2, #2
 80078b6:	f001 fd57 	bl	8009368 <memcpy>
 80078ba:	ab1e      	add	r3, sp, #120	; 0x78
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	ab1d      	add	r3, sp, #116	; 0x74
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	4650      	mov	r0, sl
 80078c8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80078cc:	f002 f944 	bl	8009b58 <__d2b>
 80078d0:	901c      	str	r0, [sp, #112]	; 0x70
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f43f aefb 	beq.w	80076ce <_strtod_l+0x486>
 80078d8:	2101      	movs	r1, #1
 80078da:	4650      	mov	r0, sl
 80078dc:	f001 fe96 	bl	800960c <__i2b>
 80078e0:	4603      	mov	r3, r0
 80078e2:	9004      	str	r0, [sp, #16]
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f43f aef2 	beq.w	80076ce <_strtod_l+0x486>
 80078ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80078ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	bfab      	itete	ge
 80078f2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80078f4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80078f6:	18ee      	addge	r6, r5, r3
 80078f8:	1b5c      	sublt	r4, r3, r5
 80078fa:	9b05      	ldr	r3, [sp, #20]
 80078fc:	bfa8      	it	ge
 80078fe:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007900:	eba5 0503 	sub.w	r5, r5, r3
 8007904:	4415      	add	r5, r2
 8007906:	4b71      	ldr	r3, [pc, #452]	; (8007acc <_strtod_l+0x884>)
 8007908:	f105 35ff 	add.w	r5, r5, #4294967295
 800790c:	bfb8      	it	lt
 800790e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007910:	429d      	cmp	r5, r3
 8007912:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007916:	f280 80c9 	bge.w	8007aac <_strtod_l+0x864>
 800791a:	1b5b      	subs	r3, r3, r5
 800791c:	2b1f      	cmp	r3, #31
 800791e:	f04f 0701 	mov.w	r7, #1
 8007922:	eba2 0203 	sub.w	r2, r2, r3
 8007926:	f300 80b6 	bgt.w	8007a96 <_strtod_l+0x84e>
 800792a:	2500      	movs	r5, #0
 800792c:	fa07 f303 	lsl.w	r3, r7, r3
 8007930:	930f      	str	r3, [sp, #60]	; 0x3c
 8007932:	18b7      	adds	r7, r6, r2
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	42be      	cmp	r6, r7
 8007938:	4414      	add	r4, r2
 800793a:	441c      	add	r4, r3
 800793c:	4633      	mov	r3, r6
 800793e:	bfa8      	it	ge
 8007940:	463b      	movge	r3, r7
 8007942:	42a3      	cmp	r3, r4
 8007944:	bfa8      	it	ge
 8007946:	4623      	movge	r3, r4
 8007948:	2b00      	cmp	r3, #0
 800794a:	bfc2      	ittt	gt
 800794c:	1aff      	subgt	r7, r7, r3
 800794e:	1ae4      	subgt	r4, r4, r3
 8007950:	1af6      	subgt	r6, r6, r3
 8007952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007954:	2b00      	cmp	r3, #0
 8007956:	dd17      	ble.n	8007988 <_strtod_l+0x740>
 8007958:	461a      	mov	r2, r3
 800795a:	4650      	mov	r0, sl
 800795c:	9904      	ldr	r1, [sp, #16]
 800795e:	f001 ff0f 	bl	8009780 <__pow5mult>
 8007962:	9004      	str	r0, [sp, #16]
 8007964:	2800      	cmp	r0, #0
 8007966:	f43f aeb2 	beq.w	80076ce <_strtod_l+0x486>
 800796a:	4601      	mov	r1, r0
 800796c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800796e:	4650      	mov	r0, sl
 8007970:	f001 fe62 	bl	8009638 <__multiply>
 8007974:	9009      	str	r0, [sp, #36]	; 0x24
 8007976:	2800      	cmp	r0, #0
 8007978:	f43f aea9 	beq.w	80076ce <_strtod_l+0x486>
 800797c:	4650      	mov	r0, sl
 800797e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007980:	f001 fd40 	bl	8009404 <_Bfree>
 8007984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007986:	931c      	str	r3, [sp, #112]	; 0x70
 8007988:	2f00      	cmp	r7, #0
 800798a:	f300 8093 	bgt.w	8007ab4 <_strtod_l+0x86c>
 800798e:	9b07      	ldr	r3, [sp, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	dd08      	ble.n	80079a6 <_strtod_l+0x75e>
 8007994:	4650      	mov	r0, sl
 8007996:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007998:	9906      	ldr	r1, [sp, #24]
 800799a:	f001 fef1 	bl	8009780 <__pow5mult>
 800799e:	9006      	str	r0, [sp, #24]
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f43f ae94 	beq.w	80076ce <_strtod_l+0x486>
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	dd08      	ble.n	80079bc <_strtod_l+0x774>
 80079aa:	4622      	mov	r2, r4
 80079ac:	4650      	mov	r0, sl
 80079ae:	9906      	ldr	r1, [sp, #24]
 80079b0:	f001 ff40 	bl	8009834 <__lshift>
 80079b4:	9006      	str	r0, [sp, #24]
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f ae89 	beq.w	80076ce <_strtod_l+0x486>
 80079bc:	2e00      	cmp	r6, #0
 80079be:	dd08      	ble.n	80079d2 <_strtod_l+0x78a>
 80079c0:	4632      	mov	r2, r6
 80079c2:	4650      	mov	r0, sl
 80079c4:	9904      	ldr	r1, [sp, #16]
 80079c6:	f001 ff35 	bl	8009834 <__lshift>
 80079ca:	9004      	str	r0, [sp, #16]
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f43f ae7e 	beq.w	80076ce <_strtod_l+0x486>
 80079d2:	4650      	mov	r0, sl
 80079d4:	9a06      	ldr	r2, [sp, #24]
 80079d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079d8:	f001 ffb4 	bl	8009944 <__mdiff>
 80079dc:	4683      	mov	fp, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	f43f ae75 	beq.w	80076ce <_strtod_l+0x486>
 80079e4:	2400      	movs	r4, #0
 80079e6:	68c3      	ldr	r3, [r0, #12]
 80079e8:	9904      	ldr	r1, [sp, #16]
 80079ea:	60c4      	str	r4, [r0, #12]
 80079ec:	930d      	str	r3, [sp, #52]	; 0x34
 80079ee:	f001 ff8d 	bl	800990c <__mcmp>
 80079f2:	42a0      	cmp	r0, r4
 80079f4:	da70      	bge.n	8007ad8 <_strtod_l+0x890>
 80079f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f8:	ea53 0308 	orrs.w	r3, r3, r8
 80079fc:	f040 8096 	bne.w	8007b2c <_strtod_l+0x8e4>
 8007a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 8091 	bne.w	8007b2c <_strtod_l+0x8e4>
 8007a0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a0e:	0d1b      	lsrs	r3, r3, #20
 8007a10:	051b      	lsls	r3, r3, #20
 8007a12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a16:	f240 8089 	bls.w	8007b2c <_strtod_l+0x8e4>
 8007a1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007a1e:	b923      	cbnz	r3, 8007a2a <_strtod_l+0x7e2>
 8007a20:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f340 8081 	ble.w	8007b2c <_strtod_l+0x8e4>
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f001 ff00 	bl	8009834 <__lshift>
 8007a34:	9904      	ldr	r1, [sp, #16]
 8007a36:	4683      	mov	fp, r0
 8007a38:	f001 ff68 	bl	800990c <__mcmp>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	dd75      	ble.n	8007b2c <_strtod_l+0x8e4>
 8007a40:	9905      	ldr	r1, [sp, #20]
 8007a42:	464b      	mov	r3, r9
 8007a44:	4a22      	ldr	r2, [pc, #136]	; (8007ad0 <_strtod_l+0x888>)
 8007a46:	2900      	cmp	r1, #0
 8007a48:	f000 8091 	beq.w	8007b6e <_strtod_l+0x926>
 8007a4c:	ea02 0109 	and.w	r1, r2, r9
 8007a50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a54:	f300 808b 	bgt.w	8007b6e <_strtod_l+0x926>
 8007a58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a5c:	f77f aea9 	ble.w	80077b2 <_strtod_l+0x56a>
 8007a60:	2300      	movs	r3, #0
 8007a62:	4a1c      	ldr	r2, [pc, #112]	; (8007ad4 <_strtod_l+0x88c>)
 8007a64:	4640      	mov	r0, r8
 8007a66:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a70:	f7f8 fd4a 	bl	8000508 <__aeabi_dmul>
 8007a74:	460b      	mov	r3, r1
 8007a76:	4303      	orrs	r3, r0
 8007a78:	bf08      	it	eq
 8007a7a:	2322      	moveq	r3, #34	; 0x22
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	4689      	mov	r9, r1
 8007a80:	bf08      	it	eq
 8007a82:	f8ca 3000 	streq.w	r3, [sl]
 8007a86:	e62d      	b.n	80076e4 <_strtod_l+0x49c>
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a90:	ea03 0808 	and.w	r8, r3, r8
 8007a94:	e6db      	b.n	800784e <_strtod_l+0x606>
 8007a96:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007a9a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007a9e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007aa2:	35e2      	adds	r5, #226	; 0xe2
 8007aa4:	fa07 f505 	lsl.w	r5, r7, r5
 8007aa8:	970f      	str	r7, [sp, #60]	; 0x3c
 8007aaa:	e742      	b.n	8007932 <_strtod_l+0x6ea>
 8007aac:	2301      	movs	r3, #1
 8007aae:	2500      	movs	r5, #0
 8007ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ab2:	e73e      	b.n	8007932 <_strtod_l+0x6ea>
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	4650      	mov	r0, sl
 8007ab8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007aba:	f001 febb 	bl	8009834 <__lshift>
 8007abe:	901c      	str	r0, [sp, #112]	; 0x70
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f47f af64 	bne.w	800798e <_strtod_l+0x746>
 8007ac6:	e602      	b.n	80076ce <_strtod_l+0x486>
 8007ac8:	0800b5f8 	.word	0x0800b5f8
 8007acc:	fffffc02 	.word	0xfffffc02
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	39500000 	.word	0x39500000
 8007ad8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007adc:	d166      	bne.n	8007bac <_strtod_l+0x964>
 8007ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae4:	b35a      	cbz	r2, 8007b3e <_strtod_l+0x8f6>
 8007ae6:	4a9c      	ldr	r2, [pc, #624]	; (8007d58 <_strtod_l+0xb10>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d12c      	bne.n	8007b46 <_strtod_l+0x8fe>
 8007aec:	9b05      	ldr	r3, [sp, #20]
 8007aee:	4640      	mov	r0, r8
 8007af0:	b303      	cbz	r3, 8007b34 <_strtod_l+0x8ec>
 8007af2:	464b      	mov	r3, r9
 8007af4:	4a99      	ldr	r2, [pc, #612]	; (8007d5c <_strtod_l+0xb14>)
 8007af6:	f04f 31ff 	mov.w	r1, #4294967295
 8007afa:	401a      	ands	r2, r3
 8007afc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007b00:	d81b      	bhi.n	8007b3a <_strtod_l+0x8f2>
 8007b02:	0d12      	lsrs	r2, r2, #20
 8007b04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b08:	fa01 f303 	lsl.w	r3, r1, r3
 8007b0c:	4298      	cmp	r0, r3
 8007b0e:	d11a      	bne.n	8007b46 <_strtod_l+0x8fe>
 8007b10:	4b93      	ldr	r3, [pc, #588]	; (8007d60 <_strtod_l+0xb18>)
 8007b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d102      	bne.n	8007b1e <_strtod_l+0x8d6>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f add8 	beq.w	80076ce <_strtod_l+0x486>
 8007b1e:	f04f 0800 	mov.w	r8, #0
 8007b22:	4b8e      	ldr	r3, [pc, #568]	; (8007d5c <_strtod_l+0xb14>)
 8007b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b26:	401a      	ands	r2, r3
 8007b28:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007b2c:	9b05      	ldr	r3, [sp, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d196      	bne.n	8007a60 <_strtod_l+0x818>
 8007b32:	e5d7      	b.n	80076e4 <_strtod_l+0x49c>
 8007b34:	f04f 33ff 	mov.w	r3, #4294967295
 8007b38:	e7e8      	b.n	8007b0c <_strtod_l+0x8c4>
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	e7e6      	b.n	8007b0c <_strtod_l+0x8c4>
 8007b3e:	ea53 0308 	orrs.w	r3, r3, r8
 8007b42:	f43f af7d 	beq.w	8007a40 <_strtod_l+0x7f8>
 8007b46:	b1e5      	cbz	r5, 8007b82 <_strtod_l+0x93a>
 8007b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4a:	421d      	tst	r5, r3
 8007b4c:	d0ee      	beq.n	8007b2c <_strtod_l+0x8e4>
 8007b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	9a05      	ldr	r2, [sp, #20]
 8007b56:	b1c3      	cbz	r3, 8007b8a <_strtod_l+0x942>
 8007b58:	f7ff fb52 	bl	8007200 <sulp>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b64:	f7f8 fb1a 	bl	800019c <__adddf3>
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4689      	mov	r9, r1
 8007b6c:	e7de      	b.n	8007b2c <_strtod_l+0x8e4>
 8007b6e:	4013      	ands	r3, r2
 8007b70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b74:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007b78:	f04f 38ff 	mov.w	r8, #4294967295
 8007b7c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007b80:	e7d4      	b.n	8007b2c <_strtod_l+0x8e4>
 8007b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b84:	ea13 0f08 	tst.w	r3, r8
 8007b88:	e7e0      	b.n	8007b4c <_strtod_l+0x904>
 8007b8a:	f7ff fb39 	bl	8007200 <sulp>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b96:	f7f8 faff 	bl	8000198 <__aeabi_dsub>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4680      	mov	r8, r0
 8007ba0:	4689      	mov	r9, r1
 8007ba2:	f7f8 ff19 	bl	80009d8 <__aeabi_dcmpeq>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0c0      	beq.n	8007b2c <_strtod_l+0x8e4>
 8007baa:	e602      	b.n	80077b2 <_strtod_l+0x56a>
 8007bac:	4658      	mov	r0, fp
 8007bae:	9904      	ldr	r1, [sp, #16]
 8007bb0:	f002 f82e 	bl	8009c10 <__ratio>
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	f7f8 ff1f 	bl	8000a00 <__aeabi_dcmple>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d075      	beq.n	8007cb2 <_strtod_l+0xa6a>
 8007bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d047      	beq.n	8007c5c <_strtod_l+0xa14>
 8007bcc:	2600      	movs	r6, #0
 8007bce:	4f65      	ldr	r7, [pc, #404]	; (8007d64 <_strtod_l+0xb1c>)
 8007bd0:	4d64      	ldr	r5, [pc, #400]	; (8007d64 <_strtod_l+0xb1c>)
 8007bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bd8:	0d1b      	lsrs	r3, r3, #20
 8007bda:	051b      	lsls	r3, r3, #20
 8007bdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007be0:	4b61      	ldr	r3, [pc, #388]	; (8007d68 <_strtod_l+0xb20>)
 8007be2:	429a      	cmp	r2, r3
 8007be4:	f040 80c8 	bne.w	8007d78 <_strtod_l+0xb30>
 8007be8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007bec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	f001 ff33 	bl	8009a64 <__ulp>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4630      	mov	r0, r6
 8007c04:	4639      	mov	r1, r7
 8007c06:	f7f8 fc7f 	bl	8000508 <__aeabi_dmul>
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	f7f8 fac5 	bl	800019c <__adddf3>
 8007c12:	460b      	mov	r3, r1
 8007c14:	4951      	ldr	r1, [pc, #324]	; (8007d5c <_strtod_l+0xb14>)
 8007c16:	4a55      	ldr	r2, [pc, #340]	; (8007d6c <_strtod_l+0xb24>)
 8007c18:	4019      	ands	r1, r3
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	d95e      	bls.n	8007cde <_strtod_l+0xa96>
 8007c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d103      	bne.n	8007c32 <_strtod_l+0x9ea>
 8007c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	f43f ad4e 	beq.w	80076ce <_strtod_l+0x486>
 8007c32:	f04f 38ff 	mov.w	r8, #4294967295
 8007c36:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007d60 <_strtod_l+0xb18>
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c3e:	f001 fbe1 	bl	8009404 <_Bfree>
 8007c42:	4650      	mov	r0, sl
 8007c44:	9906      	ldr	r1, [sp, #24]
 8007c46:	f001 fbdd 	bl	8009404 <_Bfree>
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	9904      	ldr	r1, [sp, #16]
 8007c4e:	f001 fbd9 	bl	8009404 <_Bfree>
 8007c52:	4659      	mov	r1, fp
 8007c54:	4650      	mov	r0, sl
 8007c56:	f001 fbd5 	bl	8009404 <_Bfree>
 8007c5a:	e61c      	b.n	8007896 <_strtod_l+0x64e>
 8007c5c:	f1b8 0f00 	cmp.w	r8, #0
 8007c60:	d119      	bne.n	8007c96 <_strtod_l+0xa4e>
 8007c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c68:	b9e3      	cbnz	r3, 8007ca4 <_strtod_l+0xa5c>
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	4639      	mov	r1, r7
 8007c70:	4b3c      	ldr	r3, [pc, #240]	; (8007d64 <_strtod_l+0xb1c>)
 8007c72:	f7f8 febb 	bl	80009ec <__aeabi_dcmplt>
 8007c76:	b9c8      	cbnz	r0, 8007cac <_strtod_l+0xa64>
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <_strtod_l+0xb28>)
 8007c80:	f7f8 fc42 	bl	8000508 <__aeabi_dmul>
 8007c84:	4604      	mov	r4, r0
 8007c86:	460d      	mov	r5, r1
 8007c88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007c8c:	9418      	str	r4, [sp, #96]	; 0x60
 8007c8e:	9319      	str	r3, [sp, #100]	; 0x64
 8007c90:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007c94:	e79d      	b.n	8007bd2 <_strtod_l+0x98a>
 8007c96:	f1b8 0f01 	cmp.w	r8, #1
 8007c9a:	d103      	bne.n	8007ca4 <_strtod_l+0xa5c>
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f43f ad87 	beq.w	80077b2 <_strtod_l+0x56a>
 8007ca4:	2600      	movs	r6, #0
 8007ca6:	2400      	movs	r4, #0
 8007ca8:	4f32      	ldr	r7, [pc, #200]	; (8007d74 <_strtod_l+0xb2c>)
 8007caa:	e791      	b.n	8007bd0 <_strtod_l+0x988>
 8007cac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007cae:	4d30      	ldr	r5, [pc, #192]	; (8007d70 <_strtod_l+0xb28>)
 8007cb0:	e7ea      	b.n	8007c88 <_strtod_l+0xa40>
 8007cb2:	4b2f      	ldr	r3, [pc, #188]	; (8007d70 <_strtod_l+0xb28>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 fc25 	bl	8000508 <__aeabi_dmul>
 8007cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	460d      	mov	r5, r1
 8007cc4:	b933      	cbnz	r3, 8007cd4 <_strtod_l+0xa8c>
 8007cc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cca:	9010      	str	r0, [sp, #64]	; 0x40
 8007ccc:	9311      	str	r3, [sp, #68]	; 0x44
 8007cce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007cd2:	e77e      	b.n	8007bd2 <_strtod_l+0x98a>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007cdc:	e7f7      	b.n	8007cce <_strtod_l+0xa86>
 8007cde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1a8      	bne.n	8007c3a <_strtod_l+0x9f2>
 8007ce8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cee:	0d1b      	lsrs	r3, r3, #20
 8007cf0:	051b      	lsls	r3, r3, #20
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d1a1      	bne.n	8007c3a <_strtod_l+0x9f2>
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 ff65 	bl	8000bc8 <__aeabi_d2lz>
 8007cfe:	f7f8 fbd5 	bl	80004ac <__aeabi_l2d>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fa45 	bl	8000198 <__aeabi_dsub>
 8007d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d14:	ea43 0308 	orr.w	r3, r3, r8
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	d066      	beq.n	8007dee <_strtod_l+0xba6>
 8007d20:	a309      	add	r3, pc, #36	; (adr r3, 8007d48 <_strtod_l+0xb00>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fe61 	bl	80009ec <__aeabi_dcmplt>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f47f acda 	bne.w	80076e4 <_strtod_l+0x49c>
 8007d30:	a307      	add	r3, pc, #28	; (adr r3, 8007d50 <_strtod_l+0xb08>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4620      	mov	r0, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7f8 fe75 	bl	8000a28 <__aeabi_dcmpgt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f43f af7b 	beq.w	8007c3a <_strtod_l+0x9f2>
 8007d44:	e4ce      	b.n	80076e4 <_strtod_l+0x49c>
 8007d46:	bf00      	nop
 8007d48:	94a03595 	.word	0x94a03595
 8007d4c:	3fdfffff 	.word	0x3fdfffff
 8007d50:	35afe535 	.word	0x35afe535
 8007d54:	3fe00000 	.word	0x3fe00000
 8007d58:	000fffff 	.word	0x000fffff
 8007d5c:	7ff00000 	.word	0x7ff00000
 8007d60:	7fefffff 	.word	0x7fefffff
 8007d64:	3ff00000 	.word	0x3ff00000
 8007d68:	7fe00000 	.word	0x7fe00000
 8007d6c:	7c9fffff 	.word	0x7c9fffff
 8007d70:	3fe00000 	.word	0x3fe00000
 8007d74:	bff00000 	.word	0xbff00000
 8007d78:	9b05      	ldr	r3, [sp, #20]
 8007d7a:	b313      	cbz	r3, 8007dc2 <_strtod_l+0xb7a>
 8007d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d82:	d81e      	bhi.n	8007dc2 <_strtod_l+0xb7a>
 8007d84:	a326      	add	r3, pc, #152	; (adr r3, 8007e20 <_strtod_l+0xbd8>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7f8 fe37 	bl	8000a00 <__aeabi_dcmple>
 8007d92:	b190      	cbz	r0, 8007dba <_strtod_l+0xb72>
 8007d94:	4629      	mov	r1, r5
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7f8 fe8e 	bl	8000ab8 <__aeabi_d2uiz>
 8007d9c:	2801      	cmp	r0, #1
 8007d9e:	bf38      	it	cc
 8007da0:	2001      	movcc	r0, #1
 8007da2:	f7f8 fb37 	bl	8000414 <__aeabi_ui2d>
 8007da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	b9d3      	cbnz	r3, 8007de4 <_strtod_l+0xb9c>
 8007dae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007db2:	9012      	str	r0, [sp, #72]	; 0x48
 8007db4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007db6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007dba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dbc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007dc0:	1a9f      	subs	r7, r3, r2
 8007dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dc6:	f001 fe4d 	bl	8009a64 <__ulp>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 fb99 	bl	8000508 <__aeabi_dmul>
 8007dd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dda:	f7f8 f9df 	bl	800019c <__adddf3>
 8007dde:	4680      	mov	r8, r0
 8007de0:	4689      	mov	r9, r1
 8007de2:	e77e      	b.n	8007ce2 <_strtod_l+0xa9a>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007dec:	e7e3      	b.n	8007db6 <_strtod_l+0xb6e>
 8007dee:	a30e      	add	r3, pc, #56	; (adr r3, 8007e28 <_strtod_l+0xbe0>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fdfa 	bl	80009ec <__aeabi_dcmplt>
 8007df8:	e7a1      	b.n	8007d3e <_strtod_l+0xaf6>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8007dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	f7ff ba65 	b.w	80072d2 <_strtod_l+0x8a>
 8007e08:	2b65      	cmp	r3, #101	; 0x65
 8007e0a:	f43f ab5c 	beq.w	80074c6 <_strtod_l+0x27e>
 8007e0e:	2b45      	cmp	r3, #69	; 0x45
 8007e10:	f43f ab59 	beq.w	80074c6 <_strtod_l+0x27e>
 8007e14:	2201      	movs	r2, #1
 8007e16:	f7ff bb8d 	b.w	8007534 <_strtod_l+0x2ec>
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w
 8007e20:	ffc00000 	.word	0xffc00000
 8007e24:	41dfffff 	.word	0x41dfffff
 8007e28:	94a03595 	.word	0x94a03595
 8007e2c:	3fcfffff 	.word	0x3fcfffff

08007e30 <_strtod_r>:
 8007e30:	4b01      	ldr	r3, [pc, #4]	; (8007e38 <_strtod_r+0x8>)
 8007e32:	f7ff ba09 	b.w	8007248 <_strtod_l>
 8007e36:	bf00      	nop
 8007e38:	200000d4 	.word	0x200000d4

08007e3c <_strtol_l.isra.0>:
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e42:	4686      	mov	lr, r0
 8007e44:	d001      	beq.n	8007e4a <_strtol_l.isra.0+0xe>
 8007e46:	2b24      	cmp	r3, #36	; 0x24
 8007e48:	d906      	bls.n	8007e58 <_strtol_l.isra.0+0x1c>
 8007e4a:	f7fe fb03 	bl	8006454 <__errno>
 8007e4e:	2316      	movs	r3, #22
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	2000      	movs	r0, #0
 8007e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e58:	468c      	mov	ip, r1
 8007e5a:	4e3a      	ldr	r6, [pc, #232]	; (8007f44 <_strtol_l.isra.0+0x108>)
 8007e5c:	4660      	mov	r0, ip
 8007e5e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007e62:	5da5      	ldrb	r5, [r4, r6]
 8007e64:	f015 0508 	ands.w	r5, r5, #8
 8007e68:	d1f8      	bne.n	8007e5c <_strtol_l.isra.0+0x20>
 8007e6a:	2c2d      	cmp	r4, #45	; 0x2d
 8007e6c:	d133      	bne.n	8007ed6 <_strtol_l.isra.0+0x9a>
 8007e6e:	f04f 0801 	mov.w	r8, #1
 8007e72:	f89c 4000 	ldrb.w	r4, [ip]
 8007e76:	f100 0c02 	add.w	ip, r0, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d05d      	beq.n	8007f3a <_strtol_l.isra.0+0xfe>
 8007e7e:	2b10      	cmp	r3, #16
 8007e80:	d10c      	bne.n	8007e9c <_strtol_l.isra.0+0x60>
 8007e82:	2c30      	cmp	r4, #48	; 0x30
 8007e84:	d10a      	bne.n	8007e9c <_strtol_l.isra.0+0x60>
 8007e86:	f89c 0000 	ldrb.w	r0, [ip]
 8007e8a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007e8e:	2858      	cmp	r0, #88	; 0x58
 8007e90:	d14e      	bne.n	8007f30 <_strtol_l.isra.0+0xf4>
 8007e92:	2310      	movs	r3, #16
 8007e94:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007e98:	f10c 0c02 	add.w	ip, ip, #2
 8007e9c:	2500      	movs	r5, #0
 8007e9e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007ea2:	3f01      	subs	r7, #1
 8007ea4:	fbb7 f9f3 	udiv	r9, r7, r3
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	fb03 7a19 	mls	sl, r3, r9, r7
 8007eae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007eb2:	2e09      	cmp	r6, #9
 8007eb4:	d818      	bhi.n	8007ee8 <_strtol_l.isra.0+0xac>
 8007eb6:	4634      	mov	r4, r6
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	dd24      	ble.n	8007f06 <_strtol_l.isra.0+0xca>
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	db1f      	blt.n	8007f00 <_strtol_l.isra.0+0xc4>
 8007ec0:	4581      	cmp	r9, r0
 8007ec2:	d31d      	bcc.n	8007f00 <_strtol_l.isra.0+0xc4>
 8007ec4:	d101      	bne.n	8007eca <_strtol_l.isra.0+0x8e>
 8007ec6:	45a2      	cmp	sl, r4
 8007ec8:	db1a      	blt.n	8007f00 <_strtol_l.isra.0+0xc4>
 8007eca:	2501      	movs	r5, #1
 8007ecc:	fb00 4003 	mla	r0, r0, r3, r4
 8007ed0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007ed4:	e7eb      	b.n	8007eae <_strtol_l.isra.0+0x72>
 8007ed6:	2c2b      	cmp	r4, #43	; 0x2b
 8007ed8:	bf08      	it	eq
 8007eda:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007ede:	46a8      	mov	r8, r5
 8007ee0:	bf08      	it	eq
 8007ee2:	f100 0c02 	addeq.w	ip, r0, #2
 8007ee6:	e7c8      	b.n	8007e7a <_strtol_l.isra.0+0x3e>
 8007ee8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007eec:	2e19      	cmp	r6, #25
 8007eee:	d801      	bhi.n	8007ef4 <_strtol_l.isra.0+0xb8>
 8007ef0:	3c37      	subs	r4, #55	; 0x37
 8007ef2:	e7e1      	b.n	8007eb8 <_strtol_l.isra.0+0x7c>
 8007ef4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007ef8:	2e19      	cmp	r6, #25
 8007efa:	d804      	bhi.n	8007f06 <_strtol_l.isra.0+0xca>
 8007efc:	3c57      	subs	r4, #87	; 0x57
 8007efe:	e7db      	b.n	8007eb8 <_strtol_l.isra.0+0x7c>
 8007f00:	f04f 35ff 	mov.w	r5, #4294967295
 8007f04:	e7e4      	b.n	8007ed0 <_strtol_l.isra.0+0x94>
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	da08      	bge.n	8007f1c <_strtol_l.isra.0+0xe0>
 8007f0a:	2322      	movs	r3, #34	; 0x22
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f8ce 3000 	str.w	r3, [lr]
 8007f12:	2a00      	cmp	r2, #0
 8007f14:	d09e      	beq.n	8007e54 <_strtol_l.isra.0+0x18>
 8007f16:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007f1a:	e007      	b.n	8007f2c <_strtol_l.isra.0+0xf0>
 8007f1c:	f1b8 0f00 	cmp.w	r8, #0
 8007f20:	d000      	beq.n	8007f24 <_strtol_l.isra.0+0xe8>
 8007f22:	4240      	negs	r0, r0
 8007f24:	2a00      	cmp	r2, #0
 8007f26:	d095      	beq.n	8007e54 <_strtol_l.isra.0+0x18>
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	d1f4      	bne.n	8007f16 <_strtol_l.isra.0+0xda>
 8007f2c:	6011      	str	r1, [r2, #0]
 8007f2e:	e791      	b.n	8007e54 <_strtol_l.isra.0+0x18>
 8007f30:	2430      	movs	r4, #48	; 0x30
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1b2      	bne.n	8007e9c <_strtol_l.isra.0+0x60>
 8007f36:	2308      	movs	r3, #8
 8007f38:	e7b0      	b.n	8007e9c <_strtol_l.isra.0+0x60>
 8007f3a:	2c30      	cmp	r4, #48	; 0x30
 8007f3c:	d0a3      	beq.n	8007e86 <_strtol_l.isra.0+0x4a>
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e7ac      	b.n	8007e9c <_strtol_l.isra.0+0x60>
 8007f42:	bf00      	nop
 8007f44:	0800b621 	.word	0x0800b621

08007f48 <_strtol_r>:
 8007f48:	f7ff bf78 	b.w	8007e3c <_strtol_l.isra.0>

08007f4c <quorem>:
 8007f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	6903      	ldr	r3, [r0, #16]
 8007f52:	690c      	ldr	r4, [r1, #16]
 8007f54:	4607      	mov	r7, r0
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	f2c0 8083 	blt.w	8008062 <quorem+0x116>
 8007f5c:	3c01      	subs	r4, #1
 8007f5e:	f100 0514 	add.w	r5, r0, #20
 8007f62:	f101 0814 	add.w	r8, r1, #20
 8007f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f74:	3301      	adds	r3, #1
 8007f76:	429a      	cmp	r2, r3
 8007f78:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f84:	d332      	bcc.n	8007fec <quorem+0xa0>
 8007f86:	f04f 0e00 	mov.w	lr, #0
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	46ac      	mov	ip, r5
 8007f8e:	46f2      	mov	sl, lr
 8007f90:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f94:	b293      	uxth	r3, r2
 8007f96:	fb06 e303 	mla	r3, r6, r3, lr
 8007f9a:	0c12      	lsrs	r2, r2, #16
 8007f9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fa0:	fb06 e202 	mla	r2, r6, r2, lr
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	ebaa 0303 	sub.w	r3, sl, r3
 8007faa:	f8dc a000 	ldr.w	sl, [ip]
 8007fae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fb2:	fa1f fa8a 	uxth.w	sl, sl
 8007fb6:	4453      	add	r3, sl
 8007fb8:	fa1f fa82 	uxth.w	sl, r2
 8007fbc:	f8dc 2000 	ldr.w	r2, [ip]
 8007fc0:	4581      	cmp	r9, r0
 8007fc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fd4:	f84c 3b04 	str.w	r3, [ip], #4
 8007fd8:	d2da      	bcs.n	8007f90 <quorem+0x44>
 8007fda:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fde:	b92b      	cbnz	r3, 8007fec <quorem+0xa0>
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	429d      	cmp	r5, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	d32f      	bcc.n	800804a <quorem+0xfe>
 8007fea:	613c      	str	r4, [r7, #16]
 8007fec:	4638      	mov	r0, r7
 8007fee:	f001 fc8d 	bl	800990c <__mcmp>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	db25      	blt.n	8008042 <quorem+0xf6>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f04f 0c00 	mov.w	ip, #0
 8007ffc:	3601      	adds	r6, #1
 8007ffe:	f858 1b04 	ldr.w	r1, [r8], #4
 8008002:	f8d0 e000 	ldr.w	lr, [r0]
 8008006:	b28b      	uxth	r3, r1
 8008008:	ebac 0303 	sub.w	r3, ip, r3
 800800c:	fa1f f28e 	uxth.w	r2, lr
 8008010:	4413      	add	r3, r2
 8008012:	0c0a      	lsrs	r2, r1, #16
 8008014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800801c:	b29b      	uxth	r3, r3
 800801e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008022:	45c1      	cmp	r9, r8
 8008024:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008028:	f840 3b04 	str.w	r3, [r0], #4
 800802c:	d2e7      	bcs.n	8007ffe <quorem+0xb2>
 800802e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008036:	b922      	cbnz	r2, 8008042 <quorem+0xf6>
 8008038:	3b04      	subs	r3, #4
 800803a:	429d      	cmp	r5, r3
 800803c:	461a      	mov	r2, r3
 800803e:	d30a      	bcc.n	8008056 <quorem+0x10a>
 8008040:	613c      	str	r4, [r7, #16]
 8008042:	4630      	mov	r0, r6
 8008044:	b003      	add	sp, #12
 8008046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804a:	6812      	ldr	r2, [r2, #0]
 800804c:	3b04      	subs	r3, #4
 800804e:	2a00      	cmp	r2, #0
 8008050:	d1cb      	bne.n	8007fea <quorem+0x9e>
 8008052:	3c01      	subs	r4, #1
 8008054:	e7c6      	b.n	8007fe4 <quorem+0x98>
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	3b04      	subs	r3, #4
 800805a:	2a00      	cmp	r2, #0
 800805c:	d1f0      	bne.n	8008040 <quorem+0xf4>
 800805e:	3c01      	subs	r4, #1
 8008060:	e7eb      	b.n	800803a <quorem+0xee>
 8008062:	2000      	movs	r0, #0
 8008064:	e7ee      	b.n	8008044 <quorem+0xf8>
	...

08008068 <_dtoa_r>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4616      	mov	r6, r2
 800806e:	461f      	mov	r7, r3
 8008070:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008072:	b099      	sub	sp, #100	; 0x64
 8008074:	4605      	mov	r5, r0
 8008076:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800807a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800807e:	b974      	cbnz	r4, 800809e <_dtoa_r+0x36>
 8008080:	2010      	movs	r0, #16
 8008082:	f001 f949 	bl	8009318 <malloc>
 8008086:	4602      	mov	r2, r0
 8008088:	6268      	str	r0, [r5, #36]	; 0x24
 800808a:	b920      	cbnz	r0, 8008096 <_dtoa_r+0x2e>
 800808c:	21ea      	movs	r1, #234	; 0xea
 800808e:	4bae      	ldr	r3, [pc, #696]	; (8008348 <_dtoa_r+0x2e0>)
 8008090:	48ae      	ldr	r0, [pc, #696]	; (800834c <_dtoa_r+0x2e4>)
 8008092:	f002 f875 	bl	800a180 <__assert_func>
 8008096:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800809a:	6004      	str	r4, [r0, #0]
 800809c:	60c4      	str	r4, [r0, #12]
 800809e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	b151      	cbz	r1, 80080ba <_dtoa_r+0x52>
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	2301      	movs	r3, #1
 80080a8:	4093      	lsls	r3, r2
 80080aa:	604a      	str	r2, [r1, #4]
 80080ac:	608b      	str	r3, [r1, #8]
 80080ae:	4628      	mov	r0, r5
 80080b0:	f001 f9a8 	bl	8009404 <_Bfree>
 80080b4:	2200      	movs	r2, #0
 80080b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	1e3b      	subs	r3, r7, #0
 80080bc:	bfaf      	iteee	ge
 80080be:	2300      	movge	r3, #0
 80080c0:	2201      	movlt	r2, #1
 80080c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080c6:	9305      	strlt	r3, [sp, #20]
 80080c8:	bfa8      	it	ge
 80080ca:	f8c8 3000 	strge.w	r3, [r8]
 80080ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80080d2:	4b9f      	ldr	r3, [pc, #636]	; (8008350 <_dtoa_r+0x2e8>)
 80080d4:	bfb8      	it	lt
 80080d6:	f8c8 2000 	strlt.w	r2, [r8]
 80080da:	ea33 0309 	bics.w	r3, r3, r9
 80080de:	d119      	bne.n	8008114 <_dtoa_r+0xac>
 80080e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80080e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080ec:	4333      	orrs	r3, r6
 80080ee:	f000 8580 	beq.w	8008bf2 <_dtoa_r+0xb8a>
 80080f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080f4:	b953      	cbnz	r3, 800810c <_dtoa_r+0xa4>
 80080f6:	4b97      	ldr	r3, [pc, #604]	; (8008354 <_dtoa_r+0x2ec>)
 80080f8:	e022      	b.n	8008140 <_dtoa_r+0xd8>
 80080fa:	4b97      	ldr	r3, [pc, #604]	; (8008358 <_dtoa_r+0x2f0>)
 80080fc:	9308      	str	r3, [sp, #32]
 80080fe:	3308      	adds	r3, #8
 8008100:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	9808      	ldr	r0, [sp, #32]
 8008106:	b019      	add	sp, #100	; 0x64
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	4b91      	ldr	r3, [pc, #580]	; (8008354 <_dtoa_r+0x2ec>)
 800810e:	9308      	str	r3, [sp, #32]
 8008110:	3303      	adds	r3, #3
 8008112:	e7f5      	b.n	8008100 <_dtoa_r+0x98>
 8008114:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008118:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800811c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008120:	2200      	movs	r2, #0
 8008122:	2300      	movs	r3, #0
 8008124:	f7f8 fc58 	bl	80009d8 <__aeabi_dcmpeq>
 8008128:	4680      	mov	r8, r0
 800812a:	b158      	cbz	r0, 8008144 <_dtoa_r+0xdc>
 800812c:	2301      	movs	r3, #1
 800812e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8559 	beq.w	8008bec <_dtoa_r+0xb84>
 800813a:	4888      	ldr	r0, [pc, #544]	; (800835c <_dtoa_r+0x2f4>)
 800813c:	6018      	str	r0, [r3, #0]
 800813e:	1e43      	subs	r3, r0, #1
 8008140:	9308      	str	r3, [sp, #32]
 8008142:	e7df      	b.n	8008104 <_dtoa_r+0x9c>
 8008144:	ab16      	add	r3, sp, #88	; 0x58
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	ab17      	add	r3, sp, #92	; 0x5c
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4628      	mov	r0, r5
 800814e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008152:	f001 fd01 	bl	8009b58 <__d2b>
 8008156:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800815a:	4682      	mov	sl, r0
 800815c:	2c00      	cmp	r4, #0
 800815e:	d07e      	beq.n	800825e <_dtoa_r+0x1f6>
 8008160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008166:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800816a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800816e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008172:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008176:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800817a:	2200      	movs	r2, #0
 800817c:	4b78      	ldr	r3, [pc, #480]	; (8008360 <_dtoa_r+0x2f8>)
 800817e:	f7f8 f80b 	bl	8000198 <__aeabi_dsub>
 8008182:	a36b      	add	r3, pc, #428	; (adr r3, 8008330 <_dtoa_r+0x2c8>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 f9be 	bl	8000508 <__aeabi_dmul>
 800818c:	a36a      	add	r3, pc, #424	; (adr r3, 8008338 <_dtoa_r+0x2d0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f803 	bl	800019c <__adddf3>
 8008196:	4606      	mov	r6, r0
 8008198:	4620      	mov	r0, r4
 800819a:	460f      	mov	r7, r1
 800819c:	f7f8 f94a 	bl	8000434 <__aeabi_i2d>
 80081a0:	a367      	add	r3, pc, #412	; (adr r3, 8008340 <_dtoa_r+0x2d8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 f9af 	bl	8000508 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f7 fff3 	bl	800019c <__adddf3>
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	f7f8 fc55 	bl	8000a68 <__aeabi_d2iz>
 80081be:	2200      	movs	r2, #0
 80081c0:	4681      	mov	r9, r0
 80081c2:	2300      	movs	r3, #0
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fc10 	bl	80009ec <__aeabi_dcmplt>
 80081cc:	b148      	cbz	r0, 80081e2 <_dtoa_r+0x17a>
 80081ce:	4648      	mov	r0, r9
 80081d0:	f7f8 f930 	bl	8000434 <__aeabi_i2d>
 80081d4:	4632      	mov	r2, r6
 80081d6:	463b      	mov	r3, r7
 80081d8:	f7f8 fbfe 	bl	80009d8 <__aeabi_dcmpeq>
 80081dc:	b908      	cbnz	r0, 80081e2 <_dtoa_r+0x17a>
 80081de:	f109 39ff 	add.w	r9, r9, #4294967295
 80081e2:	f1b9 0f16 	cmp.w	r9, #22
 80081e6:	d857      	bhi.n	8008298 <_dtoa_r+0x230>
 80081e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081ec:	4b5d      	ldr	r3, [pc, #372]	; (8008364 <_dtoa_r+0x2fc>)
 80081ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fbf9 	bl	80009ec <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d04e      	beq.n	800829c <_dtoa_r+0x234>
 80081fe:	2300      	movs	r3, #0
 8008200:	f109 39ff 	add.w	r9, r9, #4294967295
 8008204:	930f      	str	r3, [sp, #60]	; 0x3c
 8008206:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008208:	1b1c      	subs	r4, r3, r4
 800820a:	1e63      	subs	r3, r4, #1
 800820c:	9309      	str	r3, [sp, #36]	; 0x24
 800820e:	bf49      	itett	mi
 8008210:	f1c4 0301 	rsbmi	r3, r4, #1
 8008214:	2300      	movpl	r3, #0
 8008216:	9306      	strmi	r3, [sp, #24]
 8008218:	2300      	movmi	r3, #0
 800821a:	bf54      	ite	pl
 800821c:	9306      	strpl	r3, [sp, #24]
 800821e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008220:	f1b9 0f00 	cmp.w	r9, #0
 8008224:	db3c      	blt.n	80082a0 <_dtoa_r+0x238>
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800822c:	444b      	add	r3, r9
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	2300      	movs	r3, #0
 8008232:	930a      	str	r3, [sp, #40]	; 0x28
 8008234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008236:	2b09      	cmp	r3, #9
 8008238:	d86c      	bhi.n	8008314 <_dtoa_r+0x2ac>
 800823a:	2b05      	cmp	r3, #5
 800823c:	bfc4      	itt	gt
 800823e:	3b04      	subgt	r3, #4
 8008240:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008244:	bfc8      	it	gt
 8008246:	2400      	movgt	r4, #0
 8008248:	f1a3 0302 	sub.w	r3, r3, #2
 800824c:	bfd8      	it	le
 800824e:	2401      	movle	r4, #1
 8008250:	2b03      	cmp	r3, #3
 8008252:	f200 808b 	bhi.w	800836c <_dtoa_r+0x304>
 8008256:	e8df f003 	tbb	[pc, r3]
 800825a:	4f2d      	.short	0x4f2d
 800825c:	5b4d      	.short	0x5b4d
 800825e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008262:	441c      	add	r4, r3
 8008264:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008268:	2b20      	cmp	r3, #32
 800826a:	bfc3      	ittte	gt
 800826c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008270:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008274:	fa09 f303 	lslgt.w	r3, r9, r3
 8008278:	f1c3 0320 	rsble	r3, r3, #32
 800827c:	bfc6      	itte	gt
 800827e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008282:	4318      	orrgt	r0, r3
 8008284:	fa06 f003 	lslle.w	r0, r6, r3
 8008288:	f7f8 f8c4 	bl	8000414 <__aeabi_ui2d>
 800828c:	2301      	movs	r3, #1
 800828e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008292:	3c01      	subs	r4, #1
 8008294:	9313      	str	r3, [sp, #76]	; 0x4c
 8008296:	e770      	b.n	800817a <_dtoa_r+0x112>
 8008298:	2301      	movs	r3, #1
 800829a:	e7b3      	b.n	8008204 <_dtoa_r+0x19c>
 800829c:	900f      	str	r0, [sp, #60]	; 0x3c
 800829e:	e7b2      	b.n	8008206 <_dtoa_r+0x19e>
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	eba3 0309 	sub.w	r3, r3, r9
 80082a6:	9306      	str	r3, [sp, #24]
 80082a8:	f1c9 0300 	rsb	r3, r9, #0
 80082ac:	930a      	str	r3, [sp, #40]	; 0x28
 80082ae:	2300      	movs	r3, #0
 80082b0:	930e      	str	r3, [sp, #56]	; 0x38
 80082b2:	e7bf      	b.n	8008234 <_dtoa_r+0x1cc>
 80082b4:	2300      	movs	r3, #0
 80082b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dc59      	bgt.n	8008372 <_dtoa_r+0x30a>
 80082be:	f04f 0b01 	mov.w	fp, #1
 80082c2:	465b      	mov	r3, fp
 80082c4:	f8cd b008 	str.w	fp, [sp, #8]
 80082c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80082cc:	2200      	movs	r2, #0
 80082ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80082d0:	6042      	str	r2, [r0, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f102 0614 	add.w	r6, r2, #20
 80082d8:	429e      	cmp	r6, r3
 80082da:	6841      	ldr	r1, [r0, #4]
 80082dc:	d94f      	bls.n	800837e <_dtoa_r+0x316>
 80082de:	4628      	mov	r0, r5
 80082e0:	f001 f850 	bl	8009384 <_Balloc>
 80082e4:	9008      	str	r0, [sp, #32]
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d14d      	bne.n	8008386 <_dtoa_r+0x31e>
 80082ea:	4602      	mov	r2, r0
 80082ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082f0:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <_dtoa_r+0x300>)
 80082f2:	e6cd      	b.n	8008090 <_dtoa_r+0x28>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e7de      	b.n	80082b6 <_dtoa_r+0x24e>
 80082f8:	2300      	movs	r3, #0
 80082fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80082fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082fe:	eb09 0b03 	add.w	fp, r9, r3
 8008302:	f10b 0301 	add.w	r3, fp, #1
 8008306:	2b01      	cmp	r3, #1
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	bfb8      	it	lt
 800830c:	2301      	movlt	r3, #1
 800830e:	e7dd      	b.n	80082cc <_dtoa_r+0x264>
 8008310:	2301      	movs	r3, #1
 8008312:	e7f2      	b.n	80082fa <_dtoa_r+0x292>
 8008314:	2401      	movs	r4, #1
 8008316:	2300      	movs	r3, #0
 8008318:	940b      	str	r4, [sp, #44]	; 0x2c
 800831a:	9322      	str	r3, [sp, #136]	; 0x88
 800831c:	f04f 3bff 	mov.w	fp, #4294967295
 8008320:	2200      	movs	r2, #0
 8008322:	2312      	movs	r3, #18
 8008324:	f8cd b008 	str.w	fp, [sp, #8]
 8008328:	9223      	str	r2, [sp, #140]	; 0x8c
 800832a:	e7cf      	b.n	80082cc <_dtoa_r+0x264>
 800832c:	f3af 8000 	nop.w
 8008330:	636f4361 	.word	0x636f4361
 8008334:	3fd287a7 	.word	0x3fd287a7
 8008338:	8b60c8b3 	.word	0x8b60c8b3
 800833c:	3fc68a28 	.word	0x3fc68a28
 8008340:	509f79fb 	.word	0x509f79fb
 8008344:	3fd34413 	.word	0x3fd34413
 8008348:	0800b72e 	.word	0x0800b72e
 800834c:	0800b745 	.word	0x0800b745
 8008350:	7ff00000 	.word	0x7ff00000
 8008354:	0800b72a 	.word	0x0800b72a
 8008358:	0800b721 	.word	0x0800b721
 800835c:	0800b5a1 	.word	0x0800b5a1
 8008360:	3ff80000 	.word	0x3ff80000
 8008364:	0800b8c0 	.word	0x0800b8c0
 8008368:	0800b7a4 	.word	0x0800b7a4
 800836c:	2301      	movs	r3, #1
 800836e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008370:	e7d4      	b.n	800831c <_dtoa_r+0x2b4>
 8008372:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008376:	465b      	mov	r3, fp
 8008378:	f8cd b008 	str.w	fp, [sp, #8]
 800837c:	e7a6      	b.n	80082cc <_dtoa_r+0x264>
 800837e:	3101      	adds	r1, #1
 8008380:	6041      	str	r1, [r0, #4]
 8008382:	0052      	lsls	r2, r2, #1
 8008384:	e7a6      	b.n	80082d4 <_dtoa_r+0x26c>
 8008386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008388:	9a08      	ldr	r2, [sp, #32]
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	9b02      	ldr	r3, [sp, #8]
 800838e:	2b0e      	cmp	r3, #14
 8008390:	f200 80a8 	bhi.w	80084e4 <_dtoa_r+0x47c>
 8008394:	2c00      	cmp	r4, #0
 8008396:	f000 80a5 	beq.w	80084e4 <_dtoa_r+0x47c>
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	dd34      	ble.n	800840a <_dtoa_r+0x3a2>
 80083a0:	4a9a      	ldr	r2, [pc, #616]	; (800860c <_dtoa_r+0x5a4>)
 80083a2:	f009 030f 	and.w	r3, r9, #15
 80083a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80083ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80083ba:	d016      	beq.n	80083ea <_dtoa_r+0x382>
 80083bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083c0:	4b93      	ldr	r3, [pc, #588]	; (8008610 <_dtoa_r+0x5a8>)
 80083c2:	2703      	movs	r7, #3
 80083c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083c8:	f7f8 f9c8 	bl	800075c <__aeabi_ddiv>
 80083cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d0:	f004 040f 	and.w	r4, r4, #15
 80083d4:	4e8e      	ldr	r6, [pc, #568]	; (8008610 <_dtoa_r+0x5a8>)
 80083d6:	b954      	cbnz	r4, 80083ee <_dtoa_r+0x386>
 80083d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e0:	f7f8 f9bc 	bl	800075c <__aeabi_ddiv>
 80083e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083e8:	e029      	b.n	800843e <_dtoa_r+0x3d6>
 80083ea:	2702      	movs	r7, #2
 80083ec:	e7f2      	b.n	80083d4 <_dtoa_r+0x36c>
 80083ee:	07e1      	lsls	r1, r4, #31
 80083f0:	d508      	bpl.n	8008404 <_dtoa_r+0x39c>
 80083f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083fa:	f7f8 f885 	bl	8000508 <__aeabi_dmul>
 80083fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008402:	3701      	adds	r7, #1
 8008404:	1064      	asrs	r4, r4, #1
 8008406:	3608      	adds	r6, #8
 8008408:	e7e5      	b.n	80083d6 <_dtoa_r+0x36e>
 800840a:	f000 80a5 	beq.w	8008558 <_dtoa_r+0x4f0>
 800840e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008412:	f1c9 0400 	rsb	r4, r9, #0
 8008416:	4b7d      	ldr	r3, [pc, #500]	; (800860c <_dtoa_r+0x5a4>)
 8008418:	f004 020f 	and.w	r2, r4, #15
 800841c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f8 f870 	bl	8000508 <__aeabi_dmul>
 8008428:	2702      	movs	r7, #2
 800842a:	2300      	movs	r3, #0
 800842c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008430:	4e77      	ldr	r6, [pc, #476]	; (8008610 <_dtoa_r+0x5a8>)
 8008432:	1124      	asrs	r4, r4, #4
 8008434:	2c00      	cmp	r4, #0
 8008436:	f040 8084 	bne.w	8008542 <_dtoa_r+0x4da>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1d2      	bne.n	80083e4 <_dtoa_r+0x37c>
 800843e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 808b 	beq.w	800855c <_dtoa_r+0x4f4>
 8008446:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800844a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800844e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008452:	2200      	movs	r2, #0
 8008454:	4b6f      	ldr	r3, [pc, #444]	; (8008614 <_dtoa_r+0x5ac>)
 8008456:	f7f8 fac9 	bl	80009ec <__aeabi_dcmplt>
 800845a:	2800      	cmp	r0, #0
 800845c:	d07e      	beq.n	800855c <_dtoa_r+0x4f4>
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d07b      	beq.n	800855c <_dtoa_r+0x4f4>
 8008464:	f1bb 0f00 	cmp.w	fp, #0
 8008468:	dd38      	ble.n	80084dc <_dtoa_r+0x474>
 800846a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800846e:	2200      	movs	r2, #0
 8008470:	4b69      	ldr	r3, [pc, #420]	; (8008618 <_dtoa_r+0x5b0>)
 8008472:	f7f8 f849 	bl	8000508 <__aeabi_dmul>
 8008476:	465c      	mov	r4, fp
 8008478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800847c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008480:	3701      	adds	r7, #1
 8008482:	4638      	mov	r0, r7
 8008484:	f7f7 ffd6 	bl	8000434 <__aeabi_i2d>
 8008488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800848c:	f7f8 f83c 	bl	8000508 <__aeabi_dmul>
 8008490:	2200      	movs	r2, #0
 8008492:	4b62      	ldr	r3, [pc, #392]	; (800861c <_dtoa_r+0x5b4>)
 8008494:	f7f7 fe82 	bl	800019c <__adddf3>
 8008498:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800849c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084a0:	9611      	str	r6, [sp, #68]	; 0x44
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	d15d      	bne.n	8008562 <_dtoa_r+0x4fa>
 80084a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084aa:	2200      	movs	r2, #0
 80084ac:	4b5c      	ldr	r3, [pc, #368]	; (8008620 <_dtoa_r+0x5b8>)
 80084ae:	f7f7 fe73 	bl	8000198 <__aeabi_dsub>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084ba:	4633      	mov	r3, r6
 80084bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084be:	f7f8 fab3 	bl	8000a28 <__aeabi_dcmpgt>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f040 829e 	bne.w	8008a04 <_dtoa_r+0x99c>
 80084c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084d2:	f7f8 fa8b 	bl	80009ec <__aeabi_dcmplt>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f040 8292 	bne.w	8008a00 <_dtoa_r+0x998>
 80084dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f2c0 8153 	blt.w	8008792 <_dtoa_r+0x72a>
 80084ec:	f1b9 0f0e 	cmp.w	r9, #14
 80084f0:	f300 814f 	bgt.w	8008792 <_dtoa_r+0x72a>
 80084f4:	4b45      	ldr	r3, [pc, #276]	; (800860c <_dtoa_r+0x5a4>)
 80084f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80084fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008504:	2b00      	cmp	r3, #0
 8008506:	f280 80db 	bge.w	80086c0 <_dtoa_r+0x658>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f300 80d7 	bgt.w	80086c0 <_dtoa_r+0x658>
 8008512:	f040 8274 	bne.w	80089fe <_dtoa_r+0x996>
 8008516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800851a:	2200      	movs	r2, #0
 800851c:	4b40      	ldr	r3, [pc, #256]	; (8008620 <_dtoa_r+0x5b8>)
 800851e:	f7f7 fff3 	bl	8000508 <__aeabi_dmul>
 8008522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008526:	f7f8 fa75 	bl	8000a14 <__aeabi_dcmpge>
 800852a:	9c02      	ldr	r4, [sp, #8]
 800852c:	4626      	mov	r6, r4
 800852e:	2800      	cmp	r0, #0
 8008530:	f040 824a 	bne.w	80089c8 <_dtoa_r+0x960>
 8008534:	2331      	movs	r3, #49	; 0x31
 8008536:	9f08      	ldr	r7, [sp, #32]
 8008538:	f109 0901 	add.w	r9, r9, #1
 800853c:	f807 3b01 	strb.w	r3, [r7], #1
 8008540:	e246      	b.n	80089d0 <_dtoa_r+0x968>
 8008542:	07e2      	lsls	r2, r4, #31
 8008544:	d505      	bpl.n	8008552 <_dtoa_r+0x4ea>
 8008546:	e9d6 2300 	ldrd	r2, r3, [r6]
 800854a:	f7f7 ffdd 	bl	8000508 <__aeabi_dmul>
 800854e:	2301      	movs	r3, #1
 8008550:	3701      	adds	r7, #1
 8008552:	1064      	asrs	r4, r4, #1
 8008554:	3608      	adds	r6, #8
 8008556:	e76d      	b.n	8008434 <_dtoa_r+0x3cc>
 8008558:	2702      	movs	r7, #2
 800855a:	e770      	b.n	800843e <_dtoa_r+0x3d6>
 800855c:	46c8      	mov	r8, r9
 800855e:	9c02      	ldr	r4, [sp, #8]
 8008560:	e78f      	b.n	8008482 <_dtoa_r+0x41a>
 8008562:	9908      	ldr	r1, [sp, #32]
 8008564:	4b29      	ldr	r3, [pc, #164]	; (800860c <_dtoa_r+0x5a4>)
 8008566:	4421      	add	r1, r4
 8008568:	9112      	str	r1, [sp, #72]	; 0x48
 800856a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800856c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008570:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008574:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008578:	2900      	cmp	r1, #0
 800857a:	d055      	beq.n	8008628 <_dtoa_r+0x5c0>
 800857c:	2000      	movs	r0, #0
 800857e:	4929      	ldr	r1, [pc, #164]	; (8008624 <_dtoa_r+0x5bc>)
 8008580:	f7f8 f8ec 	bl	800075c <__aeabi_ddiv>
 8008584:	463b      	mov	r3, r7
 8008586:	4632      	mov	r2, r6
 8008588:	f7f7 fe06 	bl	8000198 <__aeabi_dsub>
 800858c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008590:	9f08      	ldr	r7, [sp, #32]
 8008592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008596:	f7f8 fa67 	bl	8000a68 <__aeabi_d2iz>
 800859a:	4604      	mov	r4, r0
 800859c:	f7f7 ff4a 	bl	8000434 <__aeabi_i2d>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a8:	f7f7 fdf6 	bl	8000198 <__aeabi_dsub>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	3430      	adds	r4, #48	; 0x30
 80085b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085ba:	f807 4b01 	strb.w	r4, [r7], #1
 80085be:	f7f8 fa15 	bl	80009ec <__aeabi_dcmplt>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d174      	bne.n	80086b0 <_dtoa_r+0x648>
 80085c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ca:	2000      	movs	r0, #0
 80085cc:	4911      	ldr	r1, [pc, #68]	; (8008614 <_dtoa_r+0x5ac>)
 80085ce:	f7f7 fde3 	bl	8000198 <__aeabi_dsub>
 80085d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085d6:	f7f8 fa09 	bl	80009ec <__aeabi_dcmplt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f040 80b6 	bne.w	800874c <_dtoa_r+0x6e4>
 80085e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085e2:	429f      	cmp	r7, r3
 80085e4:	f43f af7a 	beq.w	80084dc <_dtoa_r+0x474>
 80085e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085ec:	2200      	movs	r2, #0
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <_dtoa_r+0x5b0>)
 80085f0:	f7f7 ff8a 	bl	8000508 <__aeabi_dmul>
 80085f4:	2200      	movs	r2, #0
 80085f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085fe:	4b06      	ldr	r3, [pc, #24]	; (8008618 <_dtoa_r+0x5b0>)
 8008600:	f7f7 ff82 	bl	8000508 <__aeabi_dmul>
 8008604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008608:	e7c3      	b.n	8008592 <_dtoa_r+0x52a>
 800860a:	bf00      	nop
 800860c:	0800b8c0 	.word	0x0800b8c0
 8008610:	0800b898 	.word	0x0800b898
 8008614:	3ff00000 	.word	0x3ff00000
 8008618:	40240000 	.word	0x40240000
 800861c:	401c0000 	.word	0x401c0000
 8008620:	40140000 	.word	0x40140000
 8008624:	3fe00000 	.word	0x3fe00000
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	f7f7 ff6c 	bl	8000508 <__aeabi_dmul>
 8008630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008632:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008636:	9c08      	ldr	r4, [sp, #32]
 8008638:	9314      	str	r3, [sp, #80]	; 0x50
 800863a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800863e:	f7f8 fa13 	bl	8000a68 <__aeabi_d2iz>
 8008642:	9015      	str	r0, [sp, #84]	; 0x54
 8008644:	f7f7 fef6 	bl	8000434 <__aeabi_i2d>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008650:	f7f7 fda2 	bl	8000198 <__aeabi_dsub>
 8008654:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008656:	4606      	mov	r6, r0
 8008658:	3330      	adds	r3, #48	; 0x30
 800865a:	f804 3b01 	strb.w	r3, [r4], #1
 800865e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008660:	460f      	mov	r7, r1
 8008662:	429c      	cmp	r4, r3
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	d124      	bne.n	80086b4 <_dtoa_r+0x64c>
 800866a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800866e:	4bb3      	ldr	r3, [pc, #716]	; (800893c <_dtoa_r+0x8d4>)
 8008670:	f7f7 fd94 	bl	800019c <__adddf3>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 f9d4 	bl	8000a28 <__aeabi_dcmpgt>
 8008680:	2800      	cmp	r0, #0
 8008682:	d162      	bne.n	800874a <_dtoa_r+0x6e2>
 8008684:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008688:	2000      	movs	r0, #0
 800868a:	49ac      	ldr	r1, [pc, #688]	; (800893c <_dtoa_r+0x8d4>)
 800868c:	f7f7 fd84 	bl	8000198 <__aeabi_dsub>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4630      	mov	r0, r6
 8008696:	4639      	mov	r1, r7
 8008698:	f7f8 f9a8 	bl	80009ec <__aeabi_dcmplt>
 800869c:	2800      	cmp	r0, #0
 800869e:	f43f af1d 	beq.w	80084dc <_dtoa_r+0x474>
 80086a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086a4:	1e7b      	subs	r3, r7, #1
 80086a6:	9314      	str	r3, [sp, #80]	; 0x50
 80086a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80086ac:	2b30      	cmp	r3, #48	; 0x30
 80086ae:	d0f8      	beq.n	80086a2 <_dtoa_r+0x63a>
 80086b0:	46c1      	mov	r9, r8
 80086b2:	e03a      	b.n	800872a <_dtoa_r+0x6c2>
 80086b4:	4ba2      	ldr	r3, [pc, #648]	; (8008940 <_dtoa_r+0x8d8>)
 80086b6:	f7f7 ff27 	bl	8000508 <__aeabi_dmul>
 80086ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086be:	e7bc      	b.n	800863a <_dtoa_r+0x5d2>
 80086c0:	9f08      	ldr	r7, [sp, #32]
 80086c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ca:	f7f8 f847 	bl	800075c <__aeabi_ddiv>
 80086ce:	f7f8 f9cb 	bl	8000a68 <__aeabi_d2iz>
 80086d2:	4604      	mov	r4, r0
 80086d4:	f7f7 feae 	bl	8000434 <__aeabi_i2d>
 80086d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086dc:	f7f7 ff14 	bl	8000508 <__aeabi_dmul>
 80086e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086e4:	460b      	mov	r3, r1
 80086e6:	4602      	mov	r2, r0
 80086e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ec:	f7f7 fd54 	bl	8000198 <__aeabi_dsub>
 80086f0:	f807 6b01 	strb.w	r6, [r7], #1
 80086f4:	9e08      	ldr	r6, [sp, #32]
 80086f6:	9b02      	ldr	r3, [sp, #8]
 80086f8:	1bbe      	subs	r6, r7, r6
 80086fa:	42b3      	cmp	r3, r6
 80086fc:	d13a      	bne.n	8008774 <_dtoa_r+0x70c>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	f7f7 fd4b 	bl	800019c <__adddf3>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800870e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008712:	f7f8 f989 	bl	8000a28 <__aeabi_dcmpgt>
 8008716:	bb58      	cbnz	r0, 8008770 <_dtoa_r+0x708>
 8008718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800871c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008720:	f7f8 f95a 	bl	80009d8 <__aeabi_dcmpeq>
 8008724:	b108      	cbz	r0, 800872a <_dtoa_r+0x6c2>
 8008726:	07e1      	lsls	r1, r4, #31
 8008728:	d422      	bmi.n	8008770 <_dtoa_r+0x708>
 800872a:	4628      	mov	r0, r5
 800872c:	4651      	mov	r1, sl
 800872e:	f000 fe69 	bl	8009404 <_Bfree>
 8008732:	2300      	movs	r3, #0
 8008734:	703b      	strb	r3, [r7, #0]
 8008736:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008738:	f109 0001 	add.w	r0, r9, #1
 800873c:	6018      	str	r0, [r3, #0]
 800873e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008740:	2b00      	cmp	r3, #0
 8008742:	f43f acdf 	beq.w	8008104 <_dtoa_r+0x9c>
 8008746:	601f      	str	r7, [r3, #0]
 8008748:	e4dc      	b.n	8008104 <_dtoa_r+0x9c>
 800874a:	4627      	mov	r7, r4
 800874c:	463b      	mov	r3, r7
 800874e:	461f      	mov	r7, r3
 8008750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008754:	2a39      	cmp	r2, #57	; 0x39
 8008756:	d107      	bne.n	8008768 <_dtoa_r+0x700>
 8008758:	9a08      	ldr	r2, [sp, #32]
 800875a:	429a      	cmp	r2, r3
 800875c:	d1f7      	bne.n	800874e <_dtoa_r+0x6e6>
 800875e:	2230      	movs	r2, #48	; 0x30
 8008760:	9908      	ldr	r1, [sp, #32]
 8008762:	f108 0801 	add.w	r8, r8, #1
 8008766:	700a      	strb	r2, [r1, #0]
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	3201      	adds	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e79f      	b.n	80086b0 <_dtoa_r+0x648>
 8008770:	46c8      	mov	r8, r9
 8008772:	e7eb      	b.n	800874c <_dtoa_r+0x6e4>
 8008774:	2200      	movs	r2, #0
 8008776:	4b72      	ldr	r3, [pc, #456]	; (8008940 <_dtoa_r+0x8d8>)
 8008778:	f7f7 fec6 	bl	8000508 <__aeabi_dmul>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008784:	2200      	movs	r2, #0
 8008786:	2300      	movs	r3, #0
 8008788:	f7f8 f926 	bl	80009d8 <__aeabi_dcmpeq>
 800878c:	2800      	cmp	r0, #0
 800878e:	d098      	beq.n	80086c2 <_dtoa_r+0x65a>
 8008790:	e7cb      	b.n	800872a <_dtoa_r+0x6c2>
 8008792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008794:	2a00      	cmp	r2, #0
 8008796:	f000 80cd 	beq.w	8008934 <_dtoa_r+0x8cc>
 800879a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800879c:	2a01      	cmp	r2, #1
 800879e:	f300 80af 	bgt.w	8008900 <_dtoa_r+0x898>
 80087a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	f000 80a7 	beq.w	80088f8 <_dtoa_r+0x890>
 80087aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087b0:	9f06      	ldr	r7, [sp, #24]
 80087b2:	9a06      	ldr	r2, [sp, #24]
 80087b4:	2101      	movs	r1, #1
 80087b6:	441a      	add	r2, r3
 80087b8:	9206      	str	r2, [sp, #24]
 80087ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087bc:	4628      	mov	r0, r5
 80087be:	441a      	add	r2, r3
 80087c0:	9209      	str	r2, [sp, #36]	; 0x24
 80087c2:	f000 ff23 	bl	800960c <__i2b>
 80087c6:	4606      	mov	r6, r0
 80087c8:	2f00      	cmp	r7, #0
 80087ca:	dd0c      	ble.n	80087e6 <_dtoa_r+0x77e>
 80087cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd09      	ble.n	80087e6 <_dtoa_r+0x77e>
 80087d2:	42bb      	cmp	r3, r7
 80087d4:	bfa8      	it	ge
 80087d6:	463b      	movge	r3, r7
 80087d8:	9a06      	ldr	r2, [sp, #24]
 80087da:	1aff      	subs	r7, r7, r3
 80087dc:	1ad2      	subs	r2, r2, r3
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	9309      	str	r3, [sp, #36]	; 0x24
 80087e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e8:	b1f3      	cbz	r3, 8008828 <_dtoa_r+0x7c0>
 80087ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80a9 	beq.w	8008944 <_dtoa_r+0x8dc>
 80087f2:	2c00      	cmp	r4, #0
 80087f4:	dd10      	ble.n	8008818 <_dtoa_r+0x7b0>
 80087f6:	4631      	mov	r1, r6
 80087f8:	4622      	mov	r2, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 ffc0 	bl	8009780 <__pow5mult>
 8008800:	4652      	mov	r2, sl
 8008802:	4601      	mov	r1, r0
 8008804:	4606      	mov	r6, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f000 ff16 	bl	8009638 <__multiply>
 800880c:	4680      	mov	r8, r0
 800880e:	4651      	mov	r1, sl
 8008810:	4628      	mov	r0, r5
 8008812:	f000 fdf7 	bl	8009404 <_Bfree>
 8008816:	46c2      	mov	sl, r8
 8008818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881a:	1b1a      	subs	r2, r3, r4
 800881c:	d004      	beq.n	8008828 <_dtoa_r+0x7c0>
 800881e:	4651      	mov	r1, sl
 8008820:	4628      	mov	r0, r5
 8008822:	f000 ffad 	bl	8009780 <__pow5mult>
 8008826:	4682      	mov	sl, r0
 8008828:	2101      	movs	r1, #1
 800882a:	4628      	mov	r0, r5
 800882c:	f000 feee 	bl	800960c <__i2b>
 8008830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008832:	4604      	mov	r4, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	f340 8087 	ble.w	8008948 <_dtoa_r+0x8e0>
 800883a:	461a      	mov	r2, r3
 800883c:	4601      	mov	r1, r0
 800883e:	4628      	mov	r0, r5
 8008840:	f000 ff9e 	bl	8009780 <__pow5mult>
 8008844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008846:	4604      	mov	r4, r0
 8008848:	2b01      	cmp	r3, #1
 800884a:	f340 8080 	ble.w	800894e <_dtoa_r+0x8e6>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008858:	6918      	ldr	r0, [r3, #16]
 800885a:	f000 fe89 	bl	8009570 <__hi0bits>
 800885e:	f1c0 0020 	rsb	r0, r0, #32
 8008862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008864:	4418      	add	r0, r3
 8008866:	f010 001f 	ands.w	r0, r0, #31
 800886a:	f000 8092 	beq.w	8008992 <_dtoa_r+0x92a>
 800886e:	f1c0 0320 	rsb	r3, r0, #32
 8008872:	2b04      	cmp	r3, #4
 8008874:	f340 808a 	ble.w	800898c <_dtoa_r+0x924>
 8008878:	f1c0 001c 	rsb	r0, r0, #28
 800887c:	9b06      	ldr	r3, [sp, #24]
 800887e:	4407      	add	r7, r0
 8008880:	4403      	add	r3, r0
 8008882:	9306      	str	r3, [sp, #24]
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	4403      	add	r3, r0
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	2b00      	cmp	r3, #0
 800888e:	dd05      	ble.n	800889c <_dtoa_r+0x834>
 8008890:	4651      	mov	r1, sl
 8008892:	461a      	mov	r2, r3
 8008894:	4628      	mov	r0, r5
 8008896:	f000 ffcd 	bl	8009834 <__lshift>
 800889a:	4682      	mov	sl, r0
 800889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd05      	ble.n	80088ae <_dtoa_r+0x846>
 80088a2:	4621      	mov	r1, r4
 80088a4:	461a      	mov	r2, r3
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 ffc4 	bl	8009834 <__lshift>
 80088ac:	4604      	mov	r4, r0
 80088ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d070      	beq.n	8008996 <_dtoa_r+0x92e>
 80088b4:	4621      	mov	r1, r4
 80088b6:	4650      	mov	r0, sl
 80088b8:	f001 f828 	bl	800990c <__mcmp>
 80088bc:	2800      	cmp	r0, #0
 80088be:	da6a      	bge.n	8008996 <_dtoa_r+0x92e>
 80088c0:	2300      	movs	r3, #0
 80088c2:	4651      	mov	r1, sl
 80088c4:	220a      	movs	r2, #10
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 fdbe 	bl	8009448 <__multadd>
 80088cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ce:	4682      	mov	sl, r0
 80088d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 8193 	beq.w	8008c00 <_dtoa_r+0xb98>
 80088da:	4631      	mov	r1, r6
 80088dc:	2300      	movs	r3, #0
 80088de:	220a      	movs	r2, #10
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 fdb1 	bl	8009448 <__multadd>
 80088e6:	f1bb 0f00 	cmp.w	fp, #0
 80088ea:	4606      	mov	r6, r0
 80088ec:	f300 8093 	bgt.w	8008a16 <_dtoa_r+0x9ae>
 80088f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	dc57      	bgt.n	80089a6 <_dtoa_r+0x93e>
 80088f6:	e08e      	b.n	8008a16 <_dtoa_r+0x9ae>
 80088f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088fe:	e756      	b.n	80087ae <_dtoa_r+0x746>
 8008900:	9b02      	ldr	r3, [sp, #8]
 8008902:	1e5c      	subs	r4, r3, #1
 8008904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008906:	42a3      	cmp	r3, r4
 8008908:	bfb7      	itett	lt
 800890a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800890c:	1b1c      	subge	r4, r3, r4
 800890e:	1ae2      	sublt	r2, r4, r3
 8008910:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008912:	bfbe      	ittt	lt
 8008914:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008916:	189b      	addlt	r3, r3, r2
 8008918:	930e      	strlt	r3, [sp, #56]	; 0x38
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	bfb8      	it	lt
 800891e:	2400      	movlt	r4, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfbb      	ittet	lt
 8008924:	9b06      	ldrlt	r3, [sp, #24]
 8008926:	9a02      	ldrlt	r2, [sp, #8]
 8008928:	9f06      	ldrge	r7, [sp, #24]
 800892a:	1a9f      	sublt	r7, r3, r2
 800892c:	bfac      	ite	ge
 800892e:	9b02      	ldrge	r3, [sp, #8]
 8008930:	2300      	movlt	r3, #0
 8008932:	e73e      	b.n	80087b2 <_dtoa_r+0x74a>
 8008934:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008936:	9f06      	ldr	r7, [sp, #24]
 8008938:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800893a:	e745      	b.n	80087c8 <_dtoa_r+0x760>
 800893c:	3fe00000 	.word	0x3fe00000
 8008940:	40240000 	.word	0x40240000
 8008944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008946:	e76a      	b.n	800881e <_dtoa_r+0x7b6>
 8008948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800894a:	2b01      	cmp	r3, #1
 800894c:	dc19      	bgt.n	8008982 <_dtoa_r+0x91a>
 800894e:	9b04      	ldr	r3, [sp, #16]
 8008950:	b9bb      	cbnz	r3, 8008982 <_dtoa_r+0x91a>
 8008952:	9b05      	ldr	r3, [sp, #20]
 8008954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008958:	b99b      	cbnz	r3, 8008982 <_dtoa_r+0x91a>
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008960:	0d1b      	lsrs	r3, r3, #20
 8008962:	051b      	lsls	r3, r3, #20
 8008964:	b183      	cbz	r3, 8008988 <_dtoa_r+0x920>
 8008966:	f04f 0801 	mov.w	r8, #1
 800896a:	9b06      	ldr	r3, [sp, #24]
 800896c:	3301      	adds	r3, #1
 800896e:	9306      	str	r3, [sp, #24]
 8008970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008972:	3301      	adds	r3, #1
 8008974:	9309      	str	r3, [sp, #36]	; 0x24
 8008976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	f47f af6a 	bne.w	8008852 <_dtoa_r+0x7ea>
 800897e:	2001      	movs	r0, #1
 8008980:	e76f      	b.n	8008862 <_dtoa_r+0x7fa>
 8008982:	f04f 0800 	mov.w	r8, #0
 8008986:	e7f6      	b.n	8008976 <_dtoa_r+0x90e>
 8008988:	4698      	mov	r8, r3
 800898a:	e7f4      	b.n	8008976 <_dtoa_r+0x90e>
 800898c:	f43f af7d 	beq.w	800888a <_dtoa_r+0x822>
 8008990:	4618      	mov	r0, r3
 8008992:	301c      	adds	r0, #28
 8008994:	e772      	b.n	800887c <_dtoa_r+0x814>
 8008996:	9b02      	ldr	r3, [sp, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	dc36      	bgt.n	8008a0a <_dtoa_r+0x9a2>
 800899c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899e:	2b02      	cmp	r3, #2
 80089a0:	dd33      	ble.n	8008a0a <_dtoa_r+0x9a2>
 80089a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80089a6:	f1bb 0f00 	cmp.w	fp, #0
 80089aa:	d10d      	bne.n	80089c8 <_dtoa_r+0x960>
 80089ac:	4621      	mov	r1, r4
 80089ae:	465b      	mov	r3, fp
 80089b0:	2205      	movs	r2, #5
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 fd48 	bl	8009448 <__multadd>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4650      	mov	r0, sl
 80089be:	f000 ffa5 	bl	800990c <__mcmp>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	f73f adb6 	bgt.w	8008534 <_dtoa_r+0x4cc>
 80089c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ca:	9f08      	ldr	r7, [sp, #32]
 80089cc:	ea6f 0903 	mvn.w	r9, r3
 80089d0:	f04f 0800 	mov.w	r8, #0
 80089d4:	4621      	mov	r1, r4
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 fd14 	bl	8009404 <_Bfree>
 80089dc:	2e00      	cmp	r6, #0
 80089de:	f43f aea4 	beq.w	800872a <_dtoa_r+0x6c2>
 80089e2:	f1b8 0f00 	cmp.w	r8, #0
 80089e6:	d005      	beq.n	80089f4 <_dtoa_r+0x98c>
 80089e8:	45b0      	cmp	r8, r6
 80089ea:	d003      	beq.n	80089f4 <_dtoa_r+0x98c>
 80089ec:	4641      	mov	r1, r8
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 fd08 	bl	8009404 <_Bfree>
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 fd04 	bl	8009404 <_Bfree>
 80089fc:	e695      	b.n	800872a <_dtoa_r+0x6c2>
 80089fe:	2400      	movs	r4, #0
 8008a00:	4626      	mov	r6, r4
 8008a02:	e7e1      	b.n	80089c8 <_dtoa_r+0x960>
 8008a04:	46c1      	mov	r9, r8
 8008a06:	4626      	mov	r6, r4
 8008a08:	e594      	b.n	8008534 <_dtoa_r+0x4cc>
 8008a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80fc 	beq.w	8008c0e <_dtoa_r+0xba6>
 8008a16:	2f00      	cmp	r7, #0
 8008a18:	dd05      	ble.n	8008a26 <_dtoa_r+0x9be>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 ff08 	bl	8009834 <__lshift>
 8008a24:	4606      	mov	r6, r0
 8008a26:	f1b8 0f00 	cmp.w	r8, #0
 8008a2a:	d05c      	beq.n	8008ae6 <_dtoa_r+0xa7e>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	6871      	ldr	r1, [r6, #4]
 8008a30:	f000 fca8 	bl	8009384 <_Balloc>
 8008a34:	4607      	mov	r7, r0
 8008a36:	b928      	cbnz	r0, 8008a44 <_dtoa_r+0x9dc>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a3e:	4b7e      	ldr	r3, [pc, #504]	; (8008c38 <_dtoa_r+0xbd0>)
 8008a40:	f7ff bb26 	b.w	8008090 <_dtoa_r+0x28>
 8008a44:	6932      	ldr	r2, [r6, #16]
 8008a46:	f106 010c 	add.w	r1, r6, #12
 8008a4a:	3202      	adds	r2, #2
 8008a4c:	0092      	lsls	r2, r2, #2
 8008a4e:	300c      	adds	r0, #12
 8008a50:	f000 fc8a 	bl	8009368 <memcpy>
 8008a54:	2201      	movs	r2, #1
 8008a56:	4639      	mov	r1, r7
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 feeb 	bl	8009834 <__lshift>
 8008a5e:	46b0      	mov	r8, r6
 8008a60:	4606      	mov	r6, r0
 8008a62:	9b08      	ldr	r3, [sp, #32]
 8008a64:	3301      	adds	r3, #1
 8008a66:	9302      	str	r3, [sp, #8]
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	445b      	add	r3, fp
 8008a6c:	930a      	str	r3, [sp, #40]	; 0x28
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	9309      	str	r3, [sp, #36]	; 0x24
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a80:	f7ff fa64 	bl	8007f4c <quorem>
 8008a84:	4603      	mov	r3, r0
 8008a86:	4641      	mov	r1, r8
 8008a88:	3330      	adds	r3, #48	; 0x30
 8008a8a:	9004      	str	r0, [sp, #16]
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a90:	f000 ff3c 	bl	800990c <__mcmp>
 8008a94:	4632      	mov	r2, r6
 8008a96:	9006      	str	r0, [sp, #24]
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f000 ff52 	bl	8009944 <__mdiff>
 8008aa0:	68c2      	ldr	r2, [r0, #12]
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa6:	bb02      	cbnz	r2, 8008aea <_dtoa_r+0xa82>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4650      	mov	r0, sl
 8008aac:	f000 ff2e 	bl	800990c <__mcmp>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008abc:	f000 fca2 	bl	8009404 <_Bfree>
 8008ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ac4:	9f02      	ldr	r7, [sp, #8]
 8008ac6:	ea43 0102 	orr.w	r1, r3, r2
 8008aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008acc:	430b      	orrs	r3, r1
 8008ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad0:	d10d      	bne.n	8008aee <_dtoa_r+0xa86>
 8008ad2:	2b39      	cmp	r3, #57	; 0x39
 8008ad4:	d027      	beq.n	8008b26 <_dtoa_r+0xabe>
 8008ad6:	9a06      	ldr	r2, [sp, #24]
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	dd01      	ble.n	8008ae0 <_dtoa_r+0xa78>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	3331      	adds	r3, #49	; 0x31
 8008ae0:	f88b 3000 	strb.w	r3, [fp]
 8008ae4:	e776      	b.n	80089d4 <_dtoa_r+0x96c>
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	e7b9      	b.n	8008a5e <_dtoa_r+0x9f6>
 8008aea:	2201      	movs	r2, #1
 8008aec:	e7e2      	b.n	8008ab4 <_dtoa_r+0xa4c>
 8008aee:	9906      	ldr	r1, [sp, #24]
 8008af0:	2900      	cmp	r1, #0
 8008af2:	db04      	blt.n	8008afe <_dtoa_r+0xa96>
 8008af4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008af6:	4301      	orrs	r1, r0
 8008af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008afa:	4301      	orrs	r1, r0
 8008afc:	d120      	bne.n	8008b40 <_dtoa_r+0xad8>
 8008afe:	2a00      	cmp	r2, #0
 8008b00:	ddee      	ble.n	8008ae0 <_dtoa_r+0xa78>
 8008b02:	4651      	mov	r1, sl
 8008b04:	2201      	movs	r2, #1
 8008b06:	4628      	mov	r0, r5
 8008b08:	9302      	str	r3, [sp, #8]
 8008b0a:	f000 fe93 	bl	8009834 <__lshift>
 8008b0e:	4621      	mov	r1, r4
 8008b10:	4682      	mov	sl, r0
 8008b12:	f000 fefb 	bl	800990c <__mcmp>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	dc02      	bgt.n	8008b22 <_dtoa_r+0xaba>
 8008b1c:	d1e0      	bne.n	8008ae0 <_dtoa_r+0xa78>
 8008b1e:	07da      	lsls	r2, r3, #31
 8008b20:	d5de      	bpl.n	8008ae0 <_dtoa_r+0xa78>
 8008b22:	2b39      	cmp	r3, #57	; 0x39
 8008b24:	d1da      	bne.n	8008adc <_dtoa_r+0xa74>
 8008b26:	2339      	movs	r3, #57	; 0x39
 8008b28:	f88b 3000 	strb.w	r3, [fp]
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	461f      	mov	r7, r3
 8008b30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	2a39      	cmp	r2, #57	; 0x39
 8008b38:	d050      	beq.n	8008bdc <_dtoa_r+0xb74>
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e749      	b.n	80089d4 <_dtoa_r+0x96c>
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	dd03      	ble.n	8008b4c <_dtoa_r+0xae4>
 8008b44:	2b39      	cmp	r3, #57	; 0x39
 8008b46:	d0ee      	beq.n	8008b26 <_dtoa_r+0xabe>
 8008b48:	3301      	adds	r3, #1
 8008b4a:	e7c9      	b.n	8008ae0 <_dtoa_r+0xa78>
 8008b4c:	9a02      	ldr	r2, [sp, #8]
 8008b4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b54:	428a      	cmp	r2, r1
 8008b56:	d02a      	beq.n	8008bae <_dtoa_r+0xb46>
 8008b58:	4651      	mov	r1, sl
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	220a      	movs	r2, #10
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fc72 	bl	8009448 <__multadd>
 8008b64:	45b0      	cmp	r8, r6
 8008b66:	4682      	mov	sl, r0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	f04f 020a 	mov.w	r2, #10
 8008b70:	4641      	mov	r1, r8
 8008b72:	4628      	mov	r0, r5
 8008b74:	d107      	bne.n	8008b86 <_dtoa_r+0xb1e>
 8008b76:	f000 fc67 	bl	8009448 <__multadd>
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	3301      	adds	r3, #1
 8008b82:	9302      	str	r3, [sp, #8]
 8008b84:	e777      	b.n	8008a76 <_dtoa_r+0xa0e>
 8008b86:	f000 fc5f 	bl	8009448 <__multadd>
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4628      	mov	r0, r5
 8008b94:	f000 fc58 	bl	8009448 <__multadd>
 8008b98:	4606      	mov	r6, r0
 8008b9a:	e7f0      	b.n	8008b7e <_dtoa_r+0xb16>
 8008b9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ba0:	bfcc      	ite	gt
 8008ba2:	465f      	movgt	r7, fp
 8008ba4:	2701      	movle	r7, #1
 8008ba6:	f04f 0800 	mov.w	r8, #0
 8008baa:	9a08      	ldr	r2, [sp, #32]
 8008bac:	4417      	add	r7, r2
 8008bae:	4651      	mov	r1, sl
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	9302      	str	r3, [sp, #8]
 8008bb6:	f000 fe3d 	bl	8009834 <__lshift>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	f000 fea5 	bl	800990c <__mcmp>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	dcb2      	bgt.n	8008b2c <_dtoa_r+0xac4>
 8008bc6:	d102      	bne.n	8008bce <_dtoa_r+0xb66>
 8008bc8:	9b02      	ldr	r3, [sp, #8]
 8008bca:	07db      	lsls	r3, r3, #31
 8008bcc:	d4ae      	bmi.n	8008b2c <_dtoa_r+0xac4>
 8008bce:	463b      	mov	r3, r7
 8008bd0:	461f      	mov	r7, r3
 8008bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bd6:	2a30      	cmp	r2, #48	; 0x30
 8008bd8:	d0fa      	beq.n	8008bd0 <_dtoa_r+0xb68>
 8008bda:	e6fb      	b.n	80089d4 <_dtoa_r+0x96c>
 8008bdc:	9a08      	ldr	r2, [sp, #32]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d1a5      	bne.n	8008b2e <_dtoa_r+0xac6>
 8008be2:	2331      	movs	r3, #49	; 0x31
 8008be4:	f109 0901 	add.w	r9, r9, #1
 8008be8:	7013      	strb	r3, [r2, #0]
 8008bea:	e6f3      	b.n	80089d4 <_dtoa_r+0x96c>
 8008bec:	4b13      	ldr	r3, [pc, #76]	; (8008c3c <_dtoa_r+0xbd4>)
 8008bee:	f7ff baa7 	b.w	8008140 <_dtoa_r+0xd8>
 8008bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f aa80 	bne.w	80080fa <_dtoa_r+0x92>
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <_dtoa_r+0xbd8>)
 8008bfc:	f7ff baa0 	b.w	8008140 <_dtoa_r+0xd8>
 8008c00:	f1bb 0f00 	cmp.w	fp, #0
 8008c04:	dc03      	bgt.n	8008c0e <_dtoa_r+0xba6>
 8008c06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	f73f aecc 	bgt.w	80089a6 <_dtoa_r+0x93e>
 8008c0e:	9f08      	ldr	r7, [sp, #32]
 8008c10:	4621      	mov	r1, r4
 8008c12:	4650      	mov	r0, sl
 8008c14:	f7ff f99a 	bl	8007f4c <quorem>
 8008c18:	9a08      	ldr	r2, [sp, #32]
 8008c1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c1e:	f807 3b01 	strb.w	r3, [r7], #1
 8008c22:	1aba      	subs	r2, r7, r2
 8008c24:	4593      	cmp	fp, r2
 8008c26:	ddb9      	ble.n	8008b9c <_dtoa_r+0xb34>
 8008c28:	4651      	mov	r1, sl
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	220a      	movs	r2, #10
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 fc0a 	bl	8009448 <__multadd>
 8008c34:	4682      	mov	sl, r0
 8008c36:	e7eb      	b.n	8008c10 <_dtoa_r+0xba8>
 8008c38:	0800b7a4 	.word	0x0800b7a4
 8008c3c:	0800b5a0 	.word	0x0800b5a0
 8008c40:	0800b721 	.word	0x0800b721

08008c44 <rshift>:
 8008c44:	6903      	ldr	r3, [r0, #16]
 8008c46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c4e:	f100 0414 	add.w	r4, r0, #20
 8008c52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c56:	dd46      	ble.n	8008ce6 <rshift+0xa2>
 8008c58:	f011 011f 	ands.w	r1, r1, #31
 8008c5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c64:	d10c      	bne.n	8008c80 <rshift+0x3c>
 8008c66:	4629      	mov	r1, r5
 8008c68:	f100 0710 	add.w	r7, r0, #16
 8008c6c:	42b1      	cmp	r1, r6
 8008c6e:	d335      	bcc.n	8008cdc <rshift+0x98>
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	1eea      	subs	r2, r5, #3
 8008c76:	4296      	cmp	r6, r2
 8008c78:	bf38      	it	cc
 8008c7a:	2300      	movcc	r3, #0
 8008c7c:	4423      	add	r3, r4
 8008c7e:	e015      	b.n	8008cac <rshift+0x68>
 8008c80:	46a1      	mov	r9, r4
 8008c82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c86:	f1c1 0820 	rsb	r8, r1, #32
 8008c8a:	40cf      	lsrs	r7, r1
 8008c8c:	f105 0e04 	add.w	lr, r5, #4
 8008c90:	4576      	cmp	r6, lr
 8008c92:	46f4      	mov	ip, lr
 8008c94:	d816      	bhi.n	8008cc4 <rshift+0x80>
 8008c96:	1a9b      	subs	r3, r3, r2
 8008c98:	009a      	lsls	r2, r3, #2
 8008c9a:	3a04      	subs	r2, #4
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	42ae      	cmp	r6, r5
 8008ca0:	bf38      	it	cc
 8008ca2:	2200      	movcc	r2, #0
 8008ca4:	18a3      	adds	r3, r4, r2
 8008ca6:	50a7      	str	r7, [r4, r2]
 8008ca8:	b107      	cbz	r7, 8008cac <rshift+0x68>
 8008caa:	3304      	adds	r3, #4
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	eba3 0204 	sub.w	r2, r3, r4
 8008cb2:	bf08      	it	eq
 8008cb4:	2300      	moveq	r3, #0
 8008cb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cba:	6102      	str	r2, [r0, #16]
 8008cbc:	bf08      	it	eq
 8008cbe:	6143      	streq	r3, [r0, #20]
 8008cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc4:	f8dc c000 	ldr.w	ip, [ip]
 8008cc8:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ccc:	ea4c 0707 	orr.w	r7, ip, r7
 8008cd0:	f849 7b04 	str.w	r7, [r9], #4
 8008cd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cd8:	40cf      	lsrs	r7, r1
 8008cda:	e7d9      	b.n	8008c90 <rshift+0x4c>
 8008cdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ce0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ce4:	e7c2      	b.n	8008c6c <rshift+0x28>
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	e7e0      	b.n	8008cac <rshift+0x68>

08008cea <__hexdig_fun>:
 8008cea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d802      	bhi.n	8008cf8 <__hexdig_fun+0xe>
 8008cf2:	3820      	subs	r0, #32
 8008cf4:	b2c0      	uxtb	r0, r0
 8008cf6:	4770      	bx	lr
 8008cf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d801      	bhi.n	8008d04 <__hexdig_fun+0x1a>
 8008d00:	3847      	subs	r0, #71	; 0x47
 8008d02:	e7f7      	b.n	8008cf4 <__hexdig_fun+0xa>
 8008d04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d08:	2b05      	cmp	r3, #5
 8008d0a:	d801      	bhi.n	8008d10 <__hexdig_fun+0x26>
 8008d0c:	3827      	subs	r0, #39	; 0x27
 8008d0e:	e7f1      	b.n	8008cf4 <__hexdig_fun+0xa>
 8008d10:	2000      	movs	r0, #0
 8008d12:	4770      	bx	lr

08008d14 <__gethex>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	b08b      	sub	sp, #44	; 0x2c
 8008d1a:	9306      	str	r3, [sp, #24]
 8008d1c:	4bb9      	ldr	r3, [pc, #740]	; (8009004 <__gethex+0x2f0>)
 8008d1e:	9002      	str	r0, [sp, #8]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	468b      	mov	fp, r1
 8008d24:	4618      	mov	r0, r3
 8008d26:	4690      	mov	r8, r2
 8008d28:	9303      	str	r3, [sp, #12]
 8008d2a:	f7f7 fa29 	bl	8000180 <strlen>
 8008d2e:	4682      	mov	sl, r0
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	f8db 2000 	ldr.w	r2, [fp]
 8008d36:	4403      	add	r3, r0
 8008d38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d3c:	9307      	str	r3, [sp, #28]
 8008d3e:	1c93      	adds	r3, r2, #2
 8008d40:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d48:	32fe      	adds	r2, #254	; 0xfe
 8008d4a:	18d1      	adds	r1, r2, r3
 8008d4c:	461f      	mov	r7, r3
 8008d4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d52:	9101      	str	r1, [sp, #4]
 8008d54:	2830      	cmp	r0, #48	; 0x30
 8008d56:	d0f8      	beq.n	8008d4a <__gethex+0x36>
 8008d58:	f7ff ffc7 	bl	8008cea <__hexdig_fun>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d13a      	bne.n	8008dd8 <__gethex+0xc4>
 8008d62:	4652      	mov	r2, sl
 8008d64:	4638      	mov	r0, r7
 8008d66:	9903      	ldr	r1, [sp, #12]
 8008d68:	f001 f9ea 	bl	800a140 <strncmp>
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d166      	bne.n	8008e40 <__gethex+0x12c>
 8008d72:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d76:	eb07 060a 	add.w	r6, r7, sl
 8008d7a:	f7ff ffb6 	bl	8008cea <__hexdig_fun>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d060      	beq.n	8008e44 <__gethex+0x130>
 8008d82:	4633      	mov	r3, r6
 8008d84:	7818      	ldrb	r0, [r3, #0]
 8008d86:	461f      	mov	r7, r3
 8008d88:	2830      	cmp	r0, #48	; 0x30
 8008d8a:	f103 0301 	add.w	r3, r3, #1
 8008d8e:	d0f9      	beq.n	8008d84 <__gethex+0x70>
 8008d90:	f7ff ffab 	bl	8008cea <__hexdig_fun>
 8008d94:	2301      	movs	r3, #1
 8008d96:	fab0 f480 	clz	r4, r0
 8008d9a:	4635      	mov	r5, r6
 8008d9c:	0964      	lsrs	r4, r4, #5
 8008d9e:	9301      	str	r3, [sp, #4]
 8008da0:	463a      	mov	r2, r7
 8008da2:	4616      	mov	r6, r2
 8008da4:	7830      	ldrb	r0, [r6, #0]
 8008da6:	3201      	adds	r2, #1
 8008da8:	f7ff ff9f 	bl	8008cea <__hexdig_fun>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1f8      	bne.n	8008da2 <__gethex+0x8e>
 8008db0:	4652      	mov	r2, sl
 8008db2:	4630      	mov	r0, r6
 8008db4:	9903      	ldr	r1, [sp, #12]
 8008db6:	f001 f9c3 	bl	800a140 <strncmp>
 8008dba:	b980      	cbnz	r0, 8008dde <__gethex+0xca>
 8008dbc:	b94d      	cbnz	r5, 8008dd2 <__gethex+0xbe>
 8008dbe:	eb06 050a 	add.w	r5, r6, sl
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	7830      	ldrb	r0, [r6, #0]
 8008dc8:	3201      	adds	r2, #1
 8008dca:	f7ff ff8e 	bl	8008cea <__hexdig_fun>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1f8      	bne.n	8008dc4 <__gethex+0xb0>
 8008dd2:	1bad      	subs	r5, r5, r6
 8008dd4:	00ad      	lsls	r5, r5, #2
 8008dd6:	e004      	b.n	8008de2 <__gethex+0xce>
 8008dd8:	2400      	movs	r4, #0
 8008dda:	4625      	mov	r5, r4
 8008ddc:	e7e0      	b.n	8008da0 <__gethex+0x8c>
 8008dde:	2d00      	cmp	r5, #0
 8008de0:	d1f7      	bne.n	8008dd2 <__gethex+0xbe>
 8008de2:	7833      	ldrb	r3, [r6, #0]
 8008de4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008de8:	2b50      	cmp	r3, #80	; 0x50
 8008dea:	d139      	bne.n	8008e60 <__gethex+0x14c>
 8008dec:	7873      	ldrb	r3, [r6, #1]
 8008dee:	2b2b      	cmp	r3, #43	; 0x2b
 8008df0:	d02a      	beq.n	8008e48 <__gethex+0x134>
 8008df2:	2b2d      	cmp	r3, #45	; 0x2d
 8008df4:	d02c      	beq.n	8008e50 <__gethex+0x13c>
 8008df6:	f04f 0900 	mov.w	r9, #0
 8008dfa:	1c71      	adds	r1, r6, #1
 8008dfc:	7808      	ldrb	r0, [r1, #0]
 8008dfe:	f7ff ff74 	bl	8008cea <__hexdig_fun>
 8008e02:	1e43      	subs	r3, r0, #1
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b18      	cmp	r3, #24
 8008e08:	d82a      	bhi.n	8008e60 <__gethex+0x14c>
 8008e0a:	f1a0 0210 	sub.w	r2, r0, #16
 8008e0e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e12:	f7ff ff6a 	bl	8008cea <__hexdig_fun>
 8008e16:	1e43      	subs	r3, r0, #1
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b18      	cmp	r3, #24
 8008e1c:	d91b      	bls.n	8008e56 <__gethex+0x142>
 8008e1e:	f1b9 0f00 	cmp.w	r9, #0
 8008e22:	d000      	beq.n	8008e26 <__gethex+0x112>
 8008e24:	4252      	negs	r2, r2
 8008e26:	4415      	add	r5, r2
 8008e28:	f8cb 1000 	str.w	r1, [fp]
 8008e2c:	b1d4      	cbz	r4, 8008e64 <__gethex+0x150>
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bf14      	ite	ne
 8008e34:	2700      	movne	r7, #0
 8008e36:	2706      	moveq	r7, #6
 8008e38:	4638      	mov	r0, r7
 8008e3a:	b00b      	add	sp, #44	; 0x2c
 8008e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e40:	463e      	mov	r6, r7
 8008e42:	4625      	mov	r5, r4
 8008e44:	2401      	movs	r4, #1
 8008e46:	e7cc      	b.n	8008de2 <__gethex+0xce>
 8008e48:	f04f 0900 	mov.w	r9, #0
 8008e4c:	1cb1      	adds	r1, r6, #2
 8008e4e:	e7d5      	b.n	8008dfc <__gethex+0xe8>
 8008e50:	f04f 0901 	mov.w	r9, #1
 8008e54:	e7fa      	b.n	8008e4c <__gethex+0x138>
 8008e56:	230a      	movs	r3, #10
 8008e58:	fb03 0202 	mla	r2, r3, r2, r0
 8008e5c:	3a10      	subs	r2, #16
 8008e5e:	e7d6      	b.n	8008e0e <__gethex+0xfa>
 8008e60:	4631      	mov	r1, r6
 8008e62:	e7e1      	b.n	8008e28 <__gethex+0x114>
 8008e64:	4621      	mov	r1, r4
 8008e66:	1bf3      	subs	r3, r6, r7
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	2b07      	cmp	r3, #7
 8008e6c:	dc0a      	bgt.n	8008e84 <__gethex+0x170>
 8008e6e:	9802      	ldr	r0, [sp, #8]
 8008e70:	f000 fa88 	bl	8009384 <_Balloc>
 8008e74:	4604      	mov	r4, r0
 8008e76:	b940      	cbnz	r0, 8008e8a <__gethex+0x176>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	21de      	movs	r1, #222	; 0xde
 8008e7c:	4b62      	ldr	r3, [pc, #392]	; (8009008 <__gethex+0x2f4>)
 8008e7e:	4863      	ldr	r0, [pc, #396]	; (800900c <__gethex+0x2f8>)
 8008e80:	f001 f97e 	bl	800a180 <__assert_func>
 8008e84:	3101      	adds	r1, #1
 8008e86:	105b      	asrs	r3, r3, #1
 8008e88:	e7ef      	b.n	8008e6a <__gethex+0x156>
 8008e8a:	f04f 0b00 	mov.w	fp, #0
 8008e8e:	f100 0914 	add.w	r9, r0, #20
 8008e92:	f1ca 0301 	rsb	r3, sl, #1
 8008e96:	f8cd 9010 	str.w	r9, [sp, #16]
 8008e9a:	f8cd b004 	str.w	fp, [sp, #4]
 8008e9e:	9308      	str	r3, [sp, #32]
 8008ea0:	42b7      	cmp	r7, r6
 8008ea2:	d33f      	bcc.n	8008f24 <__gethex+0x210>
 8008ea4:	9f04      	ldr	r7, [sp, #16]
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	f847 3b04 	str.w	r3, [r7], #4
 8008eac:	eba7 0709 	sub.w	r7, r7, r9
 8008eb0:	10bf      	asrs	r7, r7, #2
 8008eb2:	6127      	str	r7, [r4, #16]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fb5b 	bl	8009570 <__hi0bits>
 8008eba:	017f      	lsls	r7, r7, #5
 8008ebc:	f8d8 6000 	ldr.w	r6, [r8]
 8008ec0:	1a3f      	subs	r7, r7, r0
 8008ec2:	42b7      	cmp	r7, r6
 8008ec4:	dd62      	ble.n	8008f8c <__gethex+0x278>
 8008ec6:	1bbf      	subs	r7, r7, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fef1 	bl	8009cb2 <__any_on>
 8008ed0:	4682      	mov	sl, r0
 8008ed2:	b1a8      	cbz	r0, 8008f00 <__gethex+0x1ec>
 8008ed4:	f04f 0a01 	mov.w	sl, #1
 8008ed8:	1e7b      	subs	r3, r7, #1
 8008eda:	1159      	asrs	r1, r3, #5
 8008edc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ee0:	f003 021f 	and.w	r2, r3, #31
 8008ee4:	fa0a f202 	lsl.w	r2, sl, r2
 8008ee8:	420a      	tst	r2, r1
 8008eea:	d009      	beq.n	8008f00 <__gethex+0x1ec>
 8008eec:	4553      	cmp	r3, sl
 8008eee:	dd05      	ble.n	8008efc <__gethex+0x1e8>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	1eb9      	subs	r1, r7, #2
 8008ef4:	f000 fedd 	bl	8009cb2 <__any_on>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d144      	bne.n	8008f86 <__gethex+0x272>
 8008efc:	f04f 0a02 	mov.w	sl, #2
 8008f00:	4639      	mov	r1, r7
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7ff fe9e 	bl	8008c44 <rshift>
 8008f08:	443d      	add	r5, r7
 8008f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f0e:	42ab      	cmp	r3, r5
 8008f10:	da4a      	bge.n	8008fa8 <__gethex+0x294>
 8008f12:	4621      	mov	r1, r4
 8008f14:	9802      	ldr	r0, [sp, #8]
 8008f16:	f000 fa75 	bl	8009404 <_Bfree>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f1e:	27a3      	movs	r7, #163	; 0xa3
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	e789      	b.n	8008e38 <__gethex+0x124>
 8008f24:	1e73      	subs	r3, r6, #1
 8008f26:	9a07      	ldr	r2, [sp, #28]
 8008f28:	9305      	str	r3, [sp, #20]
 8008f2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d019      	beq.n	8008f66 <__gethex+0x252>
 8008f32:	f1bb 0f20 	cmp.w	fp, #32
 8008f36:	d107      	bne.n	8008f48 <__gethex+0x234>
 8008f38:	9b04      	ldr	r3, [sp, #16]
 8008f3a:	9a01      	ldr	r2, [sp, #4]
 8008f3c:	f843 2b04 	str.w	r2, [r3], #4
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	2300      	movs	r3, #0
 8008f44:	469b      	mov	fp, r3
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f4c:	f7ff fecd 	bl	8008cea <__hexdig_fun>
 8008f50:	9b01      	ldr	r3, [sp, #4]
 8008f52:	f000 000f 	and.w	r0, r0, #15
 8008f56:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f5a:	4303      	orrs	r3, r0
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	f10b 0b04 	add.w	fp, fp, #4
 8008f62:	9b05      	ldr	r3, [sp, #20]
 8008f64:	e00d      	b.n	8008f82 <__gethex+0x26e>
 8008f66:	9b05      	ldr	r3, [sp, #20]
 8008f68:	9a08      	ldr	r2, [sp, #32]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	42bb      	cmp	r3, r7
 8008f6e:	d3e0      	bcc.n	8008f32 <__gethex+0x21e>
 8008f70:	4618      	mov	r0, r3
 8008f72:	4652      	mov	r2, sl
 8008f74:	9903      	ldr	r1, [sp, #12]
 8008f76:	9309      	str	r3, [sp, #36]	; 0x24
 8008f78:	f001 f8e2 	bl	800a140 <strncmp>
 8008f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d1d7      	bne.n	8008f32 <__gethex+0x21e>
 8008f82:	461e      	mov	r6, r3
 8008f84:	e78c      	b.n	8008ea0 <__gethex+0x18c>
 8008f86:	f04f 0a03 	mov.w	sl, #3
 8008f8a:	e7b9      	b.n	8008f00 <__gethex+0x1ec>
 8008f8c:	da09      	bge.n	8008fa2 <__gethex+0x28e>
 8008f8e:	1bf7      	subs	r7, r6, r7
 8008f90:	4621      	mov	r1, r4
 8008f92:	463a      	mov	r2, r7
 8008f94:	9802      	ldr	r0, [sp, #8]
 8008f96:	f000 fc4d 	bl	8009834 <__lshift>
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	1bed      	subs	r5, r5, r7
 8008f9e:	f100 0914 	add.w	r9, r0, #20
 8008fa2:	f04f 0a00 	mov.w	sl, #0
 8008fa6:	e7b0      	b.n	8008f0a <__gethex+0x1f6>
 8008fa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fac:	42a8      	cmp	r0, r5
 8008fae:	dd71      	ble.n	8009094 <__gethex+0x380>
 8008fb0:	1b45      	subs	r5, r0, r5
 8008fb2:	42ae      	cmp	r6, r5
 8008fb4:	dc34      	bgt.n	8009020 <__gethex+0x30c>
 8008fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d028      	beq.n	8009010 <__gethex+0x2fc>
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d02a      	beq.n	8009018 <__gethex+0x304>
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d115      	bne.n	8008ff2 <__gethex+0x2de>
 8008fc6:	42ae      	cmp	r6, r5
 8008fc8:	d113      	bne.n	8008ff2 <__gethex+0x2de>
 8008fca:	2e01      	cmp	r6, #1
 8008fcc:	d10b      	bne.n	8008fe6 <__gethex+0x2d2>
 8008fce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fd2:	9a06      	ldr	r2, [sp, #24]
 8008fd4:	2762      	movs	r7, #98	; 0x62
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	2301      	movs	r3, #1
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	f8c9 3000 	str.w	r3, [r9]
 8008fe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fe2:	601c      	str	r4, [r3, #0]
 8008fe4:	e728      	b.n	8008e38 <__gethex+0x124>
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	1e71      	subs	r1, r6, #1
 8008fea:	f000 fe62 	bl	8009cb2 <__any_on>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d1ed      	bne.n	8008fce <__gethex+0x2ba>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	9802      	ldr	r0, [sp, #8]
 8008ff6:	f000 fa05 	bl	8009404 <_Bfree>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ffe:	2750      	movs	r7, #80	; 0x50
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e719      	b.n	8008e38 <__gethex+0x124>
 8009004:	0800b820 	.word	0x0800b820
 8009008:	0800b7a4 	.word	0x0800b7a4
 800900c:	0800b7b5 	.word	0x0800b7b5
 8009010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1ed      	bne.n	8008ff2 <__gethex+0x2de>
 8009016:	e7da      	b.n	8008fce <__gethex+0x2ba>
 8009018:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1d7      	bne.n	8008fce <__gethex+0x2ba>
 800901e:	e7e8      	b.n	8008ff2 <__gethex+0x2de>
 8009020:	1e6f      	subs	r7, r5, #1
 8009022:	f1ba 0f00 	cmp.w	sl, #0
 8009026:	d132      	bne.n	800908e <__gethex+0x37a>
 8009028:	b127      	cbz	r7, 8009034 <__gethex+0x320>
 800902a:	4639      	mov	r1, r7
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fe40 	bl	8009cb2 <__any_on>
 8009032:	4682      	mov	sl, r0
 8009034:	2101      	movs	r1, #1
 8009036:	117b      	asrs	r3, r7, #5
 8009038:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800903c:	f007 071f 	and.w	r7, r7, #31
 8009040:	fa01 f707 	lsl.w	r7, r1, r7
 8009044:	421f      	tst	r7, r3
 8009046:	f04f 0702 	mov.w	r7, #2
 800904a:	4629      	mov	r1, r5
 800904c:	4620      	mov	r0, r4
 800904e:	bf18      	it	ne
 8009050:	f04a 0a02 	orrne.w	sl, sl, #2
 8009054:	1b76      	subs	r6, r6, r5
 8009056:	f7ff fdf5 	bl	8008c44 <rshift>
 800905a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800905e:	f1ba 0f00 	cmp.w	sl, #0
 8009062:	d048      	beq.n	80090f6 <__gethex+0x3e2>
 8009064:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009068:	2b02      	cmp	r3, #2
 800906a:	d015      	beq.n	8009098 <__gethex+0x384>
 800906c:	2b03      	cmp	r3, #3
 800906e:	d017      	beq.n	80090a0 <__gethex+0x38c>
 8009070:	2b01      	cmp	r3, #1
 8009072:	d109      	bne.n	8009088 <__gethex+0x374>
 8009074:	f01a 0f02 	tst.w	sl, #2
 8009078:	d006      	beq.n	8009088 <__gethex+0x374>
 800907a:	f8d9 0000 	ldr.w	r0, [r9]
 800907e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009082:	f01a 0f01 	tst.w	sl, #1
 8009086:	d10e      	bne.n	80090a6 <__gethex+0x392>
 8009088:	f047 0710 	orr.w	r7, r7, #16
 800908c:	e033      	b.n	80090f6 <__gethex+0x3e2>
 800908e:	f04f 0a01 	mov.w	sl, #1
 8009092:	e7cf      	b.n	8009034 <__gethex+0x320>
 8009094:	2701      	movs	r7, #1
 8009096:	e7e2      	b.n	800905e <__gethex+0x34a>
 8009098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800909a:	f1c3 0301 	rsb	r3, r3, #1
 800909e:	9315      	str	r3, [sp, #84]	; 0x54
 80090a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f0      	beq.n	8009088 <__gethex+0x374>
 80090a6:	f04f 0c00 	mov.w	ip, #0
 80090aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090ae:	f104 0314 	add.w	r3, r4, #20
 80090b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090c4:	d01c      	beq.n	8009100 <__gethex+0x3ec>
 80090c6:	3201      	adds	r2, #1
 80090c8:	6002      	str	r2, [r0, #0]
 80090ca:	2f02      	cmp	r7, #2
 80090cc:	f104 0314 	add.w	r3, r4, #20
 80090d0:	d13d      	bne.n	800914e <__gethex+0x43a>
 80090d2:	f8d8 2000 	ldr.w	r2, [r8]
 80090d6:	3a01      	subs	r2, #1
 80090d8:	42b2      	cmp	r2, r6
 80090da:	d10a      	bne.n	80090f2 <__gethex+0x3de>
 80090dc:	2201      	movs	r2, #1
 80090de:	1171      	asrs	r1, r6, #5
 80090e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090e4:	f006 061f 	and.w	r6, r6, #31
 80090e8:	fa02 f606 	lsl.w	r6, r2, r6
 80090ec:	421e      	tst	r6, r3
 80090ee:	bf18      	it	ne
 80090f0:	4617      	movne	r7, r2
 80090f2:	f047 0720 	orr.w	r7, r7, #32
 80090f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090f8:	601c      	str	r4, [r3, #0]
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	601d      	str	r5, [r3, #0]
 80090fe:	e69b      	b.n	8008e38 <__gethex+0x124>
 8009100:	4299      	cmp	r1, r3
 8009102:	f843 cc04 	str.w	ip, [r3, #-4]
 8009106:	d8d8      	bhi.n	80090ba <__gethex+0x3a6>
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	459b      	cmp	fp, r3
 800910c:	db17      	blt.n	800913e <__gethex+0x42a>
 800910e:	6861      	ldr	r1, [r4, #4]
 8009110:	9802      	ldr	r0, [sp, #8]
 8009112:	3101      	adds	r1, #1
 8009114:	f000 f936 	bl	8009384 <_Balloc>
 8009118:	4681      	mov	r9, r0
 800911a:	b918      	cbnz	r0, 8009124 <__gethex+0x410>
 800911c:	4602      	mov	r2, r0
 800911e:	2184      	movs	r1, #132	; 0x84
 8009120:	4b19      	ldr	r3, [pc, #100]	; (8009188 <__gethex+0x474>)
 8009122:	e6ac      	b.n	8008e7e <__gethex+0x16a>
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	f104 010c 	add.w	r1, r4, #12
 800912a:	3202      	adds	r2, #2
 800912c:	0092      	lsls	r2, r2, #2
 800912e:	300c      	adds	r0, #12
 8009130:	f000 f91a 	bl	8009368 <memcpy>
 8009134:	4621      	mov	r1, r4
 8009136:	9802      	ldr	r0, [sp, #8]
 8009138:	f000 f964 	bl	8009404 <_Bfree>
 800913c:	464c      	mov	r4, r9
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	6122      	str	r2, [r4, #16]
 8009144:	2201      	movs	r2, #1
 8009146:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800914a:	615a      	str	r2, [r3, #20]
 800914c:	e7bd      	b.n	80090ca <__gethex+0x3b6>
 800914e:	6922      	ldr	r2, [r4, #16]
 8009150:	455a      	cmp	r2, fp
 8009152:	dd0b      	ble.n	800916c <__gethex+0x458>
 8009154:	2101      	movs	r1, #1
 8009156:	4620      	mov	r0, r4
 8009158:	f7ff fd74 	bl	8008c44 <rshift>
 800915c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009160:	3501      	adds	r5, #1
 8009162:	42ab      	cmp	r3, r5
 8009164:	f6ff aed5 	blt.w	8008f12 <__gethex+0x1fe>
 8009168:	2701      	movs	r7, #1
 800916a:	e7c2      	b.n	80090f2 <__gethex+0x3de>
 800916c:	f016 061f 	ands.w	r6, r6, #31
 8009170:	d0fa      	beq.n	8009168 <__gethex+0x454>
 8009172:	449a      	add	sl, r3
 8009174:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009178:	f000 f9fa 	bl	8009570 <__hi0bits>
 800917c:	f1c6 0620 	rsb	r6, r6, #32
 8009180:	42b0      	cmp	r0, r6
 8009182:	dbe7      	blt.n	8009154 <__gethex+0x440>
 8009184:	e7f0      	b.n	8009168 <__gethex+0x454>
 8009186:	bf00      	nop
 8009188:	0800b7a4 	.word	0x0800b7a4

0800918c <L_shift>:
 800918c:	f1c2 0208 	rsb	r2, r2, #8
 8009190:	0092      	lsls	r2, r2, #2
 8009192:	b570      	push	{r4, r5, r6, lr}
 8009194:	f1c2 0620 	rsb	r6, r2, #32
 8009198:	6843      	ldr	r3, [r0, #4]
 800919a:	6804      	ldr	r4, [r0, #0]
 800919c:	fa03 f506 	lsl.w	r5, r3, r6
 80091a0:	432c      	orrs	r4, r5
 80091a2:	40d3      	lsrs	r3, r2
 80091a4:	6004      	str	r4, [r0, #0]
 80091a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80091aa:	4288      	cmp	r0, r1
 80091ac:	d3f4      	bcc.n	8009198 <L_shift+0xc>
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <__match>:
 80091b0:	b530      	push	{r4, r5, lr}
 80091b2:	6803      	ldr	r3, [r0, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ba:	b914      	cbnz	r4, 80091c2 <__match+0x12>
 80091bc:	6003      	str	r3, [r0, #0]
 80091be:	2001      	movs	r0, #1
 80091c0:	bd30      	pop	{r4, r5, pc}
 80091c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80091ca:	2d19      	cmp	r5, #25
 80091cc:	bf98      	it	ls
 80091ce:	3220      	addls	r2, #32
 80091d0:	42a2      	cmp	r2, r4
 80091d2:	d0f0      	beq.n	80091b6 <__match+0x6>
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7f3      	b.n	80091c0 <__match+0x10>

080091d8 <__hexnan>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	2500      	movs	r5, #0
 80091de:	680b      	ldr	r3, [r1, #0]
 80091e0:	4682      	mov	sl, r0
 80091e2:	115e      	asrs	r6, r3, #5
 80091e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091e8:	f013 031f 	ands.w	r3, r3, #31
 80091ec:	bf18      	it	ne
 80091ee:	3604      	addne	r6, #4
 80091f0:	1f37      	subs	r7, r6, #4
 80091f2:	4690      	mov	r8, r2
 80091f4:	46b9      	mov	r9, r7
 80091f6:	463c      	mov	r4, r7
 80091f8:	46ab      	mov	fp, r5
 80091fa:	b087      	sub	sp, #28
 80091fc:	6801      	ldr	r1, [r0, #0]
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	f846 5c04 	str.w	r5, [r6, #-4]
 8009204:	9502      	str	r5, [sp, #8]
 8009206:	784a      	ldrb	r2, [r1, #1]
 8009208:	1c4b      	adds	r3, r1, #1
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	b342      	cbz	r2, 8009260 <__hexnan+0x88>
 800920e:	4610      	mov	r0, r2
 8009210:	9105      	str	r1, [sp, #20]
 8009212:	9204      	str	r2, [sp, #16]
 8009214:	f7ff fd69 	bl	8008cea <__hexdig_fun>
 8009218:	2800      	cmp	r0, #0
 800921a:	d14f      	bne.n	80092bc <__hexnan+0xe4>
 800921c:	9a04      	ldr	r2, [sp, #16]
 800921e:	9905      	ldr	r1, [sp, #20]
 8009220:	2a20      	cmp	r2, #32
 8009222:	d818      	bhi.n	8009256 <__hexnan+0x7e>
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	459b      	cmp	fp, r3
 8009228:	dd13      	ble.n	8009252 <__hexnan+0x7a>
 800922a:	454c      	cmp	r4, r9
 800922c:	d206      	bcs.n	800923c <__hexnan+0x64>
 800922e:	2d07      	cmp	r5, #7
 8009230:	dc04      	bgt.n	800923c <__hexnan+0x64>
 8009232:	462a      	mov	r2, r5
 8009234:	4649      	mov	r1, r9
 8009236:	4620      	mov	r0, r4
 8009238:	f7ff ffa8 	bl	800918c <L_shift>
 800923c:	4544      	cmp	r4, r8
 800923e:	d950      	bls.n	80092e2 <__hexnan+0x10a>
 8009240:	2300      	movs	r3, #0
 8009242:	f1a4 0904 	sub.w	r9, r4, #4
 8009246:	f844 3c04 	str.w	r3, [r4, #-4]
 800924a:	461d      	mov	r5, r3
 800924c:	464c      	mov	r4, r9
 800924e:	f8cd b008 	str.w	fp, [sp, #8]
 8009252:	9903      	ldr	r1, [sp, #12]
 8009254:	e7d7      	b.n	8009206 <__hexnan+0x2e>
 8009256:	2a29      	cmp	r2, #41	; 0x29
 8009258:	d156      	bne.n	8009308 <__hexnan+0x130>
 800925a:	3102      	adds	r1, #2
 800925c:	f8ca 1000 	str.w	r1, [sl]
 8009260:	f1bb 0f00 	cmp.w	fp, #0
 8009264:	d050      	beq.n	8009308 <__hexnan+0x130>
 8009266:	454c      	cmp	r4, r9
 8009268:	d206      	bcs.n	8009278 <__hexnan+0xa0>
 800926a:	2d07      	cmp	r5, #7
 800926c:	dc04      	bgt.n	8009278 <__hexnan+0xa0>
 800926e:	462a      	mov	r2, r5
 8009270:	4649      	mov	r1, r9
 8009272:	4620      	mov	r0, r4
 8009274:	f7ff ff8a 	bl	800918c <L_shift>
 8009278:	4544      	cmp	r4, r8
 800927a:	d934      	bls.n	80092e6 <__hexnan+0x10e>
 800927c:	4623      	mov	r3, r4
 800927e:	f1a8 0204 	sub.w	r2, r8, #4
 8009282:	f853 1b04 	ldr.w	r1, [r3], #4
 8009286:	429f      	cmp	r7, r3
 8009288:	f842 1f04 	str.w	r1, [r2, #4]!
 800928c:	d2f9      	bcs.n	8009282 <__hexnan+0xaa>
 800928e:	1b3b      	subs	r3, r7, r4
 8009290:	f023 0303 	bic.w	r3, r3, #3
 8009294:	3304      	adds	r3, #4
 8009296:	3401      	adds	r4, #1
 8009298:	3e03      	subs	r6, #3
 800929a:	42b4      	cmp	r4, r6
 800929c:	bf88      	it	hi
 800929e:	2304      	movhi	r3, #4
 80092a0:	2200      	movs	r2, #0
 80092a2:	4443      	add	r3, r8
 80092a4:	f843 2b04 	str.w	r2, [r3], #4
 80092a8:	429f      	cmp	r7, r3
 80092aa:	d2fb      	bcs.n	80092a4 <__hexnan+0xcc>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	b91b      	cbnz	r3, 80092b8 <__hexnan+0xe0>
 80092b0:	4547      	cmp	r7, r8
 80092b2:	d127      	bne.n	8009304 <__hexnan+0x12c>
 80092b4:	2301      	movs	r3, #1
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	2005      	movs	r0, #5
 80092ba:	e026      	b.n	800930a <__hexnan+0x132>
 80092bc:	3501      	adds	r5, #1
 80092be:	2d08      	cmp	r5, #8
 80092c0:	f10b 0b01 	add.w	fp, fp, #1
 80092c4:	dd06      	ble.n	80092d4 <__hexnan+0xfc>
 80092c6:	4544      	cmp	r4, r8
 80092c8:	d9c3      	bls.n	8009252 <__hexnan+0x7a>
 80092ca:	2300      	movs	r3, #0
 80092cc:	2501      	movs	r5, #1
 80092ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80092d2:	3c04      	subs	r4, #4
 80092d4:	6822      	ldr	r2, [r4, #0]
 80092d6:	f000 000f 	and.w	r0, r0, #15
 80092da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80092de:	6022      	str	r2, [r4, #0]
 80092e0:	e7b7      	b.n	8009252 <__hexnan+0x7a>
 80092e2:	2508      	movs	r5, #8
 80092e4:	e7b5      	b.n	8009252 <__hexnan+0x7a>
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0df      	beq.n	80092ac <__hexnan+0xd4>
 80092ec:	f04f 32ff 	mov.w	r2, #4294967295
 80092f0:	f1c3 0320 	rsb	r3, r3, #32
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
 80092f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092fc:	401a      	ands	r2, r3
 80092fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009302:	e7d3      	b.n	80092ac <__hexnan+0xd4>
 8009304:	3f04      	subs	r7, #4
 8009306:	e7d1      	b.n	80092ac <__hexnan+0xd4>
 8009308:	2004      	movs	r0, #4
 800930a:	b007      	add	sp, #28
 800930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009310 <_localeconv_r>:
 8009310:	4800      	ldr	r0, [pc, #0]	; (8009314 <_localeconv_r+0x4>)
 8009312:	4770      	bx	lr
 8009314:	200001c4 	.word	0x200001c4

08009318 <malloc>:
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <malloc+0xc>)
 800931a:	4601      	mov	r1, r0
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f000 bd43 	b.w	8009da8 <_malloc_r>
 8009322:	bf00      	nop
 8009324:	2000006c 	.word	0x2000006c

08009328 <__ascii_mbtowc>:
 8009328:	b082      	sub	sp, #8
 800932a:	b901      	cbnz	r1, 800932e <__ascii_mbtowc+0x6>
 800932c:	a901      	add	r1, sp, #4
 800932e:	b142      	cbz	r2, 8009342 <__ascii_mbtowc+0x1a>
 8009330:	b14b      	cbz	r3, 8009346 <__ascii_mbtowc+0x1e>
 8009332:	7813      	ldrb	r3, [r2, #0]
 8009334:	600b      	str	r3, [r1, #0]
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	1e10      	subs	r0, r2, #0
 800933a:	bf18      	it	ne
 800933c:	2001      	movne	r0, #1
 800933e:	b002      	add	sp, #8
 8009340:	4770      	bx	lr
 8009342:	4610      	mov	r0, r2
 8009344:	e7fb      	b.n	800933e <__ascii_mbtowc+0x16>
 8009346:	f06f 0001 	mvn.w	r0, #1
 800934a:	e7f8      	b.n	800933e <__ascii_mbtowc+0x16>

0800934c <memchr>:
 800934c:	4603      	mov	r3, r0
 800934e:	b510      	push	{r4, lr}
 8009350:	b2c9      	uxtb	r1, r1
 8009352:	4402      	add	r2, r0
 8009354:	4293      	cmp	r3, r2
 8009356:	4618      	mov	r0, r3
 8009358:	d101      	bne.n	800935e <memchr+0x12>
 800935a:	2000      	movs	r0, #0
 800935c:	e003      	b.n	8009366 <memchr+0x1a>
 800935e:	7804      	ldrb	r4, [r0, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	428c      	cmp	r4, r1
 8009364:	d1f6      	bne.n	8009354 <memchr+0x8>
 8009366:	bd10      	pop	{r4, pc}

08009368 <memcpy>:
 8009368:	440a      	add	r2, r1
 800936a:	4291      	cmp	r1, r2
 800936c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009370:	d100      	bne.n	8009374 <memcpy+0xc>
 8009372:	4770      	bx	lr
 8009374:	b510      	push	{r4, lr}
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	4291      	cmp	r1, r2
 800937c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009380:	d1f9      	bne.n	8009376 <memcpy+0xe>
 8009382:	bd10      	pop	{r4, pc}

08009384 <_Balloc>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009388:	4604      	mov	r4, r0
 800938a:	460d      	mov	r5, r1
 800938c:	b976      	cbnz	r6, 80093ac <_Balloc+0x28>
 800938e:	2010      	movs	r0, #16
 8009390:	f7ff ffc2 	bl	8009318 <malloc>
 8009394:	4602      	mov	r2, r0
 8009396:	6260      	str	r0, [r4, #36]	; 0x24
 8009398:	b920      	cbnz	r0, 80093a4 <_Balloc+0x20>
 800939a:	2166      	movs	r1, #102	; 0x66
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <_Balloc+0x78>)
 800939e:	4818      	ldr	r0, [pc, #96]	; (8009400 <_Balloc+0x7c>)
 80093a0:	f000 feee 	bl	800a180 <__assert_func>
 80093a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a8:	6006      	str	r6, [r0, #0]
 80093aa:	60c6      	str	r6, [r0, #12]
 80093ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093ae:	68f3      	ldr	r3, [r6, #12]
 80093b0:	b183      	cbz	r3, 80093d4 <_Balloc+0x50>
 80093b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ba:	b9b8      	cbnz	r0, 80093ec <_Balloc+0x68>
 80093bc:	2101      	movs	r1, #1
 80093be:	fa01 f605 	lsl.w	r6, r1, r5
 80093c2:	1d72      	adds	r2, r6, #5
 80093c4:	4620      	mov	r0, r4
 80093c6:	0092      	lsls	r2, r2, #2
 80093c8:	f000 fc94 	bl	8009cf4 <_calloc_r>
 80093cc:	b160      	cbz	r0, 80093e8 <_Balloc+0x64>
 80093ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093d2:	e00e      	b.n	80093f2 <_Balloc+0x6e>
 80093d4:	2221      	movs	r2, #33	; 0x21
 80093d6:	2104      	movs	r1, #4
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fc8b 	bl	8009cf4 <_calloc_r>
 80093de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e0:	60f0      	str	r0, [r6, #12]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <_Balloc+0x2e>
 80093e8:	2000      	movs	r0, #0
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	6802      	ldr	r2, [r0, #0]
 80093ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093f2:	2300      	movs	r3, #0
 80093f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093f8:	e7f7      	b.n	80093ea <_Balloc+0x66>
 80093fa:	bf00      	nop
 80093fc:	0800b72e 	.word	0x0800b72e
 8009400:	0800b834 	.word	0x0800b834

08009404 <_Bfree>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b976      	cbnz	r6, 800942c <_Bfree+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f7ff ff82 	bl	8009318 <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6268      	str	r0, [r5, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Bfree+0x20>
 800941a:	218a      	movs	r1, #138	; 0x8a
 800941c:	4b08      	ldr	r3, [pc, #32]	; (8009440 <_Bfree+0x3c>)
 800941e:	4809      	ldr	r0, [pc, #36]	; (8009444 <_Bfree+0x40>)
 8009420:	f000 feae 	bl	800a180 <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	b13c      	cbz	r4, 800943e <_Bfree+0x3a>
 800942e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009430:	6862      	ldr	r2, [r4, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009438:	6021      	str	r1, [r4, #0]
 800943a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	0800b72e 	.word	0x0800b72e
 8009444:	0800b834 	.word	0x0800b834

08009448 <__multadd>:
 8009448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944c:	4698      	mov	r8, r3
 800944e:	460c      	mov	r4, r1
 8009450:	2300      	movs	r3, #0
 8009452:	690e      	ldr	r6, [r1, #16]
 8009454:	4607      	mov	r7, r0
 8009456:	f101 0014 	add.w	r0, r1, #20
 800945a:	6805      	ldr	r5, [r0, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	b2a9      	uxth	r1, r5
 8009460:	fb02 8101 	mla	r1, r2, r1, r8
 8009464:	0c2d      	lsrs	r5, r5, #16
 8009466:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800946a:	fb02 c505 	mla	r5, r2, r5, ip
 800946e:	b289      	uxth	r1, r1
 8009470:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009474:	429e      	cmp	r6, r3
 8009476:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800947a:	f840 1b04 	str.w	r1, [r0], #4
 800947e:	dcec      	bgt.n	800945a <__multadd+0x12>
 8009480:	f1b8 0f00 	cmp.w	r8, #0
 8009484:	d022      	beq.n	80094cc <__multadd+0x84>
 8009486:	68a3      	ldr	r3, [r4, #8]
 8009488:	42b3      	cmp	r3, r6
 800948a:	dc19      	bgt.n	80094c0 <__multadd+0x78>
 800948c:	6861      	ldr	r1, [r4, #4]
 800948e:	4638      	mov	r0, r7
 8009490:	3101      	adds	r1, #1
 8009492:	f7ff ff77 	bl	8009384 <_Balloc>
 8009496:	4605      	mov	r5, r0
 8009498:	b928      	cbnz	r0, 80094a6 <__multadd+0x5e>
 800949a:	4602      	mov	r2, r0
 800949c:	21b5      	movs	r1, #181	; 0xb5
 800949e:	4b0d      	ldr	r3, [pc, #52]	; (80094d4 <__multadd+0x8c>)
 80094a0:	480d      	ldr	r0, [pc, #52]	; (80094d8 <__multadd+0x90>)
 80094a2:	f000 fe6d 	bl	800a180 <__assert_func>
 80094a6:	6922      	ldr	r2, [r4, #16]
 80094a8:	f104 010c 	add.w	r1, r4, #12
 80094ac:	3202      	adds	r2, #2
 80094ae:	0092      	lsls	r2, r2, #2
 80094b0:	300c      	adds	r0, #12
 80094b2:	f7ff ff59 	bl	8009368 <memcpy>
 80094b6:	4621      	mov	r1, r4
 80094b8:	4638      	mov	r0, r7
 80094ba:	f7ff ffa3 	bl	8009404 <_Bfree>
 80094be:	462c      	mov	r4, r5
 80094c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80094c4:	3601      	adds	r6, #1
 80094c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80094ca:	6126      	str	r6, [r4, #16]
 80094cc:	4620      	mov	r0, r4
 80094ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d2:	bf00      	nop
 80094d4:	0800b7a4 	.word	0x0800b7a4
 80094d8:	0800b834 	.word	0x0800b834

080094dc <__s2b>:
 80094dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e0:	4615      	mov	r5, r2
 80094e2:	2209      	movs	r2, #9
 80094e4:	461f      	mov	r7, r3
 80094e6:	3308      	adds	r3, #8
 80094e8:	460c      	mov	r4, r1
 80094ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ee:	4606      	mov	r6, r0
 80094f0:	2201      	movs	r2, #1
 80094f2:	2100      	movs	r1, #0
 80094f4:	429a      	cmp	r2, r3
 80094f6:	db09      	blt.n	800950c <__s2b+0x30>
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7ff ff43 	bl	8009384 <_Balloc>
 80094fe:	b940      	cbnz	r0, 8009512 <__s2b+0x36>
 8009500:	4602      	mov	r2, r0
 8009502:	21ce      	movs	r1, #206	; 0xce
 8009504:	4b18      	ldr	r3, [pc, #96]	; (8009568 <__s2b+0x8c>)
 8009506:	4819      	ldr	r0, [pc, #100]	; (800956c <__s2b+0x90>)
 8009508:	f000 fe3a 	bl	800a180 <__assert_func>
 800950c:	0052      	lsls	r2, r2, #1
 800950e:	3101      	adds	r1, #1
 8009510:	e7f0      	b.n	80094f4 <__s2b+0x18>
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	2d09      	cmp	r5, #9
 8009516:	6143      	str	r3, [r0, #20]
 8009518:	f04f 0301 	mov.w	r3, #1
 800951c:	6103      	str	r3, [r0, #16]
 800951e:	dd16      	ble.n	800954e <__s2b+0x72>
 8009520:	f104 0909 	add.w	r9, r4, #9
 8009524:	46c8      	mov	r8, r9
 8009526:	442c      	add	r4, r5
 8009528:	f818 3b01 	ldrb.w	r3, [r8], #1
 800952c:	4601      	mov	r1, r0
 800952e:	220a      	movs	r2, #10
 8009530:	4630      	mov	r0, r6
 8009532:	3b30      	subs	r3, #48	; 0x30
 8009534:	f7ff ff88 	bl	8009448 <__multadd>
 8009538:	45a0      	cmp	r8, r4
 800953a:	d1f5      	bne.n	8009528 <__s2b+0x4c>
 800953c:	f1a5 0408 	sub.w	r4, r5, #8
 8009540:	444c      	add	r4, r9
 8009542:	1b2d      	subs	r5, r5, r4
 8009544:	1963      	adds	r3, r4, r5
 8009546:	42bb      	cmp	r3, r7
 8009548:	db04      	blt.n	8009554 <__s2b+0x78>
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954e:	2509      	movs	r5, #9
 8009550:	340a      	adds	r4, #10
 8009552:	e7f6      	b.n	8009542 <__s2b+0x66>
 8009554:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009558:	4601      	mov	r1, r0
 800955a:	220a      	movs	r2, #10
 800955c:	4630      	mov	r0, r6
 800955e:	3b30      	subs	r3, #48	; 0x30
 8009560:	f7ff ff72 	bl	8009448 <__multadd>
 8009564:	e7ee      	b.n	8009544 <__s2b+0x68>
 8009566:	bf00      	nop
 8009568:	0800b7a4 	.word	0x0800b7a4
 800956c:	0800b834 	.word	0x0800b834

08009570 <__hi0bits>:
 8009570:	0c02      	lsrs	r2, r0, #16
 8009572:	0412      	lsls	r2, r2, #16
 8009574:	4603      	mov	r3, r0
 8009576:	b9ca      	cbnz	r2, 80095ac <__hi0bits+0x3c>
 8009578:	0403      	lsls	r3, r0, #16
 800957a:	2010      	movs	r0, #16
 800957c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009580:	bf04      	itt	eq
 8009582:	021b      	lsleq	r3, r3, #8
 8009584:	3008      	addeq	r0, #8
 8009586:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800958a:	bf04      	itt	eq
 800958c:	011b      	lsleq	r3, r3, #4
 800958e:	3004      	addeq	r0, #4
 8009590:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009594:	bf04      	itt	eq
 8009596:	009b      	lsleq	r3, r3, #2
 8009598:	3002      	addeq	r0, #2
 800959a:	2b00      	cmp	r3, #0
 800959c:	db05      	blt.n	80095aa <__hi0bits+0x3a>
 800959e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80095a2:	f100 0001 	add.w	r0, r0, #1
 80095a6:	bf08      	it	eq
 80095a8:	2020      	moveq	r0, #32
 80095aa:	4770      	bx	lr
 80095ac:	2000      	movs	r0, #0
 80095ae:	e7e5      	b.n	800957c <__hi0bits+0xc>

080095b0 <__lo0bits>:
 80095b0:	6803      	ldr	r3, [r0, #0]
 80095b2:	4602      	mov	r2, r0
 80095b4:	f013 0007 	ands.w	r0, r3, #7
 80095b8:	d00b      	beq.n	80095d2 <__lo0bits+0x22>
 80095ba:	07d9      	lsls	r1, r3, #31
 80095bc:	d422      	bmi.n	8009604 <__lo0bits+0x54>
 80095be:	0798      	lsls	r0, r3, #30
 80095c0:	bf49      	itett	mi
 80095c2:	085b      	lsrmi	r3, r3, #1
 80095c4:	089b      	lsrpl	r3, r3, #2
 80095c6:	2001      	movmi	r0, #1
 80095c8:	6013      	strmi	r3, [r2, #0]
 80095ca:	bf5c      	itt	pl
 80095cc:	2002      	movpl	r0, #2
 80095ce:	6013      	strpl	r3, [r2, #0]
 80095d0:	4770      	bx	lr
 80095d2:	b299      	uxth	r1, r3
 80095d4:	b909      	cbnz	r1, 80095da <__lo0bits+0x2a>
 80095d6:	2010      	movs	r0, #16
 80095d8:	0c1b      	lsrs	r3, r3, #16
 80095da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095de:	bf04      	itt	eq
 80095e0:	0a1b      	lsreq	r3, r3, #8
 80095e2:	3008      	addeq	r0, #8
 80095e4:	0719      	lsls	r1, r3, #28
 80095e6:	bf04      	itt	eq
 80095e8:	091b      	lsreq	r3, r3, #4
 80095ea:	3004      	addeq	r0, #4
 80095ec:	0799      	lsls	r1, r3, #30
 80095ee:	bf04      	itt	eq
 80095f0:	089b      	lsreq	r3, r3, #2
 80095f2:	3002      	addeq	r0, #2
 80095f4:	07d9      	lsls	r1, r3, #31
 80095f6:	d403      	bmi.n	8009600 <__lo0bits+0x50>
 80095f8:	085b      	lsrs	r3, r3, #1
 80095fa:	f100 0001 	add.w	r0, r0, #1
 80095fe:	d003      	beq.n	8009608 <__lo0bits+0x58>
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	4770      	bx	lr
 8009604:	2000      	movs	r0, #0
 8009606:	4770      	bx	lr
 8009608:	2020      	movs	r0, #32
 800960a:	4770      	bx	lr

0800960c <__i2b>:
 800960c:	b510      	push	{r4, lr}
 800960e:	460c      	mov	r4, r1
 8009610:	2101      	movs	r1, #1
 8009612:	f7ff feb7 	bl	8009384 <_Balloc>
 8009616:	4602      	mov	r2, r0
 8009618:	b928      	cbnz	r0, 8009626 <__i2b+0x1a>
 800961a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <__i2b+0x24>)
 8009620:	4804      	ldr	r0, [pc, #16]	; (8009634 <__i2b+0x28>)
 8009622:	f000 fdad 	bl	800a180 <__assert_func>
 8009626:	2301      	movs	r3, #1
 8009628:	6144      	str	r4, [r0, #20]
 800962a:	6103      	str	r3, [r0, #16]
 800962c:	bd10      	pop	{r4, pc}
 800962e:	bf00      	nop
 8009630:	0800b7a4 	.word	0x0800b7a4
 8009634:	0800b834 	.word	0x0800b834

08009638 <__multiply>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	4614      	mov	r4, r2
 800963e:	690a      	ldr	r2, [r1, #16]
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	460d      	mov	r5, r1
 8009644:	429a      	cmp	r2, r3
 8009646:	bfbe      	ittt	lt
 8009648:	460b      	movlt	r3, r1
 800964a:	4625      	movlt	r5, r4
 800964c:	461c      	movlt	r4, r3
 800964e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009652:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009656:	68ab      	ldr	r3, [r5, #8]
 8009658:	6869      	ldr	r1, [r5, #4]
 800965a:	eb0a 0709 	add.w	r7, sl, r9
 800965e:	42bb      	cmp	r3, r7
 8009660:	b085      	sub	sp, #20
 8009662:	bfb8      	it	lt
 8009664:	3101      	addlt	r1, #1
 8009666:	f7ff fe8d 	bl	8009384 <_Balloc>
 800966a:	b930      	cbnz	r0, 800967a <__multiply+0x42>
 800966c:	4602      	mov	r2, r0
 800966e:	f240 115d 	movw	r1, #349	; 0x15d
 8009672:	4b41      	ldr	r3, [pc, #260]	; (8009778 <__multiply+0x140>)
 8009674:	4841      	ldr	r0, [pc, #260]	; (800977c <__multiply+0x144>)
 8009676:	f000 fd83 	bl	800a180 <__assert_func>
 800967a:	f100 0614 	add.w	r6, r0, #20
 800967e:	4633      	mov	r3, r6
 8009680:	2200      	movs	r2, #0
 8009682:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009686:	4543      	cmp	r3, r8
 8009688:	d31e      	bcc.n	80096c8 <__multiply+0x90>
 800968a:	f105 0c14 	add.w	ip, r5, #20
 800968e:	f104 0314 	add.w	r3, r4, #20
 8009692:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009696:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800969a:	9202      	str	r2, [sp, #8]
 800969c:	ebac 0205 	sub.w	r2, ip, r5
 80096a0:	3a15      	subs	r2, #21
 80096a2:	f022 0203 	bic.w	r2, r2, #3
 80096a6:	3204      	adds	r2, #4
 80096a8:	f105 0115 	add.w	r1, r5, #21
 80096ac:	458c      	cmp	ip, r1
 80096ae:	bf38      	it	cc
 80096b0:	2204      	movcc	r2, #4
 80096b2:	9201      	str	r2, [sp, #4]
 80096b4:	9a02      	ldr	r2, [sp, #8]
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d808      	bhi.n	80096ce <__multiply+0x96>
 80096bc:	2f00      	cmp	r7, #0
 80096be:	dc55      	bgt.n	800976c <__multiply+0x134>
 80096c0:	6107      	str	r7, [r0, #16]
 80096c2:	b005      	add	sp, #20
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	f843 2b04 	str.w	r2, [r3], #4
 80096cc:	e7db      	b.n	8009686 <__multiply+0x4e>
 80096ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80096d2:	f1ba 0f00 	cmp.w	sl, #0
 80096d6:	d020      	beq.n	800971a <__multiply+0xe2>
 80096d8:	46b1      	mov	r9, r6
 80096da:	2200      	movs	r2, #0
 80096dc:	f105 0e14 	add.w	lr, r5, #20
 80096e0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80096e4:	f8d9 b000 	ldr.w	fp, [r9]
 80096e8:	b2a1      	uxth	r1, r4
 80096ea:	fa1f fb8b 	uxth.w	fp, fp
 80096ee:	fb0a b101 	mla	r1, sl, r1, fp
 80096f2:	4411      	add	r1, r2
 80096f4:	f8d9 2000 	ldr.w	r2, [r9]
 80096f8:	0c24      	lsrs	r4, r4, #16
 80096fa:	0c12      	lsrs	r2, r2, #16
 80096fc:	fb0a 2404 	mla	r4, sl, r4, r2
 8009700:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009704:	b289      	uxth	r1, r1
 8009706:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800970a:	45f4      	cmp	ip, lr
 800970c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009710:	f849 1b04 	str.w	r1, [r9], #4
 8009714:	d8e4      	bhi.n	80096e0 <__multiply+0xa8>
 8009716:	9901      	ldr	r1, [sp, #4]
 8009718:	5072      	str	r2, [r6, r1]
 800971a:	9a03      	ldr	r2, [sp, #12]
 800971c:	3304      	adds	r3, #4
 800971e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009722:	f1b9 0f00 	cmp.w	r9, #0
 8009726:	d01f      	beq.n	8009768 <__multiply+0x130>
 8009728:	46b6      	mov	lr, r6
 800972a:	f04f 0a00 	mov.w	sl, #0
 800972e:	6834      	ldr	r4, [r6, #0]
 8009730:	f105 0114 	add.w	r1, r5, #20
 8009734:	880a      	ldrh	r2, [r1, #0]
 8009736:	f8be b002 	ldrh.w	fp, [lr, #2]
 800973a:	b2a4      	uxth	r4, r4
 800973c:	fb09 b202 	mla	r2, r9, r2, fp
 8009740:	4492      	add	sl, r2
 8009742:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009746:	f84e 4b04 	str.w	r4, [lr], #4
 800974a:	f851 4b04 	ldr.w	r4, [r1], #4
 800974e:	f8be 2000 	ldrh.w	r2, [lr]
 8009752:	0c24      	lsrs	r4, r4, #16
 8009754:	fb09 2404 	mla	r4, r9, r4, r2
 8009758:	458c      	cmp	ip, r1
 800975a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800975e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009762:	d8e7      	bhi.n	8009734 <__multiply+0xfc>
 8009764:	9a01      	ldr	r2, [sp, #4]
 8009766:	50b4      	str	r4, [r6, r2]
 8009768:	3604      	adds	r6, #4
 800976a:	e7a3      	b.n	80096b4 <__multiply+0x7c>
 800976c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1a5      	bne.n	80096c0 <__multiply+0x88>
 8009774:	3f01      	subs	r7, #1
 8009776:	e7a1      	b.n	80096bc <__multiply+0x84>
 8009778:	0800b7a4 	.word	0x0800b7a4
 800977c:	0800b834 	.word	0x0800b834

08009780 <__pow5mult>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	4615      	mov	r5, r2
 8009786:	f012 0203 	ands.w	r2, r2, #3
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	d007      	beq.n	80097a0 <__pow5mult+0x20>
 8009790:	4c25      	ldr	r4, [pc, #148]	; (8009828 <__pow5mult+0xa8>)
 8009792:	3a01      	subs	r2, #1
 8009794:	2300      	movs	r3, #0
 8009796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800979a:	f7ff fe55 	bl	8009448 <__multadd>
 800979e:	4607      	mov	r7, r0
 80097a0:	10ad      	asrs	r5, r5, #2
 80097a2:	d03d      	beq.n	8009820 <__pow5mult+0xa0>
 80097a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097a6:	b97c      	cbnz	r4, 80097c8 <__pow5mult+0x48>
 80097a8:	2010      	movs	r0, #16
 80097aa:	f7ff fdb5 	bl	8009318 <malloc>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6270      	str	r0, [r6, #36]	; 0x24
 80097b2:	b928      	cbnz	r0, 80097c0 <__pow5mult+0x40>
 80097b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b8:	4b1c      	ldr	r3, [pc, #112]	; (800982c <__pow5mult+0xac>)
 80097ba:	481d      	ldr	r0, [pc, #116]	; (8009830 <__pow5mult+0xb0>)
 80097bc:	f000 fce0 	bl	800a180 <__assert_func>
 80097c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c4:	6004      	str	r4, [r0, #0]
 80097c6:	60c4      	str	r4, [r0, #12]
 80097c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097d0:	b94c      	cbnz	r4, 80097e6 <__pow5mult+0x66>
 80097d2:	f240 2171 	movw	r1, #625	; 0x271
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ff18 	bl	800960c <__i2b>
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	f04f 0900 	mov.w	r9, #0
 80097ea:	07eb      	lsls	r3, r5, #31
 80097ec:	d50a      	bpl.n	8009804 <__pow5mult+0x84>
 80097ee:	4639      	mov	r1, r7
 80097f0:	4622      	mov	r2, r4
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff ff20 	bl	8009638 <__multiply>
 80097f8:	4680      	mov	r8, r0
 80097fa:	4639      	mov	r1, r7
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff fe01 	bl	8009404 <_Bfree>
 8009802:	4647      	mov	r7, r8
 8009804:	106d      	asrs	r5, r5, #1
 8009806:	d00b      	beq.n	8009820 <__pow5mult+0xa0>
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	b938      	cbnz	r0, 800981c <__pow5mult+0x9c>
 800980c:	4622      	mov	r2, r4
 800980e:	4621      	mov	r1, r4
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff ff11 	bl	8009638 <__multiply>
 8009816:	6020      	str	r0, [r4, #0]
 8009818:	f8c0 9000 	str.w	r9, [r0]
 800981c:	4604      	mov	r4, r0
 800981e:	e7e4      	b.n	80097ea <__pow5mult+0x6a>
 8009820:	4638      	mov	r0, r7
 8009822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009826:	bf00      	nop
 8009828:	0800b988 	.word	0x0800b988
 800982c:	0800b72e 	.word	0x0800b72e
 8009830:	0800b834 	.word	0x0800b834

08009834 <__lshift>:
 8009834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009838:	460c      	mov	r4, r1
 800983a:	4607      	mov	r7, r0
 800983c:	4691      	mov	r9, r2
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6849      	ldr	r1, [r1, #4]
 8009842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800984c:	f108 0601 	add.w	r6, r8, #1
 8009850:	42b3      	cmp	r3, r6
 8009852:	db0b      	blt.n	800986c <__lshift+0x38>
 8009854:	4638      	mov	r0, r7
 8009856:	f7ff fd95 	bl	8009384 <_Balloc>
 800985a:	4605      	mov	r5, r0
 800985c:	b948      	cbnz	r0, 8009872 <__lshift+0x3e>
 800985e:	4602      	mov	r2, r0
 8009860:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009864:	4b27      	ldr	r3, [pc, #156]	; (8009904 <__lshift+0xd0>)
 8009866:	4828      	ldr	r0, [pc, #160]	; (8009908 <__lshift+0xd4>)
 8009868:	f000 fc8a 	bl	800a180 <__assert_func>
 800986c:	3101      	adds	r1, #1
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	e7ee      	b.n	8009850 <__lshift+0x1c>
 8009872:	2300      	movs	r3, #0
 8009874:	f100 0114 	add.w	r1, r0, #20
 8009878:	f100 0210 	add.w	r2, r0, #16
 800987c:	4618      	mov	r0, r3
 800987e:	4553      	cmp	r3, sl
 8009880:	db33      	blt.n	80098ea <__lshift+0xb6>
 8009882:	6920      	ldr	r0, [r4, #16]
 8009884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009888:	f104 0314 	add.w	r3, r4, #20
 800988c:	f019 091f 	ands.w	r9, r9, #31
 8009890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009898:	d02b      	beq.n	80098f2 <__lshift+0xbe>
 800989a:	468a      	mov	sl, r1
 800989c:	2200      	movs	r2, #0
 800989e:	f1c9 0e20 	rsb	lr, r9, #32
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	fa00 f009 	lsl.w	r0, r0, r9
 80098a8:	4302      	orrs	r2, r0
 80098aa:	f84a 2b04 	str.w	r2, [sl], #4
 80098ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b2:	459c      	cmp	ip, r3
 80098b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80098b8:	d8f3      	bhi.n	80098a2 <__lshift+0x6e>
 80098ba:	ebac 0304 	sub.w	r3, ip, r4
 80098be:	3b15      	subs	r3, #21
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	3304      	adds	r3, #4
 80098c6:	f104 0015 	add.w	r0, r4, #21
 80098ca:	4584      	cmp	ip, r0
 80098cc:	bf38      	it	cc
 80098ce:	2304      	movcc	r3, #4
 80098d0:	50ca      	str	r2, [r1, r3]
 80098d2:	b10a      	cbz	r2, 80098d8 <__lshift+0xa4>
 80098d4:	f108 0602 	add.w	r6, r8, #2
 80098d8:	3e01      	subs	r6, #1
 80098da:	4638      	mov	r0, r7
 80098dc:	4621      	mov	r1, r4
 80098de:	612e      	str	r6, [r5, #16]
 80098e0:	f7ff fd90 	bl	8009404 <_Bfree>
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ee:	3301      	adds	r3, #1
 80098f0:	e7c5      	b.n	800987e <__lshift+0x4a>
 80098f2:	3904      	subs	r1, #4
 80098f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f8:	459c      	cmp	ip, r3
 80098fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80098fe:	d8f9      	bhi.n	80098f4 <__lshift+0xc0>
 8009900:	e7ea      	b.n	80098d8 <__lshift+0xa4>
 8009902:	bf00      	nop
 8009904:	0800b7a4 	.word	0x0800b7a4
 8009908:	0800b834 	.word	0x0800b834

0800990c <__mcmp>:
 800990c:	4603      	mov	r3, r0
 800990e:	690a      	ldr	r2, [r1, #16]
 8009910:	6900      	ldr	r0, [r0, #16]
 8009912:	b530      	push	{r4, r5, lr}
 8009914:	1a80      	subs	r0, r0, r2
 8009916:	d10d      	bne.n	8009934 <__mcmp+0x28>
 8009918:	3314      	adds	r3, #20
 800991a:	3114      	adds	r1, #20
 800991c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800992c:	4295      	cmp	r5, r2
 800992e:	d002      	beq.n	8009936 <__mcmp+0x2a>
 8009930:	d304      	bcc.n	800993c <__mcmp+0x30>
 8009932:	2001      	movs	r0, #1
 8009934:	bd30      	pop	{r4, r5, pc}
 8009936:	42a3      	cmp	r3, r4
 8009938:	d3f4      	bcc.n	8009924 <__mcmp+0x18>
 800993a:	e7fb      	b.n	8009934 <__mcmp+0x28>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	e7f8      	b.n	8009934 <__mcmp+0x28>
	...

08009944 <__mdiff>:
 8009944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	4606      	mov	r6, r0
 800994c:	4611      	mov	r1, r2
 800994e:	4620      	mov	r0, r4
 8009950:	4692      	mov	sl, r2
 8009952:	f7ff ffdb 	bl	800990c <__mcmp>
 8009956:	1e05      	subs	r5, r0, #0
 8009958:	d111      	bne.n	800997e <__mdiff+0x3a>
 800995a:	4629      	mov	r1, r5
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff fd11 	bl	8009384 <_Balloc>
 8009962:	4602      	mov	r2, r0
 8009964:	b928      	cbnz	r0, 8009972 <__mdiff+0x2e>
 8009966:	f240 2132 	movw	r1, #562	; 0x232
 800996a:	4b3c      	ldr	r3, [pc, #240]	; (8009a5c <__mdiff+0x118>)
 800996c:	483c      	ldr	r0, [pc, #240]	; (8009a60 <__mdiff+0x11c>)
 800996e:	f000 fc07 	bl	800a180 <__assert_func>
 8009972:	2301      	movs	r3, #1
 8009974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009978:	4610      	mov	r0, r2
 800997a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997e:	bfa4      	itt	ge
 8009980:	4653      	movge	r3, sl
 8009982:	46a2      	movge	sl, r4
 8009984:	4630      	mov	r0, r6
 8009986:	f8da 1004 	ldr.w	r1, [sl, #4]
 800998a:	bfa6      	itte	ge
 800998c:	461c      	movge	r4, r3
 800998e:	2500      	movge	r5, #0
 8009990:	2501      	movlt	r5, #1
 8009992:	f7ff fcf7 	bl	8009384 <_Balloc>
 8009996:	4602      	mov	r2, r0
 8009998:	b918      	cbnz	r0, 80099a2 <__mdiff+0x5e>
 800999a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800999e:	4b2f      	ldr	r3, [pc, #188]	; (8009a5c <__mdiff+0x118>)
 80099a0:	e7e4      	b.n	800996c <__mdiff+0x28>
 80099a2:	f100 0814 	add.w	r8, r0, #20
 80099a6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80099aa:	60c5      	str	r5, [r0, #12]
 80099ac:	f04f 0c00 	mov.w	ip, #0
 80099b0:	f10a 0514 	add.w	r5, sl, #20
 80099b4:	f10a 0010 	add.w	r0, sl, #16
 80099b8:	46c2      	mov	sl, r8
 80099ba:	6926      	ldr	r6, [r4, #16]
 80099bc:	f104 0914 	add.w	r9, r4, #20
 80099c0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80099c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099c8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80099cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80099d0:	fa1f f18b 	uxth.w	r1, fp
 80099d4:	4461      	add	r1, ip
 80099d6:	fa1f fc83 	uxth.w	ip, r3
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	eba1 010c 	sub.w	r1, r1, ip
 80099e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80099e8:	b289      	uxth	r1, r1
 80099ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80099ee:	454e      	cmp	r6, r9
 80099f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80099f4:	f84a 3b04 	str.w	r3, [sl], #4
 80099f8:	d8e6      	bhi.n	80099c8 <__mdiff+0x84>
 80099fa:	1b33      	subs	r3, r6, r4
 80099fc:	3b15      	subs	r3, #21
 80099fe:	f023 0303 	bic.w	r3, r3, #3
 8009a02:	3415      	adds	r4, #21
 8009a04:	3304      	adds	r3, #4
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	bf38      	it	cc
 8009a0a:	2304      	movcc	r3, #4
 8009a0c:	441d      	add	r5, r3
 8009a0e:	4443      	add	r3, r8
 8009a10:	461e      	mov	r6, r3
 8009a12:	462c      	mov	r4, r5
 8009a14:	4574      	cmp	r4, lr
 8009a16:	d30e      	bcc.n	8009a36 <__mdiff+0xf2>
 8009a18:	f10e 0103 	add.w	r1, lr, #3
 8009a1c:	1b49      	subs	r1, r1, r5
 8009a1e:	f021 0103 	bic.w	r1, r1, #3
 8009a22:	3d03      	subs	r5, #3
 8009a24:	45ae      	cmp	lr, r5
 8009a26:	bf38      	it	cc
 8009a28:	2100      	movcc	r1, #0
 8009a2a:	4419      	add	r1, r3
 8009a2c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009a30:	b18b      	cbz	r3, 8009a56 <__mdiff+0x112>
 8009a32:	6117      	str	r7, [r2, #16]
 8009a34:	e7a0      	b.n	8009978 <__mdiff+0x34>
 8009a36:	f854 8b04 	ldr.w	r8, [r4], #4
 8009a3a:	fa1f f188 	uxth.w	r1, r8
 8009a3e:	4461      	add	r1, ip
 8009a40:	1408      	asrs	r0, r1, #16
 8009a42:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009a46:	b289      	uxth	r1, r1
 8009a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a50:	f846 1b04 	str.w	r1, [r6], #4
 8009a54:	e7de      	b.n	8009a14 <__mdiff+0xd0>
 8009a56:	3f01      	subs	r7, #1
 8009a58:	e7e8      	b.n	8009a2c <__mdiff+0xe8>
 8009a5a:	bf00      	nop
 8009a5c:	0800b7a4 	.word	0x0800b7a4
 8009a60:	0800b834 	.word	0x0800b834

08009a64 <__ulp>:
 8009a64:	4b11      	ldr	r3, [pc, #68]	; (8009aac <__ulp+0x48>)
 8009a66:	400b      	ands	r3, r1
 8009a68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd02      	ble.n	8009a76 <__ulp+0x12>
 8009a70:	2000      	movs	r0, #0
 8009a72:	4619      	mov	r1, r3
 8009a74:	4770      	bx	lr
 8009a76:	425b      	negs	r3, r3
 8009a78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009a7c:	f04f 0000 	mov.w	r0, #0
 8009a80:	f04f 0100 	mov.w	r1, #0
 8009a84:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a88:	da04      	bge.n	8009a94 <__ulp+0x30>
 8009a8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a8e:	fa43 f102 	asr.w	r1, r3, r2
 8009a92:	4770      	bx	lr
 8009a94:	f1a2 0314 	sub.w	r3, r2, #20
 8009a98:	2b1e      	cmp	r3, #30
 8009a9a:	bfd6      	itet	le
 8009a9c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009aa0:	2301      	movgt	r3, #1
 8009aa2:	fa22 f303 	lsrle.w	r3, r2, r3
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	7ff00000 	.word	0x7ff00000

08009ab0 <__b2d>:
 8009ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab4:	6907      	ldr	r7, [r0, #16]
 8009ab6:	f100 0914 	add.w	r9, r0, #20
 8009aba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009abe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009ac2:	f1a7 0804 	sub.w	r8, r7, #4
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff fd52 	bl	8009570 <__hi0bits>
 8009acc:	f1c0 0320 	rsb	r3, r0, #32
 8009ad0:	280a      	cmp	r0, #10
 8009ad2:	600b      	str	r3, [r1, #0]
 8009ad4:	491f      	ldr	r1, [pc, #124]	; (8009b54 <__b2d+0xa4>)
 8009ad6:	dc17      	bgt.n	8009b08 <__b2d+0x58>
 8009ad8:	45c1      	cmp	r9, r8
 8009ada:	bf28      	it	cs
 8009adc:	2200      	movcs	r2, #0
 8009ade:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ae2:	fa26 f30c 	lsr.w	r3, r6, ip
 8009ae6:	bf38      	it	cc
 8009ae8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009aec:	ea43 0501 	orr.w	r5, r3, r1
 8009af0:	f100 0315 	add.w	r3, r0, #21
 8009af4:	fa06 f303 	lsl.w	r3, r6, r3
 8009af8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009afc:	ea43 0402 	orr.w	r4, r3, r2
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b08:	45c1      	cmp	r9, r8
 8009b0a:	bf2e      	itee	cs
 8009b0c:	2200      	movcs	r2, #0
 8009b0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009b12:	f1a7 0808 	subcc.w	r8, r7, #8
 8009b16:	f1b0 030b 	subs.w	r3, r0, #11
 8009b1a:	d016      	beq.n	8009b4a <__b2d+0x9a>
 8009b1c:	f1c3 0720 	rsb	r7, r3, #32
 8009b20:	fa22 f107 	lsr.w	r1, r2, r7
 8009b24:	45c8      	cmp	r8, r9
 8009b26:	fa06 f603 	lsl.w	r6, r6, r3
 8009b2a:	ea46 0601 	orr.w	r6, r6, r1
 8009b2e:	bf94      	ite	ls
 8009b30:	2100      	movls	r1, #0
 8009b32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009b36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009b3a:	fa02 f003 	lsl.w	r0, r2, r3
 8009b3e:	40f9      	lsrs	r1, r7
 8009b40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b44:	ea40 0401 	orr.w	r4, r0, r1
 8009b48:	e7da      	b.n	8009b00 <__b2d+0x50>
 8009b4a:	4614      	mov	r4, r2
 8009b4c:	ea46 0501 	orr.w	r5, r6, r1
 8009b50:	e7d6      	b.n	8009b00 <__b2d+0x50>
 8009b52:	bf00      	nop
 8009b54:	3ff00000 	.word	0x3ff00000

08009b58 <__d2b>:
 8009b58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009b62:	4690      	mov	r8, r2
 8009b64:	461d      	mov	r5, r3
 8009b66:	f7ff fc0d 	bl	8009384 <_Balloc>
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	b930      	cbnz	r0, 8009b7c <__d2b+0x24>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	f240 310a 	movw	r1, #778	; 0x30a
 8009b74:	4b24      	ldr	r3, [pc, #144]	; (8009c08 <__d2b+0xb0>)
 8009b76:	4825      	ldr	r0, [pc, #148]	; (8009c0c <__d2b+0xb4>)
 8009b78:	f000 fb02 	bl	800a180 <__assert_func>
 8009b7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009b80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009b84:	bb2d      	cbnz	r5, 8009bd2 <__d2b+0x7a>
 8009b86:	9301      	str	r3, [sp, #4]
 8009b88:	f1b8 0300 	subs.w	r3, r8, #0
 8009b8c:	d026      	beq.n	8009bdc <__d2b+0x84>
 8009b8e:	4668      	mov	r0, sp
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	f7ff fd0d 	bl	80095b0 <__lo0bits>
 8009b96:	9900      	ldr	r1, [sp, #0]
 8009b98:	b1f0      	cbz	r0, 8009bd8 <__d2b+0x80>
 8009b9a:	9a01      	ldr	r2, [sp, #4]
 8009b9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	40c2      	lsrs	r2, r0
 8009ba8:	6163      	str	r3, [r4, #20]
 8009baa:	9201      	str	r2, [sp, #4]
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bf14      	ite	ne
 8009bb2:	2102      	movne	r1, #2
 8009bb4:	2101      	moveq	r1, #1
 8009bb6:	61a3      	str	r3, [r4, #24]
 8009bb8:	6121      	str	r1, [r4, #16]
 8009bba:	b1c5      	cbz	r5, 8009bee <__d2b+0x96>
 8009bbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009bc0:	4405      	add	r5, r0
 8009bc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bc6:	603d      	str	r5, [r7, #0]
 8009bc8:	6030      	str	r0, [r6, #0]
 8009bca:	4620      	mov	r0, r4
 8009bcc:	b002      	add	sp, #8
 8009bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bd6:	e7d6      	b.n	8009b86 <__d2b+0x2e>
 8009bd8:	6161      	str	r1, [r4, #20]
 8009bda:	e7e7      	b.n	8009bac <__d2b+0x54>
 8009bdc:	a801      	add	r0, sp, #4
 8009bde:	f7ff fce7 	bl	80095b0 <__lo0bits>
 8009be2:	2101      	movs	r1, #1
 8009be4:	9b01      	ldr	r3, [sp, #4]
 8009be6:	6121      	str	r1, [r4, #16]
 8009be8:	6163      	str	r3, [r4, #20]
 8009bea:	3020      	adds	r0, #32
 8009bec:	e7e5      	b.n	8009bba <__d2b+0x62>
 8009bee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009bf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bf6:	6038      	str	r0, [r7, #0]
 8009bf8:	6918      	ldr	r0, [r3, #16]
 8009bfa:	f7ff fcb9 	bl	8009570 <__hi0bits>
 8009bfe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009c02:	6031      	str	r1, [r6, #0]
 8009c04:	e7e1      	b.n	8009bca <__d2b+0x72>
 8009c06:	bf00      	nop
 8009c08:	0800b7a4 	.word	0x0800b7a4
 8009c0c:	0800b834 	.word	0x0800b834

08009c10 <__ratio>:
 8009c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	4688      	mov	r8, r1
 8009c16:	4669      	mov	r1, sp
 8009c18:	4681      	mov	r9, r0
 8009c1a:	f7ff ff49 	bl	8009ab0 <__b2d>
 8009c1e:	460f      	mov	r7, r1
 8009c20:	4604      	mov	r4, r0
 8009c22:	460d      	mov	r5, r1
 8009c24:	4640      	mov	r0, r8
 8009c26:	a901      	add	r1, sp, #4
 8009c28:	f7ff ff42 	bl	8009ab0 <__b2d>
 8009c2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c34:	468b      	mov	fp, r1
 8009c36:	eba3 0c02 	sub.w	ip, r3, r2
 8009c3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c3e:	1a9b      	subs	r3, r3, r2
 8009c40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bfd5      	itete	le
 8009c48:	460a      	movle	r2, r1
 8009c4a:	462a      	movgt	r2, r5
 8009c4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c50:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c54:	bfd8      	it	le
 8009c56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c5a:	465b      	mov	r3, fp
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	4639      	mov	r1, r7
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7f6 fd7b 	bl	800075c <__aeabi_ddiv>
 8009c66:	b003      	add	sp, #12
 8009c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c6c <__copybits>:
 8009c6c:	3901      	subs	r1, #1
 8009c6e:	b570      	push	{r4, r5, r6, lr}
 8009c70:	1149      	asrs	r1, r1, #5
 8009c72:	6914      	ldr	r4, [r2, #16]
 8009c74:	3101      	adds	r1, #1
 8009c76:	f102 0314 	add.w	r3, r2, #20
 8009c7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c82:	1f05      	subs	r5, r0, #4
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	d30c      	bcc.n	8009ca2 <__copybits+0x36>
 8009c88:	1aa3      	subs	r3, r4, r2
 8009c8a:	3b11      	subs	r3, #17
 8009c8c:	f023 0303 	bic.w	r3, r3, #3
 8009c90:	3211      	adds	r2, #17
 8009c92:	42a2      	cmp	r2, r4
 8009c94:	bf88      	it	hi
 8009c96:	2300      	movhi	r3, #0
 8009c98:	4418      	add	r0, r3
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	4288      	cmp	r0, r1
 8009c9e:	d305      	bcc.n	8009cac <__copybits+0x40>
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ca6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009caa:	e7eb      	b.n	8009c84 <__copybits+0x18>
 8009cac:	f840 3b04 	str.w	r3, [r0], #4
 8009cb0:	e7f4      	b.n	8009c9c <__copybits+0x30>

08009cb2 <__any_on>:
 8009cb2:	f100 0214 	add.w	r2, r0, #20
 8009cb6:	6900      	ldr	r0, [r0, #16]
 8009cb8:	114b      	asrs	r3, r1, #5
 8009cba:	4298      	cmp	r0, r3
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	db11      	blt.n	8009ce4 <__any_on+0x32>
 8009cc0:	dd0a      	ble.n	8009cd8 <__any_on+0x26>
 8009cc2:	f011 011f 	ands.w	r1, r1, #31
 8009cc6:	d007      	beq.n	8009cd8 <__any_on+0x26>
 8009cc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ccc:	fa24 f001 	lsr.w	r0, r4, r1
 8009cd0:	fa00 f101 	lsl.w	r1, r0, r1
 8009cd4:	428c      	cmp	r4, r1
 8009cd6:	d10b      	bne.n	8009cf0 <__any_on+0x3e>
 8009cd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d803      	bhi.n	8009ce8 <__any_on+0x36>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	bd10      	pop	{r4, pc}
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	e7f7      	b.n	8009cd8 <__any_on+0x26>
 8009ce8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d0f5      	beq.n	8009cdc <__any_on+0x2a>
 8009cf0:	2001      	movs	r0, #1
 8009cf2:	e7f6      	b.n	8009ce2 <__any_on+0x30>

08009cf4 <_calloc_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	fb02 f501 	mul.w	r5, r2, r1
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f000 f854 	bl	8009da8 <_malloc_r>
 8009d00:	4604      	mov	r4, r0
 8009d02:	b118      	cbz	r0, 8009d0c <_calloc_r+0x18>
 8009d04:	462a      	mov	r2, r5
 8009d06:	2100      	movs	r1, #0
 8009d08:	f7fc fbdc 	bl	80064c4 <memset>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}

08009d10 <_free_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4605      	mov	r5, r0
 8009d14:	2900      	cmp	r1, #0
 8009d16:	d043      	beq.n	8009da0 <_free_r+0x90>
 8009d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d1c:	1f0c      	subs	r4, r1, #4
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bfb8      	it	lt
 8009d22:	18e4      	addlt	r4, r4, r3
 8009d24:	f000 fa76 	bl	800a214 <__malloc_lock>
 8009d28:	4a1e      	ldr	r2, [pc, #120]	; (8009da4 <_free_r+0x94>)
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	b933      	cbnz	r3, 8009d3e <_free_r+0x2e>
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	6014      	str	r4, [r2, #0]
 8009d34:	4628      	mov	r0, r5
 8009d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d3a:	f000 ba71 	b.w	800a220 <__malloc_unlock>
 8009d3e:	42a3      	cmp	r3, r4
 8009d40:	d90a      	bls.n	8009d58 <_free_r+0x48>
 8009d42:	6821      	ldr	r1, [r4, #0]
 8009d44:	1862      	adds	r2, r4, r1
 8009d46:	4293      	cmp	r3, r2
 8009d48:	bf01      	itttt	eq
 8009d4a:	681a      	ldreq	r2, [r3, #0]
 8009d4c:	685b      	ldreq	r3, [r3, #4]
 8009d4e:	1852      	addeq	r2, r2, r1
 8009d50:	6022      	streq	r2, [r4, #0]
 8009d52:	6063      	str	r3, [r4, #4]
 8009d54:	6004      	str	r4, [r0, #0]
 8009d56:	e7ed      	b.n	8009d34 <_free_r+0x24>
 8009d58:	461a      	mov	r2, r3
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	b10b      	cbz	r3, 8009d62 <_free_r+0x52>
 8009d5e:	42a3      	cmp	r3, r4
 8009d60:	d9fa      	bls.n	8009d58 <_free_r+0x48>
 8009d62:	6811      	ldr	r1, [r2, #0]
 8009d64:	1850      	adds	r0, r2, r1
 8009d66:	42a0      	cmp	r0, r4
 8009d68:	d10b      	bne.n	8009d82 <_free_r+0x72>
 8009d6a:	6820      	ldr	r0, [r4, #0]
 8009d6c:	4401      	add	r1, r0
 8009d6e:	1850      	adds	r0, r2, r1
 8009d70:	4283      	cmp	r3, r0
 8009d72:	6011      	str	r1, [r2, #0]
 8009d74:	d1de      	bne.n	8009d34 <_free_r+0x24>
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	4401      	add	r1, r0
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	6053      	str	r3, [r2, #4]
 8009d80:	e7d8      	b.n	8009d34 <_free_r+0x24>
 8009d82:	d902      	bls.n	8009d8a <_free_r+0x7a>
 8009d84:	230c      	movs	r3, #12
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	e7d4      	b.n	8009d34 <_free_r+0x24>
 8009d8a:	6820      	ldr	r0, [r4, #0]
 8009d8c:	1821      	adds	r1, r4, r0
 8009d8e:	428b      	cmp	r3, r1
 8009d90:	bf01      	itttt	eq
 8009d92:	6819      	ldreq	r1, [r3, #0]
 8009d94:	685b      	ldreq	r3, [r3, #4]
 8009d96:	1809      	addeq	r1, r1, r0
 8009d98:	6021      	streq	r1, [r4, #0]
 8009d9a:	6063      	str	r3, [r4, #4]
 8009d9c:	6054      	str	r4, [r2, #4]
 8009d9e:	e7c9      	b.n	8009d34 <_free_r+0x24>
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
 8009da2:	bf00      	nop
 8009da4:	200006d8 	.word	0x200006d8

08009da8 <_malloc_r>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	1ccd      	adds	r5, r1, #3
 8009dac:	f025 0503 	bic.w	r5, r5, #3
 8009db0:	3508      	adds	r5, #8
 8009db2:	2d0c      	cmp	r5, #12
 8009db4:	bf38      	it	cc
 8009db6:	250c      	movcc	r5, #12
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	4606      	mov	r6, r0
 8009dbc:	db01      	blt.n	8009dc2 <_malloc_r+0x1a>
 8009dbe:	42a9      	cmp	r1, r5
 8009dc0:	d903      	bls.n	8009dca <_malloc_r+0x22>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	6033      	str	r3, [r6, #0]
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dca:	f000 fa23 	bl	800a214 <__malloc_lock>
 8009dce:	4921      	ldr	r1, [pc, #132]	; (8009e54 <_malloc_r+0xac>)
 8009dd0:	680a      	ldr	r2, [r1, #0]
 8009dd2:	4614      	mov	r4, r2
 8009dd4:	b99c      	cbnz	r4, 8009dfe <_malloc_r+0x56>
 8009dd6:	4f20      	ldr	r7, [pc, #128]	; (8009e58 <_malloc_r+0xb0>)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	b923      	cbnz	r3, 8009de6 <_malloc_r+0x3e>
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4630      	mov	r0, r6
 8009de0:	f000 f99e 	bl	800a120 <_sbrk_r>
 8009de4:	6038      	str	r0, [r7, #0]
 8009de6:	4629      	mov	r1, r5
 8009de8:	4630      	mov	r0, r6
 8009dea:	f000 f999 	bl	800a120 <_sbrk_r>
 8009dee:	1c43      	adds	r3, r0, #1
 8009df0:	d123      	bne.n	8009e3a <_malloc_r+0x92>
 8009df2:	230c      	movs	r3, #12
 8009df4:	4630      	mov	r0, r6
 8009df6:	6033      	str	r3, [r6, #0]
 8009df8:	f000 fa12 	bl	800a220 <__malloc_unlock>
 8009dfc:	e7e3      	b.n	8009dc6 <_malloc_r+0x1e>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	1b5b      	subs	r3, r3, r5
 8009e02:	d417      	bmi.n	8009e34 <_malloc_r+0x8c>
 8009e04:	2b0b      	cmp	r3, #11
 8009e06:	d903      	bls.n	8009e10 <_malloc_r+0x68>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	441c      	add	r4, r3
 8009e0c:	6025      	str	r5, [r4, #0]
 8009e0e:	e004      	b.n	8009e1a <_malloc_r+0x72>
 8009e10:	6863      	ldr	r3, [r4, #4]
 8009e12:	42a2      	cmp	r2, r4
 8009e14:	bf0c      	ite	eq
 8009e16:	600b      	streq	r3, [r1, #0]
 8009e18:	6053      	strne	r3, [r2, #4]
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f000 fa00 	bl	800a220 <__malloc_unlock>
 8009e20:	f104 000b 	add.w	r0, r4, #11
 8009e24:	1d23      	adds	r3, r4, #4
 8009e26:	f020 0007 	bic.w	r0, r0, #7
 8009e2a:	1ac2      	subs	r2, r0, r3
 8009e2c:	d0cc      	beq.n	8009dc8 <_malloc_r+0x20>
 8009e2e:	1a1b      	subs	r3, r3, r0
 8009e30:	50a3      	str	r3, [r4, r2]
 8009e32:	e7c9      	b.n	8009dc8 <_malloc_r+0x20>
 8009e34:	4622      	mov	r2, r4
 8009e36:	6864      	ldr	r4, [r4, #4]
 8009e38:	e7cc      	b.n	8009dd4 <_malloc_r+0x2c>
 8009e3a:	1cc4      	adds	r4, r0, #3
 8009e3c:	f024 0403 	bic.w	r4, r4, #3
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d0e3      	beq.n	8009e0c <_malloc_r+0x64>
 8009e44:	1a21      	subs	r1, r4, r0
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f96a 	bl	800a120 <_sbrk_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1dd      	bne.n	8009e0c <_malloc_r+0x64>
 8009e50:	e7cf      	b.n	8009df2 <_malloc_r+0x4a>
 8009e52:	bf00      	nop
 8009e54:	200006d8 	.word	0x200006d8
 8009e58:	200006dc 	.word	0x200006dc

08009e5c <__ssputs_r>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	688e      	ldr	r6, [r1, #8]
 8009e62:	4682      	mov	sl, r0
 8009e64:	429e      	cmp	r6, r3
 8009e66:	460c      	mov	r4, r1
 8009e68:	4690      	mov	r8, r2
 8009e6a:	461f      	mov	r7, r3
 8009e6c:	d838      	bhi.n	8009ee0 <__ssputs_r+0x84>
 8009e6e:	898a      	ldrh	r2, [r1, #12]
 8009e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e74:	d032      	beq.n	8009edc <__ssputs_r+0x80>
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	6909      	ldr	r1, [r1, #16]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	eba5 0901 	sub.w	r9, r5, r1
 8009e80:	6965      	ldr	r5, [r4, #20]
 8009e82:	444b      	add	r3, r9
 8009e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e8c:	106d      	asrs	r5, r5, #1
 8009e8e:	429d      	cmp	r5, r3
 8009e90:	bf38      	it	cc
 8009e92:	461d      	movcc	r5, r3
 8009e94:	0553      	lsls	r3, r2, #21
 8009e96:	d531      	bpl.n	8009efc <__ssputs_r+0xa0>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7ff ff85 	bl	8009da8 <_malloc_r>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	b950      	cbnz	r0, 8009eb8 <__ssputs_r+0x5c>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	f8ca 3000 	str.w	r3, [sl]
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb8:	464a      	mov	r2, r9
 8009eba:	6921      	ldr	r1, [r4, #16]
 8009ebc:	f7ff fa54 	bl	8009368 <memcpy>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	6126      	str	r6, [r4, #16]
 8009ece:	444e      	add	r6, r9
 8009ed0:	6026      	str	r6, [r4, #0]
 8009ed2:	463e      	mov	r6, r7
 8009ed4:	6165      	str	r5, [r4, #20]
 8009ed6:	eba5 0509 	sub.w	r5, r5, r9
 8009eda:	60a5      	str	r5, [r4, #8]
 8009edc:	42be      	cmp	r6, r7
 8009ede:	d900      	bls.n	8009ee2 <__ssputs_r+0x86>
 8009ee0:	463e      	mov	r6, r7
 8009ee2:	4632      	mov	r2, r6
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	6820      	ldr	r0, [r4, #0]
 8009ee8:	f000 f97a 	bl	800a1e0 <memmove>
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	1b9b      	subs	r3, r3, r6
 8009ef2:	4432      	add	r2, r6
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	6022      	str	r2, [r4, #0]
 8009efa:	e7db      	b.n	8009eb4 <__ssputs_r+0x58>
 8009efc:	462a      	mov	r2, r5
 8009efe:	f000 f995 	bl	800a22c <_realloc_r>
 8009f02:	4606      	mov	r6, r0
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1e1      	bne.n	8009ecc <__ssputs_r+0x70>
 8009f08:	4650      	mov	r0, sl
 8009f0a:	6921      	ldr	r1, [r4, #16]
 8009f0c:	f7ff ff00 	bl	8009d10 <_free_r>
 8009f10:	e7c7      	b.n	8009ea2 <__ssputs_r+0x46>
	...

08009f14 <_svfiprintf_r>:
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	4698      	mov	r8, r3
 8009f1a:	898b      	ldrh	r3, [r1, #12]
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	061b      	lsls	r3, r3, #24
 8009f20:	460d      	mov	r5, r1
 8009f22:	4614      	mov	r4, r2
 8009f24:	b09d      	sub	sp, #116	; 0x74
 8009f26:	d50e      	bpl.n	8009f46 <_svfiprintf_r+0x32>
 8009f28:	690b      	ldr	r3, [r1, #16]
 8009f2a:	b963      	cbnz	r3, 8009f46 <_svfiprintf_r+0x32>
 8009f2c:	2140      	movs	r1, #64	; 0x40
 8009f2e:	f7ff ff3b 	bl	8009da8 <_malloc_r>
 8009f32:	6028      	str	r0, [r5, #0]
 8009f34:	6128      	str	r0, [r5, #16]
 8009f36:	b920      	cbnz	r0, 8009f42 <_svfiprintf_r+0x2e>
 8009f38:	230c      	movs	r3, #12
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e0d1      	b.n	800a0e6 <_svfiprintf_r+0x1d2>
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	616b      	str	r3, [r5, #20]
 8009f46:	2300      	movs	r3, #0
 8009f48:	9309      	str	r3, [sp, #36]	; 0x24
 8009f4a:	2320      	movs	r3, #32
 8009f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f50:	2330      	movs	r3, #48	; 0x30
 8009f52:	f04f 0901 	mov.w	r9, #1
 8009f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a100 <_svfiprintf_r+0x1ec>
 8009f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f62:	4623      	mov	r3, r4
 8009f64:	469a      	mov	sl, r3
 8009f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f6a:	b10a      	cbz	r2, 8009f70 <_svfiprintf_r+0x5c>
 8009f6c:	2a25      	cmp	r2, #37	; 0x25
 8009f6e:	d1f9      	bne.n	8009f64 <_svfiprintf_r+0x50>
 8009f70:	ebba 0b04 	subs.w	fp, sl, r4
 8009f74:	d00b      	beq.n	8009f8e <_svfiprintf_r+0x7a>
 8009f76:	465b      	mov	r3, fp
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f7ff ff6d 	bl	8009e5c <__ssputs_r>
 8009f82:	3001      	adds	r0, #1
 8009f84:	f000 80aa 	beq.w	800a0dc <_svfiprintf_r+0x1c8>
 8009f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f8a:	445a      	add	r2, fp
 8009f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 80a2 	beq.w	800a0dc <_svfiprintf_r+0x1c8>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fa2:	f10a 0a01 	add.w	sl, sl, #1
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fae:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb0:	4654      	mov	r4, sl
 8009fb2:	2205      	movs	r2, #5
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	4851      	ldr	r0, [pc, #324]	; (800a100 <_svfiprintf_r+0x1ec>)
 8009fba:	f7ff f9c7 	bl	800934c <memchr>
 8009fbe:	9a04      	ldr	r2, [sp, #16]
 8009fc0:	b9d8      	cbnz	r0, 8009ffa <_svfiprintf_r+0xe6>
 8009fc2:	06d0      	lsls	r0, r2, #27
 8009fc4:	bf44      	itt	mi
 8009fc6:	2320      	movmi	r3, #32
 8009fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fcc:	0711      	lsls	r1, r2, #28
 8009fce:	bf44      	itt	mi
 8009fd0:	232b      	movmi	r3, #43	; 0x2b
 8009fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fda:	2b2a      	cmp	r3, #42	; 0x2a
 8009fdc:	d015      	beq.n	800a00a <_svfiprintf_r+0xf6>
 8009fde:	4654      	mov	r4, sl
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	f04f 0c0a 	mov.w	ip, #10
 8009fe6:	9a07      	ldr	r2, [sp, #28]
 8009fe8:	4621      	mov	r1, r4
 8009fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fee:	3b30      	subs	r3, #48	; 0x30
 8009ff0:	2b09      	cmp	r3, #9
 8009ff2:	d94e      	bls.n	800a092 <_svfiprintf_r+0x17e>
 8009ff4:	b1b0      	cbz	r0, 800a024 <_svfiprintf_r+0x110>
 8009ff6:	9207      	str	r2, [sp, #28]
 8009ff8:	e014      	b.n	800a024 <_svfiprintf_r+0x110>
 8009ffa:	eba0 0308 	sub.w	r3, r0, r8
 8009ffe:	fa09 f303 	lsl.w	r3, r9, r3
 800a002:	4313      	orrs	r3, r2
 800a004:	46a2      	mov	sl, r4
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	e7d2      	b.n	8009fb0 <_svfiprintf_r+0x9c>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	1d19      	adds	r1, r3, #4
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	9103      	str	r1, [sp, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	bfbb      	ittet	lt
 800a016:	425b      	neglt	r3, r3
 800a018:	f042 0202 	orrlt.w	r2, r2, #2
 800a01c:	9307      	strge	r3, [sp, #28]
 800a01e:	9307      	strlt	r3, [sp, #28]
 800a020:	bfb8      	it	lt
 800a022:	9204      	strlt	r2, [sp, #16]
 800a024:	7823      	ldrb	r3, [r4, #0]
 800a026:	2b2e      	cmp	r3, #46	; 0x2e
 800a028:	d10c      	bne.n	800a044 <_svfiprintf_r+0x130>
 800a02a:	7863      	ldrb	r3, [r4, #1]
 800a02c:	2b2a      	cmp	r3, #42	; 0x2a
 800a02e:	d135      	bne.n	800a09c <_svfiprintf_r+0x188>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	3402      	adds	r4, #2
 800a034:	1d1a      	adds	r2, r3, #4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	9203      	str	r2, [sp, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	bfb8      	it	lt
 800a03e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a042:	9305      	str	r3, [sp, #20]
 800a044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a110 <_svfiprintf_r+0x1fc>
 800a048:	2203      	movs	r2, #3
 800a04a:	4650      	mov	r0, sl
 800a04c:	7821      	ldrb	r1, [r4, #0]
 800a04e:	f7ff f97d 	bl	800934c <memchr>
 800a052:	b140      	cbz	r0, 800a066 <_svfiprintf_r+0x152>
 800a054:	2340      	movs	r3, #64	; 0x40
 800a056:	eba0 000a 	sub.w	r0, r0, sl
 800a05a:	fa03 f000 	lsl.w	r0, r3, r0
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	3401      	adds	r4, #1
 800a062:	4303      	orrs	r3, r0
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06a:	2206      	movs	r2, #6
 800a06c:	4825      	ldr	r0, [pc, #148]	; (800a104 <_svfiprintf_r+0x1f0>)
 800a06e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a072:	f7ff f96b 	bl	800934c <memchr>
 800a076:	2800      	cmp	r0, #0
 800a078:	d038      	beq.n	800a0ec <_svfiprintf_r+0x1d8>
 800a07a:	4b23      	ldr	r3, [pc, #140]	; (800a108 <_svfiprintf_r+0x1f4>)
 800a07c:	bb1b      	cbnz	r3, 800a0c6 <_svfiprintf_r+0x1b2>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	3307      	adds	r3, #7
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	3308      	adds	r3, #8
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08c:	4433      	add	r3, r6
 800a08e:	9309      	str	r3, [sp, #36]	; 0x24
 800a090:	e767      	b.n	8009f62 <_svfiprintf_r+0x4e>
 800a092:	460c      	mov	r4, r1
 800a094:	2001      	movs	r0, #1
 800a096:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09a:	e7a5      	b.n	8009fe8 <_svfiprintf_r+0xd4>
 800a09c:	2300      	movs	r3, #0
 800a09e:	f04f 0c0a 	mov.w	ip, #10
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	3401      	adds	r4, #1
 800a0a6:	9305      	str	r3, [sp, #20]
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ae:	3a30      	subs	r2, #48	; 0x30
 800a0b0:	2a09      	cmp	r2, #9
 800a0b2:	d903      	bls.n	800a0bc <_svfiprintf_r+0x1a8>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0c5      	beq.n	800a044 <_svfiprintf_r+0x130>
 800a0b8:	9105      	str	r1, [sp, #20]
 800a0ba:	e7c3      	b.n	800a044 <_svfiprintf_r+0x130>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	2301      	movs	r3, #1
 800a0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c4:	e7f0      	b.n	800a0a8 <_svfiprintf_r+0x194>
 800a0c6:	ab03      	add	r3, sp, #12
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <_svfiprintf_r+0x1f8>)
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	f7fc fa9d 	bl	8006610 <_printf_float>
 800a0d6:	1c42      	adds	r2, r0, #1
 800a0d8:	4606      	mov	r6, r0
 800a0da:	d1d6      	bne.n	800a08a <_svfiprintf_r+0x176>
 800a0dc:	89ab      	ldrh	r3, [r5, #12]
 800a0de:	065b      	lsls	r3, r3, #25
 800a0e0:	f53f af2c 	bmi.w	8009f3c <_svfiprintf_r+0x28>
 800a0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e6:	b01d      	add	sp, #116	; 0x74
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	ab03      	add	r3, sp, #12
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <_svfiprintf_r+0x1f8>)
 800a0f6:	a904      	add	r1, sp, #16
 800a0f8:	f7fc fd26 	bl	8006b48 <_printf_i>
 800a0fc:	e7eb      	b.n	800a0d6 <_svfiprintf_r+0x1c2>
 800a0fe:	bf00      	nop
 800a100:	0800b994 	.word	0x0800b994
 800a104:	0800b99e 	.word	0x0800b99e
 800a108:	08006611 	.word	0x08006611
 800a10c:	08009e5d 	.word	0x08009e5d
 800a110:	0800b99a 	.word	0x0800b99a

0800a114 <nan>:
 800a114:	2000      	movs	r0, #0
 800a116:	4901      	ldr	r1, [pc, #4]	; (800a11c <nan+0x8>)
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	7ff80000 	.word	0x7ff80000

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	2300      	movs	r3, #0
 800a124:	4d05      	ldr	r5, [pc, #20]	; (800a13c <_sbrk_r+0x1c>)
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7f8 fcb4 	bl	8002a98 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200007d8 	.word	0x200007d8

0800a140 <strncmp>:
 800a140:	b510      	push	{r4, lr}
 800a142:	b16a      	cbz	r2, 800a160 <strncmp+0x20>
 800a144:	3901      	subs	r1, #1
 800a146:	1884      	adds	r4, r0, r2
 800a148:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a14c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a150:	4293      	cmp	r3, r2
 800a152:	d103      	bne.n	800a15c <strncmp+0x1c>
 800a154:	42a0      	cmp	r0, r4
 800a156:	d001      	beq.n	800a15c <strncmp+0x1c>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1f5      	bne.n	800a148 <strncmp+0x8>
 800a15c:	1a98      	subs	r0, r3, r2
 800a15e:	bd10      	pop	{r4, pc}
 800a160:	4610      	mov	r0, r2
 800a162:	e7fc      	b.n	800a15e <strncmp+0x1e>

0800a164 <__ascii_wctomb>:
 800a164:	4603      	mov	r3, r0
 800a166:	4608      	mov	r0, r1
 800a168:	b141      	cbz	r1, 800a17c <__ascii_wctomb+0x18>
 800a16a:	2aff      	cmp	r2, #255	; 0xff
 800a16c:	d904      	bls.n	800a178 <__ascii_wctomb+0x14>
 800a16e:	228a      	movs	r2, #138	; 0x8a
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	4770      	bx	lr
 800a178:	2001      	movs	r0, #1
 800a17a:	700a      	strb	r2, [r1, #0]
 800a17c:	4770      	bx	lr
	...

0800a180 <__assert_func>:
 800a180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a182:	4614      	mov	r4, r2
 800a184:	461a      	mov	r2, r3
 800a186:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <__assert_func+0x2c>)
 800a188:	4605      	mov	r5, r0
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68d8      	ldr	r0, [r3, #12]
 800a18e:	b14c      	cbz	r4, 800a1a4 <__assert_func+0x24>
 800a190:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <__assert_func+0x30>)
 800a192:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a196:	9100      	str	r1, [sp, #0]
 800a198:	462b      	mov	r3, r5
 800a19a:	4906      	ldr	r1, [pc, #24]	; (800a1b4 <__assert_func+0x34>)
 800a19c:	f000 f80e 	bl	800a1bc <fiprintf>
 800a1a0:	f000 fa82 	bl	800a6a8 <abort>
 800a1a4:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <__assert_func+0x38>)
 800a1a6:	461c      	mov	r4, r3
 800a1a8:	e7f3      	b.n	800a192 <__assert_func+0x12>
 800a1aa:	bf00      	nop
 800a1ac:	2000006c 	.word	0x2000006c
 800a1b0:	0800b9a5 	.word	0x0800b9a5
 800a1b4:	0800b9b2 	.word	0x0800b9b2
 800a1b8:	0800b9e0 	.word	0x0800b9e0

0800a1bc <fiprintf>:
 800a1bc:	b40e      	push	{r1, r2, r3}
 800a1be:	b503      	push	{r0, r1, lr}
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	4805      	ldr	r0, [pc, #20]	; (800a1dc <fiprintf+0x20>)
 800a1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ca:	6800      	ldr	r0, [r0, #0]
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f000 f87b 	bl	800a2c8 <_vfiprintf_r>
 800a1d2:	b002      	add	sp, #8
 800a1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d8:	b003      	add	sp, #12
 800a1da:	4770      	bx	lr
 800a1dc:	2000006c 	.word	0x2000006c

0800a1e0 <memmove>:
 800a1e0:	4288      	cmp	r0, r1
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	eb01 0402 	add.w	r4, r1, r2
 800a1e8:	d902      	bls.n	800a1f0 <memmove+0x10>
 800a1ea:	4284      	cmp	r4, r0
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	d807      	bhi.n	800a200 <memmove+0x20>
 800a1f0:	1e43      	subs	r3, r0, #1
 800a1f2:	42a1      	cmp	r1, r4
 800a1f4:	d008      	beq.n	800a208 <memmove+0x28>
 800a1f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1fe:	e7f8      	b.n	800a1f2 <memmove+0x12>
 800a200:	4601      	mov	r1, r0
 800a202:	4402      	add	r2, r0
 800a204:	428a      	cmp	r2, r1
 800a206:	d100      	bne.n	800a20a <memmove+0x2a>
 800a208:	bd10      	pop	{r4, pc}
 800a20a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a20e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a212:	e7f7      	b.n	800a204 <memmove+0x24>

0800a214 <__malloc_lock>:
 800a214:	4801      	ldr	r0, [pc, #4]	; (800a21c <__malloc_lock+0x8>)
 800a216:	f000 bc07 	b.w	800aa28 <__retarget_lock_acquire_recursive>
 800a21a:	bf00      	nop
 800a21c:	200007e0 	.word	0x200007e0

0800a220 <__malloc_unlock>:
 800a220:	4801      	ldr	r0, [pc, #4]	; (800a228 <__malloc_unlock+0x8>)
 800a222:	f000 bc02 	b.w	800aa2a <__retarget_lock_release_recursive>
 800a226:	bf00      	nop
 800a228:	200007e0 	.word	0x200007e0

0800a22c <_realloc_r>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	4607      	mov	r7, r0
 800a230:	4614      	mov	r4, r2
 800a232:	460e      	mov	r6, r1
 800a234:	b921      	cbnz	r1, 800a240 <_realloc_r+0x14>
 800a236:	4611      	mov	r1, r2
 800a238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a23c:	f7ff bdb4 	b.w	8009da8 <_malloc_r>
 800a240:	b922      	cbnz	r2, 800a24c <_realloc_r+0x20>
 800a242:	f7ff fd65 	bl	8009d10 <_free_r>
 800a246:	4625      	mov	r5, r4
 800a248:	4628      	mov	r0, r5
 800a24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24c:	f000 fc52 	bl	800aaf4 <_malloc_usable_size_r>
 800a250:	42a0      	cmp	r0, r4
 800a252:	d20f      	bcs.n	800a274 <_realloc_r+0x48>
 800a254:	4621      	mov	r1, r4
 800a256:	4638      	mov	r0, r7
 800a258:	f7ff fda6 	bl	8009da8 <_malloc_r>
 800a25c:	4605      	mov	r5, r0
 800a25e:	2800      	cmp	r0, #0
 800a260:	d0f2      	beq.n	800a248 <_realloc_r+0x1c>
 800a262:	4631      	mov	r1, r6
 800a264:	4622      	mov	r2, r4
 800a266:	f7ff f87f 	bl	8009368 <memcpy>
 800a26a:	4631      	mov	r1, r6
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff fd4f 	bl	8009d10 <_free_r>
 800a272:	e7e9      	b.n	800a248 <_realloc_r+0x1c>
 800a274:	4635      	mov	r5, r6
 800a276:	e7e7      	b.n	800a248 <_realloc_r+0x1c>

0800a278 <__sfputc_r>:
 800a278:	6893      	ldr	r3, [r2, #8]
 800a27a:	b410      	push	{r4}
 800a27c:	3b01      	subs	r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	6093      	str	r3, [r2, #8]
 800a282:	da07      	bge.n	800a294 <__sfputc_r+0x1c>
 800a284:	6994      	ldr	r4, [r2, #24]
 800a286:	42a3      	cmp	r3, r4
 800a288:	db01      	blt.n	800a28e <__sfputc_r+0x16>
 800a28a:	290a      	cmp	r1, #10
 800a28c:	d102      	bne.n	800a294 <__sfputc_r+0x1c>
 800a28e:	bc10      	pop	{r4}
 800a290:	f000 b94a 	b.w	800a528 <__swbuf_r>
 800a294:	6813      	ldr	r3, [r2, #0]
 800a296:	1c58      	adds	r0, r3, #1
 800a298:	6010      	str	r0, [r2, #0]
 800a29a:	7019      	strb	r1, [r3, #0]
 800a29c:	4608      	mov	r0, r1
 800a29e:	bc10      	pop	{r4}
 800a2a0:	4770      	bx	lr

0800a2a2 <__sfputs_r>:
 800a2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	18d5      	adds	r5, r2, r3
 800a2ac:	42ac      	cmp	r4, r5
 800a2ae:	d101      	bne.n	800a2b4 <__sfputs_r+0x12>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e007      	b.n	800a2c4 <__sfputs_r+0x22>
 800a2b4:	463a      	mov	r2, r7
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2bc:	f7ff ffdc 	bl	800a278 <__sfputc_r>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d1f3      	bne.n	800a2ac <__sfputs_r+0xa>
 800a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2c8 <_vfiprintf_r>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	4614      	mov	r4, r2
 800a2d0:	4698      	mov	r8, r3
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	b09d      	sub	sp, #116	; 0x74
 800a2d6:	b118      	cbz	r0, 800a2e0 <_vfiprintf_r+0x18>
 800a2d8:	6983      	ldr	r3, [r0, #24]
 800a2da:	b90b      	cbnz	r3, 800a2e0 <_vfiprintf_r+0x18>
 800a2dc:	f000 fb06 	bl	800a8ec <__sinit>
 800a2e0:	4b89      	ldr	r3, [pc, #548]	; (800a508 <_vfiprintf_r+0x240>)
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	d11b      	bne.n	800a31e <_vfiprintf_r+0x56>
 800a2e6:	6875      	ldr	r5, [r6, #4]
 800a2e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ea:	07d9      	lsls	r1, r3, #31
 800a2ec:	d405      	bmi.n	800a2fa <_vfiprintf_r+0x32>
 800a2ee:	89ab      	ldrh	r3, [r5, #12]
 800a2f0:	059a      	lsls	r2, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_vfiprintf_r+0x32>
 800a2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2f6:	f000 fb97 	bl	800aa28 <__retarget_lock_acquire_recursive>
 800a2fa:	89ab      	ldrh	r3, [r5, #12]
 800a2fc:	071b      	lsls	r3, r3, #28
 800a2fe:	d501      	bpl.n	800a304 <_vfiprintf_r+0x3c>
 800a300:	692b      	ldr	r3, [r5, #16]
 800a302:	b9eb      	cbnz	r3, 800a340 <_vfiprintf_r+0x78>
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f000 f960 	bl	800a5cc <__swsetup_r>
 800a30c:	b1c0      	cbz	r0, 800a340 <_vfiprintf_r+0x78>
 800a30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a310:	07dc      	lsls	r4, r3, #31
 800a312:	d50e      	bpl.n	800a332 <_vfiprintf_r+0x6a>
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	b01d      	add	sp, #116	; 0x74
 800a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31e:	4b7b      	ldr	r3, [pc, #492]	; (800a50c <_vfiprintf_r+0x244>)
 800a320:	429d      	cmp	r5, r3
 800a322:	d101      	bne.n	800a328 <_vfiprintf_r+0x60>
 800a324:	68b5      	ldr	r5, [r6, #8]
 800a326:	e7df      	b.n	800a2e8 <_vfiprintf_r+0x20>
 800a328:	4b79      	ldr	r3, [pc, #484]	; (800a510 <_vfiprintf_r+0x248>)
 800a32a:	429d      	cmp	r5, r3
 800a32c:	bf08      	it	eq
 800a32e:	68f5      	ldreq	r5, [r6, #12]
 800a330:	e7da      	b.n	800a2e8 <_vfiprintf_r+0x20>
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	0598      	lsls	r0, r3, #22
 800a336:	d4ed      	bmi.n	800a314 <_vfiprintf_r+0x4c>
 800a338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33a:	f000 fb76 	bl	800aa2a <__retarget_lock_release_recursive>
 800a33e:	e7e9      	b.n	800a314 <_vfiprintf_r+0x4c>
 800a340:	2300      	movs	r3, #0
 800a342:	9309      	str	r3, [sp, #36]	; 0x24
 800a344:	2320      	movs	r3, #32
 800a346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a34a:	2330      	movs	r3, #48	; 0x30
 800a34c:	f04f 0901 	mov.w	r9, #1
 800a350:	f8cd 800c 	str.w	r8, [sp, #12]
 800a354:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a514 <_vfiprintf_r+0x24c>
 800a358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a35c:	4623      	mov	r3, r4
 800a35e:	469a      	mov	sl, r3
 800a360:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a364:	b10a      	cbz	r2, 800a36a <_vfiprintf_r+0xa2>
 800a366:	2a25      	cmp	r2, #37	; 0x25
 800a368:	d1f9      	bne.n	800a35e <_vfiprintf_r+0x96>
 800a36a:	ebba 0b04 	subs.w	fp, sl, r4
 800a36e:	d00b      	beq.n	800a388 <_vfiprintf_r+0xc0>
 800a370:	465b      	mov	r3, fp
 800a372:	4622      	mov	r2, r4
 800a374:	4629      	mov	r1, r5
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff ff93 	bl	800a2a2 <__sfputs_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	f000 80aa 	beq.w	800a4d6 <_vfiprintf_r+0x20e>
 800a382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a384:	445a      	add	r2, fp
 800a386:	9209      	str	r2, [sp, #36]	; 0x24
 800a388:	f89a 3000 	ldrb.w	r3, [sl]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 80a2 	beq.w	800a4d6 <_vfiprintf_r+0x20e>
 800a392:	2300      	movs	r3, #0
 800a394:	f04f 32ff 	mov.w	r2, #4294967295
 800a398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a39c:	f10a 0a01 	add.w	sl, sl, #1
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	9307      	str	r3, [sp, #28]
 800a3a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3a8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3aa:	4654      	mov	r4, sl
 800a3ac:	2205      	movs	r2, #5
 800a3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b2:	4858      	ldr	r0, [pc, #352]	; (800a514 <_vfiprintf_r+0x24c>)
 800a3b4:	f7fe ffca 	bl	800934c <memchr>
 800a3b8:	9a04      	ldr	r2, [sp, #16]
 800a3ba:	b9d8      	cbnz	r0, 800a3f4 <_vfiprintf_r+0x12c>
 800a3bc:	06d1      	lsls	r1, r2, #27
 800a3be:	bf44      	itt	mi
 800a3c0:	2320      	movmi	r3, #32
 800a3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3c6:	0713      	lsls	r3, r2, #28
 800a3c8:	bf44      	itt	mi
 800a3ca:	232b      	movmi	r3, #43	; 0x2b
 800a3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d6:	d015      	beq.n	800a404 <_vfiprintf_r+0x13c>
 800a3d8:	4654      	mov	r4, sl
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f04f 0c0a 	mov.w	ip, #10
 800a3e0:	9a07      	ldr	r2, [sp, #28]
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e8:	3b30      	subs	r3, #48	; 0x30
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d94e      	bls.n	800a48c <_vfiprintf_r+0x1c4>
 800a3ee:	b1b0      	cbz	r0, 800a41e <_vfiprintf_r+0x156>
 800a3f0:	9207      	str	r2, [sp, #28]
 800a3f2:	e014      	b.n	800a41e <_vfiprintf_r+0x156>
 800a3f4:	eba0 0308 	sub.w	r3, r0, r8
 800a3f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	46a2      	mov	sl, r4
 800a400:	9304      	str	r3, [sp, #16]
 800a402:	e7d2      	b.n	800a3aa <_vfiprintf_r+0xe2>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	1d19      	adds	r1, r3, #4
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	bfbb      	ittet	lt
 800a410:	425b      	neglt	r3, r3
 800a412:	f042 0202 	orrlt.w	r2, r2, #2
 800a416:	9307      	strge	r3, [sp, #28]
 800a418:	9307      	strlt	r3, [sp, #28]
 800a41a:	bfb8      	it	lt
 800a41c:	9204      	strlt	r2, [sp, #16]
 800a41e:	7823      	ldrb	r3, [r4, #0]
 800a420:	2b2e      	cmp	r3, #46	; 0x2e
 800a422:	d10c      	bne.n	800a43e <_vfiprintf_r+0x176>
 800a424:	7863      	ldrb	r3, [r4, #1]
 800a426:	2b2a      	cmp	r3, #42	; 0x2a
 800a428:	d135      	bne.n	800a496 <_vfiprintf_r+0x1ce>
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	3402      	adds	r4, #2
 800a42e:	1d1a      	adds	r2, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	9203      	str	r2, [sp, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfb8      	it	lt
 800a438:	f04f 33ff 	movlt.w	r3, #4294967295
 800a43c:	9305      	str	r3, [sp, #20]
 800a43e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a524 <_vfiprintf_r+0x25c>
 800a442:	2203      	movs	r2, #3
 800a444:	4650      	mov	r0, sl
 800a446:	7821      	ldrb	r1, [r4, #0]
 800a448:	f7fe ff80 	bl	800934c <memchr>
 800a44c:	b140      	cbz	r0, 800a460 <_vfiprintf_r+0x198>
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	eba0 000a 	sub.w	r0, r0, sl
 800a454:	fa03 f000 	lsl.w	r0, r3, r0
 800a458:	9b04      	ldr	r3, [sp, #16]
 800a45a:	3401      	adds	r4, #1
 800a45c:	4303      	orrs	r3, r0
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a464:	2206      	movs	r2, #6
 800a466:	482c      	ldr	r0, [pc, #176]	; (800a518 <_vfiprintf_r+0x250>)
 800a468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a46c:	f7fe ff6e 	bl	800934c <memchr>
 800a470:	2800      	cmp	r0, #0
 800a472:	d03f      	beq.n	800a4f4 <_vfiprintf_r+0x22c>
 800a474:	4b29      	ldr	r3, [pc, #164]	; (800a51c <_vfiprintf_r+0x254>)
 800a476:	bb1b      	cbnz	r3, 800a4c0 <_vfiprintf_r+0x1f8>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	3307      	adds	r3, #7
 800a47c:	f023 0307 	bic.w	r3, r3, #7
 800a480:	3308      	adds	r3, #8
 800a482:	9303      	str	r3, [sp, #12]
 800a484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a486:	443b      	add	r3, r7
 800a488:	9309      	str	r3, [sp, #36]	; 0x24
 800a48a:	e767      	b.n	800a35c <_vfiprintf_r+0x94>
 800a48c:	460c      	mov	r4, r1
 800a48e:	2001      	movs	r0, #1
 800a490:	fb0c 3202 	mla	r2, ip, r2, r3
 800a494:	e7a5      	b.n	800a3e2 <_vfiprintf_r+0x11a>
 800a496:	2300      	movs	r3, #0
 800a498:	f04f 0c0a 	mov.w	ip, #10
 800a49c:	4619      	mov	r1, r3
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9305      	str	r3, [sp, #20]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4a8:	3a30      	subs	r2, #48	; 0x30
 800a4aa:	2a09      	cmp	r2, #9
 800a4ac:	d903      	bls.n	800a4b6 <_vfiprintf_r+0x1ee>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0c5      	beq.n	800a43e <_vfiprintf_r+0x176>
 800a4b2:	9105      	str	r1, [sp, #20]
 800a4b4:	e7c3      	b.n	800a43e <_vfiprintf_r+0x176>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4be:	e7f0      	b.n	800a4a2 <_vfiprintf_r+0x1da>
 800a4c0:	ab03      	add	r3, sp, #12
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4b15      	ldr	r3, [pc, #84]	; (800a520 <_vfiprintf_r+0x258>)
 800a4ca:	a904      	add	r1, sp, #16
 800a4cc:	f7fc f8a0 	bl	8006610 <_printf_float>
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	1c78      	adds	r0, r7, #1
 800a4d4:	d1d6      	bne.n	800a484 <_vfiprintf_r+0x1bc>
 800a4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4d8:	07d9      	lsls	r1, r3, #31
 800a4da:	d405      	bmi.n	800a4e8 <_vfiprintf_r+0x220>
 800a4dc:	89ab      	ldrh	r3, [r5, #12]
 800a4de:	059a      	lsls	r2, r3, #22
 800a4e0:	d402      	bmi.n	800a4e8 <_vfiprintf_r+0x220>
 800a4e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e4:	f000 faa1 	bl	800aa2a <__retarget_lock_release_recursive>
 800a4e8:	89ab      	ldrh	r3, [r5, #12]
 800a4ea:	065b      	lsls	r3, r3, #25
 800a4ec:	f53f af12 	bmi.w	800a314 <_vfiprintf_r+0x4c>
 800a4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f2:	e711      	b.n	800a318 <_vfiprintf_r+0x50>
 800a4f4:	ab03      	add	r3, sp, #12
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	4b08      	ldr	r3, [pc, #32]	; (800a520 <_vfiprintf_r+0x258>)
 800a4fe:	a904      	add	r1, sp, #16
 800a500:	f7fc fb22 	bl	8006b48 <_printf_i>
 800a504:	e7e4      	b.n	800a4d0 <_vfiprintf_r+0x208>
 800a506:	bf00      	nop
 800a508:	0800ba04 	.word	0x0800ba04
 800a50c:	0800ba24 	.word	0x0800ba24
 800a510:	0800b9e4 	.word	0x0800b9e4
 800a514:	0800b994 	.word	0x0800b994
 800a518:	0800b99e 	.word	0x0800b99e
 800a51c:	08006611 	.word	0x08006611
 800a520:	0800a2a3 	.word	0x0800a2a3
 800a524:	0800b99a 	.word	0x0800b99a

0800a528 <__swbuf_r>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	460e      	mov	r6, r1
 800a52c:	4614      	mov	r4, r2
 800a52e:	4605      	mov	r5, r0
 800a530:	b118      	cbz	r0, 800a53a <__swbuf_r+0x12>
 800a532:	6983      	ldr	r3, [r0, #24]
 800a534:	b90b      	cbnz	r3, 800a53a <__swbuf_r+0x12>
 800a536:	f000 f9d9 	bl	800a8ec <__sinit>
 800a53a:	4b21      	ldr	r3, [pc, #132]	; (800a5c0 <__swbuf_r+0x98>)
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d12b      	bne.n	800a598 <__swbuf_r+0x70>
 800a540:	686c      	ldr	r4, [r5, #4]
 800a542:	69a3      	ldr	r3, [r4, #24]
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	071a      	lsls	r2, r3, #28
 800a54a:	d52f      	bpl.n	800a5ac <__swbuf_r+0x84>
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	b36b      	cbz	r3, 800a5ac <__swbuf_r+0x84>
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	6820      	ldr	r0, [r4, #0]
 800a554:	b2f6      	uxtb	r6, r6
 800a556:	1ac0      	subs	r0, r0, r3
 800a558:	6963      	ldr	r3, [r4, #20]
 800a55a:	4637      	mov	r7, r6
 800a55c:	4283      	cmp	r3, r0
 800a55e:	dc04      	bgt.n	800a56a <__swbuf_r+0x42>
 800a560:	4621      	mov	r1, r4
 800a562:	4628      	mov	r0, r5
 800a564:	f000 f92e 	bl	800a7c4 <_fflush_r>
 800a568:	bb30      	cbnz	r0, 800a5b8 <__swbuf_r+0x90>
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	3001      	adds	r0, #1
 800a56e:	3b01      	subs	r3, #1
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	6022      	str	r2, [r4, #0]
 800a578:	701e      	strb	r6, [r3, #0]
 800a57a:	6963      	ldr	r3, [r4, #20]
 800a57c:	4283      	cmp	r3, r0
 800a57e:	d004      	beq.n	800a58a <__swbuf_r+0x62>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	07db      	lsls	r3, r3, #31
 800a584:	d506      	bpl.n	800a594 <__swbuf_r+0x6c>
 800a586:	2e0a      	cmp	r6, #10
 800a588:	d104      	bne.n	800a594 <__swbuf_r+0x6c>
 800a58a:	4621      	mov	r1, r4
 800a58c:	4628      	mov	r0, r5
 800a58e:	f000 f919 	bl	800a7c4 <_fflush_r>
 800a592:	b988      	cbnz	r0, 800a5b8 <__swbuf_r+0x90>
 800a594:	4638      	mov	r0, r7
 800a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <__swbuf_r+0x9c>)
 800a59a:	429c      	cmp	r4, r3
 800a59c:	d101      	bne.n	800a5a2 <__swbuf_r+0x7a>
 800a59e:	68ac      	ldr	r4, [r5, #8]
 800a5a0:	e7cf      	b.n	800a542 <__swbuf_r+0x1a>
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <__swbuf_r+0xa0>)
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	bf08      	it	eq
 800a5a8:	68ec      	ldreq	r4, [r5, #12]
 800a5aa:	e7ca      	b.n	800a542 <__swbuf_r+0x1a>
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 f80c 	bl	800a5cc <__swsetup_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d0cb      	beq.n	800a550 <__swbuf_r+0x28>
 800a5b8:	f04f 37ff 	mov.w	r7, #4294967295
 800a5bc:	e7ea      	b.n	800a594 <__swbuf_r+0x6c>
 800a5be:	bf00      	nop
 800a5c0:	0800ba04 	.word	0x0800ba04
 800a5c4:	0800ba24 	.word	0x0800ba24
 800a5c8:	0800b9e4 	.word	0x0800b9e4

0800a5cc <__swsetup_r>:
 800a5cc:	4b32      	ldr	r3, [pc, #200]	; (800a698 <__swsetup_r+0xcc>)
 800a5ce:	b570      	push	{r4, r5, r6, lr}
 800a5d0:	681d      	ldr	r5, [r3, #0]
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	b125      	cbz	r5, 800a5e2 <__swsetup_r+0x16>
 800a5d8:	69ab      	ldr	r3, [r5, #24]
 800a5da:	b913      	cbnz	r3, 800a5e2 <__swsetup_r+0x16>
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f000 f985 	bl	800a8ec <__sinit>
 800a5e2:	4b2e      	ldr	r3, [pc, #184]	; (800a69c <__swsetup_r+0xd0>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d10f      	bne.n	800a608 <__swsetup_r+0x3c>
 800a5e8:	686c      	ldr	r4, [r5, #4]
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f0:	0719      	lsls	r1, r3, #28
 800a5f2:	d42c      	bmi.n	800a64e <__swsetup_r+0x82>
 800a5f4:	06dd      	lsls	r5, r3, #27
 800a5f6:	d411      	bmi.n	800a61c <__swsetup_r+0x50>
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	6033      	str	r3, [r6, #0]
 800a5fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	e03e      	b.n	800a686 <__swsetup_r+0xba>
 800a608:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <__swsetup_r+0xd4>)
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d101      	bne.n	800a612 <__swsetup_r+0x46>
 800a60e:	68ac      	ldr	r4, [r5, #8]
 800a610:	e7eb      	b.n	800a5ea <__swsetup_r+0x1e>
 800a612:	4b24      	ldr	r3, [pc, #144]	; (800a6a4 <__swsetup_r+0xd8>)
 800a614:	429c      	cmp	r4, r3
 800a616:	bf08      	it	eq
 800a618:	68ec      	ldreq	r4, [r5, #12]
 800a61a:	e7e6      	b.n	800a5ea <__swsetup_r+0x1e>
 800a61c:	0758      	lsls	r0, r3, #29
 800a61e:	d512      	bpl.n	800a646 <__swsetup_r+0x7a>
 800a620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a622:	b141      	cbz	r1, 800a636 <__swsetup_r+0x6a>
 800a624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a628:	4299      	cmp	r1, r3
 800a62a:	d002      	beq.n	800a632 <__swsetup_r+0x66>
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff fb6f 	bl	8009d10 <_free_r>
 800a632:	2300      	movs	r3, #0
 800a634:	6363      	str	r3, [r4, #52]	; 0x34
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	2300      	movs	r3, #0
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f043 0308 	orr.w	r3, r3, #8
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	b94b      	cbnz	r3, 800a666 <__swsetup_r+0x9a>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a65c:	d003      	beq.n	800a666 <__swsetup_r+0x9a>
 800a65e:	4621      	mov	r1, r4
 800a660:	4630      	mov	r0, r6
 800a662:	f000 fa07 	bl	800aa74 <__smakebuf_r>
 800a666:	89a0      	ldrh	r0, [r4, #12]
 800a668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a66c:	f010 0301 	ands.w	r3, r0, #1
 800a670:	d00a      	beq.n	800a688 <__swsetup_r+0xbc>
 800a672:	2300      	movs	r3, #0
 800a674:	60a3      	str	r3, [r4, #8]
 800a676:	6963      	ldr	r3, [r4, #20]
 800a678:	425b      	negs	r3, r3
 800a67a:	61a3      	str	r3, [r4, #24]
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	b943      	cbnz	r3, 800a692 <__swsetup_r+0xc6>
 800a680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a684:	d1ba      	bne.n	800a5fc <__swsetup_r+0x30>
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	0781      	lsls	r1, r0, #30
 800a68a:	bf58      	it	pl
 800a68c:	6963      	ldrpl	r3, [r4, #20]
 800a68e:	60a3      	str	r3, [r4, #8]
 800a690:	e7f4      	b.n	800a67c <__swsetup_r+0xb0>
 800a692:	2000      	movs	r0, #0
 800a694:	e7f7      	b.n	800a686 <__swsetup_r+0xba>
 800a696:	bf00      	nop
 800a698:	2000006c 	.word	0x2000006c
 800a69c:	0800ba04 	.word	0x0800ba04
 800a6a0:	0800ba24 	.word	0x0800ba24
 800a6a4:	0800b9e4 	.word	0x0800b9e4

0800a6a8 <abort>:
 800a6a8:	2006      	movs	r0, #6
 800a6aa:	b508      	push	{r3, lr}
 800a6ac:	f000 fa52 	bl	800ab54 <raise>
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	f7f8 f99a 	bl	80029ea <_exit>
	...

0800a6b8 <__sflush_r>:
 800a6b8:	898a      	ldrh	r2, [r1, #12]
 800a6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	4605      	mov	r5, r0
 800a6c0:	0710      	lsls	r0, r2, #28
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	d458      	bmi.n	800a778 <__sflush_r+0xc0>
 800a6c6:	684b      	ldr	r3, [r1, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	dc05      	bgt.n	800a6d8 <__sflush_r+0x20>
 800a6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dc02      	bgt.n	800a6d8 <__sflush_r+0x20>
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6da:	2e00      	cmp	r6, #0
 800a6dc:	d0f9      	beq.n	800a6d2 <__sflush_r+0x1a>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6e4:	682f      	ldr	r7, [r5, #0]
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	d032      	beq.n	800a750 <__sflush_r+0x98>
 800a6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	075a      	lsls	r2, r3, #29
 800a6f0:	d505      	bpl.n	800a6fe <__sflush_r+0x46>
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	1ac0      	subs	r0, r0, r3
 800a6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6f8:	b10b      	cbz	r3, 800a6fe <__sflush_r+0x46>
 800a6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6fc:	1ac0      	subs	r0, r0, r3
 800a6fe:	2300      	movs	r3, #0
 800a700:	4602      	mov	r2, r0
 800a702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a704:	4628      	mov	r0, r5
 800a706:	6a21      	ldr	r1, [r4, #32]
 800a708:	47b0      	blx	r6
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	d106      	bne.n	800a71e <__sflush_r+0x66>
 800a710:	6829      	ldr	r1, [r5, #0]
 800a712:	291d      	cmp	r1, #29
 800a714:	d82c      	bhi.n	800a770 <__sflush_r+0xb8>
 800a716:	4a2a      	ldr	r2, [pc, #168]	; (800a7c0 <__sflush_r+0x108>)
 800a718:	40ca      	lsrs	r2, r1
 800a71a:	07d6      	lsls	r6, r2, #31
 800a71c:	d528      	bpl.n	800a770 <__sflush_r+0xb8>
 800a71e:	2200      	movs	r2, #0
 800a720:	6062      	str	r2, [r4, #4]
 800a722:	6922      	ldr	r2, [r4, #16]
 800a724:	04d9      	lsls	r1, r3, #19
 800a726:	6022      	str	r2, [r4, #0]
 800a728:	d504      	bpl.n	800a734 <__sflush_r+0x7c>
 800a72a:	1c42      	adds	r2, r0, #1
 800a72c:	d101      	bne.n	800a732 <__sflush_r+0x7a>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b903      	cbnz	r3, 800a734 <__sflush_r+0x7c>
 800a732:	6560      	str	r0, [r4, #84]	; 0x54
 800a734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a736:	602f      	str	r7, [r5, #0]
 800a738:	2900      	cmp	r1, #0
 800a73a:	d0ca      	beq.n	800a6d2 <__sflush_r+0x1a>
 800a73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a740:	4299      	cmp	r1, r3
 800a742:	d002      	beq.n	800a74a <__sflush_r+0x92>
 800a744:	4628      	mov	r0, r5
 800a746:	f7ff fae3 	bl	8009d10 <_free_r>
 800a74a:	2000      	movs	r0, #0
 800a74c:	6360      	str	r0, [r4, #52]	; 0x34
 800a74e:	e7c1      	b.n	800a6d4 <__sflush_r+0x1c>
 800a750:	6a21      	ldr	r1, [r4, #32]
 800a752:	2301      	movs	r3, #1
 800a754:	4628      	mov	r0, r5
 800a756:	47b0      	blx	r6
 800a758:	1c41      	adds	r1, r0, #1
 800a75a:	d1c7      	bne.n	800a6ec <__sflush_r+0x34>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0c4      	beq.n	800a6ec <__sflush_r+0x34>
 800a762:	2b1d      	cmp	r3, #29
 800a764:	d001      	beq.n	800a76a <__sflush_r+0xb2>
 800a766:	2b16      	cmp	r3, #22
 800a768:	d101      	bne.n	800a76e <__sflush_r+0xb6>
 800a76a:	602f      	str	r7, [r5, #0]
 800a76c:	e7b1      	b.n	800a6d2 <__sflush_r+0x1a>
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	e7ad      	b.n	800a6d4 <__sflush_r+0x1c>
 800a778:	690f      	ldr	r7, [r1, #16]
 800a77a:	2f00      	cmp	r7, #0
 800a77c:	d0a9      	beq.n	800a6d2 <__sflush_r+0x1a>
 800a77e:	0793      	lsls	r3, r2, #30
 800a780:	bf18      	it	ne
 800a782:	2300      	movne	r3, #0
 800a784:	680e      	ldr	r6, [r1, #0]
 800a786:	bf08      	it	eq
 800a788:	694b      	ldreq	r3, [r1, #20]
 800a78a:	eba6 0807 	sub.w	r8, r6, r7
 800a78e:	600f      	str	r7, [r1, #0]
 800a790:	608b      	str	r3, [r1, #8]
 800a792:	f1b8 0f00 	cmp.w	r8, #0
 800a796:	dd9c      	ble.n	800a6d2 <__sflush_r+0x1a>
 800a798:	4643      	mov	r3, r8
 800a79a:	463a      	mov	r2, r7
 800a79c:	4628      	mov	r0, r5
 800a79e:	6a21      	ldr	r1, [r4, #32]
 800a7a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7a2:	47b0      	blx	r6
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	dc06      	bgt.n	800a7b6 <__sflush_r+0xfe>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	e78e      	b.n	800a6d4 <__sflush_r+0x1c>
 800a7b6:	4407      	add	r7, r0
 800a7b8:	eba8 0800 	sub.w	r8, r8, r0
 800a7bc:	e7e9      	b.n	800a792 <__sflush_r+0xda>
 800a7be:	bf00      	nop
 800a7c0:	20400001 	.word	0x20400001

0800a7c4 <_fflush_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	690b      	ldr	r3, [r1, #16]
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	b913      	cbnz	r3, 800a7d4 <_fflush_r+0x10>
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	b118      	cbz	r0, 800a7de <_fflush_r+0x1a>
 800a7d6:	6983      	ldr	r3, [r0, #24]
 800a7d8:	b90b      	cbnz	r3, 800a7de <_fflush_r+0x1a>
 800a7da:	f000 f887 	bl	800a8ec <__sinit>
 800a7de:	4b14      	ldr	r3, [pc, #80]	; (800a830 <_fflush_r+0x6c>)
 800a7e0:	429c      	cmp	r4, r3
 800a7e2:	d11b      	bne.n	800a81c <_fflush_r+0x58>
 800a7e4:	686c      	ldr	r4, [r5, #4]
 800a7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0ef      	beq.n	800a7ce <_fflush_r+0xa>
 800a7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7f0:	07d0      	lsls	r0, r2, #31
 800a7f2:	d404      	bmi.n	800a7fe <_fflush_r+0x3a>
 800a7f4:	0599      	lsls	r1, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_fflush_r+0x3a>
 800a7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fa:	f000 f915 	bl	800aa28 <__retarget_lock_acquire_recursive>
 800a7fe:	4628      	mov	r0, r5
 800a800:	4621      	mov	r1, r4
 800a802:	f7ff ff59 	bl	800a6b8 <__sflush_r>
 800a806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a808:	4605      	mov	r5, r0
 800a80a:	07da      	lsls	r2, r3, #31
 800a80c:	d4e0      	bmi.n	800a7d0 <_fflush_r+0xc>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	059b      	lsls	r3, r3, #22
 800a812:	d4dd      	bmi.n	800a7d0 <_fflush_r+0xc>
 800a814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a816:	f000 f908 	bl	800aa2a <__retarget_lock_release_recursive>
 800a81a:	e7d9      	b.n	800a7d0 <_fflush_r+0xc>
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <_fflush_r+0x70>)
 800a81e:	429c      	cmp	r4, r3
 800a820:	d101      	bne.n	800a826 <_fflush_r+0x62>
 800a822:	68ac      	ldr	r4, [r5, #8]
 800a824:	e7df      	b.n	800a7e6 <_fflush_r+0x22>
 800a826:	4b04      	ldr	r3, [pc, #16]	; (800a838 <_fflush_r+0x74>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	bf08      	it	eq
 800a82c:	68ec      	ldreq	r4, [r5, #12]
 800a82e:	e7da      	b.n	800a7e6 <_fflush_r+0x22>
 800a830:	0800ba04 	.word	0x0800ba04
 800a834:	0800ba24 	.word	0x0800ba24
 800a838:	0800b9e4 	.word	0x0800b9e4

0800a83c <std>:
 800a83c:	2300      	movs	r3, #0
 800a83e:	b510      	push	{r4, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	e9c0 3300 	strd	r3, r3, [r0]
 800a846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a84a:	6083      	str	r3, [r0, #8]
 800a84c:	8181      	strh	r1, [r0, #12]
 800a84e:	6643      	str	r3, [r0, #100]	; 0x64
 800a850:	81c2      	strh	r2, [r0, #14]
 800a852:	6183      	str	r3, [r0, #24]
 800a854:	4619      	mov	r1, r3
 800a856:	2208      	movs	r2, #8
 800a858:	305c      	adds	r0, #92	; 0x5c
 800a85a:	f7fb fe33 	bl	80064c4 <memset>
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <std+0x38>)
 800a860:	6224      	str	r4, [r4, #32]
 800a862:	6263      	str	r3, [r4, #36]	; 0x24
 800a864:	4b04      	ldr	r3, [pc, #16]	; (800a878 <std+0x3c>)
 800a866:	62a3      	str	r3, [r4, #40]	; 0x28
 800a868:	4b04      	ldr	r3, [pc, #16]	; (800a87c <std+0x40>)
 800a86a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a86c:	4b04      	ldr	r3, [pc, #16]	; (800a880 <std+0x44>)
 800a86e:	6323      	str	r3, [r4, #48]	; 0x30
 800a870:	bd10      	pop	{r4, pc}
 800a872:	bf00      	nop
 800a874:	0800ab8d 	.word	0x0800ab8d
 800a878:	0800abaf 	.word	0x0800abaf
 800a87c:	0800abe7 	.word	0x0800abe7
 800a880:	0800ac0b 	.word	0x0800ac0b

0800a884 <_cleanup_r>:
 800a884:	4901      	ldr	r1, [pc, #4]	; (800a88c <_cleanup_r+0x8>)
 800a886:	f000 b8af 	b.w	800a9e8 <_fwalk_reent>
 800a88a:	bf00      	nop
 800a88c:	0800a7c5 	.word	0x0800a7c5

0800a890 <__sfmoreglue>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	2568      	movs	r5, #104	; 0x68
 800a894:	1e4a      	subs	r2, r1, #1
 800a896:	4355      	muls	r5, r2
 800a898:	460e      	mov	r6, r1
 800a89a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a89e:	f7ff fa83 	bl	8009da8 <_malloc_r>
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b140      	cbz	r0, 800a8b8 <__sfmoreglue+0x28>
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	e9c0 1600 	strd	r1, r6, [r0]
 800a8ac:	300c      	adds	r0, #12
 800a8ae:	60a0      	str	r0, [r4, #8]
 800a8b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8b4:	f7fb fe06 	bl	80064c4 <memset>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	bd70      	pop	{r4, r5, r6, pc}

0800a8bc <__sfp_lock_acquire>:
 800a8bc:	4801      	ldr	r0, [pc, #4]	; (800a8c4 <__sfp_lock_acquire+0x8>)
 800a8be:	f000 b8b3 	b.w	800aa28 <__retarget_lock_acquire_recursive>
 800a8c2:	bf00      	nop
 800a8c4:	200007e4 	.word	0x200007e4

0800a8c8 <__sfp_lock_release>:
 800a8c8:	4801      	ldr	r0, [pc, #4]	; (800a8d0 <__sfp_lock_release+0x8>)
 800a8ca:	f000 b8ae 	b.w	800aa2a <__retarget_lock_release_recursive>
 800a8ce:	bf00      	nop
 800a8d0:	200007e4 	.word	0x200007e4

0800a8d4 <__sinit_lock_acquire>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	; (800a8dc <__sinit_lock_acquire+0x8>)
 800a8d6:	f000 b8a7 	b.w	800aa28 <__retarget_lock_acquire_recursive>
 800a8da:	bf00      	nop
 800a8dc:	200007df 	.word	0x200007df

0800a8e0 <__sinit_lock_release>:
 800a8e0:	4801      	ldr	r0, [pc, #4]	; (800a8e8 <__sinit_lock_release+0x8>)
 800a8e2:	f000 b8a2 	b.w	800aa2a <__retarget_lock_release_recursive>
 800a8e6:	bf00      	nop
 800a8e8:	200007df 	.word	0x200007df

0800a8ec <__sinit>:
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	f7ff fff0 	bl	800a8d4 <__sinit_lock_acquire>
 800a8f4:	69a3      	ldr	r3, [r4, #24]
 800a8f6:	b11b      	cbz	r3, 800a900 <__sinit+0x14>
 800a8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8fc:	f7ff bff0 	b.w	800a8e0 <__sinit_lock_release>
 800a900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a904:	6523      	str	r3, [r4, #80]	; 0x50
 800a906:	4b13      	ldr	r3, [pc, #76]	; (800a954 <__sinit+0x68>)
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <__sinit+0x6c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a90e:	42a3      	cmp	r3, r4
 800a910:	bf08      	it	eq
 800a912:	2301      	moveq	r3, #1
 800a914:	4620      	mov	r0, r4
 800a916:	bf08      	it	eq
 800a918:	61a3      	streq	r3, [r4, #24]
 800a91a:	f000 f81f 	bl	800a95c <__sfp>
 800a91e:	6060      	str	r0, [r4, #4]
 800a920:	4620      	mov	r0, r4
 800a922:	f000 f81b 	bl	800a95c <__sfp>
 800a926:	60a0      	str	r0, [r4, #8]
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 f817 	bl	800a95c <__sfp>
 800a92e:	2200      	movs	r2, #0
 800a930:	2104      	movs	r1, #4
 800a932:	60e0      	str	r0, [r4, #12]
 800a934:	6860      	ldr	r0, [r4, #4]
 800a936:	f7ff ff81 	bl	800a83c <std>
 800a93a:	2201      	movs	r2, #1
 800a93c:	2109      	movs	r1, #9
 800a93e:	68a0      	ldr	r0, [r4, #8]
 800a940:	f7ff ff7c 	bl	800a83c <std>
 800a944:	2202      	movs	r2, #2
 800a946:	2112      	movs	r1, #18
 800a948:	68e0      	ldr	r0, [r4, #12]
 800a94a:	f7ff ff77 	bl	800a83c <std>
 800a94e:	2301      	movs	r3, #1
 800a950:	61a3      	str	r3, [r4, #24]
 800a952:	e7d1      	b.n	800a8f8 <__sinit+0xc>
 800a954:	0800b58c 	.word	0x0800b58c
 800a958:	0800a885 	.word	0x0800a885

0800a95c <__sfp>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	4607      	mov	r7, r0
 800a960:	f7ff ffac 	bl	800a8bc <__sfp_lock_acquire>
 800a964:	4b1e      	ldr	r3, [pc, #120]	; (800a9e0 <__sfp+0x84>)
 800a966:	681e      	ldr	r6, [r3, #0]
 800a968:	69b3      	ldr	r3, [r6, #24]
 800a96a:	b913      	cbnz	r3, 800a972 <__sfp+0x16>
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7ff ffbd 	bl	800a8ec <__sinit>
 800a972:	3648      	adds	r6, #72	; 0x48
 800a974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a978:	3b01      	subs	r3, #1
 800a97a:	d503      	bpl.n	800a984 <__sfp+0x28>
 800a97c:	6833      	ldr	r3, [r6, #0]
 800a97e:	b30b      	cbz	r3, 800a9c4 <__sfp+0x68>
 800a980:	6836      	ldr	r6, [r6, #0]
 800a982:	e7f7      	b.n	800a974 <__sfp+0x18>
 800a984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a988:	b9d5      	cbnz	r5, 800a9c0 <__sfp+0x64>
 800a98a:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <__sfp+0x88>)
 800a98c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a990:	60e3      	str	r3, [r4, #12]
 800a992:	6665      	str	r5, [r4, #100]	; 0x64
 800a994:	f000 f847 	bl	800aa26 <__retarget_lock_init_recursive>
 800a998:	f7ff ff96 	bl	800a8c8 <__sfp_lock_release>
 800a99c:	2208      	movs	r2, #8
 800a99e:	4629      	mov	r1, r5
 800a9a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9a8:	6025      	str	r5, [r4, #0]
 800a9aa:	61a5      	str	r5, [r4, #24]
 800a9ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9b0:	f7fb fd88 	bl	80064c4 <memset>
 800a9b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9bc:	4620      	mov	r0, r4
 800a9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c0:	3468      	adds	r4, #104	; 0x68
 800a9c2:	e7d9      	b.n	800a978 <__sfp+0x1c>
 800a9c4:	2104      	movs	r1, #4
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	f7ff ff62 	bl	800a890 <__sfmoreglue>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	6030      	str	r0, [r6, #0]
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d1d5      	bne.n	800a980 <__sfp+0x24>
 800a9d4:	f7ff ff78 	bl	800a8c8 <__sfp_lock_release>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	603b      	str	r3, [r7, #0]
 800a9dc:	e7ee      	b.n	800a9bc <__sfp+0x60>
 800a9de:	bf00      	nop
 800a9e0:	0800b58c 	.word	0x0800b58c
 800a9e4:	ffff0001 	.word	0xffff0001

0800a9e8 <_fwalk_reent>:
 800a9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	4688      	mov	r8, r1
 800a9f0:	2700      	movs	r7, #0
 800a9f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9fa:	f1b9 0901 	subs.w	r9, r9, #1
 800a9fe:	d505      	bpl.n	800aa0c <_fwalk_reent+0x24>
 800aa00:	6824      	ldr	r4, [r4, #0]
 800aa02:	2c00      	cmp	r4, #0
 800aa04:	d1f7      	bne.n	800a9f6 <_fwalk_reent+0xe>
 800aa06:	4638      	mov	r0, r7
 800aa08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa0c:	89ab      	ldrh	r3, [r5, #12]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d907      	bls.n	800aa22 <_fwalk_reent+0x3a>
 800aa12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa16:	3301      	adds	r3, #1
 800aa18:	d003      	beq.n	800aa22 <_fwalk_reent+0x3a>
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	47c0      	blx	r8
 800aa20:	4307      	orrs	r7, r0
 800aa22:	3568      	adds	r5, #104	; 0x68
 800aa24:	e7e9      	b.n	800a9fa <_fwalk_reent+0x12>

0800aa26 <__retarget_lock_init_recursive>:
 800aa26:	4770      	bx	lr

0800aa28 <__retarget_lock_acquire_recursive>:
 800aa28:	4770      	bx	lr

0800aa2a <__retarget_lock_release_recursive>:
 800aa2a:	4770      	bx	lr

0800aa2c <__swhatbuf_r>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	460e      	mov	r6, r1
 800aa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa34:	4614      	mov	r4, r2
 800aa36:	2900      	cmp	r1, #0
 800aa38:	461d      	mov	r5, r3
 800aa3a:	b096      	sub	sp, #88	; 0x58
 800aa3c:	da07      	bge.n	800aa4e <__swhatbuf_r+0x22>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	602b      	str	r3, [r5, #0]
 800aa42:	89b3      	ldrh	r3, [r6, #12]
 800aa44:	061a      	lsls	r2, r3, #24
 800aa46:	d410      	bmi.n	800aa6a <__swhatbuf_r+0x3e>
 800aa48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa4c:	e00e      	b.n	800aa6c <__swhatbuf_r+0x40>
 800aa4e:	466a      	mov	r2, sp
 800aa50:	f000 f902 	bl	800ac58 <_fstat_r>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	dbf2      	blt.n	800aa3e <__swhatbuf_r+0x12>
 800aa58:	9a01      	ldr	r2, [sp, #4]
 800aa5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa62:	425a      	negs	r2, r3
 800aa64:	415a      	adcs	r2, r3
 800aa66:	602a      	str	r2, [r5, #0]
 800aa68:	e7ee      	b.n	800aa48 <__swhatbuf_r+0x1c>
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	b016      	add	sp, #88	; 0x58
 800aa72:	bd70      	pop	{r4, r5, r6, pc}

0800aa74 <__smakebuf_r>:
 800aa74:	898b      	ldrh	r3, [r1, #12]
 800aa76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa78:	079d      	lsls	r5, r3, #30
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	d507      	bpl.n	800aa90 <__smakebuf_r+0x1c>
 800aa80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	6123      	str	r3, [r4, #16]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	6163      	str	r3, [r4, #20]
 800aa8c:	b002      	add	sp, #8
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	466a      	mov	r2, sp
 800aa92:	ab01      	add	r3, sp, #4
 800aa94:	f7ff ffca 	bl	800aa2c <__swhatbuf_r>
 800aa98:	9900      	ldr	r1, [sp, #0]
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff f983 	bl	8009da8 <_malloc_r>
 800aaa2:	b948      	cbnz	r0, 800aab8 <__smakebuf_r+0x44>
 800aaa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa8:	059a      	lsls	r2, r3, #22
 800aaaa:	d4ef      	bmi.n	800aa8c <__smakebuf_r+0x18>
 800aaac:	f023 0303 	bic.w	r3, r3, #3
 800aab0:	f043 0302 	orr.w	r3, r3, #2
 800aab4:	81a3      	strh	r3, [r4, #12]
 800aab6:	e7e3      	b.n	800aa80 <__smakebuf_r+0xc>
 800aab8:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <__smakebuf_r+0x7c>)
 800aaba:	62b3      	str	r3, [r6, #40]	; 0x28
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	6020      	str	r0, [r4, #0]
 800aac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	9b00      	ldr	r3, [sp, #0]
 800aac8:	6120      	str	r0, [r4, #16]
 800aaca:	6163      	str	r3, [r4, #20]
 800aacc:	9b01      	ldr	r3, [sp, #4]
 800aace:	b15b      	cbz	r3, 800aae8 <__smakebuf_r+0x74>
 800aad0:	4630      	mov	r0, r6
 800aad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad6:	f000 f8d1 	bl	800ac7c <_isatty_r>
 800aada:	b128      	cbz	r0, 800aae8 <__smakebuf_r+0x74>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f023 0303 	bic.w	r3, r3, #3
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	89a0      	ldrh	r0, [r4, #12]
 800aaea:	4305      	orrs	r5, r0
 800aaec:	81a5      	strh	r5, [r4, #12]
 800aaee:	e7cd      	b.n	800aa8c <__smakebuf_r+0x18>
 800aaf0:	0800a885 	.word	0x0800a885

0800aaf4 <_malloc_usable_size_r>:
 800aaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf8:	1f18      	subs	r0, r3, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfbc      	itt	lt
 800aafe:	580b      	ldrlt	r3, [r1, r0]
 800ab00:	18c0      	addlt	r0, r0, r3
 800ab02:	4770      	bx	lr

0800ab04 <_raise_r>:
 800ab04:	291f      	cmp	r1, #31
 800ab06:	b538      	push	{r3, r4, r5, lr}
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	d904      	bls.n	800ab18 <_raise_r+0x14>
 800ab0e:	2316      	movs	r3, #22
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	f04f 30ff 	mov.w	r0, #4294967295
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab1a:	b112      	cbz	r2, 800ab22 <_raise_r+0x1e>
 800ab1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab20:	b94b      	cbnz	r3, 800ab36 <_raise_r+0x32>
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 f830 	bl	800ab88 <_getpid_r>
 800ab28:	462a      	mov	r2, r5
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab32:	f000 b817 	b.w	800ab64 <_kill_r>
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d00a      	beq.n	800ab50 <_raise_r+0x4c>
 800ab3a:	1c59      	adds	r1, r3, #1
 800ab3c:	d103      	bne.n	800ab46 <_raise_r+0x42>
 800ab3e:	2316      	movs	r3, #22
 800ab40:	6003      	str	r3, [r0, #0]
 800ab42:	2001      	movs	r0, #1
 800ab44:	e7e7      	b.n	800ab16 <_raise_r+0x12>
 800ab46:	2400      	movs	r4, #0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab4e:	4798      	blx	r3
 800ab50:	2000      	movs	r0, #0
 800ab52:	e7e0      	b.n	800ab16 <_raise_r+0x12>

0800ab54 <raise>:
 800ab54:	4b02      	ldr	r3, [pc, #8]	; (800ab60 <raise+0xc>)
 800ab56:	4601      	mov	r1, r0
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	f7ff bfd3 	b.w	800ab04 <_raise_r>
 800ab5e:	bf00      	nop
 800ab60:	2000006c 	.word	0x2000006c

0800ab64 <_kill_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	2300      	movs	r3, #0
 800ab68:	4d06      	ldr	r5, [pc, #24]	; (800ab84 <_kill_r+0x20>)
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	f7f7 ff2a 	bl	80029ca <_kill>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d102      	bne.n	800ab80 <_kill_r+0x1c>
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	b103      	cbz	r3, 800ab80 <_kill_r+0x1c>
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	bd38      	pop	{r3, r4, r5, pc}
 800ab82:	bf00      	nop
 800ab84:	200007d8 	.word	0x200007d8

0800ab88 <_getpid_r>:
 800ab88:	f7f7 bf18 	b.w	80029bc <_getpid>

0800ab8c <__sread>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	460c      	mov	r4, r1
 800ab90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab94:	f000 f894 	bl	800acc0 <_read_r>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	bfab      	itete	ge
 800ab9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aba0:	181b      	addge	r3, r3, r0
 800aba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aba6:	bfac      	ite	ge
 800aba8:	6563      	strge	r3, [r4, #84]	; 0x54
 800abaa:	81a3      	strhlt	r3, [r4, #12]
 800abac:	bd10      	pop	{r4, pc}

0800abae <__swrite>:
 800abae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb2:	461f      	mov	r7, r3
 800abb4:	898b      	ldrh	r3, [r1, #12]
 800abb6:	4605      	mov	r5, r0
 800abb8:	05db      	lsls	r3, r3, #23
 800abba:	460c      	mov	r4, r1
 800abbc:	4616      	mov	r6, r2
 800abbe:	d505      	bpl.n	800abcc <__swrite+0x1e>
 800abc0:	2302      	movs	r3, #2
 800abc2:	2200      	movs	r2, #0
 800abc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc8:	f000 f868 	bl	800ac9c <_lseek_r>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	4632      	mov	r2, r6
 800abd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abd4:	81a3      	strh	r3, [r4, #12]
 800abd6:	4628      	mov	r0, r5
 800abd8:	463b      	mov	r3, r7
 800abda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	f000 b817 	b.w	800ac14 <_write_r>

0800abe6 <__sseek>:
 800abe6:	b510      	push	{r4, lr}
 800abe8:	460c      	mov	r4, r1
 800abea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abee:	f000 f855 	bl	800ac9c <_lseek_r>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	bf15      	itete	ne
 800abf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800abfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac02:	81a3      	strheq	r3, [r4, #12]
 800ac04:	bf18      	it	ne
 800ac06:	81a3      	strhne	r3, [r4, #12]
 800ac08:	bd10      	pop	{r4, pc}

0800ac0a <__sclose>:
 800ac0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0e:	f000 b813 	b.w	800ac38 <_close_r>
	...

0800ac14 <_write_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	4d05      	ldr	r5, [pc, #20]	; (800ac34 <_write_r+0x20>)
 800ac20:	602a      	str	r2, [r5, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	f7f8 f9a6 	bl	8002f74 <_write>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_write_r+0x1e>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_write_r+0x1e>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	200007d8 	.word	0x200007d8

0800ac38 <_close_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	4d05      	ldr	r5, [pc, #20]	; (800ac54 <_close_r+0x1c>)
 800ac3e:	4604      	mov	r4, r0
 800ac40:	4608      	mov	r0, r1
 800ac42:	602b      	str	r3, [r5, #0]
 800ac44:	f7f7 fef8 	bl	8002a38 <_close>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_close_r+0x1a>
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_close_r+0x1a>
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	200007d8 	.word	0x200007d8

0800ac58 <_fstat_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4d06      	ldr	r5, [pc, #24]	; (800ac78 <_fstat_r+0x20>)
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	f7f7 fef2 	bl	8002a4e <_fstat>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d102      	bne.n	800ac74 <_fstat_r+0x1c>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b103      	cbz	r3, 800ac74 <_fstat_r+0x1c>
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	bf00      	nop
 800ac78:	200007d8 	.word	0x200007d8

0800ac7c <_isatty_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4d05      	ldr	r5, [pc, #20]	; (800ac98 <_isatty_r+0x1c>)
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f7f7 fef0 	bl	8002a6c <_isatty>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_isatty_r+0x1a>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_isatty_r+0x1a>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	200007d8 	.word	0x200007d8

0800ac9c <_lseek_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	2200      	movs	r2, #0
 800aca6:	4d05      	ldr	r5, [pc, #20]	; (800acbc <_lseek_r+0x20>)
 800aca8:	602a      	str	r2, [r5, #0]
 800acaa:	461a      	mov	r2, r3
 800acac:	f7f7 fee8 	bl	8002a80 <_lseek>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_lseek_r+0x1e>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_lseek_r+0x1e>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	200007d8 	.word	0x200007d8

0800acc0 <_read_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	2200      	movs	r2, #0
 800acca:	4d05      	ldr	r5, [pc, #20]	; (800ace0 <_read_r+0x20>)
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f7f7 fe95 	bl	80029fe <_read>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_read_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_read_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	200007d8 	.word	0x200007d8

0800ace4 <_init>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	bf00      	nop
 800ace8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acea:	bc08      	pop	{r3}
 800acec:	469e      	mov	lr, r3
 800acee:	4770      	bx	lr

0800acf0 <_fini>:
 800acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf2:	bf00      	nop
 800acf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf6:	bc08      	pop	{r3}
 800acf8:	469e      	mov	lr, r3
 800acfa:	4770      	bx	lr
