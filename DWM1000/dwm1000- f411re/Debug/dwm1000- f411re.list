
dwm1000- f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006334  08006334  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800633c  0800633c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006340  08006340  00016340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  2000009c  080063e0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  080063e0  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001294b  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000346b  00000000  00000000  00032a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e01  00000000  00000000  00037128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2cf  00000000  00000000  00037f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017df9  00000000  00000000  000531f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000938ec  00000000  00000000  0006aff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050d4  00000000  00000000  000fe8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001039b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a84 	.word	0x08005a84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08005a84 	.word	0x08005a84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800058c:	4b9f      	ldr	r3, [pc, #636]	; (800080c <dwt_initialise+0x290>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2200      	movs	r2, #0
 8000592:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000594:	4b9d      	ldr	r3, [pc, #628]	; (800080c <dwt_initialise+0x290>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800059c:	4b9b      	ldr	r3, [pc, #620]	; (800080c <dwt_initialise+0x290>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005a4:	4b99      	ldr	r3, [pc, #612]	; (800080c <dwt_initialise+0x290>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005ac:	4b97      	ldr	r3, [pc, #604]	; (800080c <dwt_initialise+0x290>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005b4:	4b95      	ldr	r3, [pc, #596]	; (800080c <dwt_initialise+0x290>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005bc:	4b93      	ldr	r3, [pc, #588]	; (800080c <dwt_initialise+0x290>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005c4:	f000 f926 	bl	8000814 <dwt_readdevid>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a91      	ldr	r2, [pc, #580]	; (8000810 <dwt_initialise+0x294>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d002      	beq.n	80005d6 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	e115      	b.n	8000802 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f003 0302 	and.w	r3, r3, #2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005e0:	f000 fd64 	bl	80010ac <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <dwt_initialise+0x7c>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fc63 	bl	8000ec4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 80005fe:	2204      	movs	r2, #4
 8000600:	2100      	movs	r1, #0
 8000602:	2024      	movs	r0, #36	; 0x24
 8000604:	f000 fba7 	bl	8000d56 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	2b00      	cmp	r3, #0
 8000610:	d116      	bne.n	8000640 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000612:	2004      	movs	r0, #4
 8000614:	f000 fbf5 	bl	8000e02 <_dwt_otpread>
 8000618:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d01f      	beq.n	8000662 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000622:	2202      	movs	r2, #2
 8000624:	2112      	movs	r1, #18
 8000626:	202d      	movs	r0, #45	; 0x2d
 8000628:	f000 fb95 	bl	8000d56 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800062c:	4b77      	ldr	r3, [pc, #476]	; (800080c <dwt_initialise+0x290>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	8ada      	ldrh	r2, [r3, #22]
 8000632:	4b76      	ldr	r3, [pc, #472]	; (800080c <dwt_initialise+0x290>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800063a:	b292      	uxth	r2, r2
 800063c:	82da      	strh	r2, [r3, #22]
 800063e:	e010      	b.n	8000662 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000640:	2130      	movs	r1, #48	; 0x30
 8000642:	2028      	movs	r0, #40	; 0x28
 8000644:	f000 fb43 	bl	8000cce <dwt_read32bitoffsetreg>
 8000648:	4603      	mov	r3, r0
 800064a:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800064e:	d008      	beq.n	8000662 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000650:	4b6e      	ldr	r3, [pc, #440]	; (800080c <dwt_initialise+0x290>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	8ada      	ldrh	r2, [r3, #22]
 8000656:	4b6d      	ldr	r3, [pc, #436]	; (800080c <dwt_initialise+0x290>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800065e:	b292      	uxth	r2, r2
 8000660:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f003 0302 	and.w	r3, r3, #2
 8000668:	2b00      	cmp	r3, #0
 800066a:	d009      	beq.n	8000680 <dwt_initialise+0x104>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	2b00      	cmp	r3, #0
 8000674:	d011      	beq.n	800069a <dwt_initialise+0x11e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000680:	201e      	movs	r0, #30
 8000682:	f000 fbbe 	bl	8000e02 <_dwt_otpread>
 8000686:	4603      	mov	r3, r0
 8000688:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800068a:	8afb      	ldrh	r3, [r7, #22]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b5e      	ldr	r3, [pc, #376]	; (800080c <dwt_initialise+0x290>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	72da      	strb	r2, [r3, #11]
 8000698:	e003      	b.n	80006a2 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800069a:	4b5c      	ldr	r3, [pc, #368]	; (800080c <dwt_initialise+0x290>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2200      	movs	r2, #0
 80006a0:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10b      	bne.n	80006c4 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006ac:	8afb      	ldrh	r3, [r7, #22]
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d101      	bne.n	80006ba <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006b6:	2310      	movs	r3, #16
 80006b8:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006ba:	8afb      	ldrh	r3, [r7, #22]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fd1a 	bl	80010f8 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0310 	and.w	r3, r3, #16
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006ce:	4b4f      	ldr	r3, [pc, #316]	; (800080c <dwt_initialise+0x290>)
 80006d0:	681c      	ldr	r4, [r3, #0]
 80006d2:	2006      	movs	r0, #6
 80006d4:	f000 fb95 	bl	8000e02 <_dwt_otpread>
 80006d8:	4603      	mov	r3, r0
 80006da:	6023      	str	r3, [r4, #0]
 80006dc:	e003      	b.n	80006e6 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <dwt_initialise+0x290>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d007      	beq.n	8000700 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80006f0:	4b46      	ldr	r3, [pc, #280]	; (800080c <dwt_initialise+0x290>)
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	2007      	movs	r0, #7
 80006f6:	f000 fb84 	bl	8000e02 <_dwt_otpread>
 80006fa:	4603      	mov	r3, r0
 80006fc:	6063      	str	r3, [r4, #4]
 80006fe:	e003      	b.n	8000708 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000700:	4b42      	ldr	r3, [pc, #264]	; (800080c <dwt_initialise+0x290>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000712:	2008      	movs	r0, #8
 8000714:	f000 fb75 	bl	8000e02 <_dwt_otpread>
 8000718:	4602      	mov	r2, r0
 800071a:	4b3c      	ldr	r3, [pc, #240]	; (800080c <dwt_initialise+0x290>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	721a      	strb	r2, [r3, #8]
 8000722:	e003      	b.n	800072c <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000724:	4b39      	ldr	r3, [pc, #228]	; (800080c <dwt_initialise+0x290>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2200      	movs	r2, #0
 800072a:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000736:	2009      	movs	r0, #9
 8000738:	f000 fb63 	bl	8000e02 <_dwt_otpread>
 800073c:	4602      	mov	r2, r0
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <dwt_initialise+0x290>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	725a      	strb	r2, [r3, #9]
 8000746:	e003      	b.n	8000750 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000748:	4b30      	ldr	r3, [pc, #192]	; (800080c <dwt_initialise+0x290>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2200      	movs	r2, #0
 800074e:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d121      	bne.n	800079e <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00b      	beq.n	800077c <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000764:	f000 fb9a 	bl	8000e9c <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <dwt_initialise+0x290>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	8ada      	ldrh	r2, [r3, #22]
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <dwt_initialise+0x290>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000776:	b292      	uxth	r2, r2
 8000778:	82da      	strh	r2, [r3, #22]
 800077a:	e01e      	b.n	80007ba <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800077c:	2105      	movs	r1, #5
 800077e:	2036      	movs	r0, #54	; 0x36
 8000780:	f000 facc 	bl	8000d1c <dwt_read16bitoffsetreg>
 8000784:	4603      	mov	r3, r0
 8000786:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000788:	89fb      	ldrh	r3, [r7, #14]
 800078a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800078e:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	461a      	mov	r2, r3
 8000794:	2105      	movs	r1, #5
 8000796:	2036      	movs	r0, #54	; 0x36
 8000798:	f000 faf0 	bl	8000d7c <dwt_write16bitoffsetreg>
 800079c:	e00d      	b.n	80007ba <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <dwt_initialise+0x290>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	8ada      	ldrh	r2, [r3, #22]
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <dwt_initialise+0x290>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007b6:	b292      	uxth	r2, r2
 80007b8:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fb82 	bl	8000ec4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007c0:	2200      	movs	r2, #0
 80007c2:	210a      	movs	r1, #10
 80007c4:	202c      	movs	r0, #44	; 0x2c
 80007c6:	f000 fac6 	bl	8000d56 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <dwt_initialise+0x290>)
 80007cc:	681c      	ldr	r4, [r3, #0]
 80007ce:	2100      	movs	r1, #0
 80007d0:	2004      	movs	r0, #4
 80007d2:	f000 fa7c 	bl	8000cce <dwt_read32bitoffsetreg>
 80007d6:	4603      	mov	r3, r0
 80007d8:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <dwt_initialise+0x290>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <dwt_initialise+0x290>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f002 0203 	and.w	r2, r2, #3
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <dwt_initialise+0x290>)
 80007f2:	681c      	ldr	r4, [r3, #0]
 80007f4:	2100      	movs	r1, #0
 80007f6:	2008      	movs	r0, #8
 80007f8:	f000 fa69 	bl	8000cce <dwt_read32bitoffsetreg>
 80007fc:	4603      	mov	r3, r0
 80007fe:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000800:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000802:	4618      	mov	r0, r3
 8000804:	371c      	adds	r7, #28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000
 8000810:	deca0130 	.word	0xdeca0130

08000814 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000818:	2100      	movs	r1, #0
 800081a:	2000      	movs	r0, #0
 800081c:	f000 fa57 	bl	8000cce <dwt_read32bitoffsetreg>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	795b      	ldrb	r3, [r3, #5]
 8000842:	461a      	mov	r2, r3
 8000844:	4ba1      	ldr	r3, [pc, #644]	; (8000acc <dwt_configure+0x2a4>)
 8000846:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800084a:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	3b01      	subs	r3, #1
 8000852:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000854:	7cfb      	ldrb	r3, [r7, #19]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d002      	beq.n	8000860 <dwt_configure+0x38>
 800085a:	7cfb      	ldrb	r3, [r7, #19]
 800085c:	2b07      	cmp	r3, #7
 800085e:	d101      	bne.n	8000864 <dwt_configure+0x3c>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <dwt_configure+0x3e>
 8000864:	2300      	movs	r3, #0
 8000866:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	79db      	ldrb	r3, [r3, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10b      	bne.n	8000888 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000870:	4b97      	ldr	r3, [pc, #604]	; (8000ad0 <dwt_configure+0x2a8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	4b96      	ldr	r3, [pc, #600]	; (8000ad0 <dwt_configure+0x2a8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800087e:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000880:	8abb      	ldrh	r3, [r7, #20]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	82bb      	strh	r3, [r7, #20]
 8000886:	e007      	b.n	8000898 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000888:	4b91      	ldr	r3, [pc, #580]	; (8000ad0 <dwt_configure+0x2a8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	4b90      	ldr	r3, [pc, #576]	; (8000ad0 <dwt_configure+0x2a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000896:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000898:	4b8d      	ldr	r3, [pc, #564]	; (8000ad0 <dwt_configure+0x2a8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	7a12      	ldrb	r2, [r2, #8]
 80008a0:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80008a2:	4b8b      	ldr	r3, [pc, #556]	; (8000ad0 <dwt_configure+0x2a8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	691a      	ldr	r2, [r3, #16]
 80008a8:	4b89      	ldr	r3, [pc, #548]	; (8000ad0 <dwt_configure+0x2a8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008b0:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80008b2:	4b87      	ldr	r3, [pc, #540]	; (8000ad0 <dwt_configure+0x2a8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6919      	ldr	r1, [r3, #16]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7a1b      	ldrb	r3, [r3, #8]
 80008bc:	041b      	lsls	r3, r3, #16
 80008be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80008c2:	4b83      	ldr	r3, [pc, #524]	; (8000ad0 <dwt_configure+0x2a8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	430a      	orrs	r2, r1
 80008c8:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80008ca:	4b81      	ldr	r3, [pc, #516]	; (8000ad0 <dwt_configure+0x2a8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	461a      	mov	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	2004      	movs	r0, #4
 80008d6:	f000 fa6d 	bl	8000db4 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	461a      	mov	r2, r3
 80008de:	f642 0104 	movw	r1, #10244	; 0x2804
 80008e2:	202e      	movs	r0, #46	; 0x2e
 80008e4:	f000 fa4a 	bl	8000d7c <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80008e8:	7cbb      	ldrb	r3, [r7, #18]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fab6 	bl	8000e5c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80008f0:	7cfb      	ldrb	r3, [r7, #19]
 80008f2:	4a78      	ldr	r2, [pc, #480]	; (8000ad4 <dwt_configure+0x2ac>)
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b77      	ldr	r3, [pc, #476]	; (8000ad8 <dwt_configure+0x2b0>)
 80008fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fe:	461a      	mov	r2, r3
 8000900:	2107      	movs	r1, #7
 8000902:	202b      	movs	r0, #43	; 0x2b
 8000904:	f000 fa56 	bl	8000db4 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	4a72      	ldr	r2, [pc, #456]	; (8000ad4 <dwt_configure+0x2ac>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
 800090e:	461a      	mov	r2, r3
 8000910:	4b72      	ldr	r3, [pc, #456]	; (8000adc <dwt_configure+0x2b4>)
 8000912:	5c9b      	ldrb	r3, [r3, r2]
 8000914:	461a      	mov	r2, r3
 8000916:	210b      	movs	r1, #11
 8000918:	202b      	movs	r0, #43	; 0x2b
 800091a:	f000 fa1c 	bl	8000d56 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800091e:	7c7b      	ldrb	r3, [r7, #17]
 8000920:	4a6f      	ldr	r2, [pc, #444]	; (8000ae0 <dwt_configure+0x2b8>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	461a      	mov	r2, r3
 8000926:	210b      	movs	r1, #11
 8000928:	2028      	movs	r0, #40	; 0x28
 800092a:	f000 fa14 	bl	8000d56 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800092e:	7cfb      	ldrb	r3, [r7, #19]
 8000930:	4a68      	ldr	r2, [pc, #416]	; (8000ad4 <dwt_configure+0x2ac>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	461a      	mov	r2, r3
 8000936:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <dwt_configure+0x2bc>)
 8000938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093c:	461a      	mov	r2, r3
 800093e:	210c      	movs	r1, #12
 8000940:	2028      	movs	r0, #40	; 0x28
 8000942:	f000 fa37 	bl	8000db4 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	79db      	ldrb	r3, [r3, #7]
 800094a:	4618      	mov	r0, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	799b      	ldrb	r3, [r3, #6]
 8000950:	4619      	mov	r1, r3
 8000952:	4a65      	ldr	r2, [pc, #404]	; (8000ae8 <dwt_configure+0x2c0>)
 8000954:	0043      	lsls	r3, r0, #1
 8000956:	440b      	add	r3, r1
 8000958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095c:	461a      	mov	r2, r3
 800095e:	2102      	movs	r1, #2
 8000960:	2027      	movs	r0, #39	; 0x27
 8000962:	f000 fa0b 	bl	8000d7c <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000966:	7cbb      	ldrb	r3, [r7, #18]
 8000968:	4a60      	ldr	r2, [pc, #384]	; (8000aec <dwt_configure+0x2c4>)
 800096a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096e:	461a      	mov	r2, r3
 8000970:	2104      	movs	r1, #4
 8000972:	2027      	movs	r0, #39	; 0x27
 8000974:	f000 fa02 	bl	8000d7c <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	79db      	ldrb	r3, [r3, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d105      	bne.n	800098c <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	2106      	movs	r1, #6
 8000984:	2027      	movs	r0, #39	; 0x27
 8000986:	f000 f9f9 	bl	8000d7c <dwt_write16bitoffsetreg>
 800098a:	e018      	b.n	80009be <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d10a      	bne.n	80009aa <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000994:	2210      	movs	r2, #16
 8000996:	2106      	movs	r1, #6
 8000998:	2027      	movs	r0, #39	; 0x27
 800099a:	f000 f9ef 	bl	8000d7c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800099e:	2210      	movs	r2, #16
 80009a0:	2126      	movs	r1, #38	; 0x26
 80009a2:	2027      	movs	r0, #39	; 0x27
 80009a4:	f000 f9d7 	bl	8000d56 <dwt_write8bitoffsetreg>
 80009a8:	e009      	b.n	80009be <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80009aa:	2220      	movs	r2, #32
 80009ac:	2106      	movs	r1, #6
 80009ae:	2027      	movs	r0, #39	; 0x27
 80009b0:	f000 f9e4 	bl	8000d7c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80009b4:	2228      	movs	r2, #40	; 0x28
 80009b6:	2126      	movs	r1, #38	; 0x26
 80009b8:	2027      	movs	r0, #39	; 0x27
 80009ba:	f000 f9cc 	bl	8000d56 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80009be:	7cbb      	ldrb	r3, [r7, #18]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	78d2      	ldrb	r2, [r2, #3]
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <dwt_configure+0x2c8>)
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	461a      	mov	r2, r3
 80009d2:	2108      	movs	r1, #8
 80009d4:	2027      	movs	r0, #39	; 0x27
 80009d6:	f000 f9ed 	bl	8000db4 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	895b      	ldrh	r3, [r3, #10]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f241 0241 	movw	r2, #4161	; 0x1041
 80009e8:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	895b      	ldrh	r3, [r3, #10]
 80009ee:	461a      	mov	r2, r3
 80009f0:	2120      	movs	r1, #32
 80009f2:	2027      	movs	r0, #39	; 0x27
 80009f4:	f000 f9c2 	bl	8000d7c <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <dwt_configure+0x2cc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	210c      	movs	r1, #12
 8000a00:	2023      	movs	r0, #35	; 0x23
 8000a02:	f000 f9d7 	bl	8000db4 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000a06:	7cbb      	ldrb	r3, [r7, #18]
 8000a08:	4a3a      	ldr	r2, [pc, #232]	; (8000af4 <dwt_configure+0x2cc>)
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	461a      	mov	r2, r3
 8000a12:	2104      	movs	r1, #4
 8000a14:	2023      	movs	r0, #35	; 0x23
 8000a16:	f000 f9b1 	bl	8000d7c <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	799b      	ldrb	r3, [r3, #6]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00d      	beq.n	8000a3e <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	79db      	ldrb	r3, [r3, #7]
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <dwt_configure+0x2d0>)
 8000a2a:	5c9b      	ldrb	r3, [r3, r2]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2021      	movs	r0, #33	; 0x21
 8000a32:	f000 f990 	bl	8000d56 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000a36:	2303      	movs	r3, #3
 8000a38:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a44:	7cfb      	ldrb	r3, [r7, #19]
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a4a:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	049b      	lsls	r3, r3, #18
 8000a52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a56:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	051b      	lsls	r3, r3, #20
 8000a5c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a60:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a62:	7dbb      	ldrb	r3, [r7, #22]
 8000a64:	045b      	lsls	r3, r3, #17
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a6a:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	059b      	lsls	r3, r3, #22
 8000a72:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a76:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	795b      	ldrb	r3, [r3, #5]
 8000a7c:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	2100      	movs	r1, #0
 8000a86:	201f      	movs	r0, #31
 8000a88:	f000 f994 	bl	8000db4 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	789a      	ldrb	r2, [r3, #2]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	0419      	lsls	r1, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	79db      	ldrb	r3, [r3, #7]
 8000a9e:	035a      	lsls	r2, r3, #13
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <dwt_configure+0x2a8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <dwt_configure+0x2a8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2008      	movs	r0, #8
 8000ab4:	f000 f97e 	bl	8000db4 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ab8:	2242      	movs	r2, #66	; 0x42
 8000aba:	2100      	movs	r1, #0
 8000abc:	200d      	movs	r0, #13
 8000abe:	f000 f94a 	bl	8000d56 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08005b48 	.word	0x08005b48
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08005ac8 	.word	0x08005ac8
 8000ad8:	08005ae8 	.word	0x08005ae8
 8000adc:	08005b00 	.word	0x08005b00
 8000ae0:	08005b08 	.word	0x08005b08
 8000ae4:	08005ad0 	.word	0x08005ad0
 8000ae8:	08005b18 	.word	0x08005b18
 8000aec:	08005b24 	.word	0x08005b24
 8000af0:	08005b28 	.word	0x08005b28
 8000af4:	08005b0c 	.word	0x08005b0c
 8000af8:	08005b14 	.word	0x08005b14

08000afc <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	80fb      	strh	r3, [r7, #6]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000b0c:	88ba      	ldrh	r2, [r7, #4]
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	4413      	add	r3, r2
 8000b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b16:	dc09      	bgt.n	8000b2c <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	88b9      	ldrh	r1, [r7, #4]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2009      	movs	r0, #9
 8000b24:	f000 f828 	bl	8000b78 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e001      	b.n	8000b30 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	603a      	str	r2, [r7, #0]
 8000b42:	80fb      	strh	r3, [r7, #6]
 8000b44:	460b      	mov	r3, r1
 8000b46:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <dwt_writetxfctrl+0x3c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	431a      	orrs	r2, r3
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	059b      	lsls	r3, r3, #22
 8000b56:	431a      	orrs	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	03db      	lsls	r3, r3, #15
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	2100      	movs	r1, #0
 8000b64:	2008      	movs	r0, #8
 8000b66:	f000 f925 	bl	8000db4 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000

08000b78 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60ba      	str	r2, [r7, #8]
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4603      	mov	r3, r0
 8000b84:	81fb      	strh	r3, [r7, #14]
 8000b86:	460b      	mov	r3, r1
 8000b88:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b8e:	89bb      	ldrh	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10c      	bne.n	8000bae <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b94:	89fb      	ldrh	r3, [r7, #14]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	6179      	str	r1, [r7, #20]
 8000b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ba2:	b2d2      	uxtb	r2, r2
 8000ba4:	3318      	adds	r3, #24
 8000ba6:	443b      	add	r3, r7
 8000ba8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bac:	e02f      	b.n	8000c0e <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	1c59      	adds	r1, r3, #1
 8000bb6:	6179      	str	r1, [r7, #20]
 8000bb8:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	3318      	adds	r3, #24
 8000bc0:	443b      	add	r3, r7
 8000bc2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bc6:	89bb      	ldrh	r3, [r7, #12]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d809      	bhi.n	8000be0 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	89ba      	ldrh	r2, [r7, #12]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	443b      	add	r3, r7
 8000bda:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bde:	e016      	b.n	8000c0e <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000be0:	89bb      	ldrh	r3, [r7, #12]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	1c59      	adds	r1, r3, #1
 8000be8:	6179      	str	r1, [r7, #20]
 8000bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	3318      	adds	r3, #24
 8000bf2:	443b      	add	r3, r7
 8000bf4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bf8:	89bb      	ldrh	r3, [r7, #12]
 8000bfa:	09db      	lsrs	r3, r3, #7
 8000bfc:	b299      	uxth	r1, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	617a      	str	r2, [r7, #20]
 8000c04:	b2ca      	uxtb	r2, r1
 8000c06:	3318      	adds	r3, #24
 8000c08:	443b      	add	r3, r7
 8000c0a:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	b298      	uxth	r0, r3
 8000c12:	f107 0110 	add.w	r1, r7, #16
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	f000 faaf 	bl	800117c <writetospi>
} // end dwt_writetodevice()
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4603      	mov	r3, r0
 8000c32:	81fb      	strh	r3, [r7, #14]
 8000c34:	460b      	mov	r3, r1
 8000c36:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c3c:	89bb      	ldrh	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	617a      	str	r2, [r7, #20]
 8000c48:	89fa      	ldrh	r2, [r7, #14]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	3318      	adds	r3, #24
 8000c4e:	443b      	add	r3, r7
 8000c50:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c54:	e02f      	b.n	8000cb6 <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	1c59      	adds	r1, r3, #1
 8000c5e:	6179      	str	r1, [r7, #20]
 8000c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	3318      	adds	r3, #24
 8000c68:	443b      	add	r3, r7
 8000c6a:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c6e:	89bb      	ldrh	r3, [r7, #12]
 8000c70:	2b7f      	cmp	r3, #127	; 0x7f
 8000c72:	d809      	bhi.n	8000c88 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	617a      	str	r2, [r7, #20]
 8000c7a:	89ba      	ldrh	r2, [r7, #12]
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	3318      	adds	r3, #24
 8000c80:	443b      	add	r3, r7
 8000c82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c86:	e016      	b.n	8000cb6 <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c88:	89bb      	ldrh	r3, [r7, #12]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	1c59      	adds	r1, r3, #1
 8000c90:	6179      	str	r1, [r7, #20]
 8000c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	3318      	adds	r3, #24
 8000c9a:	443b      	add	r3, r7
 8000c9c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000ca0:	89bb      	ldrh	r3, [r7, #12]
 8000ca2:	09db      	lsrs	r3, r3, #7
 8000ca4:	b299      	uxth	r1, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	617a      	str	r2, [r7, #20]
 8000cac:	b2ca      	uxtb	r2, r1
 8000cae:	3318      	adds	r3, #24
 8000cb0:	443b      	add	r3, r7
 8000cb2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	b298      	uxth	r0, r3
 8000cba:	f107 0110 	add.w	r1, r7, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	f000 fa8f 	bl	80011e4 <readfromspi>
} // end dwt_readfromdevice()
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	b298      	uxth	r0, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b299      	uxth	r1, r3
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2204      	movs	r2, #4
 8000cea:	f7ff ff9c 	bl	8000c26 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cee:	2303      	movs	r3, #3
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	e00b      	b.n	8000d0c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	f107 010c 	add.w	r1, r7, #12
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	440a      	add	r2, r1
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	daf0      	bge.n	8000cf4 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d12:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d26:	2300      	movs	r3, #0
 8000d28:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b298      	uxth	r0, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b299      	uxth	r1, r3
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	2202      	movs	r2, #2
 8000d38:	f7ff ff75 	bl	8000c26 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	7b3b      	ldrb	r3, [r7, #12]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d4c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	b298      	uxth	r0, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	b299      	uxth	r1, r3
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f7ff ff02 	bl	8000b78 <dwt_writetodevice>
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	4613      	mov	r3, r2
 8000d88:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	b298      	uxth	r0, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	b299      	uxth	r1, r3
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2202      	movs	r2, #2
 8000da8:	f7ff fee6 	bl	8000b78 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00d      	b.n	8000de2 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	b2d9      	uxtb	r1, r3
 8000dca:	f107 0210 	add.w	r2, r7, #16
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	ddee      	ble.n	8000dc6 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	b298      	uxth	r0, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	b299      	uxth	r1, r3
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	2204      	movs	r2, #4
 8000df6:	f7ff febf 	bl	8000b78 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2104      	movs	r1, #4
 8000e12:	202d      	movs	r0, #45	; 0x2d
 8000e14:	f7ff ffb2 	bl	8000d7c <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e18:	2203      	movs	r2, #3
 8000e1a:	2106      	movs	r1, #6
 8000e1c:	202d      	movs	r0, #45	; 0x2d
 8000e1e:	f7ff ff9a 	bl	8000d56 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e22:	2200      	movs	r2, #0
 8000e24:	2106      	movs	r1, #6
 8000e26:	202d      	movs	r0, #45	; 0x2d
 8000e28:	f7ff ff95 	bl	8000d56 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e2c:	210a      	movs	r1, #10
 8000e2e:	202d      	movs	r0, #45	; 0x2d
 8000e30:	f7ff ff4d 	bl	8000cce <dwt_read32bitoffsetreg>
 8000e34:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e44:	2200      	movs	r2, #0
 8000e46:	2102      	movs	r1, #2
 8000e48:	202c      	movs	r0, #44	; 0x2c
 8000e4a:	f7ff ff84 	bl	8000d56 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e4e:	2202      	movs	r2, #2
 8000e50:	2102      	movs	r1, #2
 8000e52:	202c      	movs	r0, #44	; 0x2c
 8000e54:	f7ff ff7f 	bl	8000d56 <dwt_write8bitoffsetreg>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e64:	226d      	movs	r2, #109	; 0x6d
 8000e66:	f640 0106 	movw	r1, #2054	; 0x806
 8000e6a:	202e      	movs	r0, #46	; 0x2e
 8000e6c:	f7ff ff73 	bl	8000d56 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e76:	f240 6207 	movw	r2, #1543	; 0x607
 8000e7a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e7e:	202e      	movs	r0, #46	; 0x2e
 8000e80:	f7ff ff7c 	bl	8000d7c <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000e84:	e006      	b.n	8000e94 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000e86:	f241 6207 	movw	r2, #5639	; 0x1607
 8000e8a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e8e:	202e      	movs	r0, #46	; 0x2e
 8000e90:	f7ff ff74 	bl	8000d7c <dwt_write16bitoffsetreg>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000ea0:	200e      	movs	r0, #14
 8000ea2:	f000 f80f 	bl	8000ec4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000ea6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eaa:	2106      	movs	r1, #6
 8000eac:	202d      	movs	r0, #45	; 0x2d
 8000eae:	f7ff ff65 	bl	8000d7c <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f000 f956 	bl	8001164 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 f803 	bl	8000ec4 <_dwt_enableclocks>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2036      	movs	r0, #54	; 0x36
 8000ed6:	f7ff fea6 	bl	8000c26 <dwt_readfromdevice>
    switch(clocks)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0e      	cmp	r3, #14
 8000ede:	d876      	bhi.n	8000fce <_dwt_enableclocks+0x10a>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <_dwt_enableclocks+0x24>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000f35 	.word	0x08000f35
 8000eec:	08000f25 	.word	0x08000f25
 8000ef0:	08000f4b 	.word	0x08000f4b
 8000ef4:	08000fcf 	.word	0x08000fcf
 8000ef8:	08000fcf 	.word	0x08000fcf
 8000efc:	08000fcf 	.word	0x08000fcf
 8000f00:	08000fcf 	.word	0x08000fcf
 8000f04:	08000f61 	.word	0x08000f61
 8000f08:	08000f81 	.word	0x08000f81
 8000f0c:	08000fcf 	.word	0x08000fcf
 8000f10:	08000fcf 	.word	0x08000fcf
 8000f14:	08000f97 	.word	0x08000f97
 8000f18:	08000fa3 	.word	0x08000fa3
 8000f1c:	08000faf 	.word	0x08000faf
 8000f20:	08000fc5 	.word	0x08000fc5
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f24:	2300      	movs	r3, #0
 8000f26:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f32:	e04d      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f34:	7b3b      	ldrb	r3, [r7, #12]
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	f023 0303 	bic.w	r3, r3, #3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f48:	e042      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000f4a:	7b3b      	ldrb	r3, [r7, #12]
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f5e:	e037      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000f60:	7b3b      	ldrb	r3, [r7, #12]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f74:	7b7b      	ldrb	r3, [r7, #13]
 8000f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f7e:	e027      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f8a:	7b7b      	ldrb	r3, [r7, #13]
 8000f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f94:	e01c      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fa0:	e016      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000fa2:	7b7b      	ldrb	r3, [r7, #13]
 8000fa4:	f023 0302 	bic.w	r3, r3, #2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fac:	e010      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000fae:	7b3b      	ldrb	r3, [r7, #12]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fc2:	e005      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fcc:	e000      	b.n	8000fd0 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000fce:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2036      	movs	r0, #54	; 0x36
 8000fda:	f7ff fdcd 	bl	8000b78 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2036      	movs	r0, #54	; 0x36
 8000fea:	f7ff fdc5 	bl	8000b78 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop

08000ff8 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ff61 	bl	8000ec4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001002:	2200      	movs	r2, #0
 8001004:	2104      	movs	r1, #4
 8001006:	2036      	movs	r0, #54	; 0x36
 8001008:	f7ff feb8 	bl	8000d7c <dwt_write16bitoffsetreg>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001022:	2300      	movs	r3, #0
 8001024:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <dwt_starttx+0x98>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2201      	movs	r2, #1
 800103a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d020      	beq.n	8001088 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	f043 0306 	orr.w	r3, r3, #6
 800104c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	461a      	mov	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	200d      	movs	r0, #13
 8001056:	f7ff fe7e 	bl	8000d56 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800105a:	2103      	movs	r1, #3
 800105c:	200f      	movs	r0, #15
 800105e:	f7ff fe5d 	bl	8000d1c <dwt_read16bitoffsetreg>
 8001062:	4603      	mov	r3, r0
 8001064:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e012      	b.n	800109c <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001076:	2240      	movs	r2, #64	; 0x40
 8001078:	2100      	movs	r1, #0
 800107a:	200d      	movs	r0, #13
 800107c:	f7ff fe6b 	bl	8000d56 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e009      	b.n	800109c <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	461a      	mov	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	200d      	movs	r0, #13
 8001098:	f7ff fe5d 	bl	8000d56 <dwt_write8bitoffsetreg>
    }

    return retval;
 800109c:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000000 	.word	0x20000000

080010ac <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80010b0:	f7ff ffa2 	bl	8000ff8 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	202c      	movs	r0, #44	; 0x2c
 80010ba:	f7ff fe5f 	bl	8000d7c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80010be:	2200      	movs	r2, #0
 80010c0:	2106      	movs	r1, #6
 80010c2:	202c      	movs	r0, #44	; 0x2c
 80010c4:	f7ff fe47 	bl	8000d56 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80010c8:	f7ff feba 	bl	8000e40 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2103      	movs	r1, #3
 80010d0:	2036      	movs	r0, #54	; 0x36
 80010d2:	f7ff fe40 	bl	8000d56 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 f844 	bl	8001164 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80010dc:	22f0      	movs	r2, #240	; 0xf0
 80010de:	2103      	movs	r1, #3
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f7ff fe38 	bl	8000d56 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 80010e6:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <dwt_softreset+0x48>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	755a      	strb	r2, [r3, #21]
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001110:	b25b      	sxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	461a      	mov	r2, r3
 8001118:	210e      	movs	r1, #14
 800111a:	202b      	movs	r0, #43	; 0x2b
 800111c:	f7ff fe1b 	bl	8000d56 <dwt_write8bitoffsetreg>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800112e:	f000 f991 	bl	8001454 <port_GetEXT_IRQStatus>
 8001132:	4603      	mov	r3, r0
 8001134:	607b      	str	r3, [r7, #4]

	if(s) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800113c:	f000 f97c 	bl	8001438 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001158:	f000 f975 	bl	8001446 <port_EnableEXT_IRQ>
	}
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f8c5 	bl	80012fc <Sleep>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800117c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001180:	4683      	mov	fp, r0
 8001182:	468a      	mov	sl, r1
 8001184:	4690      	mov	r8, r2
 8001186:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001188:	f7ff ffce 	bl	8001128 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800118c:	4d13      	ldr	r5, [pc, #76]	; (80011dc <writetospi+0x60>)
    stat = decamutexon() ;
 800118e:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001190:	4628      	mov	r0, r5
 8001192:	f003 f8a5 	bl	80042e0 <HAL_SPI_GetState>
 8001196:	2801      	cmp	r0, #1
 8001198:	4604      	mov	r4, r0
 800119a:	d1f9      	bne.n	8001190 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800119c:	4810      	ldr	r0, [pc, #64]	; (80011e0 <writetospi+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	2140      	movs	r1, #64	; 0x40
 80011a2:	f001 fbed 	bl	8002980 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80011a6:	465a      	mov	r2, fp
 80011a8:	4651      	mov	r1, sl
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <writetospi+0x60>)
 80011b0:	f002 fe5b 	bl	8003e6a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	4649      	mov	r1, r9
 80011ba:	fa1f f288 	uxth.w	r2, r8
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <writetospi+0x60>)
 80011c0:	f002 fe53 	bl	8003e6a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80011c4:	4622      	mov	r2, r4
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <writetospi+0x64>)
 80011ca:	f001 fbd9 	bl	8002980 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80011ce:	4630      	mov	r0, r6
 80011d0:	f7ff ffbb 	bl	800114a <decamutexoff>

    return 0;
} // end writetospi()
 80011d4:	2000      	movs	r0, #0
 80011d6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80011da:	bf00      	nop
 80011dc:	2000054c 	.word	0x2000054c
 80011e0:	40020400 	.word	0x40020400

080011e4 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80011e4:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80011e8:	4681      	mov	r9, r0
 80011ea:	460c      	mov	r4, r1
 80011ec:	4690      	mov	r8, r2
 80011ee:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80011f0:	f7ff ff9a 	bl	8001128 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011f4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001274 <readfromspi+0x90>
    stat = decamutexon() ;
 80011f8:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011fa:	4650      	mov	r0, sl
 80011fc:	f003 f870 	bl	80042e0 <HAL_SPI_GetState>
 8001200:	2801      	cmp	r0, #1
 8001202:	d1fa      	bne.n	80011fa <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001204:	481a      	ldr	r0, [pc, #104]	; (8001270 <readfromspi+0x8c>)
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	f001 fbb9 	bl	8002980 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800120e:	f1b9 0f00 	cmp.w	r9, #0
 8001212:	d00c      	beq.n	800122e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001214:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001274 <readfromspi+0x90>
 8001218:	44a1      	add	r9, r4
 800121a:	2201      	movs	r2, #1
 800121c:	4621      	mov	r1, r4
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001222:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001224:	4650      	mov	r0, sl
 8001226:	f002 fe20 	bl	8003e6a <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800122a:	45a1      	cmp	r9, r4
 800122c:	d1f5      	bne.n	800121a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800122e:	f1b8 0f00 	cmp.w	r8, #0
 8001232:	d012      	beq.n	800125a <readfromspi+0x76>
 8001234:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001274 <readfromspi+0x90>
 8001238:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800123c:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800123e:	f8dc 1000 	ldr.w	r1, [ip]
 8001242:	688a      	ldr	r2, [r1, #8]
 8001244:	0792      	lsls	r2, r2, #30
 8001246:	d5fc      	bpl.n	8001242 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001248:	60cc      	str	r4, [r1, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800124a:	688a      	ldr	r2, [r1, #8]
 800124c:	07d3      	lsls	r3, r2, #31
 800124e:	d5fc      	bpl.n	800124a <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001250:	68cb      	ldr	r3, [r1, #12]
 8001252:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001256:	4285      	cmp	r5, r0
 8001258:	d1f1      	bne.n	800123e <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800125a:	2201      	movs	r2, #1
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <readfromspi+0x8c>)
 8001260:	f001 fb8e 	bl	8002980 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001264:	4630      	mov	r0, r6
 8001266:	f7ff ff70 	bl	800114a <decamutexoff>

    return 0;
} // end readfromspi()
 800126a:	2000      	movs	r0, #0
 800126c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001270:	40020400 	.word	0x40020400
 8001274:	2000054c 	.word	0x2000054c

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db12      	blt.n	80012ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	490a      	ldr	r1, [pc, #40]	; (80012f8 <__NVIC_DisableIRQ+0x44>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	3320      	adds	r3, #32
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e0:	f3bf 8f4f 	dsb	sy
}
 80012e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e6:	f3bf 8f6f 	isb	sy
}
 80012ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f001 f82d 	bl	8002364 <HAL_Delay>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <EXTI_GetITEnStatus+0x38>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	095b      	lsrs	r3, r3, #5
 8001322:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2db      	uxtb	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001356:	2301      	movs	r3, #1
 8001358:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800135a:	2311      	movs	r3, #17
 800135c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	480a      	ldr	r0, [pc, #40]	; (8001390 <reset_DW1000+0x40>)
 8001368:	f001 f986 	bl	8002678 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <reset_DW1000+0x40>)
 8001372:	f001 fb05 	bl	8002980 <HAL_GPIO_WritePin>

    Sleep(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ffc0 	bl	80012fc <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f809 	bl	8001394 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001382:	2002      	movs	r0, #2
 8001384:	f7ff ffba 	bl	80012fc <Sleep>
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020000 	.word	0x40020000

08001394 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d015      	beq.n	80013ce <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013aa:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <setup_DW1000RSTnIRQ+0x70>)
 80013b8:	f001 f95e 	bl	8002678 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 80013bc:	2006      	movs	r0, #6
 80013be:	f001 f910 	bl	80025e2 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2105      	movs	r1, #5
 80013c6:	2006      	movs	r0, #6
 80013c8:	f001 f8ef 	bl	80025aa <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 80013cc:	e015      	b.n	80013fa <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 80013ce:	2006      	movs	r0, #6
 80013d0:	f001 f915 	bl	80025fe <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013d8:	2311      	movs	r3, #17
 80013da:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <setup_DW1000RSTnIRQ+0x70>)
 80013ec:	f001 f944 	bl	8002678 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2101      	movs	r1, #1
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <setup_DW1000RSTnIRQ+0x70>)
 80013f6:	f001 fac3 	bl	8002980 <HAL_GPIO_WritePin>
}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40020000 	.word	0x40020000

08001408 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <port_set_dw1000_slowrate+0x14>)
 800140e:	2220      	movs	r2, #32
 8001410:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <port_set_dw1000_slowrate+0x14>)
 8001414:	f002 fca0 	bl	8003d58 <HAL_SPI_Init>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000054c 	.word	0x2000054c

08001420 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <port_set_dw1000_fastrate+0x14>)
 8001426:	2208      	movs	r2, #8
 8001428:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800142a:	4802      	ldr	r0, [pc, #8]	; (8001434 <port_set_dw1000_fastrate+0x14>)
 800142c:	f002 fc94 	bl	8003d58 <HAL_SPI_Init>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000054c 	.word	0x2000054c

08001438 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800143c:	2017      	movs	r0, #23
 800143e:	f7ff ff39 	bl	80012b4 <__NVIC_DisableIRQ>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800144a:	2017      	movs	r0, #23
 800144c:	f7ff ff14 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001458:	2017      	movs	r0, #23
 800145a:	f7ff ff5b 	bl	8001314 <EXTI_GetITEnStatus>
 800145e:	4603      	mov	r3, r0
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}

08001464 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <SSD1306_InvertDisplay+0x1a>
 8001472:	22a7      	movs	r2, #167	; 0xa7
 8001474:	2100      	movs	r1, #0
 8001476:	2078      	movs	r0, #120	; 0x78
 8001478:	f000 faac 	bl	80019d4 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 800147c:	e004      	b.n	8001488 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 800147e:	22a6      	movs	r2, #166	; 0xa6
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	; 0x78
 8001484:	f000 faa6 	bl	80019d4 <ssd1306_I2C_Write>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001496:	f000 fa21 	bl	80018dc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800149a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800149e:	2201      	movs	r2, #1
 80014a0:	2178      	movs	r1, #120	; 0x78
 80014a2:	485b      	ldr	r0, [pc, #364]	; (8001610 <SSD1306_Init+0x180>)
 80014a4:	f001 fcc8 	bl	8002e38 <HAL_I2C_IsDeviceReady>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e0a9      	b.n	8001606 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014b2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014b8:	e002      	b.n	80014c0 <SSD1306_Init+0x30>
		p--;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3b01      	subs	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014c6:	22ae      	movs	r2, #174	; 0xae
 80014c8:	2100      	movs	r1, #0
 80014ca:	2078      	movs	r0, #120	; 0x78
 80014cc:	f000 fa82 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014d0:	2220      	movs	r2, #32
 80014d2:	2100      	movs	r1, #0
 80014d4:	2078      	movs	r0, #120	; 0x78
 80014d6:	f000 fa7d 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014da:	2210      	movs	r2, #16
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	; 0x78
 80014e0:	f000 fa78 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014e4:	22b0      	movs	r2, #176	; 0xb0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	; 0x78
 80014ea:	f000 fa73 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014ee:	22c8      	movs	r2, #200	; 0xc8
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 fa6e 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2078      	movs	r0, #120	; 0x78
 80014fe:	f000 fa69 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001502:	2210      	movs	r2, #16
 8001504:	2100      	movs	r1, #0
 8001506:	2078      	movs	r0, #120	; 0x78
 8001508:	f000 fa64 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800150c:	2240      	movs	r2, #64	; 0x40
 800150e:	2100      	movs	r1, #0
 8001510:	2078      	movs	r0, #120	; 0x78
 8001512:	f000 fa5f 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001516:	2281      	movs	r2, #129	; 0x81
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	; 0x78
 800151c:	f000 fa5a 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f000 fa55 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800152a:	22a1      	movs	r2, #161	; 0xa1
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	; 0x78
 8001530:	f000 fa50 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001534:	22a6      	movs	r2, #166	; 0xa6
 8001536:	2100      	movs	r1, #0
 8001538:	2078      	movs	r0, #120	; 0x78
 800153a:	f000 fa4b 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800153e:	22a8      	movs	r2, #168	; 0xa8
 8001540:	2100      	movs	r1, #0
 8001542:	2078      	movs	r0, #120	; 0x78
 8001544:	f000 fa46 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001548:	223f      	movs	r2, #63	; 0x3f
 800154a:	2100      	movs	r1, #0
 800154c:	2078      	movs	r0, #120	; 0x78
 800154e:	f000 fa41 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001552:	22a4      	movs	r2, #164	; 0xa4
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f000 fa3c 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800155c:	22d3      	movs	r2, #211	; 0xd3
 800155e:	2100      	movs	r1, #0
 8001560:	2078      	movs	r0, #120	; 0x78
 8001562:	f000 fa37 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2078      	movs	r0, #120	; 0x78
 800156c:	f000 fa32 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001570:	22d5      	movs	r2, #213	; 0xd5
 8001572:	2100      	movs	r1, #0
 8001574:	2078      	movs	r0, #120	; 0x78
 8001576:	f000 fa2d 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800157a:	22f0      	movs	r2, #240	; 0xf0
 800157c:	2100      	movs	r1, #0
 800157e:	2078      	movs	r0, #120	; 0x78
 8001580:	f000 fa28 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001584:	22d9      	movs	r2, #217	; 0xd9
 8001586:	2100      	movs	r1, #0
 8001588:	2078      	movs	r0, #120	; 0x78
 800158a:	f000 fa23 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800158e:	2222      	movs	r2, #34	; 0x22
 8001590:	2100      	movs	r1, #0
 8001592:	2078      	movs	r0, #120	; 0x78
 8001594:	f000 fa1e 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001598:	22da      	movs	r2, #218	; 0xda
 800159a:	2100      	movs	r1, #0
 800159c:	2078      	movs	r0, #120	; 0x78
 800159e:	f000 fa19 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015a2:	2212      	movs	r2, #18
 80015a4:	2100      	movs	r1, #0
 80015a6:	2078      	movs	r0, #120	; 0x78
 80015a8:	f000 fa14 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015ac:	22db      	movs	r2, #219	; 0xdb
 80015ae:	2100      	movs	r1, #0
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f000 fa0f 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015b6:	2220      	movs	r2, #32
 80015b8:	2100      	movs	r1, #0
 80015ba:	2078      	movs	r0, #120	; 0x78
 80015bc:	f000 fa0a 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015c0:	228d      	movs	r2, #141	; 0x8d
 80015c2:	2100      	movs	r1, #0
 80015c4:	2078      	movs	r0, #120	; 0x78
 80015c6:	f000 fa05 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015ca:	2214      	movs	r2, #20
 80015cc:	2100      	movs	r1, #0
 80015ce:	2078      	movs	r0, #120	; 0x78
 80015d0:	f000 fa00 	bl	80019d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015d4:	22af      	movs	r2, #175	; 0xaf
 80015d6:	2100      	movs	r1, #0
 80015d8:	2078      	movs	r0, #120	; 0x78
 80015da:	f000 f9fb 	bl	80019d4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015de:	222e      	movs	r2, #46	; 0x2e
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	; 0x78
 80015e4:	f000 f9f6 	bl	80019d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 f843 	bl	8001674 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80015ee:	f000 f813 	bl	8001618 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <SSD1306_Init+0x184>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SSD1306_Init+0x184>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SSD1306_Init+0x184>)
 8001600:	2201      	movs	r2, #1
 8001602:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200004f8 	.word	0x200004f8
 8001614:	200004f0 	.word	0x200004f0

08001618 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	e01d      	b.n	8001660 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	3b50      	subs	r3, #80	; 0x50
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	; 0x78
 8001630:	f000 f9d0 	bl	80019d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2078      	movs	r0, #120	; 0x78
 800163a:	f000 f9cb 	bl	80019d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800163e:	2210      	movs	r2, #16
 8001640:	2100      	movs	r1, #0
 8001642:	2078      	movs	r0, #120	; 0x78
 8001644:	f000 f9c6 	bl	80019d4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	01db      	lsls	r3, r3, #7
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <SSD1306_UpdateScreen+0x58>)
 800164e:	441a      	add	r2, r3
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	2078      	movs	r0, #120	; 0x78
 8001656:	f000 f957 	bl	8001908 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	3301      	adds	r3, #1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b07      	cmp	r3, #7
 8001664:	d9de      	bls.n	8001624 <SSD1306_UpdateScreen+0xc>
	}
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200000f0 	.word	0x200000f0

08001674 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <SSD1306_Fill+0x14>
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <SSD1306_Fill+0x16>
 8001688:	23ff      	movs	r3, #255	; 0xff
 800168a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168e:	4619      	mov	r1, r3
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <SSD1306_Fill+0x2c>)
 8001692:	f003 fbd8 	bl	8004e46 <memset>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000f0 	.word	0x200000f0

080016a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
 80016ae:	460b      	mov	r3, r1
 80016b0:	80bb      	strh	r3, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	70fb      	strb	r3, [r7, #3]
	if (
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ba:	d848      	bhi.n	800174e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	2b3f      	cmp	r3, #63	; 0x3f
 80016c0:	d845      	bhi.n	800174e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <SSD1306_DrawPixel+0xb8>)
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d11a      	bne.n	8001714 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	08db      	lsrs	r3, r3, #3
 80016e4:	b298      	uxth	r0, r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	01db      	lsls	r3, r3, #7
 80016ea:	4413      	add	r3, r2
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <SSD1306_DrawPixel+0xbc>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	2101      	movs	r1, #1
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b259      	sxtb	r1, r3
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	4603      	mov	r3, r0
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	4413      	add	r3, r2
 800170c:	b2c9      	uxtb	r1, r1
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <SSD1306_DrawPixel+0xbc>)
 8001710:	54d1      	strb	r1, [r2, r3]
 8001712:	e01d      	b.n	8001750 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	b298      	uxth	r0, r3
 800171c:	4603      	mov	r3, r0
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4413      	add	r3, r2
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <SSD1306_DrawPixel+0xbc>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	b25a      	sxtb	r2, r3
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	b25b      	sxtb	r3, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4013      	ands	r3, r2
 800173c:	b259      	sxtb	r1, r3
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	4603      	mov	r3, r0
 8001742:	01db      	lsls	r3, r3, #7
 8001744:	4413      	add	r3, r2
 8001746:	b2c9      	uxtb	r1, r1
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <SSD1306_DrawPixel+0xbc>)
 800174a:	54d1      	strb	r1, [r2, r3]
 800174c:	e000      	b.n	8001750 <SSD1306_DrawPixel+0xac>
		return;
 800174e:	bf00      	nop
	}
}
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200004f0 	.word	0x200004f0
 8001760:	200000f0 	.word	0x200000f0

08001764 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	4613      	mov	r3, r2
 8001772:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <SSD1306_GotoXY+0x28>)
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <SSD1306_GotoXY+0x28>)
 800177c:	88bb      	ldrh	r3, [r7, #4]
 800177e:	8053      	strh	r3, [r2, #2]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	200004f0 	.word	0x200004f0

08001790 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <SSD1306_Putc+0xfc>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
	if (
 80017ac:	2b7f      	cmp	r3, #127	; 0x7f
 80017ae:	dc07      	bgt.n	80017c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <SSD1306_Putc+0xfc>)
 80017b2:	885b      	ldrh	r3, [r3, #2]
 80017b4:	461a      	mov	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017bc:	2b3f      	cmp	r3, #63	; 0x3f
 80017be:	dd01      	ble.n	80017c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e05e      	b.n	8001882 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e04b      	b.n	8001862 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	3b20      	subs	r3, #32
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	7849      	ldrb	r1, [r1, #1]
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	440b      	add	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e030      	b.n	8001850 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <SSD1306_Putc+0xfc>)
 8001800:	881a      	ldrh	r2, [r3, #0]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	b29b      	uxth	r3, r3
 8001806:	4413      	add	r3, r2
 8001808:	b298      	uxth	r0, r3
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <SSD1306_Putc+0xfc>)
 800180c:	885a      	ldrh	r2, [r3, #2]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	79ba      	ldrb	r2, [r7, #6]
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff ff43 	bl	80016a4 <SSD1306_DrawPixel>
 800181e:	e014      	b.n	800184a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <SSD1306_Putc+0xfc>)
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	b29b      	uxth	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b298      	uxth	r0, r3
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <SSD1306_Putc+0xfc>)
 800182e:	885a      	ldrh	r2, [r3, #2]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	b29b      	uxth	r3, r3
 8001834:	4413      	add	r3, r2
 8001836:	b299      	uxth	r1, r3
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf0c      	ite	eq
 800183e:	2301      	moveq	r3, #1
 8001840:	2300      	movne	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	f7ff ff2d 	bl	80016a4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3301      	adds	r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4293      	cmp	r3, r2
 800185a:	d3c8      	bcc.n	80017ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	461a      	mov	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	4293      	cmp	r3, r2
 800186c:	d3ad      	bcc.n	80017ca <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <SSD1306_Putc+0xfc>)
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <SSD1306_Putc+0xfc>)
 800187e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001880:	79fb      	ldrb	r3, [r7, #7]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200004f0 	.word	0x200004f0

08001890 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800189e:	e012      	b.n	80018c6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff71 	bl	8001790 <SSD1306_Putc>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d002      	beq.n	80018c0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	e008      	b.n	80018d2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e8      	bne.n	80018a0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	781b      	ldrb	r3, [r3, #0]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <ssd1306_I2C_Init+0x28>)
 80018e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018e6:	e002      	b.n	80018ee <ssd1306_I2C_Init+0x12>
		p--;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0003d090 	.word	0x0003d090

08001908 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0c7      	sub	sp, #284	; 0x11c
 800190c:	af02      	add	r7, sp, #8
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001916:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800191a:	600a      	str	r2, [r1, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001922:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001926:	4622      	mov	r2, r4
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800192e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001932:	4602      	mov	r2, r0
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800193a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800193e:	460a      	mov	r2, r1
 8001940:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800194a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800194e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800195c:	e015      	b.n	800198a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800195e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001962:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001966:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	441a      	add	r2, r3
 800196e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001972:	3301      	adds	r3, #1
 8001974:	7811      	ldrb	r1, [r2, #0]
 8001976:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800197a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800197e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001980:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001984:	3301      	adds	r3, #1
 8001986:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800198a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800198e:	b29b      	uxth	r3, r3
 8001990:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001994:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d8df      	bhi.n	800195e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800199e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019a2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b299      	uxth	r1, r3
 80019aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	f107 020c 	add.w	r2, r7, #12
 80019bc:	200a      	movs	r0, #10
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <ssd1306_I2C_WriteMulti+0xc8>)
 80019c2:	f001 f93b 	bl	8002c3c <HAL_I2C_Master_Transmit>
}
 80019c6:	bf00      	nop
 80019c8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	200004f8 	.word	0x200004f8

080019d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	460b      	mov	r3, r1
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	4613      	mov	r3, r2
 80019e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	b299      	uxth	r1, r3
 80019f2:	f107 020c 	add.w	r2, r7, #12
 80019f6:	230a      	movs	r3, #10
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2302      	movs	r3, #2
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <ssd1306_I2C_Write+0x38>)
 80019fe:	f001 f91d 	bl	8002c3c <HAL_I2C_Master_Transmit>
}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200004f8 	.word	0x200004f8

08001a10 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1d39      	adds	r1, r7, #4
 8001a22:	2201      	movs	r2, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff33 	bl	8001890 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a2a:	f7ff fdf5 	bl	8001618 <SSD1306_UpdateScreen>
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b30      	ldr	r3, [pc, #192]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a2b      	ldr	r2, [pc, #172]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_GPIO_Init+0xe8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4818      	ldr	r0, [pc, #96]	; (8001b24 <MX_GPIO_Init+0xec>)
 8001ac4:	f000 ff5c 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001acc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4812      	ldr	r0, [pc, #72]	; (8001b28 <MX_GPIO_Init+0xf0>)
 8001ade:	f000 fdcb 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	480b      	ldr	r0, [pc, #44]	; (8001b24 <MX_GPIO_Init+0xec>)
 8001af8:	f000 fdbe 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_GPIO_Init+0xec>)
 8001b14:	f000 fdb0 	bl	8002678 <HAL_GPIO_Init>

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020000 	.word	0x40020000

08001b2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <MX_I2C1_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b6a:	f000 ff23 	bl	80029b4 <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 f8ce 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200004f8 	.word	0x200004f8
 8001b80:	40005400 	.word	0x40005400
 8001b84:	00061a80 	.word	0x00061a80

08001b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_I2C_MspInit+0x84>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d12c      	bne.n	8001c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <HAL_I2C_MspInit+0x8c>)
 8001be4:	f000 fd48 	bl	8002678 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_I2C_MspInit+0x88>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1c:	f000 fb30 	bl	8002280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c20:	f000 f810 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c24:	f7ff ff08 	bl	8001a38 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c28:	f000 f87a 	bl	8001d20 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c2c:	f000 fa8c 	bl	8002148 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c30:	f7ff ff7c 	bl	8001b2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fbad 	bl	8001394 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8001c3a:	f7ff fc29 	bl	8001490 <SSD1306_Init>
    dw_main();
 8001c3e:	f000 fa07 	bl	8002050 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <main+0x2a>

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b094      	sub	sp, #80	; 0x50
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2230      	movs	r2, #48	; 0x30
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 f8f7 	bl	8004e46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <SystemClock_Config+0xc8>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <SystemClock_Config+0xc8>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <SystemClock_Config+0xc8>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c84:	2300      	movs	r3, #0
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <SystemClock_Config+0xcc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <SystemClock_Config+0xcc>)
 8001c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <SystemClock_Config+0xcc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cac:	2302      	movs	r3, #2
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001cb8:	2364      	movs	r3, #100	; 0x64
 8001cba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 fbed 	bl	80034a8 <HAL_RCC_OscConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd4:	f000 f81e 	bl	8001d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd8:	230f      	movs	r3, #15
 8001cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fe4f 	bl	8003998 <HAL_RCC_ClockConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d00:	f000 f808 	bl	8001d14 <Error_Handler>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3750      	adds	r7, #80	; 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <Error_Handler+0x8>
	...

08001d20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <MX_SPI1_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d6c:	220a      	movs	r2, #10
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_SPI1_Init+0x64>)
 8001d72:	f001 fff1 	bl	8003d58 <HAL_SPI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f7ff ffca 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000054c 	.word	0x2000054c
 8001d88:	40013000 	.word	0x40013000

08001d8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <HAL_SPI_MspInit+0x94>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d133      	bne.n	8001e16 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_SPI_MspInit+0x98>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <HAL_SPI_MspInit+0x98>)
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_SPI_MspInit+0x98>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_SPI_MspInit+0x98>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <HAL_SPI_MspInit+0x98>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_SPI_MspInit+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001de6:	23e0      	movs	r3, #224	; 0xe0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df6:	2305      	movs	r3, #5
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4809      	ldr	r0, [pc, #36]	; (8001e28 <HAL_SPI_MspInit+0x9c>)
 8001e02:	f000 fc39 	bl	8002678 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2023      	movs	r0, #35	; 0x23
 8001e0c:	f000 fbcd 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e10:	2023      	movs	r0, #35	; 0x23
 8001e12:	f000 fbe6 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40013000 	.word	0x40013000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_MspInit+0x4c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec8:	f000 fa2c 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <SPI1_IRQHandler+0x10>)
 8001ed6:	f002 f905 	bl	80040e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000054c 	.word	0x2000054c

08001ee4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e00a      	b.n	8001f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ef6:	f3af 8000 	nop.w
 8001efa:	4601      	mov	r1, r0
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	b2ca      	uxtb	r2, r1
 8001f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbf0      	blt.n	8001ef6 <_read+0x12>
	}

return len;
 8001f14:	687b      	ldr	r3, [r7, #4]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e009      	b.n	8001f44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dbf1      	blt.n	8001f30 <_write+0x12>
	}
	return len;
 8001f4c:	687b      	ldr	r3, [r7, #4]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_close>:

int _close(int file)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_isatty>:

int _isatty(int file)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
	return 1;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
	return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <_sbrk+0x5c>)
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <_sbrk+0x60>)
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <_sbrk+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <_sbrk+0x64>)
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <_sbrk+0x68>)
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d207      	bcs.n	8002000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff0:	f002 ff78 	bl	8004ee4 <__errno>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	e009      	b.n	8002014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <_sbrk+0x64>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <_sbrk+0x64>)
 8002010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20020000 	.word	0x20020000
 8002020:	00000400 	.word	0x00000400
 8002024:	200005a4 	.word	0x200005a4
 8002028:	20000740 	.word	0x20000740

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
//dwt
	ssd1306_write(buff, Font_7x10);
 8002054:	4834      	ldr	r0, [pc, #208]	; (8002128 <dw_main+0xd8>)
 8002056:	4b35      	ldr	r3, [pc, #212]	; (800212c <dw_main+0xdc>)
 8002058:	e893 0006 	ldmia.w	r3, {r1, r2}
 800205c:	f7ff fcd8 	bl	8001a10 <ssd1306_write>
//	FILE *fp;

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002060:	f7ff f976 	bl	8001350 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002064:	f7ff f9d0 	bl	8001408 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8002068:	2000      	movs	r0, #0
 800206a:	f7fe fa87 	bl	800057c <dwt_initialise>
 800206e:	4603      	mov	r3, r0
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d110      	bne.n	8002098 <dw_main+0x48>
    {
        printf("INIT FAILED");
 8002076:	482e      	ldr	r0, [pc, #184]	; (8002130 <dw_main+0xe0>)
 8002078:	f002 fe90 	bl	8004d9c <iprintf>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 800207c:	210a      	movs	r1, #10
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fb70 	bl	8001764 <SSD1306_GotoXY>
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff f9ed 	bl	8001464 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 800208a:	482a      	ldr	r0, [pc, #168]	; (8002134 <dw_main+0xe4>)
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <dw_main+0xdc>)
 800208e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002092:	f7ff fcbd 	bl	8001a10 <ssd1306_write>
        while (1)
 8002096:	e7fe      	b.n	8002096 <dw_main+0x46>
        { };
    }
    port_set_dw1000_fastrate();
 8002098:	f7ff f9c2 	bl	8001420 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 800209c:	4826      	ldr	r0, [pc, #152]	; (8002138 <dw_main+0xe8>)
 800209e:	f7fe fbc3 	bl	8000828 <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
    	SSD1306_GotoXY(0, 10);
 80020a2:	210a      	movs	r1, #10
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fb5d 	bl	8001764 <SSD1306_GotoXY>
    	ssd1306_write("Transmitted : ", Font_7x10);
 80020aa:	4824      	ldr	r0, [pc, #144]	; (800213c <dw_main+0xec>)
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <dw_main+0xdc>)
 80020ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020b2:	f7ff fcad 	bl	8001a10 <ssd1306_write>


        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80020b6:	2200      	movs	r2, #0
 80020b8:	4921      	ldr	r1, [pc, #132]	; (8002140 <dw_main+0xf0>)
 80020ba:	200c      	movs	r0, #12
 80020bc:	f7fe fd1e 	bl	8000afc <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	200c      	movs	r0, #12
 80020c6:	f7fe fd37 	bl	8000b38 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7fe ffa0 	bl	8001010 <dwt_starttx>
        HAL_UART_Transmit(&huart2, tx_msg, sizeof(tx_msg), HAL_MAX_DELAY);
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	220c      	movs	r2, #12
 80020d6:	491a      	ldr	r1, [pc, #104]	; (8002140 <dw_main+0xf0>)
 80020d8:	481a      	ldr	r0, [pc, #104]	; (8002144 <dw_main+0xf4>)
 80020da:	f002 fa3a 	bl	8004552 <HAL_UART_Transmit>
        SSD1306_GotoXY(0,  30);
 80020de:	211e      	movs	r1, #30
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fb3f 	bl	8001764 <SSD1306_GotoXY>
        ssd1306_write(tx_msg, Font_7x10);
 80020e6:	4816      	ldr	r0, [pc, #88]	; (8002140 <dw_main+0xf0>)
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <dw_main+0xdc>)
 80020ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020ee:	f7ff fc8f 	bl	8001a10 <ssd1306_write>
        /* Poll DW1000 until TX frame sent event set. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it.*/
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80020f2:	bf00      	nop
 80020f4:	2100      	movs	r1, #0
 80020f6:	200f      	movs	r0, #15
 80020f8:	f7fe fde9 	bl	8000cce <dwt_read32bitoffsetreg>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f6      	beq.n	80020f4 <dw_main+0xa4>
        { };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	2100      	movs	r1, #0
 800210a:	200f      	movs	r0, #15
 800210c:	f7fe fe52 	bl	8000db4 <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8002110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002114:	f7ff f8f2 	bl	80012fc <Sleep>


        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <dw_main+0xf0>)
 800211a:	785b      	ldrb	r3, [r3, #1]
 800211c:	3301      	adds	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <dw_main+0xf0>)
 8002122:	705a      	strb	r2, [r3, #1]
    	SSD1306_GotoXY(0, 10);
 8002124:	e7bd      	b.n	80020a2 <dw_main+0x52>
 8002126:	bf00      	nop
 8002128:	20000010 	.word	0x20000010
 800212c:	20000004 	.word	0x20000004
 8002130:	08005a9c 	.word	0x08005a9c
 8002134:	08005aa8 	.word	0x08005aa8
 8002138:	20000020 	.word	0x20000020
 800213c:	08005ab8 	.word	0x08005ab8
 8002140:	2000002c 	.word	0x2000002c
 8002144:	200005a8 	.word	0x200005a8

08002148 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_USART2_UART_Init+0x50>)
 8002150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800216e:	220c      	movs	r2, #12
 8002170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART2_UART_Init+0x4c>)
 8002180:	f002 f99a 	bl	80044b8 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800218a:	f7ff fdc3 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200005a8 	.word	0x200005a8
 8002198:	40004400 	.word	0x40004400

0800219c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_UART_MspInit+0x84>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d12b      	bne.n	8002216 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_UART_MspInit+0x88>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <HAL_UART_MspInit+0x88>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_UART_MspInit+0x88>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_UART_MspInit+0x88>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_UART_MspInit+0x88>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_UART_MspInit+0x88>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021f6:	230c      	movs	r3, #12
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002206:	2307      	movs	r3, #7
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_UART_MspInit+0x8c>)
 8002212:	f000 fa31 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40004400 	.word	0x40004400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000

0800222c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800222c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002248:	4c0b      	ldr	r4, [pc, #44]	; (8002278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002256:	f7ff fee9 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225a:	f002 fe49 	bl	8004ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225e:	f7ff fcdb 	bl	8001c18 <main>
  bx  lr    
 8002262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002270:	08006344 	.word	0x08006344
  ldr r2, =_sbss
 8002274:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002278:	2000073c 	.word	0x2000073c

0800227c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC_IRQHandler>
	...

08002280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_Init+0x40>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_Init+0x40>)
 8002296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_Init+0x40>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 f973 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ae:	200f      	movs	r0, #15
 80022b0:	f000 f808 	bl	80022c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b4:	f7ff fdba 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x54>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x58>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f999 	bl	800261a <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f000 f953 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x5c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000000c 	.word	0x2000000c
 800231c:	2000003c 	.word	0x2000003c
 8002320:	20000038 	.word	0x20000038

08002324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x20>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x24>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_IncTick+0x24>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000003c 	.word	0x2000003c
 8002348:	200005ec 	.word	0x200005ec

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTick+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	200005ec 	.word	0x200005ec

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff ffee 	bl	800234c <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffde 	bl	800234c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000003c 	.word	0x2000003c

080023ac <__NVIC_SetPriorityGrouping>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_DisableIRQ>:
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db12      	blt.n	8002484 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	490a      	ldr	r1, [pc, #40]	; (8002490 <__NVIC_DisableIRQ+0x44>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	3320      	adds	r3, #32
 8002474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002478:	f3bf 8f4f 	dsb	sy
}
 800247c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800247e:	f3bf 8f6f 	isb	sy
}
 8002482:	bf00      	nop
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff05 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff1a 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff0d 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff1d 	bl	800244c <__NVIC_DisableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff94 	bl	8002550 <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d004      	beq.n	8002650 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e00c      	b.n	800266a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2205      	movs	r2, #5
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e159      	b.n	8002948 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8148 	bne.w	8002942 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d005      	beq.n	80026ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d130      	bne.n	800272c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a2 	beq.w	8002942 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_GPIO_Init+0x2e8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a56      	ldr	r2, [pc, #344]	; (8002960 <HAL_GPIO_Init+0x2e8>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <HAL_GPIO_Init+0x2e8>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281a:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_Init+0x2ec>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a49      	ldr	r2, [pc, #292]	; (8002968 <HAL_GPIO_Init+0x2f0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x202>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_GPIO_Init+0x2f4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x1fe>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_GPIO_Init+0x2f8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x1fa>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a46      	ldr	r2, [pc, #280]	; (8002974 <HAL_GPIO_Init+0x2fc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x1f6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a45      	ldr	r2, [pc, #276]	; (8002978 <HAL_GPIO_Init+0x300>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x1f2>
 8002866:	2304      	movs	r3, #4
 8002868:	e008      	b.n	800287c <HAL_GPIO_Init+0x204>
 800286a:	2307      	movs	r3, #7
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x204>
 800286e:	2303      	movs	r3, #3
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x204>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x204>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x204>
 800287a:	2300      	movs	r3, #0
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	; (8002964 <HAL_GPIO_Init+0x2ec>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289a:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_GPIO_Init+0x304>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_GPIO_Init+0x304>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_GPIO_Init+0x304>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_GPIO_Init+0x304>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <HAL_GPIO_Init+0x304>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_GPIO_Init+0x304>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_GPIO_Init+0x304>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <HAL_GPIO_Init+0x304>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f67f aea2 	bls.w	8002694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40013800 	.word	0x40013800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	041a      	lsls	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e12b      	b.n	8002c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff f8d4 	bl	8001b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2224      	movs	r2, #36	; 0x24
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a18:	f001 f976 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8002a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a81      	ldr	r2, [pc, #516]	; (8002c28 <HAL_I2C_Init+0x274>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d807      	bhi.n	8002a38 <HAL_I2C_Init+0x84>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a80      	ldr	r2, [pc, #512]	; (8002c2c <HAL_I2C_Init+0x278>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e006      	b.n	8002a46 <HAL_I2C_Init+0x92>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a7d      	ldr	r2, [pc, #500]	; (8002c30 <HAL_I2C_Init+0x27c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0e7      	b.n	8002c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a78      	ldr	r2, [pc, #480]	; (8002c34 <HAL_I2C_Init+0x280>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0c9b      	lsrs	r3, r3, #18
 8002a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <HAL_I2C_Init+0x274>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d802      	bhi.n	8002a88 <HAL_I2C_Init+0xd4>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3301      	adds	r3, #1
 8002a86:	e009      	b.n	8002a9c <HAL_I2C_Init+0xe8>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	4a69      	ldr	r2, [pc, #420]	; (8002c38 <HAL_I2C_Init+0x284>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	495c      	ldr	r1, [pc, #368]	; (8002c28 <HAL_I2C_Init+0x274>)
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	d819      	bhi.n	8002af0 <HAL_I2C_Init+0x13c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e59      	subs	r1, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aca:	1c59      	adds	r1, r3, #1
 8002acc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_I2C_Init+0x138>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e59      	subs	r1, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aea:	e051      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002aec:	2304      	movs	r3, #4
 8002aee:	e04f      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d111      	bne.n	8002b1c <HAL_I2C_Init+0x168>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	440b      	add	r3, r1
 8002b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e012      	b.n	8002b42 <HAL_I2C_Init+0x18e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Init+0x196>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e022      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10e      	bne.n	8002b70 <HAL_I2C_Init+0x1bc>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e58      	subs	r0, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	440b      	add	r3, r1
 8002b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6e:	e00f      	b.n	8002b90 <HAL_I2C_Init+0x1dc>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1e58      	subs	r0, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	0099      	lsls	r1, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	6809      	ldr	r1, [r1, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6911      	ldr	r1, [r2, #16]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	000186a0 	.word	0x000186a0
 8002c2c:	001e847f 	.word	0x001e847f
 8002c30:	003d08ff 	.word	0x003d08ff
 8002c34:	431bde83 	.word	0x431bde83
 8002c38:	10624dd3 	.word	0x10624dd3

08002c3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	460b      	mov	r3, r1
 8002c4a:	817b      	strh	r3, [r7, #10]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff fb7c 	bl	800234c <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	f040 80e0 	bne.w	8002e24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2319      	movs	r3, #25
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4970      	ldr	r1, [pc, #448]	; (8002e30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fa92 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0d3      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x50>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0cc      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d007      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	893a      	ldrh	r2, [r7, #8]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f9ca 	bl	8003094 <I2C_MasterRequestWrite>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e08d      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d20:	e066      	b.n	8002df0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6a39      	ldr	r1, [r7, #32]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fb0c 	bl	8003344 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d107      	bne.n	8002d4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e06b      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_I2C_Master_Transmit+0x188>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	6a39      	ldr	r1, [r7, #32]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fafc 	bl	80033c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00d      	beq.n	8002df0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d107      	bne.n	8002dec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e01a      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d194      	bne.n	8002d22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	00100002 	.word	0x00100002
 8002e34:	ffff0000 	.word	0xffff0000

08002e38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff fa80 	bl	800234c <HAL_GetTick>
 8002e4c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	f040 8111 	bne.w	8003082 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2319      	movs	r3, #25
 8002e66:	2201      	movs	r2, #1
 8002e68:	4988      	ldr	r1, [pc, #544]	; (800308c <HAL_I2C_IsDeviceReady+0x254>)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f994 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
 8002e78:	e104      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_I2C_IsDeviceReady+0x50>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e0fd      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d007      	beq.n	8002eae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2224      	movs	r2, #36	; 0x24
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a70      	ldr	r2, [pc, #448]	; (8003090 <HAL_I2C_IsDeviceReady+0x258>)
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f952 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f08:	d103      	bne.n	8002f12 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0b6      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f26:	f7ff fa11 	bl	800234c <HAL_GetTick>
 8002f2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f5a:	e025      	b.n	8002fa8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7ff f9f6 	bl	800234c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <HAL_I2C_IsDeviceReady+0x13a>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	22a0      	movs	r2, #160	; 0xa0
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2ba0      	cmp	r3, #160	; 0xa0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_I2C_IsDeviceReady+0x188>
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_I2C_IsDeviceReady+0x188>
 8002fba:	7dbb      	ldrb	r3, [r7, #22]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0cd      	beq.n	8002f5c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d129      	bne.n	800302a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	4921      	ldr	r1, [pc, #132]	; (800308c <HAL_I2C_IsDeviceReady+0x254>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f8c6 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e036      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e02c      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003038:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003042:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2319      	movs	r3, #25
 800304a:	2201      	movs	r2, #1
 800304c:	490f      	ldr	r1, [pc, #60]	; (800308c <HAL_I2C_IsDeviceReady+0x254>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f8a2 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e012      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	3301      	adds	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	429a      	cmp	r2, r3
 800306a:	f4ff af32 	bcc.w	8002ed2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	00100002 	.word	0x00100002
 8003090:	ffff0000 	.word	0xffff0000

08003094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	460b      	mov	r3, r1
 80030a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d006      	beq.n	80030be <I2C_MasterRequestWrite+0x2a>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d003      	beq.n	80030be <I2C_MasterRequestWrite+0x2a>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030bc:	d108      	bne.n	80030d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e00b      	b.n	80030e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b12      	cmp	r3, #18
 80030d6:	d107      	bne.n	80030e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f84f 	bl	8003198 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d103      	bne.n	8003118 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e035      	b.n	8003188 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003124:	d108      	bne.n	8003138 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003134:	611a      	str	r2, [r3, #16]
 8003136:	e01b      	b.n	8003170 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	11db      	asrs	r3, r3, #7
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 0306 	and.w	r3, r3, #6
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f063 030f 	orn	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <I2C_MasterRequestWrite+0xfc>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f875 	bl	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e010      	b.n	8003188 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <I2C_MasterRequestWrite+0x100>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f865 	bl	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00010008 	.word	0x00010008
 8003194:	00010002 	.word	0x00010002

08003198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a8:	e025      	b.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d021      	beq.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7ff f8cb 	bl	800234c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e023      	b.n	800323e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	e00c      	b.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d0b6      	beq.n	80031aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003254:	e051      	b.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003264:	d123      	bne.n	80032ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0204 	orr.w	r2, r3, #4
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e046      	b.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d021      	beq.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7ff f849 	bl	800234c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d116      	bne.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e020      	b.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d10c      	bne.n	800331e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	43da      	mvns	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4013      	ands	r3, r2
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	e00b      	b.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d18d      	bne.n	8003256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003350:	e02d      	b.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f878 	bl	8003448 <I2C_IsAcknowledgeFailed>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e02d      	b.n	80033be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d021      	beq.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fe ffef 	bl	800234c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d116      	bne.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e007      	b.n	80033be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d1ca      	bne.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d2:	e02d      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f837 	bl	8003448 <I2C_IsAcknowledgeFailed>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e02d      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d021      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe ffae 	bl	800234c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d116      	bne.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d1ca      	bne.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d11b      	bne.n	8003498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e267      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d075      	beq.n	80035b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c6:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d00c      	beq.n	80034ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d112      	bne.n	8003504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034de:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ea:	d10b      	bne.n	8003504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d05b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x108>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d157      	bne.n	80035b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e242      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d106      	bne.n	800351c <HAL_RCC_OscConfig+0x74>
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a75      	ldr	r2, [pc, #468]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xb0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x98>
 8003526:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6f      	ldr	r2, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a6c      	ldr	r2, [pc, #432]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xb0>
 8003540:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a68      	ldr	r2, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fef4 	bl	800234c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe fef0 	bl	800234c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e207      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xc0>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fee0 	bl	800234c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe fedc 	bl	800234c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1f3      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0xe8>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d063      	beq.n	8003686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b47      	ldr	r3, [pc, #284]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11c      	bne.n	8003610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x152>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1c7      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4937      	ldr	r1, [pc, #220]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	e03a      	b.n	8003686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_RCC_OscConfig+0x244>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fe fe95 	bl	800234c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003626:	f7fe fe91 	bl	800234c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e1a8      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003644:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4925      	ldr	r1, [pc, #148]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	e015      	b.n	8003686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCC_OscConfig+0x244>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fe74 	bl	800234c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003668:	f7fe fe70 	bl	800234c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e187      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d036      	beq.n	8003700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_RCC_OscConfig+0x248>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe fe54 	bl	800234c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fe fe50 	bl	800234c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e167      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x240>)
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x200>
 80036c6:	e01b      	b.n	8003700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_OscConfig+0x248>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ce:	f7fe fe3d 	bl	800234c <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d4:	e00e      	b.n	80036f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d6:	f7fe fe39 	bl	800234c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d907      	bls.n	80036f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e150      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	42470000 	.word	0x42470000
 80036f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f4:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ea      	bne.n	80036d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8097 	beq.w	800383c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003712:	4b81      	ldr	r3, [pc, #516]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	4b7d      	ldr	r3, [pc, #500]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a7c      	ldr	r2, [pc, #496]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	4b77      	ldr	r3, [pc, #476]	; (800391c <HAL_RCC_OscConfig+0x474>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d118      	bne.n	800377c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374a:	4b74      	ldr	r3, [pc, #464]	; (800391c <HAL_RCC_OscConfig+0x474>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a73      	ldr	r2, [pc, #460]	; (800391c <HAL_RCC_OscConfig+0x474>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003756:	f7fe fdf9 	bl	800234c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fe fdf5 	bl	800234c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e10c      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x474>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x2ea>
 8003784:	4b64      	ldr	r3, [pc, #400]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a63      	ldr	r2, [pc, #396]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
 8003790:	e01c      	b.n	80037cc <HAL_RCC_OscConfig+0x324>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x30c>
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a5e      	ldr	r2, [pc, #376]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
 80037a6:	4b5c      	ldr	r3, [pc, #368]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a5b      	ldr	r2, [pc, #364]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0x324>
 80037b4:	4b58      	ldr	r3, [pc, #352]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a57      	ldr	r2, [pc, #348]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a54      	ldr	r2, [pc, #336]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037c6:	f023 0304 	bic.w	r3, r3, #4
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d015      	beq.n	8003800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fe fdba 	bl	800234c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fe fdb6 	bl	800234c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0cb      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ee      	beq.n	80037dc <HAL_RCC_OscConfig+0x334>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003800:	f7fe fda4 	bl	800234c <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7fe fda0 	bl	800234c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0b5      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1ee      	bne.n	8003808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a1 	beq.w	8003988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003846:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b08      	cmp	r3, #8
 8003850:	d05c      	beq.n	800390c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d141      	bne.n	80038de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b31      	ldr	r3, [pc, #196]	; (8003920 <HAL_RCC_OscConfig+0x478>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fd74 	bl	800234c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fd70 	bl	800234c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e087      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	019b      	lsls	r3, r3, #6
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	3b01      	subs	r3, #1
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	491b      	ldr	r1, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b0:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_RCC_OscConfig+0x478>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fd49 	bl	800234c <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fd45 	bl	800234c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e05c      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x416>
 80038dc:	e054      	b.n	8003988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fd32 	bl	800234c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fd2e 	bl	800234c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e045      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x444>
 800390a:	e03d      	b.n	8003988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e038      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
 8003918:	40023800 	.word	0x40023800
 800391c:	40007000 	.word	0x40007000
 8003920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4ec>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d028      	beq.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d121      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d11a      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800395c:	4293      	cmp	r3, r2
 800395e:	d111      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	3b01      	subs	r3, #1
 800396e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d107      	bne.n	8003984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800

08003998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0cc      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b68      	ldr	r3, [pc, #416]	; (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d90c      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b65      	ldr	r3, [pc, #404]	; (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b63      	ldr	r3, [pc, #396]	; (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0b8      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	494d      	ldr	r1, [pc, #308]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d044      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d119      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e06f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e067      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4934      	ldr	r1, [pc, #208]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a88:	f7fe fc60 	bl	800234c <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fe fc5c 	bl	800234c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e04f      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b25      	ldr	r3, [pc, #148]	; (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d20c      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e032      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4916      	ldr	r1, [pc, #88]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	490e      	ldr	r1, [pc, #56]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1e:	f000 f821 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	490a      	ldr	r1, [pc, #40]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	fa22 f303 	lsr.w	r3, r2, r3
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fbc0 	bl	80022c4 <HAL_InitTick>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023c00 	.word	0x40023c00
 8003b54:	40023800 	.word	0x40023800
 8003b58:	080062e8 	.word	0x080062e8
 8003b5c:	2000000c 	.word	0x2000000c
 8003b60:	20000038 	.word	0x20000038

08003b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b68:	b090      	sub	sp, #64	; 0x40
 8003b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b70:	2300      	movs	r3, #0
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b74:	2300      	movs	r3, #0
 8003b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d00d      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	f200 80a1 	bhi.w	8003cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x34>
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b96:	e09b      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b98:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b9c:	e09b      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9e:	4b53      	ldr	r3, [pc, #332]	; (8003cec <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba2:	e098      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bae:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d028      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4b47      	ldr	r3, [pc, #284]	; (8003cec <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd0:	fb03 f201 	mul.w	r2, r3, r1
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a43      	ldr	r2, [pc, #268]	; (8003cec <HAL_RCC_GetSysClockFreq+0x188>)
 8003bde:	fba0 1202 	umull	r1, r2, r0, r2
 8003be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be4:	460a      	mov	r2, r1
 8003be6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bea:	4413      	add	r3, r2
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	61fa      	str	r2, [r7, #28]
 8003bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bfe:	f7fc fb3f 	bl	8000280 <__aeabi_uldivmod>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4613      	mov	r3, r2
 8003c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c0a:	e053      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	2200      	movs	r2, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	617a      	str	r2, [r7, #20]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c1e:	f04f 0b00 	mov.w	fp, #0
 8003c22:	4652      	mov	r2, sl
 8003c24:	465b      	mov	r3, fp
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c56:	ebb2 0408 	subs.w	r4, r2, r8
 8003c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	00eb      	lsls	r3, r5, #3
 8003c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6c:	00e2      	lsls	r2, r4, #3
 8003c6e:	4614      	mov	r4, r2
 8003c70:	461d      	mov	r5, r3
 8003c72:	eb14 030a 	adds.w	r3, r4, sl
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	eb45 030b 	adc.w	r3, r5, fp
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	028b      	lsls	r3, r1, #10
 8003c8e:	4621      	mov	r1, r4
 8003c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c94:	4621      	mov	r1, r4
 8003c96:	028a      	lsls	r2, r1, #10
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	60fa      	str	r2, [r7, #12]
 8003ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca8:	f7fc faea 	bl	8000280 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cce:	e002      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3740      	adds	r7, #64	; 0x40
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	00f42400 	.word	0x00f42400
 8003cec:	017d7840 	.word	0x017d7840

08003cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c

08003d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d0c:	f7ff fff0 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	0a9b      	lsrs	r3, r3, #10
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	080062f8 	.word	0x080062f8

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d34:	f7ff ffdc 	bl	8003cf0 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0b5b      	lsrs	r3, r3, #13
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40023800 	.word	0x40023800
 8003d54:	080062f8 	.word	0x080062f8

08003d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e07b      	b.n	8003e62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d108      	bne.n	8003d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7a:	d009      	beq.n	8003d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	61da      	str	r2, [r3, #28]
 8003d82:	e005      	b.n	8003d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd ffee 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	ea42 0103 	orr.w	r1, r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0104 	and.w	r1, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0210 	and.w	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b088      	sub	sp, #32
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_SPI_Transmit+0x22>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e126      	b.n	80040da <HAL_SPI_Transmit+0x270>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e94:	f7fe fa5a 	bl	800234c <HAL_GetTick>
 8003e98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eae:	e10b      	b.n	80040c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Transmit+0x52>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ec0:	e102      	b.n	80040c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	d10f      	bne.n	8003f2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d007      	beq.n	8003f48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f50:	d14b      	bne.n	8003fea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0xf6>
 8003f5a:	8afb      	ldrh	r3, [r7, #22]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d13e      	bne.n	8003fde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f84:	e02b      	b.n	8003fde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d112      	bne.n	8003fba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	881a      	ldrh	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	1c9a      	adds	r2, r3, #2
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fb8:	e011      	b.n	8003fde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fe f9c7 	bl	800234c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_Transmit+0x168>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Transmit+0x16e>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fdc:	e074      	b.n	80040c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ce      	bne.n	8003f86 <HAL_SPI_Transmit+0x11c>
 8003fe8:	e04c      	b.n	8004084 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_Transmit+0x18e>
 8003ff2:	8afb      	ldrh	r3, [r7, #22]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d140      	bne.n	800407a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800401e:	e02c      	b.n	800407a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d113      	bne.n	8004056 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	86da      	strh	r2, [r3, #54]	; 0x36
 8004054:	e011      	b.n	800407a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004056:	f7fe f979 	bl	800234c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d803      	bhi.n	800406e <HAL_SPI_Transmit+0x204>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d102      	bne.n	8004074 <HAL_SPI_Transmit+0x20a>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004078:	e026      	b.n	80040c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1cd      	bne.n	8004020 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	6839      	ldr	r1, [r7, #0]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f9d3 	bl	8004434 <SPI_EndRxTxTransaction>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e000      	b.n	80040c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10e      	bne.n	8004124 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
    return;
 8004122:	e0ce      	b.n	80042c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_SPI_IRQHandler+0x5e>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
    return;
 8004140:	e0bf      	b.n	80042c2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_SPI_IRQHandler+0x7e>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80b0 	beq.w	80042c2 <HAL_SPI_IRQHandler+0x1de>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80aa 	beq.w	80042c2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b03      	cmp	r3, #3
 8004182:	d011      	beq.n	80041a8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	f043 0204 	orr.w	r2, r3, #4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	e00b      	b.n	80041c0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	693b      	ldr	r3, [r7, #16]
        return;
 80041be:	e080      	b.n	80042c2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d014      	beq.n	80041f4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f043 0208 	orr.w	r2, r3, #8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	2b00      	cmp	r3, #0
 800421e:	d04f      	beq.n	80042c0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800422e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d104      	bne.n	800424c <HAL_SPI_IRQHandler+0x168>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d034      	beq.n	80042b6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0203 	bic.w	r2, r2, #3
 800425a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d011      	beq.n	8004288 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <HAL_SPI_IRQHandler+0x1e4>)
 800426a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe f9de 	bl	8002632 <HAL_DMA_Abort_IT>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	2b00      	cmp	r3, #0
 800428e:	d016      	beq.n	80042be <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_SPI_IRQHandler+0x1e4>)
 8004296:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe f9c8 	bl	8002632 <HAL_DMA_Abort_IT>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80042b4:	e003      	b.n	80042be <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f808 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80042bc:	e000      	b.n	80042c0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80042be:	bf00      	nop
    return;
 80042c0:	bf00      	nop
  }
}
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	080042fd 	.word	0x080042fd

080042cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ee:	b2db      	uxtb	r3, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff ffd8 	bl	80042cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004334:	f7fe f80a 	bl	800234c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4413      	add	r3, r2
 8004342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004344:	f7fe f802 	bl	800234c <HAL_GetTick>
 8004348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	0d1b      	lsrs	r3, r3, #20
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435a:	e054      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d050      	beq.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004364:	f7fd fff2 	bl	800234c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	429a      	cmp	r2, r3
 8004372:	d902      	bls.n	800437a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d13d      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d111      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	d004      	beq.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d107      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c0:	d10f      	bne.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e017      	b.n	8004426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3b01      	subs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d19b      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000000c 	.word	0x2000000c

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <SPI_EndRxTxTransaction+0x7c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <SPI_EndRxTxTransaction+0x80>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0d5b      	lsrs	r3, r3, #21
 800444c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445e:	d112      	bne.n	8004486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff5a 	bl	8004324 <SPI_WaitFlagStateUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00f      	b.n	80044a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3b01      	subs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d0f2      	beq.n	8004486 <SPI_EndRxTxTransaction+0x52>
 80044a0:	e000      	b.n	80044a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80044a2:	bf00      	nop
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	165e9f81 	.word	0x165e9f81

080044b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e03f      	b.n	800454a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fe5c 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f929 	bl	8004754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b08a      	sub	sp, #40	; 0x28
 8004556:	af02      	add	r7, sp, #8
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b20      	cmp	r3, #32
 8004570:	d17c      	bne.n	800466c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_UART_Transmit+0x2c>
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e075      	b.n	800466e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_UART_Transmit+0x3e>
 800458c:	2302      	movs	r3, #2
 800458e:	e06e      	b.n	800466e <HAL_UART_Transmit+0x11c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2221      	movs	r2, #33	; 0x21
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a6:	f7fd fed1 	bl	800234c <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d108      	bne.n	80045d4 <HAL_UART_Transmit+0x82>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e003      	b.n	80045dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045e4:	e02a      	b.n	800463c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f840 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e036      	b.n	800466e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	3302      	adds	r3, #2
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e007      	b.n	800462e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3301      	adds	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1cf      	bne.n	80045e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	2140      	movs	r1, #64	; 0x40
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f810 	bl	8004676 <UART_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b090      	sub	sp, #64	; 0x40
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004686:	e050      	b.n	800472a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d04c      	beq.n	800472a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004696:	f7fd fe59 	bl	800234c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d241      	bcs.n	800472a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046c6:	637a      	str	r2, [r7, #52]	; 0x34
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046fa:	623a      	str	r2, [r7, #32]
 80046fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	61bb      	str	r3, [r7, #24]
   return(result);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e00f      	b.n	800474a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	429a      	cmp	r2, r3
 8004746:	d09f      	beq.n	8004688 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3740      	adds	r7, #64	; 0x40
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b0c0      	sub	sp, #256	; 0x100
 800475a:	af00      	add	r7, sp, #0
 800475c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	68d9      	ldr	r1, [r3, #12]
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	ea40 0301 	orr.w	r3, r0, r1
 800477c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	431a      	orrs	r2, r3
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047ac:	f021 010c 	bic.w	r1, r1, #12
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ba:	430b      	orrs	r3, r1
 80047bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	6999      	ldr	r1, [r3, #24]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	ea40 0301 	orr.w	r3, r0, r1
 80047da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b8f      	ldr	r3, [pc, #572]	; (8004a20 <UART_SetConfig+0x2cc>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d005      	beq.n	80047f4 <UART_SetConfig+0xa0>
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b8d      	ldr	r3, [pc, #564]	; (8004a24 <UART_SetConfig+0x2d0>)
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d104      	bne.n	80047fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7ff fa9c 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80047f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047fc:	e003      	b.n	8004806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7ff fa83 	bl	8003d08 <HAL_RCC_GetPCLK1Freq>
 8004802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	f040 810c 	bne.w	8004a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800481e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	1891      	adds	r1, r2, r2
 800482c:	65b9      	str	r1, [r7, #88]	; 0x58
 800482e:	415b      	adcs	r3, r3
 8004830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004836:	4621      	mov	r1, r4
 8004838:	eb12 0801 	adds.w	r8, r2, r1
 800483c:	4629      	mov	r1, r5
 800483e:	eb43 0901 	adc.w	r9, r3, r1
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004856:	4690      	mov	r8, r2
 8004858:	4699      	mov	r9, r3
 800485a:	4623      	mov	r3, r4
 800485c:	eb18 0303 	adds.w	r3, r8, r3
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004864:	462b      	mov	r3, r5
 8004866:	eb49 0303 	adc.w	r3, r9, r3
 800486a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800487a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800487e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004882:	460b      	mov	r3, r1
 8004884:	18db      	adds	r3, r3, r3
 8004886:	653b      	str	r3, [r7, #80]	; 0x50
 8004888:	4613      	mov	r3, r2
 800488a:	eb42 0303 	adc.w	r3, r2, r3
 800488e:	657b      	str	r3, [r7, #84]	; 0x54
 8004890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004898:	f7fb fcf2 	bl	8000280 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b61      	ldr	r3, [pc, #388]	; (8004a28 <UART_SetConfig+0x2d4>)
 80048a2:	fba3 2302 	umull	r2, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	011c      	lsls	r4, r3, #4
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c4:	415b      	adcs	r3, r3
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048cc:	4641      	mov	r1, r8
 80048ce:	eb12 0a01 	adds.w	sl, r2, r1
 80048d2:	4649      	mov	r1, r9
 80048d4:	eb43 0b01 	adc.w	fp, r3, r1
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ec:	4692      	mov	sl, r2
 80048ee:	469b      	mov	fp, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	eb1a 0303 	adds.w	r3, sl, r3
 80048f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048fa:	464b      	mov	r3, r9
 80048fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004918:	460b      	mov	r3, r1
 800491a:	18db      	adds	r3, r3, r3
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
 800491e:	4613      	mov	r3, r2
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
 8004926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800492a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800492e:	f7fb fca7 	bl	8000280 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4611      	mov	r1, r2
 8004938:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <UART_SetConfig+0x2d4>)
 800493a:	fba3 2301 	umull	r2, r3, r3, r1
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2264      	movs	r2, #100	; 0x64
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	1acb      	subs	r3, r1, r3
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800494e:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <UART_SetConfig+0x2d4>)
 8004950:	fba3 2302 	umull	r2, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800495c:	441c      	add	r4, r3
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800496c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	63b9      	str	r1, [r7, #56]	; 0x38
 8004978:	415b      	adcs	r3, r3
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800497c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6339      	str	r1, [r7, #48]	; 0x30
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ea:	f7fb fc49 	bl	8000280 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <UART_SetConfig+0x2d4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	3332      	adds	r3, #50	; 0x32
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <UART_SetConfig+0x2d4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 0207 	and.w	r2, r3, #7
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4422      	add	r2, r4
 8004a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a1c:	e106      	b.n	8004c2c <UART_SetConfig+0x4d8>
 8004a1e:	bf00      	nop
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a3e:	4642      	mov	r2, r8
 8004a40:	464b      	mov	r3, r9
 8004a42:	1891      	adds	r1, r2, r2
 8004a44:	6239      	str	r1, [r7, #32]
 8004a46:	415b      	adcs	r3, r3
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4e:	4641      	mov	r1, r8
 8004a50:	1854      	adds	r4, r2, r1
 8004a52:	4649      	mov	r1, r9
 8004a54:	eb43 0501 	adc.w	r5, r3, r1
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	00eb      	lsls	r3, r5, #3
 8004a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a66:	00e2      	lsls	r2, r4, #3
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	18e3      	adds	r3, r4, r3
 8004a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a74:	464b      	mov	r3, r9
 8004a76:	eb45 0303 	adc.w	r3, r5, r3
 8004a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	008a      	lsls	r2, r1, #2
 8004aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aac:	f7fb fbe8 	bl	8000280 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	011c      	lsls	r4, r3, #4
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	61b9      	str	r1, [r7, #24]
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6139      	str	r1, [r7, #16]
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b38:	4649      	mov	r1, r9
 8004b3a:	008b      	lsls	r3, r1, #2
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b42:	4641      	mov	r1, r8
 8004b44:	008a      	lsls	r2, r1, #2
 8004b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b4a:	f7fb fb99 	bl	8000280 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	4b38      	ldr	r3, [pc, #224]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004b56:	fba3 2301 	umull	r2, r3, r3, r1
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2264      	movs	r2, #100	; 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	1acb      	subs	r3, r1, r3
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	3332      	adds	r3, #50	; 0x32
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b74:	441c      	add	r4, r3
 8004b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b7e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	1891      	adds	r1, r2, r2
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	415b      	adcs	r3, r3
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b94:	4641      	mov	r1, r8
 8004b96:	1851      	adds	r1, r2, r1
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	414b      	adcs	r3, r1
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bac:	4659      	mov	r1, fp
 8004bae:	00cb      	lsls	r3, r1, #3
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb6:	4651      	mov	r1, sl
 8004bb8:	00ca      	lsls	r2, r1, #3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	460a      	mov	r2, r1
 8004bca:	eb42 0303 	adc.w	r3, r2, r3
 8004bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bda:	667a      	str	r2, [r7, #100]	; 0x64
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004be8:	4649      	mov	r1, r9
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	4641      	mov	r1, r8
 8004bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	008a      	lsls	r2, r1, #2
 8004bf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bfa:	f7fb fb41 	bl	8000280 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004c04:	fba3 1302 	umull	r1, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2164      	movs	r1, #100	; 0x64
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	3332      	adds	r3, #50	; 0x32
 8004c16:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <UART_SetConfig+0x4e4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 020f 	and.w	r2, r3, #15
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4422      	add	r2, r4
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c32:	46bd      	mov	sp, r7
 8004c34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c38:	51eb851f 	.word	0x51eb851f

08004c3c <std>:
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	e9c0 3300 	strd	r3, r3, [r0]
 8004c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c4a:	6083      	str	r3, [r0, #8]
 8004c4c:	8181      	strh	r1, [r0, #12]
 8004c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c50:	81c2      	strh	r2, [r0, #14]
 8004c52:	6183      	str	r3, [r0, #24]
 8004c54:	4619      	mov	r1, r3
 8004c56:	2208      	movs	r2, #8
 8004c58:	305c      	adds	r0, #92	; 0x5c
 8004c5a:	f000 f8f4 	bl	8004e46 <memset>
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <std+0x38>)
 8004c60:	6263      	str	r3, [r4, #36]	; 0x24
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x3c>)
 8004c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <std+0x40>)
 8004c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <std+0x44>)
 8004c6c:	6224      	str	r4, [r4, #32]
 8004c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	bf00      	nop
 8004c74:	08004dc1 	.word	0x08004dc1
 8004c78:	08004de3 	.word	0x08004de3
 8004c7c:	08004e1b 	.word	0x08004e1b
 8004c80:	08004e3f 	.word	0x08004e3f

08004c84 <stdio_exit_handler>:
 8004c84:	4a02      	ldr	r2, [pc, #8]	; (8004c90 <stdio_exit_handler+0xc>)
 8004c86:	4903      	ldr	r1, [pc, #12]	; (8004c94 <stdio_exit_handler+0x10>)
 8004c88:	4803      	ldr	r0, [pc, #12]	; (8004c98 <stdio_exit_handler+0x14>)
 8004c8a:	f000 b869 	b.w	8004d60 <_fwalk_sglue>
 8004c8e:	bf00      	nop
 8004c90:	20000040 	.word	0x20000040
 8004c94:	080057e1 	.word	0x080057e1
 8004c98:	2000004c 	.word	0x2000004c

08004c9c <cleanup_stdio>:
 8004c9c:	6841      	ldr	r1, [r0, #4]
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <cleanup_stdio+0x34>)
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	d001      	beq.n	8004cac <cleanup_stdio+0x10>
 8004ca8:	f000 fd9a 	bl	80057e0 <_fflush_r>
 8004cac:	68a1      	ldr	r1, [r4, #8]
 8004cae:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <cleanup_stdio+0x38>)
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	d002      	beq.n	8004cba <cleanup_stdio+0x1e>
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 fd93 	bl	80057e0 <_fflush_r>
 8004cba:	68e1      	ldr	r1, [r4, #12]
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <cleanup_stdio+0x3c>)
 8004cbe:	4299      	cmp	r1, r3
 8004cc0:	d004      	beq.n	8004ccc <cleanup_stdio+0x30>
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc8:	f000 bd8a 	b.w	80057e0 <_fflush_r>
 8004ccc:	bd10      	pop	{r4, pc}
 8004cce:	bf00      	nop
 8004cd0:	200005f0 	.word	0x200005f0
 8004cd4:	20000658 	.word	0x20000658
 8004cd8:	200006c0 	.word	0x200006c0

08004cdc <global_stdio_init.part.0>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <global_stdio_init.part.0+0x30>)
 8004ce0:	4c0b      	ldr	r4, [pc, #44]	; (8004d10 <global_stdio_init.part.0+0x34>)
 8004ce2:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <global_stdio_init.part.0+0x38>)
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2104      	movs	r1, #4
 8004cec:	f7ff ffa6 	bl	8004c3c <std>
 8004cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	2109      	movs	r1, #9
 8004cf8:	f7ff ffa0 	bl	8004c3c <std>
 8004cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d00:	2202      	movs	r2, #2
 8004d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d06:	2112      	movs	r1, #18
 8004d08:	f7ff bf98 	b.w	8004c3c <std>
 8004d0c:	20000728 	.word	0x20000728
 8004d10:	200005f0 	.word	0x200005f0
 8004d14:	08004c85 	.word	0x08004c85

08004d18 <__sfp_lock_acquire>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__sfp_lock_acquire+0x8>)
 8004d1a:	f000 b90d 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000731 	.word	0x20000731

08004d24 <__sfp_lock_release>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__sfp_lock_release+0x8>)
 8004d26:	f000 b908 	b.w	8004f3a <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	20000731 	.word	0x20000731

08004d30 <__sinit>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	f7ff fff0 	bl	8004d18 <__sfp_lock_acquire>
 8004d38:	6a23      	ldr	r3, [r4, #32]
 8004d3a:	b11b      	cbz	r3, 8004d44 <__sinit+0x14>
 8004d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d40:	f7ff bff0 	b.w	8004d24 <__sfp_lock_release>
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <__sinit+0x28>)
 8004d46:	6223      	str	r3, [r4, #32]
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <__sinit+0x2c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f5      	bne.n	8004d3c <__sinit+0xc>
 8004d50:	f7ff ffc4 	bl	8004cdc <global_stdio_init.part.0>
 8004d54:	e7f2      	b.n	8004d3c <__sinit+0xc>
 8004d56:	bf00      	nop
 8004d58:	08004c9d 	.word	0x08004c9d
 8004d5c:	20000728 	.word	0x20000728

08004d60 <_fwalk_sglue>:
 8004d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d64:	4607      	mov	r7, r0
 8004d66:	4688      	mov	r8, r1
 8004d68:	4614      	mov	r4, r2
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d70:	f1b9 0901 	subs.w	r9, r9, #1
 8004d74:	d505      	bpl.n	8004d82 <_fwalk_sglue+0x22>
 8004d76:	6824      	ldr	r4, [r4, #0]
 8004d78:	2c00      	cmp	r4, #0
 8004d7a:	d1f7      	bne.n	8004d6c <_fwalk_sglue+0xc>
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d82:	89ab      	ldrh	r3, [r5, #12]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d907      	bls.n	8004d98 <_fwalk_sglue+0x38>
 8004d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	d003      	beq.n	8004d98 <_fwalk_sglue+0x38>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	4306      	orrs	r6, r0
 8004d98:	3568      	adds	r5, #104	; 0x68
 8004d9a:	e7e9      	b.n	8004d70 <_fwalk_sglue+0x10>

08004d9c <iprintf>:
 8004d9c:	b40f      	push	{r0, r1, r2, r3}
 8004d9e:	b507      	push	{r0, r1, r2, lr}
 8004da0:	4906      	ldr	r1, [pc, #24]	; (8004dbc <iprintf+0x20>)
 8004da2:	ab04      	add	r3, sp, #16
 8004da4:	6808      	ldr	r0, [r1, #0]
 8004da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004daa:	6881      	ldr	r1, [r0, #8]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	f000 f9e7 	bl	8005180 <_vfiprintf_r>
 8004db2:	b003      	add	sp, #12
 8004db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	20000098 	.word	0x20000098

08004dc0 <__sread>:
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc8:	f000 f868 	bl	8004e9c <_read_r>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	bfab      	itete	ge
 8004dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8004dd4:	181b      	addge	r3, r3, r0
 8004dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dda:	bfac      	ite	ge
 8004ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dde:	81a3      	strhlt	r3, [r4, #12]
 8004de0:	bd10      	pop	{r4, pc}

08004de2 <__swrite>:
 8004de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de6:	461f      	mov	r7, r3
 8004de8:	898b      	ldrh	r3, [r1, #12]
 8004dea:	05db      	lsls	r3, r3, #23
 8004dec:	4605      	mov	r5, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	4616      	mov	r6, r2
 8004df2:	d505      	bpl.n	8004e00 <__swrite+0x1e>
 8004df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df8:	2302      	movs	r3, #2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f000 f83c 	bl	8004e78 <_lseek_r>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e0a:	81a3      	strh	r3, [r4, #12]
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	4628      	mov	r0, r5
 8004e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e16:	f000 b853 	b.w	8004ec0 <_write_r>

08004e1a <__sseek>:
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e22:	f000 f829 	bl	8004e78 <_lseek_r>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	bf15      	itete	ne
 8004e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e36:	81a3      	strheq	r3, [r4, #12]
 8004e38:	bf18      	it	ne
 8004e3a:	81a3      	strhne	r3, [r4, #12]
 8004e3c:	bd10      	pop	{r4, pc}

08004e3e <__sclose>:
 8004e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e42:	f000 b809 	b.w	8004e58 <_close_r>

08004e46 <memset>:
 8004e46:	4402      	add	r2, r0
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d100      	bne.n	8004e50 <memset+0xa>
 8004e4e:	4770      	bx	lr
 8004e50:	f803 1b01 	strb.w	r1, [r3], #1
 8004e54:	e7f9      	b.n	8004e4a <memset+0x4>
	...

08004e58 <_close_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d06      	ldr	r5, [pc, #24]	; (8004e74 <_close_r+0x1c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	f7fd f877 	bl	8001f56 <_close>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_close_r+0x1a>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_close_r+0x1a>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	2000072c 	.word	0x2000072c

08004e78 <_lseek_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d07      	ldr	r5, [pc, #28]	; (8004e98 <_lseek_r+0x20>)
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	4608      	mov	r0, r1
 8004e80:	4611      	mov	r1, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7fd f88c 	bl	8001fa4 <_lseek>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_lseek_r+0x1e>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_lseek_r+0x1e>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	2000072c 	.word	0x2000072c

08004e9c <_read_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d07      	ldr	r5, [pc, #28]	; (8004ebc <_read_r+0x20>)
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fd f81a 	bl	8001ee4 <_read>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_read_r+0x1e>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_read_r+0x1e>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	2000072c 	.word	0x2000072c

08004ec0 <_write_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d07      	ldr	r5, [pc, #28]	; (8004ee0 <_write_r+0x20>)
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	4611      	mov	r1, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	602a      	str	r2, [r5, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f7fd f825 	bl	8001f1e <_write>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_write_r+0x1e>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_write_r+0x1e>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	2000072c 	.word	0x2000072c

08004ee4 <__errno>:
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <__errno+0x8>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000098 	.word	0x20000098

08004ef0 <__libc_init_array>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4d0d      	ldr	r5, [pc, #52]	; (8004f28 <__libc_init_array+0x38>)
 8004ef4:	4c0d      	ldr	r4, [pc, #52]	; (8004f2c <__libc_init_array+0x3c>)
 8004ef6:	1b64      	subs	r4, r4, r5
 8004ef8:	10a4      	asrs	r4, r4, #2
 8004efa:	2600      	movs	r6, #0
 8004efc:	42a6      	cmp	r6, r4
 8004efe:	d109      	bne.n	8004f14 <__libc_init_array+0x24>
 8004f00:	4d0b      	ldr	r5, [pc, #44]	; (8004f30 <__libc_init_array+0x40>)
 8004f02:	4c0c      	ldr	r4, [pc, #48]	; (8004f34 <__libc_init_array+0x44>)
 8004f04:	f000 fdbe 	bl	8005a84 <_init>
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	42a6      	cmp	r6, r4
 8004f10:	d105      	bne.n	8004f1e <__libc_init_array+0x2e>
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f18:	4798      	blx	r3
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7ee      	b.n	8004efc <__libc_init_array+0xc>
 8004f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f22:	4798      	blx	r3
 8004f24:	3601      	adds	r6, #1
 8004f26:	e7f2      	b.n	8004f0e <__libc_init_array+0x1e>
 8004f28:	0800633c 	.word	0x0800633c
 8004f2c:	0800633c 	.word	0x0800633c
 8004f30:	0800633c 	.word	0x0800633c
 8004f34:	08006340 	.word	0x08006340

08004f38 <__retarget_lock_acquire_recursive>:
 8004f38:	4770      	bx	lr

08004f3a <__retarget_lock_release_recursive>:
 8004f3a:	4770      	bx	lr

08004f3c <_free_r>:
 8004f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f3e:	2900      	cmp	r1, #0
 8004f40:	d044      	beq.n	8004fcc <_free_r+0x90>
 8004f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f46:	9001      	str	r0, [sp, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f4e:	bfb8      	it	lt
 8004f50:	18e4      	addlt	r4, r4, r3
 8004f52:	f000 f8df 	bl	8005114 <__malloc_lock>
 8004f56:	4a1e      	ldr	r2, [pc, #120]	; (8004fd0 <_free_r+0x94>)
 8004f58:	9801      	ldr	r0, [sp, #4]
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	b933      	cbnz	r3, 8004f6c <_free_r+0x30>
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	6014      	str	r4, [r2, #0]
 8004f62:	b003      	add	sp, #12
 8004f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f68:	f000 b8da 	b.w	8005120 <__malloc_unlock>
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	d908      	bls.n	8004f82 <_free_r+0x46>
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf01      	itttt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	1949      	addeq	r1, r1, r5
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	e7ed      	b.n	8004f5e <_free_r+0x22>
 8004f82:	461a      	mov	r2, r3
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b10b      	cbz	r3, 8004f8c <_free_r+0x50>
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d9fa      	bls.n	8004f82 <_free_r+0x46>
 8004f8c:	6811      	ldr	r1, [r2, #0]
 8004f8e:	1855      	adds	r5, r2, r1
 8004f90:	42a5      	cmp	r5, r4
 8004f92:	d10b      	bne.n	8004fac <_free_r+0x70>
 8004f94:	6824      	ldr	r4, [r4, #0]
 8004f96:	4421      	add	r1, r4
 8004f98:	1854      	adds	r4, r2, r1
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	6011      	str	r1, [r2, #0]
 8004f9e:	d1e0      	bne.n	8004f62 <_free_r+0x26>
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	6053      	str	r3, [r2, #4]
 8004fa6:	440c      	add	r4, r1
 8004fa8:	6014      	str	r4, [r2, #0]
 8004faa:	e7da      	b.n	8004f62 <_free_r+0x26>
 8004fac:	d902      	bls.n	8004fb4 <_free_r+0x78>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	6003      	str	r3, [r0, #0]
 8004fb2:	e7d6      	b.n	8004f62 <_free_r+0x26>
 8004fb4:	6825      	ldr	r5, [r4, #0]
 8004fb6:	1961      	adds	r1, r4, r5
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	bf04      	itt	eq
 8004fbc:	6819      	ldreq	r1, [r3, #0]
 8004fbe:	685b      	ldreq	r3, [r3, #4]
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	bf04      	itt	eq
 8004fc4:	1949      	addeq	r1, r1, r5
 8004fc6:	6021      	streq	r1, [r4, #0]
 8004fc8:	6054      	str	r4, [r2, #4]
 8004fca:	e7ca      	b.n	8004f62 <_free_r+0x26>
 8004fcc:	b003      	add	sp, #12
 8004fce:	bd30      	pop	{r4, r5, pc}
 8004fd0:	20000734 	.word	0x20000734

08004fd4 <sbrk_aligned>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4e0e      	ldr	r6, [pc, #56]	; (8005010 <sbrk_aligned+0x3c>)
 8004fd8:	460c      	mov	r4, r1
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	4605      	mov	r5, r0
 8004fde:	b911      	cbnz	r1, 8004fe6 <sbrk_aligned+0x12>
 8004fe0:	f000 fcbc 	bl	800595c <_sbrk_r>
 8004fe4:	6030      	str	r0, [r6, #0]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 fcb7 	bl	800595c <_sbrk_r>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	d00a      	beq.n	8005008 <sbrk_aligned+0x34>
 8004ff2:	1cc4      	adds	r4, r0, #3
 8004ff4:	f024 0403 	bic.w	r4, r4, #3
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d007      	beq.n	800500c <sbrk_aligned+0x38>
 8004ffc:	1a21      	subs	r1, r4, r0
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fcac 	bl	800595c <_sbrk_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d101      	bne.n	800500c <sbrk_aligned+0x38>
 8005008:	f04f 34ff 	mov.w	r4, #4294967295
 800500c:	4620      	mov	r0, r4
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	20000738 	.word	0x20000738

08005014 <_malloc_r>:
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005018:	1ccd      	adds	r5, r1, #3
 800501a:	f025 0503 	bic.w	r5, r5, #3
 800501e:	3508      	adds	r5, #8
 8005020:	2d0c      	cmp	r5, #12
 8005022:	bf38      	it	cc
 8005024:	250c      	movcc	r5, #12
 8005026:	2d00      	cmp	r5, #0
 8005028:	4607      	mov	r7, r0
 800502a:	db01      	blt.n	8005030 <_malloc_r+0x1c>
 800502c:	42a9      	cmp	r1, r5
 800502e:	d905      	bls.n	800503c <_malloc_r+0x28>
 8005030:	230c      	movs	r3, #12
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	2600      	movs	r6, #0
 8005036:	4630      	mov	r0, r6
 8005038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005110 <_malloc_r+0xfc>
 8005040:	f000 f868 	bl	8005114 <__malloc_lock>
 8005044:	f8d8 3000 	ldr.w	r3, [r8]
 8005048:	461c      	mov	r4, r3
 800504a:	bb5c      	cbnz	r4, 80050a4 <_malloc_r+0x90>
 800504c:	4629      	mov	r1, r5
 800504e:	4638      	mov	r0, r7
 8005050:	f7ff ffc0 	bl	8004fd4 <sbrk_aligned>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	4604      	mov	r4, r0
 8005058:	d155      	bne.n	8005106 <_malloc_r+0xf2>
 800505a:	f8d8 4000 	ldr.w	r4, [r8]
 800505e:	4626      	mov	r6, r4
 8005060:	2e00      	cmp	r6, #0
 8005062:	d145      	bne.n	80050f0 <_malloc_r+0xdc>
 8005064:	2c00      	cmp	r4, #0
 8005066:	d048      	beq.n	80050fa <_malloc_r+0xe6>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	4631      	mov	r1, r6
 800506c:	4638      	mov	r0, r7
 800506e:	eb04 0903 	add.w	r9, r4, r3
 8005072:	f000 fc73 	bl	800595c <_sbrk_r>
 8005076:	4581      	cmp	r9, r0
 8005078:	d13f      	bne.n	80050fa <_malloc_r+0xe6>
 800507a:	6821      	ldr	r1, [r4, #0]
 800507c:	1a6d      	subs	r5, r5, r1
 800507e:	4629      	mov	r1, r5
 8005080:	4638      	mov	r0, r7
 8005082:	f7ff ffa7 	bl	8004fd4 <sbrk_aligned>
 8005086:	3001      	adds	r0, #1
 8005088:	d037      	beq.n	80050fa <_malloc_r+0xe6>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	442b      	add	r3, r5
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	f8d8 3000 	ldr.w	r3, [r8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d038      	beq.n	800510a <_malloc_r+0xf6>
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	42a2      	cmp	r2, r4
 800509c:	d12b      	bne.n	80050f6 <_malloc_r+0xe2>
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	e00f      	b.n	80050c4 <_malloc_r+0xb0>
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	1b52      	subs	r2, r2, r5
 80050a8:	d41f      	bmi.n	80050ea <_malloc_r+0xd6>
 80050aa:	2a0b      	cmp	r2, #11
 80050ac:	d917      	bls.n	80050de <_malloc_r+0xca>
 80050ae:	1961      	adds	r1, r4, r5
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	6025      	str	r5, [r4, #0]
 80050b4:	bf18      	it	ne
 80050b6:	6059      	strne	r1, [r3, #4]
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	bf08      	it	eq
 80050bc:	f8c8 1000 	streq.w	r1, [r8]
 80050c0:	5162      	str	r2, [r4, r5]
 80050c2:	604b      	str	r3, [r1, #4]
 80050c4:	4638      	mov	r0, r7
 80050c6:	f104 060b 	add.w	r6, r4, #11
 80050ca:	f000 f829 	bl	8005120 <__malloc_unlock>
 80050ce:	f026 0607 	bic.w	r6, r6, #7
 80050d2:	1d23      	adds	r3, r4, #4
 80050d4:	1af2      	subs	r2, r6, r3
 80050d6:	d0ae      	beq.n	8005036 <_malloc_r+0x22>
 80050d8:	1b9b      	subs	r3, r3, r6
 80050da:	50a3      	str	r3, [r4, r2]
 80050dc:	e7ab      	b.n	8005036 <_malloc_r+0x22>
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	d1dd      	bne.n	80050a0 <_malloc_r+0x8c>
 80050e4:	f8c8 2000 	str.w	r2, [r8]
 80050e8:	e7ec      	b.n	80050c4 <_malloc_r+0xb0>
 80050ea:	4623      	mov	r3, r4
 80050ec:	6864      	ldr	r4, [r4, #4]
 80050ee:	e7ac      	b.n	800504a <_malloc_r+0x36>
 80050f0:	4634      	mov	r4, r6
 80050f2:	6876      	ldr	r6, [r6, #4]
 80050f4:	e7b4      	b.n	8005060 <_malloc_r+0x4c>
 80050f6:	4613      	mov	r3, r2
 80050f8:	e7cc      	b.n	8005094 <_malloc_r+0x80>
 80050fa:	230c      	movs	r3, #12
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	4638      	mov	r0, r7
 8005100:	f000 f80e 	bl	8005120 <__malloc_unlock>
 8005104:	e797      	b.n	8005036 <_malloc_r+0x22>
 8005106:	6025      	str	r5, [r4, #0]
 8005108:	e7dc      	b.n	80050c4 <_malloc_r+0xb0>
 800510a:	605b      	str	r3, [r3, #4]
 800510c:	deff      	udf	#255	; 0xff
 800510e:	bf00      	nop
 8005110:	20000734 	.word	0x20000734

08005114 <__malloc_lock>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__malloc_lock+0x8>)
 8005116:	f7ff bf0f 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 800511a:	bf00      	nop
 800511c:	20000730 	.word	0x20000730

08005120 <__malloc_unlock>:
 8005120:	4801      	ldr	r0, [pc, #4]	; (8005128 <__malloc_unlock+0x8>)
 8005122:	f7ff bf0a 	b.w	8004f3a <__retarget_lock_release_recursive>
 8005126:	bf00      	nop
 8005128:	20000730 	.word	0x20000730

0800512c <__sfputc_r>:
 800512c:	6893      	ldr	r3, [r2, #8]
 800512e:	3b01      	subs	r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	b410      	push	{r4}
 8005134:	6093      	str	r3, [r2, #8]
 8005136:	da08      	bge.n	800514a <__sfputc_r+0x1e>
 8005138:	6994      	ldr	r4, [r2, #24]
 800513a:	42a3      	cmp	r3, r4
 800513c:	db01      	blt.n	8005142 <__sfputc_r+0x16>
 800513e:	290a      	cmp	r1, #10
 8005140:	d103      	bne.n	800514a <__sfputc_r+0x1e>
 8005142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005146:	f000 bb73 	b.w	8005830 <__swbuf_r>
 800514a:	6813      	ldr	r3, [r2, #0]
 800514c:	1c58      	adds	r0, r3, #1
 800514e:	6010      	str	r0, [r2, #0]
 8005150:	7019      	strb	r1, [r3, #0]
 8005152:	4608      	mov	r0, r1
 8005154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005158:	4770      	bx	lr

0800515a <__sfputs_r>:
 800515a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515c:	4606      	mov	r6, r0
 800515e:	460f      	mov	r7, r1
 8005160:	4614      	mov	r4, r2
 8005162:	18d5      	adds	r5, r2, r3
 8005164:	42ac      	cmp	r4, r5
 8005166:	d101      	bne.n	800516c <__sfputs_r+0x12>
 8005168:	2000      	movs	r0, #0
 800516a:	e007      	b.n	800517c <__sfputs_r+0x22>
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	463a      	mov	r2, r7
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff ffda 	bl	800512c <__sfputc_r>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d1f3      	bne.n	8005164 <__sfputs_r+0xa>
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005180 <_vfiprintf_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	460d      	mov	r5, r1
 8005186:	b09d      	sub	sp, #116	; 0x74
 8005188:	4614      	mov	r4, r2
 800518a:	4698      	mov	r8, r3
 800518c:	4606      	mov	r6, r0
 800518e:	b118      	cbz	r0, 8005198 <_vfiprintf_r+0x18>
 8005190:	6a03      	ldr	r3, [r0, #32]
 8005192:	b90b      	cbnz	r3, 8005198 <_vfiprintf_r+0x18>
 8005194:	f7ff fdcc 	bl	8004d30 <__sinit>
 8005198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800519a:	07d9      	lsls	r1, r3, #31
 800519c:	d405      	bmi.n	80051aa <_vfiprintf_r+0x2a>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	059a      	lsls	r2, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_vfiprintf_r+0x2a>
 80051a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051a6:	f7ff fec7 	bl	8004f38 <__retarget_lock_acquire_recursive>
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	071b      	lsls	r3, r3, #28
 80051ae:	d501      	bpl.n	80051b4 <_vfiprintf_r+0x34>
 80051b0:	692b      	ldr	r3, [r5, #16]
 80051b2:	b99b      	cbnz	r3, 80051dc <_vfiprintf_r+0x5c>
 80051b4:	4629      	mov	r1, r5
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 fb78 	bl	80058ac <__swsetup_r>
 80051bc:	b170      	cbz	r0, 80051dc <_vfiprintf_r+0x5c>
 80051be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c0:	07dc      	lsls	r4, r3, #31
 80051c2:	d504      	bpl.n	80051ce <_vfiprintf_r+0x4e>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	b01d      	add	sp, #116	; 0x74
 80051ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	0598      	lsls	r0, r3, #22
 80051d2:	d4f7      	bmi.n	80051c4 <_vfiprintf_r+0x44>
 80051d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d6:	f7ff feb0 	bl	8004f3a <__retarget_lock_release_recursive>
 80051da:	e7f3      	b.n	80051c4 <_vfiprintf_r+0x44>
 80051dc:	2300      	movs	r3, #0
 80051de:	9309      	str	r3, [sp, #36]	; 0x24
 80051e0:	2320      	movs	r3, #32
 80051e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ea:	2330      	movs	r3, #48	; 0x30
 80051ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053a0 <_vfiprintf_r+0x220>
 80051f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f4:	f04f 0901 	mov.w	r9, #1
 80051f8:	4623      	mov	r3, r4
 80051fa:	469a      	mov	sl, r3
 80051fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005200:	b10a      	cbz	r2, 8005206 <_vfiprintf_r+0x86>
 8005202:	2a25      	cmp	r2, #37	; 0x25
 8005204:	d1f9      	bne.n	80051fa <_vfiprintf_r+0x7a>
 8005206:	ebba 0b04 	subs.w	fp, sl, r4
 800520a:	d00b      	beq.n	8005224 <_vfiprintf_r+0xa4>
 800520c:	465b      	mov	r3, fp
 800520e:	4622      	mov	r2, r4
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffa1 	bl	800515a <__sfputs_r>
 8005218:	3001      	adds	r0, #1
 800521a:	f000 80a9 	beq.w	8005370 <_vfiprintf_r+0x1f0>
 800521e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005220:	445a      	add	r2, fp
 8005222:	9209      	str	r2, [sp, #36]	; 0x24
 8005224:	f89a 3000 	ldrb.w	r3, [sl]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <_vfiprintf_r+0x1f0>
 800522e:	2300      	movs	r3, #0
 8005230:	f04f 32ff 	mov.w	r2, #4294967295
 8005234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005238:	f10a 0a01 	add.w	sl, sl, #1
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	9307      	str	r3, [sp, #28]
 8005240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005244:	931a      	str	r3, [sp, #104]	; 0x68
 8005246:	4654      	mov	r4, sl
 8005248:	2205      	movs	r2, #5
 800524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524e:	4854      	ldr	r0, [pc, #336]	; (80053a0 <_vfiprintf_r+0x220>)
 8005250:	f7fa ffc6 	bl	80001e0 <memchr>
 8005254:	9a04      	ldr	r2, [sp, #16]
 8005256:	b9d8      	cbnz	r0, 8005290 <_vfiprintf_r+0x110>
 8005258:	06d1      	lsls	r1, r2, #27
 800525a:	bf44      	itt	mi
 800525c:	2320      	movmi	r3, #32
 800525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005262:	0713      	lsls	r3, r2, #28
 8005264:	bf44      	itt	mi
 8005266:	232b      	movmi	r3, #43	; 0x2b
 8005268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526c:	f89a 3000 	ldrb.w	r3, [sl]
 8005270:	2b2a      	cmp	r3, #42	; 0x2a
 8005272:	d015      	beq.n	80052a0 <_vfiprintf_r+0x120>
 8005274:	9a07      	ldr	r2, [sp, #28]
 8005276:	4654      	mov	r4, sl
 8005278:	2000      	movs	r0, #0
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	4621      	mov	r1, r4
 8005280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005284:	3b30      	subs	r3, #48	; 0x30
 8005286:	2b09      	cmp	r3, #9
 8005288:	d94d      	bls.n	8005326 <_vfiprintf_r+0x1a6>
 800528a:	b1b0      	cbz	r0, 80052ba <_vfiprintf_r+0x13a>
 800528c:	9207      	str	r2, [sp, #28]
 800528e:	e014      	b.n	80052ba <_vfiprintf_r+0x13a>
 8005290:	eba0 0308 	sub.w	r3, r0, r8
 8005294:	fa09 f303 	lsl.w	r3, r9, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	46a2      	mov	sl, r4
 800529e:	e7d2      	b.n	8005246 <_vfiprintf_r+0xc6>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	1d19      	adds	r1, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9103      	str	r1, [sp, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfbb      	ittet	lt
 80052ac:	425b      	neglt	r3, r3
 80052ae:	f042 0202 	orrlt.w	r2, r2, #2
 80052b2:	9307      	strge	r3, [sp, #28]
 80052b4:	9307      	strlt	r3, [sp, #28]
 80052b6:	bfb8      	it	lt
 80052b8:	9204      	strlt	r2, [sp, #16]
 80052ba:	7823      	ldrb	r3, [r4, #0]
 80052bc:	2b2e      	cmp	r3, #46	; 0x2e
 80052be:	d10c      	bne.n	80052da <_vfiprintf_r+0x15a>
 80052c0:	7863      	ldrb	r3, [r4, #1]
 80052c2:	2b2a      	cmp	r3, #42	; 0x2a
 80052c4:	d134      	bne.n	8005330 <_vfiprintf_r+0x1b0>
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	9203      	str	r2, [sp, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bfb8      	it	lt
 80052d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052d6:	3402      	adds	r4, #2
 80052d8:	9305      	str	r3, [sp, #20]
 80052da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053b0 <_vfiprintf_r+0x230>
 80052de:	7821      	ldrb	r1, [r4, #0]
 80052e0:	2203      	movs	r2, #3
 80052e2:	4650      	mov	r0, sl
 80052e4:	f7fa ff7c 	bl	80001e0 <memchr>
 80052e8:	b138      	cbz	r0, 80052fa <_vfiprintf_r+0x17a>
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	eba0 000a 	sub.w	r0, r0, sl
 80052f0:	2240      	movs	r2, #64	; 0x40
 80052f2:	4082      	lsls	r2, r0
 80052f4:	4313      	orrs	r3, r2
 80052f6:	3401      	adds	r4, #1
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fe:	4829      	ldr	r0, [pc, #164]	; (80053a4 <_vfiprintf_r+0x224>)
 8005300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005304:	2206      	movs	r2, #6
 8005306:	f7fa ff6b 	bl	80001e0 <memchr>
 800530a:	2800      	cmp	r0, #0
 800530c:	d03f      	beq.n	800538e <_vfiprintf_r+0x20e>
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <_vfiprintf_r+0x228>)
 8005310:	bb1b      	cbnz	r3, 800535a <_vfiprintf_r+0x1da>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	3308      	adds	r3, #8
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005320:	443b      	add	r3, r7
 8005322:	9309      	str	r3, [sp, #36]	; 0x24
 8005324:	e768      	b.n	80051f8 <_vfiprintf_r+0x78>
 8005326:	fb0c 3202 	mla	r2, ip, r2, r3
 800532a:	460c      	mov	r4, r1
 800532c:	2001      	movs	r0, #1
 800532e:	e7a6      	b.n	800527e <_vfiprintf_r+0xfe>
 8005330:	2300      	movs	r3, #0
 8005332:	3401      	adds	r4, #1
 8005334:	9305      	str	r3, [sp, #20]
 8005336:	4619      	mov	r1, r3
 8005338:	f04f 0c0a 	mov.w	ip, #10
 800533c:	4620      	mov	r0, r4
 800533e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005342:	3a30      	subs	r2, #48	; 0x30
 8005344:	2a09      	cmp	r2, #9
 8005346:	d903      	bls.n	8005350 <_vfiprintf_r+0x1d0>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0c6      	beq.n	80052da <_vfiprintf_r+0x15a>
 800534c:	9105      	str	r1, [sp, #20]
 800534e:	e7c4      	b.n	80052da <_vfiprintf_r+0x15a>
 8005350:	fb0c 2101 	mla	r1, ip, r1, r2
 8005354:	4604      	mov	r4, r0
 8005356:	2301      	movs	r3, #1
 8005358:	e7f0      	b.n	800533c <_vfiprintf_r+0x1bc>
 800535a:	ab03      	add	r3, sp, #12
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	462a      	mov	r2, r5
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <_vfiprintf_r+0x22c>)
 8005362:	a904      	add	r1, sp, #16
 8005364:	4630      	mov	r0, r6
 8005366:	f3af 8000 	nop.w
 800536a:	4607      	mov	r7, r0
 800536c:	1c78      	adds	r0, r7, #1
 800536e:	d1d6      	bne.n	800531e <_vfiprintf_r+0x19e>
 8005370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005372:	07d9      	lsls	r1, r3, #31
 8005374:	d405      	bmi.n	8005382 <_vfiprintf_r+0x202>
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d402      	bmi.n	8005382 <_vfiprintf_r+0x202>
 800537c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537e:	f7ff fddc 	bl	8004f3a <__retarget_lock_release_recursive>
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	065b      	lsls	r3, r3, #25
 8005386:	f53f af1d 	bmi.w	80051c4 <_vfiprintf_r+0x44>
 800538a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800538c:	e71c      	b.n	80051c8 <_vfiprintf_r+0x48>
 800538e:	ab03      	add	r3, sp, #12
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	462a      	mov	r2, r5
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <_vfiprintf_r+0x22c>)
 8005396:	a904      	add	r1, sp, #16
 8005398:	4630      	mov	r0, r6
 800539a:	f000 f879 	bl	8005490 <_printf_i>
 800539e:	e7e4      	b.n	800536a <_vfiprintf_r+0x1ea>
 80053a0:	08006300 	.word	0x08006300
 80053a4:	0800630a 	.word	0x0800630a
 80053a8:	00000000 	.word	0x00000000
 80053ac:	0800515b 	.word	0x0800515b
 80053b0:	08006306 	.word	0x08006306

080053b4 <_printf_common>:
 80053b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b8:	4616      	mov	r6, r2
 80053ba:	4699      	mov	r9, r3
 80053bc:	688a      	ldr	r2, [r1, #8]
 80053be:	690b      	ldr	r3, [r1, #16]
 80053c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bfb8      	it	lt
 80053c8:	4613      	movlt	r3, r2
 80053ca:	6033      	str	r3, [r6, #0]
 80053cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053d0:	4607      	mov	r7, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	b10a      	cbz	r2, 80053da <_printf_common+0x26>
 80053d6:	3301      	adds	r3, #1
 80053d8:	6033      	str	r3, [r6, #0]
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	0699      	lsls	r1, r3, #26
 80053de:	bf42      	ittt	mi
 80053e0:	6833      	ldrmi	r3, [r6, #0]
 80053e2:	3302      	addmi	r3, #2
 80053e4:	6033      	strmi	r3, [r6, #0]
 80053e6:	6825      	ldr	r5, [r4, #0]
 80053e8:	f015 0506 	ands.w	r5, r5, #6
 80053ec:	d106      	bne.n	80053fc <_printf_common+0x48>
 80053ee:	f104 0a19 	add.w	sl, r4, #25
 80053f2:	68e3      	ldr	r3, [r4, #12]
 80053f4:	6832      	ldr	r2, [r6, #0]
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	42ab      	cmp	r3, r5
 80053fa:	dc26      	bgt.n	800544a <_printf_common+0x96>
 80053fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005400:	1e13      	subs	r3, r2, #0
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	bf18      	it	ne
 8005406:	2301      	movne	r3, #1
 8005408:	0692      	lsls	r2, r2, #26
 800540a:	d42b      	bmi.n	8005464 <_printf_common+0xb0>
 800540c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005410:	4649      	mov	r1, r9
 8005412:	4638      	mov	r0, r7
 8005414:	47c0      	blx	r8
 8005416:	3001      	adds	r0, #1
 8005418:	d01e      	beq.n	8005458 <_printf_common+0xa4>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	6922      	ldr	r2, [r4, #16]
 800541e:	f003 0306 	and.w	r3, r3, #6
 8005422:	2b04      	cmp	r3, #4
 8005424:	bf02      	ittt	eq
 8005426:	68e5      	ldreq	r5, [r4, #12]
 8005428:	6833      	ldreq	r3, [r6, #0]
 800542a:	1aed      	subeq	r5, r5, r3
 800542c:	68a3      	ldr	r3, [r4, #8]
 800542e:	bf0c      	ite	eq
 8005430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005434:	2500      	movne	r5, #0
 8005436:	4293      	cmp	r3, r2
 8005438:	bfc4      	itt	gt
 800543a:	1a9b      	subgt	r3, r3, r2
 800543c:	18ed      	addgt	r5, r5, r3
 800543e:	2600      	movs	r6, #0
 8005440:	341a      	adds	r4, #26
 8005442:	42b5      	cmp	r5, r6
 8005444:	d11a      	bne.n	800547c <_printf_common+0xc8>
 8005446:	2000      	movs	r0, #0
 8005448:	e008      	b.n	800545c <_printf_common+0xa8>
 800544a:	2301      	movs	r3, #1
 800544c:	4652      	mov	r2, sl
 800544e:	4649      	mov	r1, r9
 8005450:	4638      	mov	r0, r7
 8005452:	47c0      	blx	r8
 8005454:	3001      	adds	r0, #1
 8005456:	d103      	bne.n	8005460 <_printf_common+0xac>
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005460:	3501      	adds	r5, #1
 8005462:	e7c6      	b.n	80053f2 <_printf_common+0x3e>
 8005464:	18e1      	adds	r1, r4, r3
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	2030      	movs	r0, #48	; 0x30
 800546a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800546e:	4422      	add	r2, r4
 8005470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005478:	3302      	adds	r3, #2
 800547a:	e7c7      	b.n	800540c <_printf_common+0x58>
 800547c:	2301      	movs	r3, #1
 800547e:	4622      	mov	r2, r4
 8005480:	4649      	mov	r1, r9
 8005482:	4638      	mov	r0, r7
 8005484:	47c0      	blx	r8
 8005486:	3001      	adds	r0, #1
 8005488:	d0e6      	beq.n	8005458 <_printf_common+0xa4>
 800548a:	3601      	adds	r6, #1
 800548c:	e7d9      	b.n	8005442 <_printf_common+0x8e>
	...

08005490 <_printf_i>:
 8005490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	7e0f      	ldrb	r7, [r1, #24]
 8005496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005498:	2f78      	cmp	r7, #120	; 0x78
 800549a:	4691      	mov	r9, r2
 800549c:	4680      	mov	r8, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	469a      	mov	sl, r3
 80054a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054a6:	d807      	bhi.n	80054b8 <_printf_i+0x28>
 80054a8:	2f62      	cmp	r7, #98	; 0x62
 80054aa:	d80a      	bhi.n	80054c2 <_printf_i+0x32>
 80054ac:	2f00      	cmp	r7, #0
 80054ae:	f000 80d4 	beq.w	800565a <_printf_i+0x1ca>
 80054b2:	2f58      	cmp	r7, #88	; 0x58
 80054b4:	f000 80c0 	beq.w	8005638 <_printf_i+0x1a8>
 80054b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054c0:	e03a      	b.n	8005538 <_printf_i+0xa8>
 80054c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054c6:	2b15      	cmp	r3, #21
 80054c8:	d8f6      	bhi.n	80054b8 <_printf_i+0x28>
 80054ca:	a101      	add	r1, pc, #4	; (adr r1, 80054d0 <_printf_i+0x40>)
 80054cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054d0:	08005529 	.word	0x08005529
 80054d4:	0800553d 	.word	0x0800553d
 80054d8:	080054b9 	.word	0x080054b9
 80054dc:	080054b9 	.word	0x080054b9
 80054e0:	080054b9 	.word	0x080054b9
 80054e4:	080054b9 	.word	0x080054b9
 80054e8:	0800553d 	.word	0x0800553d
 80054ec:	080054b9 	.word	0x080054b9
 80054f0:	080054b9 	.word	0x080054b9
 80054f4:	080054b9 	.word	0x080054b9
 80054f8:	080054b9 	.word	0x080054b9
 80054fc:	08005641 	.word	0x08005641
 8005500:	08005569 	.word	0x08005569
 8005504:	080055fb 	.word	0x080055fb
 8005508:	080054b9 	.word	0x080054b9
 800550c:	080054b9 	.word	0x080054b9
 8005510:	08005663 	.word	0x08005663
 8005514:	080054b9 	.word	0x080054b9
 8005518:	08005569 	.word	0x08005569
 800551c:	080054b9 	.word	0x080054b9
 8005520:	080054b9 	.word	0x080054b9
 8005524:	08005603 	.word	0x08005603
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	602a      	str	r2, [r5, #0]
 8005530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005538:	2301      	movs	r3, #1
 800553a:	e09f      	b.n	800567c <_printf_i+0x1ec>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	0607      	lsls	r7, r0, #24
 8005542:	f103 0104 	add.w	r1, r3, #4
 8005546:	6029      	str	r1, [r5, #0]
 8005548:	d501      	bpl.n	800554e <_printf_i+0xbe>
 800554a:	681e      	ldr	r6, [r3, #0]
 800554c:	e003      	b.n	8005556 <_printf_i+0xc6>
 800554e:	0646      	lsls	r6, r0, #25
 8005550:	d5fb      	bpl.n	800554a <_printf_i+0xba>
 8005552:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005556:	2e00      	cmp	r6, #0
 8005558:	da03      	bge.n	8005562 <_printf_i+0xd2>
 800555a:	232d      	movs	r3, #45	; 0x2d
 800555c:	4276      	negs	r6, r6
 800555e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005562:	485a      	ldr	r0, [pc, #360]	; (80056cc <_printf_i+0x23c>)
 8005564:	230a      	movs	r3, #10
 8005566:	e012      	b.n	800558e <_printf_i+0xfe>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	1d19      	adds	r1, r3, #4
 800556e:	6029      	str	r1, [r5, #0]
 8005570:	0605      	lsls	r5, r0, #24
 8005572:	d501      	bpl.n	8005578 <_printf_i+0xe8>
 8005574:	681e      	ldr	r6, [r3, #0]
 8005576:	e002      	b.n	800557e <_printf_i+0xee>
 8005578:	0641      	lsls	r1, r0, #25
 800557a:	d5fb      	bpl.n	8005574 <_printf_i+0xe4>
 800557c:	881e      	ldrh	r6, [r3, #0]
 800557e:	4853      	ldr	r0, [pc, #332]	; (80056cc <_printf_i+0x23c>)
 8005580:	2f6f      	cmp	r7, #111	; 0x6f
 8005582:	bf0c      	ite	eq
 8005584:	2308      	moveq	r3, #8
 8005586:	230a      	movne	r3, #10
 8005588:	2100      	movs	r1, #0
 800558a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800558e:	6865      	ldr	r5, [r4, #4]
 8005590:	60a5      	str	r5, [r4, #8]
 8005592:	2d00      	cmp	r5, #0
 8005594:	bfa2      	ittt	ge
 8005596:	6821      	ldrge	r1, [r4, #0]
 8005598:	f021 0104 	bicge.w	r1, r1, #4
 800559c:	6021      	strge	r1, [r4, #0]
 800559e:	b90e      	cbnz	r6, 80055a4 <_printf_i+0x114>
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	d04b      	beq.n	800563c <_printf_i+0x1ac>
 80055a4:	4615      	mov	r5, r2
 80055a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055aa:	fb03 6711 	mls	r7, r3, r1, r6
 80055ae:	5dc7      	ldrb	r7, [r0, r7]
 80055b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b4:	4637      	mov	r7, r6
 80055b6:	42bb      	cmp	r3, r7
 80055b8:	460e      	mov	r6, r1
 80055ba:	d9f4      	bls.n	80055a6 <_printf_i+0x116>
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d10b      	bne.n	80055d8 <_printf_i+0x148>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	07de      	lsls	r6, r3, #31
 80055c4:	d508      	bpl.n	80055d8 <_printf_i+0x148>
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	6861      	ldr	r1, [r4, #4]
 80055ca:	4299      	cmp	r1, r3
 80055cc:	bfde      	ittt	le
 80055ce:	2330      	movle	r3, #48	; 0x30
 80055d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d8:	1b52      	subs	r2, r2, r5
 80055da:	6122      	str	r2, [r4, #16]
 80055dc:	f8cd a000 	str.w	sl, [sp]
 80055e0:	464b      	mov	r3, r9
 80055e2:	aa03      	add	r2, sp, #12
 80055e4:	4621      	mov	r1, r4
 80055e6:	4640      	mov	r0, r8
 80055e8:	f7ff fee4 	bl	80053b4 <_printf_common>
 80055ec:	3001      	adds	r0, #1
 80055ee:	d14a      	bne.n	8005686 <_printf_i+0x1f6>
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	b004      	add	sp, #16
 80055f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f043 0320 	orr.w	r3, r3, #32
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	4833      	ldr	r0, [pc, #204]	; (80056d0 <_printf_i+0x240>)
 8005604:	2778      	movs	r7, #120	; 0x78
 8005606:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	6829      	ldr	r1, [r5, #0]
 800560e:	061f      	lsls	r7, r3, #24
 8005610:	f851 6b04 	ldr.w	r6, [r1], #4
 8005614:	d402      	bmi.n	800561c <_printf_i+0x18c>
 8005616:	065f      	lsls	r7, r3, #25
 8005618:	bf48      	it	mi
 800561a:	b2b6      	uxthmi	r6, r6
 800561c:	07df      	lsls	r7, r3, #31
 800561e:	bf48      	it	mi
 8005620:	f043 0320 	orrmi.w	r3, r3, #32
 8005624:	6029      	str	r1, [r5, #0]
 8005626:	bf48      	it	mi
 8005628:	6023      	strmi	r3, [r4, #0]
 800562a:	b91e      	cbnz	r6, 8005634 <_printf_i+0x1a4>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	f023 0320 	bic.w	r3, r3, #32
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	2310      	movs	r3, #16
 8005636:	e7a7      	b.n	8005588 <_printf_i+0xf8>
 8005638:	4824      	ldr	r0, [pc, #144]	; (80056cc <_printf_i+0x23c>)
 800563a:	e7e4      	b.n	8005606 <_printf_i+0x176>
 800563c:	4615      	mov	r5, r2
 800563e:	e7bd      	b.n	80055bc <_printf_i+0x12c>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	6826      	ldr	r6, [r4, #0]
 8005644:	6961      	ldr	r1, [r4, #20]
 8005646:	1d18      	adds	r0, r3, #4
 8005648:	6028      	str	r0, [r5, #0]
 800564a:	0635      	lsls	r5, r6, #24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	d501      	bpl.n	8005654 <_printf_i+0x1c4>
 8005650:	6019      	str	r1, [r3, #0]
 8005652:	e002      	b.n	800565a <_printf_i+0x1ca>
 8005654:	0670      	lsls	r0, r6, #25
 8005656:	d5fb      	bpl.n	8005650 <_printf_i+0x1c0>
 8005658:	8019      	strh	r1, [r3, #0]
 800565a:	2300      	movs	r3, #0
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	4615      	mov	r5, r2
 8005660:	e7bc      	b.n	80055dc <_printf_i+0x14c>
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	602a      	str	r2, [r5, #0]
 8005668:	681d      	ldr	r5, [r3, #0]
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	2100      	movs	r1, #0
 800566e:	4628      	mov	r0, r5
 8005670:	f7fa fdb6 	bl	80001e0 <memchr>
 8005674:	b108      	cbz	r0, 800567a <_printf_i+0x1ea>
 8005676:	1b40      	subs	r0, r0, r5
 8005678:	6060      	str	r0, [r4, #4]
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	2300      	movs	r3, #0
 8005680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005684:	e7aa      	b.n	80055dc <_printf_i+0x14c>
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	462a      	mov	r2, r5
 800568a:	4649      	mov	r1, r9
 800568c:	4640      	mov	r0, r8
 800568e:	47d0      	blx	sl
 8005690:	3001      	adds	r0, #1
 8005692:	d0ad      	beq.n	80055f0 <_printf_i+0x160>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	079b      	lsls	r3, r3, #30
 8005698:	d413      	bmi.n	80056c2 <_printf_i+0x232>
 800569a:	68e0      	ldr	r0, [r4, #12]
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	4298      	cmp	r0, r3
 80056a0:	bfb8      	it	lt
 80056a2:	4618      	movlt	r0, r3
 80056a4:	e7a6      	b.n	80055f4 <_printf_i+0x164>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4632      	mov	r2, r6
 80056aa:	4649      	mov	r1, r9
 80056ac:	4640      	mov	r0, r8
 80056ae:	47d0      	blx	sl
 80056b0:	3001      	adds	r0, #1
 80056b2:	d09d      	beq.n	80055f0 <_printf_i+0x160>
 80056b4:	3501      	adds	r5, #1
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	9903      	ldr	r1, [sp, #12]
 80056ba:	1a5b      	subs	r3, r3, r1
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dcf2      	bgt.n	80056a6 <_printf_i+0x216>
 80056c0:	e7eb      	b.n	800569a <_printf_i+0x20a>
 80056c2:	2500      	movs	r5, #0
 80056c4:	f104 0619 	add.w	r6, r4, #25
 80056c8:	e7f5      	b.n	80056b6 <_printf_i+0x226>
 80056ca:	bf00      	nop
 80056cc:	08006311 	.word	0x08006311
 80056d0:	08006322 	.word	0x08006322

080056d4 <__sflush_r>:
 80056d4:	898a      	ldrh	r2, [r1, #12]
 80056d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	4605      	mov	r5, r0
 80056dc:	0710      	lsls	r0, r2, #28
 80056de:	460c      	mov	r4, r1
 80056e0:	d458      	bmi.n	8005794 <__sflush_r+0xc0>
 80056e2:	684b      	ldr	r3, [r1, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	dc05      	bgt.n	80056f4 <__sflush_r+0x20>
 80056e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	dc02      	bgt.n	80056f4 <__sflush_r+0x20>
 80056ee:	2000      	movs	r0, #0
 80056f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056f6:	2e00      	cmp	r6, #0
 80056f8:	d0f9      	beq.n	80056ee <__sflush_r+0x1a>
 80056fa:	2300      	movs	r3, #0
 80056fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005700:	682f      	ldr	r7, [r5, #0]
 8005702:	6a21      	ldr	r1, [r4, #32]
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	d032      	beq.n	800576e <__sflush_r+0x9a>
 8005708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	075a      	lsls	r2, r3, #29
 800570e:	d505      	bpl.n	800571c <__sflush_r+0x48>
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	1ac0      	subs	r0, r0, r3
 8005714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005716:	b10b      	cbz	r3, 800571c <__sflush_r+0x48>
 8005718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800571a:	1ac0      	subs	r0, r0, r3
 800571c:	2300      	movs	r3, #0
 800571e:	4602      	mov	r2, r0
 8005720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005722:	6a21      	ldr	r1, [r4, #32]
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	d106      	bne.n	800573c <__sflush_r+0x68>
 800572e:	6829      	ldr	r1, [r5, #0]
 8005730:	291d      	cmp	r1, #29
 8005732:	d82b      	bhi.n	800578c <__sflush_r+0xb8>
 8005734:	4a29      	ldr	r2, [pc, #164]	; (80057dc <__sflush_r+0x108>)
 8005736:	410a      	asrs	r2, r1
 8005738:	07d6      	lsls	r6, r2, #31
 800573a:	d427      	bmi.n	800578c <__sflush_r+0xb8>
 800573c:	2200      	movs	r2, #0
 800573e:	6062      	str	r2, [r4, #4]
 8005740:	04d9      	lsls	r1, r3, #19
 8005742:	6922      	ldr	r2, [r4, #16]
 8005744:	6022      	str	r2, [r4, #0]
 8005746:	d504      	bpl.n	8005752 <__sflush_r+0x7e>
 8005748:	1c42      	adds	r2, r0, #1
 800574a:	d101      	bne.n	8005750 <__sflush_r+0x7c>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b903      	cbnz	r3, 8005752 <__sflush_r+0x7e>
 8005750:	6560      	str	r0, [r4, #84]	; 0x54
 8005752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005754:	602f      	str	r7, [r5, #0]
 8005756:	2900      	cmp	r1, #0
 8005758:	d0c9      	beq.n	80056ee <__sflush_r+0x1a>
 800575a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800575e:	4299      	cmp	r1, r3
 8005760:	d002      	beq.n	8005768 <__sflush_r+0x94>
 8005762:	4628      	mov	r0, r5
 8005764:	f7ff fbea 	bl	8004f3c <_free_r>
 8005768:	2000      	movs	r0, #0
 800576a:	6360      	str	r0, [r4, #52]	; 0x34
 800576c:	e7c0      	b.n	80056f0 <__sflush_r+0x1c>
 800576e:	2301      	movs	r3, #1
 8005770:	4628      	mov	r0, r5
 8005772:	47b0      	blx	r6
 8005774:	1c41      	adds	r1, r0, #1
 8005776:	d1c8      	bne.n	800570a <__sflush_r+0x36>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0c5      	beq.n	800570a <__sflush_r+0x36>
 800577e:	2b1d      	cmp	r3, #29
 8005780:	d001      	beq.n	8005786 <__sflush_r+0xb2>
 8005782:	2b16      	cmp	r3, #22
 8005784:	d101      	bne.n	800578a <__sflush_r+0xb6>
 8005786:	602f      	str	r7, [r5, #0]
 8005788:	e7b1      	b.n	80056ee <__sflush_r+0x1a>
 800578a:	89a3      	ldrh	r3, [r4, #12]
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	e7ad      	b.n	80056f0 <__sflush_r+0x1c>
 8005794:	690f      	ldr	r7, [r1, #16]
 8005796:	2f00      	cmp	r7, #0
 8005798:	d0a9      	beq.n	80056ee <__sflush_r+0x1a>
 800579a:	0793      	lsls	r3, r2, #30
 800579c:	680e      	ldr	r6, [r1, #0]
 800579e:	bf08      	it	eq
 80057a0:	694b      	ldreq	r3, [r1, #20]
 80057a2:	600f      	str	r7, [r1, #0]
 80057a4:	bf18      	it	ne
 80057a6:	2300      	movne	r3, #0
 80057a8:	eba6 0807 	sub.w	r8, r6, r7
 80057ac:	608b      	str	r3, [r1, #8]
 80057ae:	f1b8 0f00 	cmp.w	r8, #0
 80057b2:	dd9c      	ble.n	80056ee <__sflush_r+0x1a>
 80057b4:	6a21      	ldr	r1, [r4, #32]
 80057b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057b8:	4643      	mov	r3, r8
 80057ba:	463a      	mov	r2, r7
 80057bc:	4628      	mov	r0, r5
 80057be:	47b0      	blx	r6
 80057c0:	2800      	cmp	r0, #0
 80057c2:	dc06      	bgt.n	80057d2 <__sflush_r+0xfe>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295
 80057d0:	e78e      	b.n	80056f0 <__sflush_r+0x1c>
 80057d2:	4407      	add	r7, r0
 80057d4:	eba8 0800 	sub.w	r8, r8, r0
 80057d8:	e7e9      	b.n	80057ae <__sflush_r+0xda>
 80057da:	bf00      	nop
 80057dc:	dfbffffe 	.word	0xdfbffffe

080057e0 <_fflush_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	690b      	ldr	r3, [r1, #16]
 80057e4:	4605      	mov	r5, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	b913      	cbnz	r3, 80057f0 <_fflush_r+0x10>
 80057ea:	2500      	movs	r5, #0
 80057ec:	4628      	mov	r0, r5
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	b118      	cbz	r0, 80057fa <_fflush_r+0x1a>
 80057f2:	6a03      	ldr	r3, [r0, #32]
 80057f4:	b90b      	cbnz	r3, 80057fa <_fflush_r+0x1a>
 80057f6:	f7ff fa9b 	bl	8004d30 <__sinit>
 80057fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f3      	beq.n	80057ea <_fflush_r+0xa>
 8005802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005804:	07d0      	lsls	r0, r2, #31
 8005806:	d404      	bmi.n	8005812 <_fflush_r+0x32>
 8005808:	0599      	lsls	r1, r3, #22
 800580a:	d402      	bmi.n	8005812 <_fflush_r+0x32>
 800580c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800580e:	f7ff fb93 	bl	8004f38 <__retarget_lock_acquire_recursive>
 8005812:	4628      	mov	r0, r5
 8005814:	4621      	mov	r1, r4
 8005816:	f7ff ff5d 	bl	80056d4 <__sflush_r>
 800581a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800581c:	07da      	lsls	r2, r3, #31
 800581e:	4605      	mov	r5, r0
 8005820:	d4e4      	bmi.n	80057ec <_fflush_r+0xc>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	059b      	lsls	r3, r3, #22
 8005826:	d4e1      	bmi.n	80057ec <_fflush_r+0xc>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f7ff fb86 	bl	8004f3a <__retarget_lock_release_recursive>
 800582e:	e7dd      	b.n	80057ec <_fflush_r+0xc>

08005830 <__swbuf_r>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	460e      	mov	r6, r1
 8005834:	4614      	mov	r4, r2
 8005836:	4605      	mov	r5, r0
 8005838:	b118      	cbz	r0, 8005842 <__swbuf_r+0x12>
 800583a:	6a03      	ldr	r3, [r0, #32]
 800583c:	b90b      	cbnz	r3, 8005842 <__swbuf_r+0x12>
 800583e:	f7ff fa77 	bl	8004d30 <__sinit>
 8005842:	69a3      	ldr	r3, [r4, #24]
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	071a      	lsls	r2, r3, #28
 800584a:	d525      	bpl.n	8005898 <__swbuf_r+0x68>
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	b31b      	cbz	r3, 8005898 <__swbuf_r+0x68>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	6922      	ldr	r2, [r4, #16]
 8005854:	1a98      	subs	r0, r3, r2
 8005856:	6963      	ldr	r3, [r4, #20]
 8005858:	b2f6      	uxtb	r6, r6
 800585a:	4283      	cmp	r3, r0
 800585c:	4637      	mov	r7, r6
 800585e:	dc04      	bgt.n	800586a <__swbuf_r+0x3a>
 8005860:	4621      	mov	r1, r4
 8005862:	4628      	mov	r0, r5
 8005864:	f7ff ffbc 	bl	80057e0 <_fflush_r>
 8005868:	b9e0      	cbnz	r0, 80058a4 <__swbuf_r+0x74>
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	3b01      	subs	r3, #1
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	6022      	str	r2, [r4, #0]
 8005876:	701e      	strb	r6, [r3, #0]
 8005878:	6962      	ldr	r2, [r4, #20]
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	429a      	cmp	r2, r3
 800587e:	d004      	beq.n	800588a <__swbuf_r+0x5a>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	07db      	lsls	r3, r3, #31
 8005884:	d506      	bpl.n	8005894 <__swbuf_r+0x64>
 8005886:	2e0a      	cmp	r6, #10
 8005888:	d104      	bne.n	8005894 <__swbuf_r+0x64>
 800588a:	4621      	mov	r1, r4
 800588c:	4628      	mov	r0, r5
 800588e:	f7ff ffa7 	bl	80057e0 <_fflush_r>
 8005892:	b938      	cbnz	r0, 80058a4 <__swbuf_r+0x74>
 8005894:	4638      	mov	r0, r7
 8005896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f806 	bl	80058ac <__swsetup_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d0d5      	beq.n	8005850 <__swbuf_r+0x20>
 80058a4:	f04f 37ff 	mov.w	r7, #4294967295
 80058a8:	e7f4      	b.n	8005894 <__swbuf_r+0x64>
	...

080058ac <__swsetup_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <__swsetup_r+0xac>)
 80058b0:	4605      	mov	r5, r0
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	460c      	mov	r4, r1
 80058b6:	b118      	cbz	r0, 80058c0 <__swsetup_r+0x14>
 80058b8:	6a03      	ldr	r3, [r0, #32]
 80058ba:	b90b      	cbnz	r3, 80058c0 <__swsetup_r+0x14>
 80058bc:	f7ff fa38 	bl	8004d30 <__sinit>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c6:	0718      	lsls	r0, r3, #28
 80058c8:	d422      	bmi.n	8005910 <__swsetup_r+0x64>
 80058ca:	06d9      	lsls	r1, r3, #27
 80058cc:	d407      	bmi.n	80058de <__swsetup_r+0x32>
 80058ce:	2309      	movs	r3, #9
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e034      	b.n	8005948 <__swsetup_r+0x9c>
 80058de:	0758      	lsls	r0, r3, #29
 80058e0:	d512      	bpl.n	8005908 <__swsetup_r+0x5c>
 80058e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e4:	b141      	cbz	r1, 80058f8 <__swsetup_r+0x4c>
 80058e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ea:	4299      	cmp	r1, r3
 80058ec:	d002      	beq.n	80058f4 <__swsetup_r+0x48>
 80058ee:	4628      	mov	r0, r5
 80058f0:	f7ff fb24 	bl	8004f3c <_free_r>
 80058f4:	2300      	movs	r3, #0
 80058f6:	6363      	str	r3, [r4, #52]	; 0x34
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	2300      	movs	r3, #0
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f043 0308 	orr.w	r3, r3, #8
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	b94b      	cbnz	r3, 8005928 <__swsetup_r+0x7c>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800591a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591e:	d003      	beq.n	8005928 <__swsetup_r+0x7c>
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	f000 f850 	bl	80059c8 <__smakebuf_r>
 8005928:	89a0      	ldrh	r0, [r4, #12]
 800592a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800592e:	f010 0301 	ands.w	r3, r0, #1
 8005932:	d00a      	beq.n	800594a <__swsetup_r+0x9e>
 8005934:	2300      	movs	r3, #0
 8005936:	60a3      	str	r3, [r4, #8]
 8005938:	6963      	ldr	r3, [r4, #20]
 800593a:	425b      	negs	r3, r3
 800593c:	61a3      	str	r3, [r4, #24]
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	b943      	cbnz	r3, 8005954 <__swsetup_r+0xa8>
 8005942:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005946:	d1c4      	bne.n	80058d2 <__swsetup_r+0x26>
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	0781      	lsls	r1, r0, #30
 800594c:	bf58      	it	pl
 800594e:	6963      	ldrpl	r3, [r4, #20]
 8005950:	60a3      	str	r3, [r4, #8]
 8005952:	e7f4      	b.n	800593e <__swsetup_r+0x92>
 8005954:	2000      	movs	r0, #0
 8005956:	e7f7      	b.n	8005948 <__swsetup_r+0x9c>
 8005958:	20000098 	.word	0x20000098

0800595c <_sbrk_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d06      	ldr	r5, [pc, #24]	; (8005978 <_sbrk_r+0x1c>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	f7fc fb2a 	bl	8001fc0 <_sbrk>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_sbrk_r+0x1a>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_sbrk_r+0x1a>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	2000072c 	.word	0x2000072c

0800597c <__swhatbuf_r>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	460c      	mov	r4, r1
 8005980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005984:	2900      	cmp	r1, #0
 8005986:	b096      	sub	sp, #88	; 0x58
 8005988:	4615      	mov	r5, r2
 800598a:	461e      	mov	r6, r3
 800598c:	da0d      	bge.n	80059aa <__swhatbuf_r+0x2e>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005994:	f04f 0100 	mov.w	r1, #0
 8005998:	bf0c      	ite	eq
 800599a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800599e:	2340      	movne	r3, #64	; 0x40
 80059a0:	2000      	movs	r0, #0
 80059a2:	6031      	str	r1, [r6, #0]
 80059a4:	602b      	str	r3, [r5, #0]
 80059a6:	b016      	add	sp, #88	; 0x58
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	466a      	mov	r2, sp
 80059ac:	f000 f848 	bl	8005a40 <_fstat_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	dbec      	blt.n	800598e <__swhatbuf_r+0x12>
 80059b4:	9901      	ldr	r1, [sp, #4]
 80059b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059be:	4259      	negs	r1, r3
 80059c0:	4159      	adcs	r1, r3
 80059c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c6:	e7eb      	b.n	80059a0 <__swhatbuf_r+0x24>

080059c8 <__smakebuf_r>:
 80059c8:	898b      	ldrh	r3, [r1, #12]
 80059ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059cc:	079d      	lsls	r5, r3, #30
 80059ce:	4606      	mov	r6, r0
 80059d0:	460c      	mov	r4, r1
 80059d2:	d507      	bpl.n	80059e4 <__smakebuf_r+0x1c>
 80059d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	6123      	str	r3, [r4, #16]
 80059dc:	2301      	movs	r3, #1
 80059de:	6163      	str	r3, [r4, #20]
 80059e0:	b002      	add	sp, #8
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
 80059e4:	ab01      	add	r3, sp, #4
 80059e6:	466a      	mov	r2, sp
 80059e8:	f7ff ffc8 	bl	800597c <__swhatbuf_r>
 80059ec:	9900      	ldr	r1, [sp, #0]
 80059ee:	4605      	mov	r5, r0
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff fb0f 	bl	8005014 <_malloc_r>
 80059f6:	b948      	cbnz	r0, 8005a0c <__smakebuf_r+0x44>
 80059f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059fc:	059a      	lsls	r2, r3, #22
 80059fe:	d4ef      	bmi.n	80059e0 <__smakebuf_r+0x18>
 8005a00:	f023 0303 	bic.w	r3, r3, #3
 8005a04:	f043 0302 	orr.w	r3, r3, #2
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	e7e3      	b.n	80059d4 <__smakebuf_r+0xc>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	6020      	str	r0, [r4, #0]
 8005a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	9b00      	ldr	r3, [sp, #0]
 8005a18:	6163      	str	r3, [r4, #20]
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	6120      	str	r0, [r4, #16]
 8005a1e:	b15b      	cbz	r3, 8005a38 <__smakebuf_r+0x70>
 8005a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f81d 	bl	8005a64 <_isatty_r>
 8005a2a:	b128      	cbz	r0, 8005a38 <__smakebuf_r+0x70>
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	f043 0301 	orr.w	r3, r3, #1
 8005a36:	81a3      	strh	r3, [r4, #12]
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	431d      	orrs	r5, r3
 8005a3c:	81a5      	strh	r5, [r4, #12]
 8005a3e:	e7cf      	b.n	80059e0 <__smakebuf_r+0x18>

08005a40 <_fstat_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d07      	ldr	r5, [pc, #28]	; (8005a60 <_fstat_r+0x20>)
 8005a44:	2300      	movs	r3, #0
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	f7fc fa8e 	bl	8001f6e <_fstat>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	d102      	bne.n	8005a5c <_fstat_r+0x1c>
 8005a56:	682b      	ldr	r3, [r5, #0]
 8005a58:	b103      	cbz	r3, 8005a5c <_fstat_r+0x1c>
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	bd38      	pop	{r3, r4, r5, pc}
 8005a5e:	bf00      	nop
 8005a60:	2000072c 	.word	0x2000072c

08005a64 <_isatty_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d06      	ldr	r5, [pc, #24]	; (8005a80 <_isatty_r+0x1c>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	f7fc fa8d 	bl	8001f8e <_isatty>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_isatty_r+0x1a>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_isatty_r+0x1a>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	2000072c 	.word	0x2000072c

08005a84 <_init>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr

08005a90 <_fini>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr
