
dwm1000- f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e4  080064e4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ec  080064ec  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080064f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200000a4  08006598  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08006598  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138c9  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332f  00000000  00000000  0003399d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00036cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00037f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2a0  00000000  00000000  00039018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170c6  00000000  00000000  000542b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934cf  00000000  00000000  0006b37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005130  00000000  00000000  000fe8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005bd0 	.word	0x08005bd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08005bd0 	.word	0x08005bd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000594:	4b9f      	ldr	r3, [pc, #636]	; (8000814 <dwt_initialise+0x290>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800059c:	4b9d      	ldr	r3, [pc, #628]	; (8000814 <dwt_initialise+0x290>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80005a4:	4b9b      	ldr	r3, [pc, #620]	; (8000814 <dwt_initialise+0x290>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005ac:	4b99      	ldr	r3, [pc, #612]	; (8000814 <dwt_initialise+0x290>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005b4:	4b97      	ldr	r3, [pc, #604]	; (8000814 <dwt_initialise+0x290>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005bc:	4b95      	ldr	r3, [pc, #596]	; (8000814 <dwt_initialise+0x290>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005c4:	4b93      	ldr	r3, [pc, #588]	; (8000814 <dwt_initialise+0x290>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005cc:	f000 f926 	bl	800081c <dwt_readdevid>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a91      	ldr	r2, [pc, #580]	; (8000818 <dwt_initialise+0x294>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d002      	beq.n	80005de <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	e115      	b.n	800080a <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f003 0302 	and.w	r3, r3, #2
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005e8:	f000 fd64 	bl	80010b4 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d004      	beq.n	8000600 <dwt_initialise+0x7c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d102      	bne.n	8000606 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000600:	2000      	movs	r0, #0
 8000602:	f000 fc63 	bl	8000ecc <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000606:	2204      	movs	r2, #4
 8000608:	2100      	movs	r1, #0
 800060a:	2024      	movs	r0, #36	; 0x24
 800060c:	f000 fba7 	bl	8000d5e <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d116      	bne.n	8000648 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800061a:	2004      	movs	r0, #4
 800061c:	f000 fbf5 	bl	8000e0a <_dwt_otpread>
 8000620:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d01f      	beq.n	800066a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800062a:	2202      	movs	r2, #2
 800062c:	2112      	movs	r1, #18
 800062e:	202d      	movs	r0, #45	; 0x2d
 8000630:	f000 fb95 	bl	8000d5e <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000634:	4b77      	ldr	r3, [pc, #476]	; (8000814 <dwt_initialise+0x290>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	8ada      	ldrh	r2, [r3, #22]
 800063a:	4b76      	ldr	r3, [pc, #472]	; (8000814 <dwt_initialise+0x290>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000642:	b292      	uxth	r2, r2
 8000644:	82da      	strh	r2, [r3, #22]
 8000646:	e010      	b.n	800066a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000648:	2130      	movs	r1, #48	; 0x30
 800064a:	2028      	movs	r0, #40	; 0x28
 800064c:	f000 fb43 	bl	8000cd6 <dwt_read32bitoffsetreg>
 8000650:	4603      	mov	r3, r0
 8000652:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000656:	d008      	beq.n	800066a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000658:	4b6e      	ldr	r3, [pc, #440]	; (8000814 <dwt_initialise+0x290>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	8ada      	ldrh	r2, [r3, #22]
 800065e:	4b6d      	ldr	r3, [pc, #436]	; (8000814 <dwt_initialise+0x290>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000666:	b292      	uxth	r2, r2
 8000668:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <dwt_initialise+0x104>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	2b00      	cmp	r3, #0
 800067c:	d011      	beq.n	80006a2 <dwt_initialise+0x11e>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00c      	beq.n	80006a2 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000688:	201e      	movs	r0, #30
 800068a:	f000 fbbe 	bl	8000e0a <_dwt_otpread>
 800068e:	4603      	mov	r3, r0
 8000690:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000692:	8afb      	ldrh	r3, [r7, #22]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <dwt_initialise+0x290>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	72da      	strb	r2, [r3, #11]
 80006a0:	e003      	b.n	80006aa <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80006a2:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <dwt_initialise+0x290>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d10b      	bne.n	80006cc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006b4:	8afb      	ldrh	r3, [r7, #22]
 80006b6:	f003 031f 	and.w	r3, r3, #31
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006be:	2310      	movs	r3, #16
 80006c0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006c2:	8afb      	ldrh	r3, [r7, #22]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fd1a 	bl	8001100 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006d6:	4b4f      	ldr	r3, [pc, #316]	; (8000814 <dwt_initialise+0x290>)
 80006d8:	681c      	ldr	r4, [r3, #0]
 80006da:	2006      	movs	r0, #6
 80006dc:	f000 fb95 	bl	8000e0a <_dwt_otpread>
 80006e0:	4603      	mov	r3, r0
 80006e2:	6023      	str	r3, [r4, #0]
 80006e4:	e003      	b.n	80006ee <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80006e6:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <dwt_initialise+0x290>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d007      	beq.n	8000708 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80006f8:	4b46      	ldr	r3, [pc, #280]	; (8000814 <dwt_initialise+0x290>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	2007      	movs	r0, #7
 80006fe:	f000 fb84 	bl	8000e0a <_dwt_otpread>
 8000702:	4603      	mov	r3, r0
 8000704:	6063      	str	r3, [r4, #4]
 8000706:	e003      	b.n	8000710 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <dwt_initialise+0x290>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000716:	2b00      	cmp	r3, #0
 8000718:	d008      	beq.n	800072c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800071a:	2008      	movs	r0, #8
 800071c:	f000 fb75 	bl	8000e0a <_dwt_otpread>
 8000720:	4602      	mov	r2, r0
 8000722:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <dwt_initialise+0x290>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	721a      	strb	r2, [r3, #8]
 800072a:	e003      	b.n	8000734 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800072c:	4b39      	ldr	r3, [pc, #228]	; (8000814 <dwt_initialise+0x290>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	2b00      	cmp	r3, #0
 800073c:	d008      	beq.n	8000750 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800073e:	2009      	movs	r0, #9
 8000740:	f000 fb63 	bl	8000e0a <_dwt_otpread>
 8000744:	4602      	mov	r2, r0
 8000746:	4b33      	ldr	r3, [pc, #204]	; (8000814 <dwt_initialise+0x290>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	725a      	strb	r2, [r3, #9]
 800074e:	e003      	b.n	8000758 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000750:	4b30      	ldr	r3, [pc, #192]	; (8000814 <dwt_initialise+0x290>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	2b00      	cmp	r3, #0
 8000760:	d121      	bne.n	80007a6 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d00b      	beq.n	8000784 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 800076c:	f000 fb9a 	bl	8000ea4 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <dwt_initialise+0x290>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	8ada      	ldrh	r2, [r3, #22]
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <dwt_initialise+0x290>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800077e:	b292      	uxth	r2, r2
 8000780:	82da      	strh	r2, [r3, #22]
 8000782:	e01e      	b.n	80007c2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000784:	2105      	movs	r1, #5
 8000786:	2036      	movs	r0, #54	; 0x36
 8000788:	f000 facc 	bl	8000d24 <dwt_read16bitoffsetreg>
 800078c:	4603      	mov	r3, r0
 800078e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000796:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	461a      	mov	r2, r3
 800079c:	2105      	movs	r1, #5
 800079e:	2036      	movs	r0, #54	; 0x36
 80007a0:	f000 faf0 	bl	8000d84 <dwt_write16bitoffsetreg>
 80007a4:	e00d      	b.n	80007c2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d108      	bne.n	80007c2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <dwt_initialise+0x290>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	8ada      	ldrh	r2, [r3, #22]
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <dwt_initialise+0x290>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007be:	b292      	uxth	r2, r2
 80007c0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 fb82 	bl	8000ecc <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007c8:	2200      	movs	r2, #0
 80007ca:	210a      	movs	r1, #10
 80007cc:	202c      	movs	r0, #44	; 0x2c
 80007ce:	f000 fac6 	bl	8000d5e <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <dwt_initialise+0x290>)
 80007d4:	681c      	ldr	r4, [r3, #0]
 80007d6:	2100      	movs	r1, #0
 80007d8:	2004      	movs	r0, #4
 80007da:	f000 fa7c 	bl	8000cd6 <dwt_read32bitoffsetreg>
 80007de:	4603      	mov	r3, r0
 80007e0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <dwt_initialise+0x290>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	0c1b      	lsrs	r3, r3, #16
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <dwt_initialise+0x290>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f002 0203 	and.w	r2, r2, #3
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <dwt_initialise+0x290>)
 80007fa:	681c      	ldr	r4, [r3, #0]
 80007fc:	2100      	movs	r1, #0
 80007fe:	2008      	movs	r0, #8
 8000800:	f000 fa69 	bl	8000cd6 <dwt_read32bitoffsetreg>
 8000804:	4603      	mov	r3, r0
 8000806:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000808:	2300      	movs	r3, #0

} // end dwt_initialise()
 800080a:	4618      	mov	r0, r3
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	bf00      	nop
 8000814:	20000000 	.word	0x20000000
 8000818:	deca0130 	.word	0xdeca0130

0800081c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000820:	2100      	movs	r1, #0
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fa57 	bl	8000cd6 <dwt_read32bitoffsetreg>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	461a      	mov	r2, r3
 800084c:	4ba1      	ldr	r3, [pc, #644]	; (8000ad4 <dwt_configure+0x2a4>)
 800084e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000852:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	785b      	ldrb	r3, [r3, #1]
 8000858:	3b01      	subs	r3, #1
 800085a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800085c:	7cfb      	ldrb	r3, [r7, #19]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d002      	beq.n	8000868 <dwt_configure+0x38>
 8000862:	7cfb      	ldrb	r3, [r7, #19]
 8000864:	2b07      	cmp	r3, #7
 8000866:	d101      	bne.n	800086c <dwt_configure+0x3c>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <dwt_configure+0x3e>
 800086c:	2300      	movs	r3, #0
 800086e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	79db      	ldrb	r3, [r3, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10b      	bne.n	8000890 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000878:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <dwt_configure+0x2a8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	691a      	ldr	r2, [r3, #16]
 800087e:	4b96      	ldr	r3, [pc, #600]	; (8000ad8 <dwt_configure+0x2a8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000886:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000888:	8abb      	ldrh	r3, [r7, #20]
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	82bb      	strh	r3, [r7, #20]
 800088e:	e007      	b.n	80008a0 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000890:	4b91      	ldr	r3, [pc, #580]	; (8000ad8 <dwt_configure+0x2a8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	691a      	ldr	r2, [r3, #16]
 8000896:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <dwt_configure+0x2a8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800089e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80008a0:	4b8d      	ldr	r3, [pc, #564]	; (8000ad8 <dwt_configure+0x2a8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	7a12      	ldrb	r2, [r2, #8]
 80008a8:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80008aa:	4b8b      	ldr	r3, [pc, #556]	; (8000ad8 <dwt_configure+0x2a8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	691a      	ldr	r2, [r3, #16]
 80008b0:	4b89      	ldr	r3, [pc, #548]	; (8000ad8 <dwt_configure+0x2a8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008b8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80008ba:	4b87      	ldr	r3, [pc, #540]	; (8000ad8 <dwt_configure+0x2a8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6919      	ldr	r1, [r3, #16]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7a1b      	ldrb	r3, [r3, #8]
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80008ca:	4b83      	ldr	r3, [pc, #524]	; (8000ad8 <dwt_configure+0x2a8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80008d2:	4b81      	ldr	r3, [pc, #516]	; (8000ad8 <dwt_configure+0x2a8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	461a      	mov	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	2004      	movs	r0, #4
 80008de:	f000 fa6d 	bl	8000dbc <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80008e2:	8abb      	ldrh	r3, [r7, #20]
 80008e4:	461a      	mov	r2, r3
 80008e6:	f642 0104 	movw	r1, #10244	; 0x2804
 80008ea:	202e      	movs	r0, #46	; 0x2e
 80008ec:	f000 fa4a 	bl	8000d84 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80008f0:	7cbb      	ldrb	r3, [r7, #18]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fab6 	bl	8000e64 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80008f8:	7cfb      	ldrb	r3, [r7, #19]
 80008fa:	4a78      	ldr	r2, [pc, #480]	; (8000adc <dwt_configure+0x2ac>)
 80008fc:	5cd3      	ldrb	r3, [r2, r3]
 80008fe:	461a      	mov	r2, r3
 8000900:	4b77      	ldr	r3, [pc, #476]	; (8000ae0 <dwt_configure+0x2b0>)
 8000902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000906:	461a      	mov	r2, r3
 8000908:	2107      	movs	r1, #7
 800090a:	202b      	movs	r0, #43	; 0x2b
 800090c:	f000 fa56 	bl	8000dbc <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	4a72      	ldr	r2, [pc, #456]	; (8000adc <dwt_configure+0x2ac>)
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	461a      	mov	r2, r3
 8000918:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <dwt_configure+0x2b4>)
 800091a:	5c9b      	ldrb	r3, [r3, r2]
 800091c:	461a      	mov	r2, r3
 800091e:	210b      	movs	r1, #11
 8000920:	202b      	movs	r0, #43	; 0x2b
 8000922:	f000 fa1c 	bl	8000d5e <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000926:	7c7b      	ldrb	r3, [r7, #17]
 8000928:	4a6f      	ldr	r2, [pc, #444]	; (8000ae8 <dwt_configure+0x2b8>)
 800092a:	5cd3      	ldrb	r3, [r2, r3]
 800092c:	461a      	mov	r2, r3
 800092e:	210b      	movs	r1, #11
 8000930:	2028      	movs	r0, #40	; 0x28
 8000932:	f000 fa14 	bl	8000d5e <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	4a68      	ldr	r2, [pc, #416]	; (8000adc <dwt_configure+0x2ac>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	461a      	mov	r2, r3
 800093e:	4b6b      	ldr	r3, [pc, #428]	; (8000aec <dwt_configure+0x2bc>)
 8000940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000944:	461a      	mov	r2, r3
 8000946:	210c      	movs	r1, #12
 8000948:	2028      	movs	r0, #40	; 0x28
 800094a:	f000 fa37 	bl	8000dbc <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	79db      	ldrb	r3, [r3, #7]
 8000952:	4618      	mov	r0, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	4619      	mov	r1, r3
 800095a:	4a65      	ldr	r2, [pc, #404]	; (8000af0 <dwt_configure+0x2c0>)
 800095c:	0043      	lsls	r3, r0, #1
 800095e:	440b      	add	r3, r1
 8000960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000964:	461a      	mov	r2, r3
 8000966:	2102      	movs	r1, #2
 8000968:	2027      	movs	r0, #39	; 0x27
 800096a:	f000 fa0b 	bl	8000d84 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800096e:	7cbb      	ldrb	r3, [r7, #18]
 8000970:	4a60      	ldr	r2, [pc, #384]	; (8000af4 <dwt_configure+0x2c4>)
 8000972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000976:	461a      	mov	r2, r3
 8000978:	2104      	movs	r1, #4
 800097a:	2027      	movs	r0, #39	; 0x27
 800097c:	f000 fa02 	bl	8000d84 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	79db      	ldrb	r3, [r3, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d105      	bne.n	8000994 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000988:	2264      	movs	r2, #100	; 0x64
 800098a:	2106      	movs	r1, #6
 800098c:	2027      	movs	r0, #39	; 0x27
 800098e:	f000 f9f9 	bl	8000d84 <dwt_write16bitoffsetreg>
 8000992:	e018      	b.n	80009c6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	2b04      	cmp	r3, #4
 800099a:	d10a      	bne.n	80009b2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800099c:	2210      	movs	r2, #16
 800099e:	2106      	movs	r1, #6
 80009a0:	2027      	movs	r0, #39	; 0x27
 80009a2:	f000 f9ef 	bl	8000d84 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80009a6:	2210      	movs	r2, #16
 80009a8:	2126      	movs	r1, #38	; 0x26
 80009aa:	2027      	movs	r0, #39	; 0x27
 80009ac:	f000 f9d7 	bl	8000d5e <dwt_write8bitoffsetreg>
 80009b0:	e009      	b.n	80009c6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80009b2:	2220      	movs	r2, #32
 80009b4:	2106      	movs	r1, #6
 80009b6:	2027      	movs	r0, #39	; 0x27
 80009b8:	f000 f9e4 	bl	8000d84 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80009bc:	2228      	movs	r2, #40	; 0x28
 80009be:	2126      	movs	r1, #38	; 0x26
 80009c0:	2027      	movs	r0, #39	; 0x27
 80009c2:	f000 f9cc 	bl	8000d5e <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80009c6:	7cbb      	ldrb	r3, [r7, #18]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	78d2      	ldrb	r2, [r2, #3]
 80009cc:	4611      	mov	r1, r2
 80009ce:	4a4a      	ldr	r2, [pc, #296]	; (8000af8 <dwt_configure+0x2c8>)
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d8:	461a      	mov	r2, r3
 80009da:	2108      	movs	r1, #8
 80009dc:	2027      	movs	r0, #39	; 0x27
 80009de:	f000 f9ed 	bl	8000dbc <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	895b      	ldrh	r3, [r3, #10]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d103      	bne.n	80009f2 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f241 0241 	movw	r2, #4161	; 0x1041
 80009f0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	895b      	ldrh	r3, [r3, #10]
 80009f6:	461a      	mov	r2, r3
 80009f8:	2120      	movs	r1, #32
 80009fa:	2027      	movs	r0, #39	; 0x27
 80009fc:	f000 f9c2 	bl	8000d84 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000a00:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <dwt_configure+0x2cc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	210c      	movs	r1, #12
 8000a08:	2023      	movs	r0, #35	; 0x23
 8000a0a:	f000 f9d7 	bl	8000dbc <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000a0e:	7cbb      	ldrb	r3, [r7, #18]
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <dwt_configure+0x2cc>)
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	2023      	movs	r0, #35	; 0x23
 8000a1e:	f000 f9b1 	bl	8000d84 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	799b      	ldrb	r3, [r3, #6]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00d      	beq.n	8000a46 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	79db      	ldrb	r3, [r3, #7]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <dwt_configure+0x2d0>)
 8000a32:	5c9b      	ldrb	r3, [r3, r2]
 8000a34:	461a      	mov	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	2021      	movs	r0, #33	; 0x21
 8000a3a:	f000 f990 	bl	8000d5e <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000a42:	2301      	movs	r3, #1
 8000a44:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a46:	7cfb      	ldrb	r3, [r7, #19]
 8000a48:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a4c:	7cfb      	ldrb	r3, [r7, #19]
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a52:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	049b      	lsls	r3, r3, #18
 8000a5a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a5e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	051b      	lsls	r3, r3, #20
 8000a64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a68:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a6a:	7dbb      	ldrb	r3, [r7, #22]
 8000a6c:	045b      	lsls	r3, r3, #17
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a72:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	059b      	lsls	r3, r3, #22
 8000a7a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a7e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	795b      	ldrb	r3, [r3, #5]
 8000a84:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	201f      	movs	r0, #31
 8000a90:	f000 f994 	bl	8000dbc <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	789a      	ldrb	r2, [r3, #2]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	785b      	ldrb	r3, [r3, #1]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	0419      	lsls	r1, r3, #16
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	79db      	ldrb	r3, [r3, #7]
 8000aa6:	035a      	lsls	r2, r3, #13
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <dwt_configure+0x2a8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <dwt_configure+0x2a8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2008      	movs	r0, #8
 8000abc:	f000 f97e 	bl	8000dbc <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ac0:	2242      	movs	r2, #66	; 0x42
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	200d      	movs	r0, #13
 8000ac6:	f000 f94a 	bl	8000d5e <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08005c94 	.word	0x08005c94
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	08005c14 	.word	0x08005c14
 8000ae0:	08005c34 	.word	0x08005c34
 8000ae4:	08005c4c 	.word	0x08005c4c
 8000ae8:	08005c54 	.word	0x08005c54
 8000aec:	08005c1c 	.word	0x08005c1c
 8000af0:	08005c64 	.word	0x08005c64
 8000af4:	08005c70 	.word	0x08005c70
 8000af8:	08005c74 	.word	0x08005c74
 8000afc:	08005c58 	.word	0x08005c58
 8000b00:	08005c60 	.word	0x08005c60

08000b04 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	4613      	mov	r3, r2
 8000b12:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	4413      	add	r3, r2
 8000b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b1e:	dc09      	bgt.n	8000b34 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	3b02      	subs	r3, #2
 8000b24:	461a      	mov	r2, r3
 8000b26:	88b9      	ldrh	r1, [r7, #4]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2009      	movs	r0, #9
 8000b2c:	f000 f828 	bl	8000b80 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e001      	b.n	8000b38 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	603a      	str	r2, [r7, #0]
 8000b4a:	80fb      	strh	r3, [r7, #6]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <dwt_writetxfctrl+0x3c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	059b      	lsls	r3, r3, #22
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	03db      	lsls	r3, r3, #15
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2008      	movs	r0, #8
 8000b6e:	f000 f925 	bl	8000dbc <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000000 	.word	0x20000000

08000b80 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60ba      	str	r2, [r7, #8]
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	81fb      	strh	r3, [r7, #14]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b96:	89bb      	ldrh	r3, [r7, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10c      	bne.n	8000bb6 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	1c59      	adds	r1, r3, #1
 8000ba4:	6179      	str	r1, [r7, #20]
 8000ba6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	3318      	adds	r3, #24
 8000bae:	443b      	add	r3, r7
 8000bb0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bb4:	e02f      	b.n	8000c16 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	1c59      	adds	r1, r3, #1
 8000bbe:	6179      	str	r1, [r7, #20]
 8000bc0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	3318      	adds	r3, #24
 8000bc8:	443b      	add	r3, r7
 8000bca:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd2:	d809      	bhi.n	8000be8 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	617a      	str	r2, [r7, #20]
 8000bda:	89ba      	ldrh	r2, [r7, #12]
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	3318      	adds	r3, #24
 8000be0:	443b      	add	r3, r7
 8000be2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000be6:	e016      	b.n	8000c16 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000be8:	89bb      	ldrh	r3, [r7, #12]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	1c59      	adds	r1, r3, #1
 8000bf0:	6179      	str	r1, [r7, #20]
 8000bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	3318      	adds	r3, #24
 8000bfa:	443b      	add	r3, r7
 8000bfc:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c00:	89bb      	ldrh	r3, [r7, #12]
 8000c02:	09db      	lsrs	r3, r3, #7
 8000c04:	b299      	uxth	r1, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	617a      	str	r2, [r7, #20]
 8000c0c:	b2ca      	uxtb	r2, r1
 8000c0e:	3318      	adds	r3, #24
 8000c10:	443b      	add	r3, r7
 8000c12:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	b298      	uxth	r0, r3
 8000c1a:	f107 0110 	add.w	r1, r7, #16
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	f000 faaf 	bl	8001184 <writetospi>
} // end dwt_writetodevice()
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4603      	mov	r3, r0
 8000c3a:	81fb      	strh	r3, [r7, #14]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c44:	89bb      	ldrh	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d109      	bne.n	8000c5e <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	1c5a      	adds	r2, r3, #1
 8000c4e:	617a      	str	r2, [r7, #20]
 8000c50:	89fa      	ldrh	r2, [r7, #14]
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	3318      	adds	r3, #24
 8000c56:	443b      	add	r3, r7
 8000c58:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c5c:	e02f      	b.n	8000cbe <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	1c59      	adds	r1, r3, #1
 8000c66:	6179      	str	r1, [r7, #20]
 8000c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	3318      	adds	r3, #24
 8000c70:	443b      	add	r3, r7
 8000c72:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7a:	d809      	bhi.n	8000c90 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	617a      	str	r2, [r7, #20]
 8000c82:	89ba      	ldrh	r2, [r7, #12]
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	3318      	adds	r3, #24
 8000c88:	443b      	add	r3, r7
 8000c8a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c8e:	e016      	b.n	8000cbe <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c90:	89bb      	ldrh	r3, [r7, #12]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	1c59      	adds	r1, r3, #1
 8000c98:	6179      	str	r1, [r7, #20]
 8000c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	3318      	adds	r3, #24
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000ca8:	89bb      	ldrh	r3, [r7, #12]
 8000caa:	09db      	lsrs	r3, r3, #7
 8000cac:	b299      	uxth	r1, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	617a      	str	r2, [r7, #20]
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	443b      	add	r3, r7
 8000cba:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	b298      	uxth	r0, r3
 8000cc2:	f107 0110 	add.w	r1, r7, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	f000 fa8f 	bl	80011ec <readfromspi>
} // end dwt_readfromdevice()
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	b298      	uxth	r0, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b299      	uxth	r1, r3
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	f7ff ff9c 	bl	8000c2e <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e00b      	b.n	8000d14 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	f107 010c 	add.w	r1, r7, #12
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	440a      	add	r2, r1
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	daf0      	bge.n	8000cfc <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d1a:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	b298      	uxth	r0, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b299      	uxth	r1, r3
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f7ff ff75 	bl	8000c2e <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	7b3b      	ldrb	r3, [r7, #12]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d54:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	b298      	uxth	r0, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	b299      	uxth	r1, r3
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	2201      	movs	r2, #1
 8000d78:	f7ff ff02 	bl	8000b80 <dwt_writetodevice>
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	b298      	uxth	r0, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	b299      	uxth	r1, r3
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2202      	movs	r2, #2
 8000db0:	f7ff fee6 	bl	8000b80 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	e00d      	b.n	8000dea <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	f107 0210 	add.w	r2, r7, #16
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	4413      	add	r3, r2
 8000dda:	460a      	mov	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	3301      	adds	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	ddee      	ble.n	8000dce <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	b298      	uxth	r0, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	b299      	uxth	r1, r3
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	f7ff febf 	bl	8000b80 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b084      	sub	sp, #16
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	461a      	mov	r2, r3
 8000e18:	2104      	movs	r1, #4
 8000e1a:	202d      	movs	r0, #45	; 0x2d
 8000e1c:	f7ff ffb2 	bl	8000d84 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e20:	2203      	movs	r2, #3
 8000e22:	2106      	movs	r1, #6
 8000e24:	202d      	movs	r0, #45	; 0x2d
 8000e26:	f7ff ff9a 	bl	8000d5e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2106      	movs	r1, #6
 8000e2e:	202d      	movs	r0, #45	; 0x2d
 8000e30:	f7ff ff95 	bl	8000d5e <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e34:	210a      	movs	r1, #10
 8000e36:	202d      	movs	r0, #45	; 0x2d
 8000e38:	f7ff ff4d 	bl	8000cd6 <dwt_read32bitoffsetreg>
 8000e3c:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2102      	movs	r1, #2
 8000e50:	202c      	movs	r0, #44	; 0x2c
 8000e52:	f7ff ff84 	bl	8000d5e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e56:	2202      	movs	r2, #2
 8000e58:	2102      	movs	r1, #2
 8000e5a:	202c      	movs	r0, #44	; 0x2c
 8000e5c:	f7ff ff7f 	bl	8000d5e <dwt_write8bitoffsetreg>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e6c:	226d      	movs	r2, #109	; 0x6d
 8000e6e:	f640 0106 	movw	r1, #2054	; 0x806
 8000e72:	202e      	movs	r0, #46	; 0x2e
 8000e74:	f7ff ff73 	bl	8000d5e <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e7e:	f240 6207 	movw	r2, #1543	; 0x607
 8000e82:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e86:	202e      	movs	r0, #46	; 0x2e
 8000e88:	f7ff ff7c 	bl	8000d84 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000e8c:	e006      	b.n	8000e9c <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000e8e:	f241 6207 	movw	r2, #5639	; 0x1607
 8000e92:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e96:	202e      	movs	r0, #46	; 0x2e
 8000e98:	f7ff ff74 	bl	8000d84 <dwt_write16bitoffsetreg>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000ea8:	200e      	movs	r0, #14
 8000eaa:	f000 f80f 	bl	8000ecc <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000eae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eb2:	2106      	movs	r1, #6
 8000eb4:	202d      	movs	r0, #45	; 0x2d
 8000eb6:	f7ff ff65 	bl	8000d84 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 f956 	bl	800116c <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f000 f803 	bl	8000ecc <_dwt_enableclocks>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2202      	movs	r2, #2
 8000eda:	2100      	movs	r1, #0
 8000edc:	2036      	movs	r0, #54	; 0x36
 8000ede:	f7ff fea6 	bl	8000c2e <dwt_readfromdevice>
    switch(clocks)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0e      	cmp	r3, #14
 8000ee6:	d876      	bhi.n	8000fd6 <_dwt_enableclocks+0x10a>
 8000ee8:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <_dwt_enableclocks+0x24>)
 8000eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eee:	bf00      	nop
 8000ef0:	08000f3d 	.word	0x08000f3d
 8000ef4:	08000f2d 	.word	0x08000f2d
 8000ef8:	08000f53 	.word	0x08000f53
 8000efc:	08000fd7 	.word	0x08000fd7
 8000f00:	08000fd7 	.word	0x08000fd7
 8000f04:	08000fd7 	.word	0x08000fd7
 8000f08:	08000fd7 	.word	0x08000fd7
 8000f0c:	08000f69 	.word	0x08000f69
 8000f10:	08000f89 	.word	0x08000f89
 8000f14:	08000fd7 	.word	0x08000fd7
 8000f18:	08000fd7 	.word	0x08000fd7
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000fab 	.word	0x08000fab
 8000f24:	08000fb7 	.word	0x08000fb7
 8000f28:	08000fcd 	.word	0x08000fcd
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f30:	7b7b      	ldrb	r3, [r7, #13]
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f3a:	e04d      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f3c:	7b3b      	ldrb	r3, [r7, #12]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	f023 0303 	bic.w	r3, r3, #3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f50:	e042      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000f52:	7b3b      	ldrb	r3, [r7, #12]
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f66:	e037      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000f68:	7b3b      	ldrb	r3, [r7, #12]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f86:	e027      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f88:	7b3b      	ldrb	r3, [r7, #12]
 8000f8a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f92:	7b7b      	ldrb	r3, [r7, #13]
 8000f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f9c:	e01c      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fa8:	e016      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	f023 0302 	bic.w	r3, r3, #2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fb4:	e010      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000fb6:	7b3b      	ldrb	r3, [r7, #12]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fca:	e005      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fd4:	e000      	b.n	8000fd8 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000fd6:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2036      	movs	r0, #54	; 0x36
 8000fe2:	f7ff fdcd 	bl	8000b80 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	3301      	adds	r3, #1
 8000fec:	2201      	movs	r2, #1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2036      	movs	r0, #54	; 0x36
 8000ff2:	f7ff fdc5 	bl	8000b80 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop

08001000 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ff61 	bl	8000ecc <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800100a:	2200      	movs	r2, #0
 800100c:	2104      	movs	r1, #4
 800100e:	2036      	movs	r0, #54	; 0x36
 8001010:	f7ff feb8 	bl	8000d84 <dwt_write16bitoffsetreg>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 800102a:	2300      	movs	r3, #0
 800102c:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <dwt_starttx+0x98>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d020      	beq.n	8001090 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	f043 0306 	orr.w	r3, r3, #6
 8001054:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001056:	7afb      	ldrb	r3, [r7, #11]
 8001058:	461a      	mov	r2, r3
 800105a:	2100      	movs	r1, #0
 800105c:	200d      	movs	r0, #13
 800105e:	f7ff fe7e 	bl	8000d5e <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001062:	2103      	movs	r1, #3
 8001064:	200f      	movs	r0, #15
 8001066:	f7ff fe5d 	bl	8000d24 <dwt_read16bitoffsetreg>
 800106a:	4603      	mov	r3, r0
 800106c:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e012      	b.n	80010a4 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	2100      	movs	r1, #0
 8001082:	200d      	movs	r0, #13
 8001084:	f7ff fe6b 	bl	8000d5e <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e009      	b.n	80010a4 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	461a      	mov	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	200d      	movs	r0, #13
 80010a0:	f7ff fe5d 	bl	8000d5e <dwt_write8bitoffsetreg>
    }

    return retval;
 80010a4:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000

080010b4 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80010b8:	f7ff ffa2 	bl	8001000 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	202c      	movs	r0, #44	; 0x2c
 80010c2:	f7ff fe5f 	bl	8000d84 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2106      	movs	r1, #6
 80010ca:	202c      	movs	r0, #44	; 0x2c
 80010cc:	f7ff fe47 	bl	8000d5e <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80010d0:	f7ff feba 	bl	8000e48 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2103      	movs	r1, #3
 80010d8:	2036      	movs	r0, #54	; 0x36
 80010da:	f7ff fe40 	bl	8000d5e <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 f844 	bl	800116c <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80010e4:	22f0      	movs	r2, #240	; 0xf0
 80010e6:	2103      	movs	r1, #3
 80010e8:	2036      	movs	r0, #54	; 0x36
 80010ea:	f7ff fe38 	bl	8000d5e <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 80010ee:	4b03      	ldr	r3, [pc, #12]	; (80010fc <dwt_softreset+0x48>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	755a      	strb	r2, [r3, #21]
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000

08001100 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	f003 031f 	and.w	r3, r3, #31
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001118:	b25b      	sxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	461a      	mov	r2, r3
 8001120:	210e      	movs	r1, #14
 8001122:	202b      	movs	r0, #43	; 0x2b
 8001124:	f7ff fe1b 	bl	8000d5e <dwt_write8bitoffsetreg>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001136:	f000 f991 	bl	800145c <port_GetEXT_IRQStatus>
 800113a:	4603      	mov	r3, r0
 800113c:	607b      	str	r3, [r7, #4]

	if(s) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001144:	f000 f97c 	bl	8001440 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001160:	f000 f975 	bl	800144e <port_EnableEXT_IRQ>
	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f8c5 	bl	8001304 <Sleep>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001184:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001188:	4683      	mov	fp, r0
 800118a:	468a      	mov	sl, r1
 800118c:	4690      	mov	r8, r2
 800118e:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001190:	f7ff ffce 	bl	8001130 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001194:	4d13      	ldr	r5, [pc, #76]	; (80011e4 <writetospi+0x60>)
    stat = decamutexon() ;
 8001196:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001198:	4628      	mov	r0, r5
 800119a:	f003 f8ab 	bl	80042f4 <HAL_SPI_GetState>
 800119e:	2801      	cmp	r0, #1
 80011a0:	4604      	mov	r4, r0
 80011a2:	d1f9      	bne.n	8001198 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <writetospi+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	f001 fbe7 	bl	800297c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80011ae:	465a      	mov	r2, fp
 80011b0:	4651      	mov	r1, sl
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <writetospi+0x60>)
 80011b8:	f002 fe55 	bl	8003e66 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	4649      	mov	r1, r9
 80011c2:	fa1f f288 	uxth.w	r2, r8
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <writetospi+0x60>)
 80011c8:	f002 fe4d 	bl	8003e66 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80011cc:	4622      	mov	r2, r4
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <writetospi+0x64>)
 80011d2:	f001 fbd3 	bl	800297c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7ff ffbb 	bl	8001152 <decamutexoff>

    return 0;
} // end writetospi()
 80011dc:	2000      	movs	r0, #0
 80011de:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80011e2:	bf00      	nop
 80011e4:	20000554 	.word	0x20000554
 80011e8:	40020400 	.word	0x40020400

080011ec <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80011ec:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80011f0:	4681      	mov	r9, r0
 80011f2:	460c      	mov	r4, r1
 80011f4:	4690      	mov	r8, r2
 80011f6:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80011f8:	f7ff ff9a 	bl	8001130 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011fc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800127c <readfromspi+0x90>
    stat = decamutexon() ;
 8001200:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001202:	4650      	mov	r0, sl
 8001204:	f003 f876 	bl	80042f4 <HAL_SPI_GetState>
 8001208:	2801      	cmp	r0, #1
 800120a:	d1fa      	bne.n	8001202 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800120c:	481a      	ldr	r0, [pc, #104]	; (8001278 <readfromspi+0x8c>)
 800120e:	2200      	movs	r2, #0
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	f001 fbb3 	bl	800297c <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001216:	f1b9 0f00 	cmp.w	r9, #0
 800121a:	d00c      	beq.n	8001236 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800121c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800127c <readfromspi+0x90>
 8001220:	44a1      	add	r9, r4
 8001222:	2201      	movs	r2, #1
 8001224:	4621      	mov	r1, r4
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 800122a:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 800122c:	4650      	mov	r0, sl
 800122e:	f002 fe1a 	bl	8003e66 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001232:	454c      	cmp	r4, r9
 8001234:	d1f5      	bne.n	8001222 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001236:	f1b8 0f00 	cmp.w	r8, #0
 800123a:	d012      	beq.n	8001262 <readfromspi+0x76>
 800123c:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800127c <readfromspi+0x90>
 8001240:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001244:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001246:	f8dc 2000 	ldr.w	r2, [ip]
 800124a:	6891      	ldr	r1, [r2, #8]
 800124c:	0789      	lsls	r1, r1, #30
 800124e:	d5fc      	bpl.n	800124a <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001250:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001252:	6891      	ldr	r1, [r2, #8]
 8001254:	07cb      	lsls	r3, r1, #31
 8001256:	d5fc      	bpl.n	8001252 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001258:	68d3      	ldr	r3, [r2, #12]
 800125a:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 800125e:	4285      	cmp	r5, r0
 8001260:	d1f1      	bne.n	8001246 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001262:	2201      	movs	r2, #1
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <readfromspi+0x8c>)
 8001268:	f001 fb88 	bl	800297c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800126c:	4630      	mov	r0, r6
 800126e:	f7ff ff70 	bl	8001152 <decamutexoff>

    return 0;
} // end readfromspi()
 8001272:	2000      	movs	r0, #0
 8001274:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001278:	40020400 	.word	0x40020400
 800127c:	20000554 	.word	0x20000554

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db12      	blt.n	80012f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	490a      	ldr	r1, [pc, #40]	; (8001300 <__NVIC_DisableIRQ+0x44>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	3320      	adds	r3, #32
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e8:	f3bf 8f4f 	dsb	sy
}
 80012ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ee:	f3bf 8f6f 	isb	sy
}
 80012f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100

08001304 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f001 f827 	bl	8002360 <HAL_Delay>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <EXTI_GetITEnStatus+0x38>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001362:	2311      	movs	r3, #17
 8001364:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	480a      	ldr	r0, [pc, #40]	; (8001398 <reset_DW1000+0x40>)
 8001370:	f001 f980 	bl	8002674 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2101      	movs	r1, #1
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <reset_DW1000+0x40>)
 800137a:	f001 faff 	bl	800297c <HAL_GPIO_WritePin>

    Sleep(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff ffc0 	bl	8001304 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001384:	2000      	movs	r0, #0
 8001386:	f000 f809 	bl	800139c <setup_DW1000RSTnIRQ>



    Sleep(2);
 800138a:	2002      	movs	r0, #2
 800138c:	f7ff ffba 	bl	8001304 <Sleep>
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40020000 	.word	0x40020000

0800139c <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013b2:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <setup_DW1000RSTnIRQ+0x70>)
 80013c0:	f001 f958 	bl	8002674 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 80013c4:	2006      	movs	r0, #6
 80013c6:	f001 f90a 	bl	80025de <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2105      	movs	r1, #5
 80013ce:	2006      	movs	r0, #6
 80013d0:	f001 f8e9 	bl	80025a6 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 80013d4:	e015      	b.n	8001402 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 80013d6:	2006      	movs	r0, #6
 80013d8:	f001 f90f 	bl	80025fa <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013e0:	2311      	movs	r3, #17
 80013e2:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <setup_DW1000RSTnIRQ+0x70>)
 80013f4:	f001 f93e 	bl	8002674 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2101      	movs	r1, #1
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <setup_DW1000RSTnIRQ+0x70>)
 80013fe:	f001 fabd 	bl	800297c <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020000 	.word	0x40020000

08001410 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <port_set_dw1000_slowrate+0x14>)
 8001416:	2220      	movs	r2, #32
 8001418:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <port_set_dw1000_slowrate+0x14>)
 800141c:	f002 fc9a 	bl	8003d54 <HAL_SPI_Init>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000554 	.word	0x20000554

08001428 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <port_set_dw1000_fastrate+0x14>)
 800142e:	2208      	movs	r2, #8
 8001430:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001432:	4802      	ldr	r0, [pc, #8]	; (800143c <port_set_dw1000_fastrate+0x14>)
 8001434:	f002 fc8e 	bl	8003d54 <HAL_SPI_Init>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000554 	.word	0x20000554

08001440 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001444:	2017      	movs	r0, #23
 8001446:	f7ff ff39 	bl	80012bc <__NVIC_DisableIRQ>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}

0800144e <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8001452:	2017      	movs	r0, #23
 8001454:	f7ff ff14 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001460:	2017      	movs	r0, #23
 8001462:	f7ff ff5b 	bl	800131c <EXTI_GetITEnStatus>
 8001466:	4603      	mov	r3, r0
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}

0800146c <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <SSD1306_InvertDisplay+0x1a>
 800147a:	22a7      	movs	r2, #167	; 0xa7
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 faac 	bl	80019dc <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001484:	e004      	b.n	8001490 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001486:	22a6      	movs	r2, #166	; 0xa6
 8001488:	2100      	movs	r1, #0
 800148a:	2078      	movs	r0, #120	; 0x78
 800148c:	f000 faa6 	bl	80019dc <ssd1306_I2C_Write>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800149e:	f000 fa21 	bl	80018e4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014a6:	2201      	movs	r2, #1
 80014a8:	2178      	movs	r1, #120	; 0x78
 80014aa:	485b      	ldr	r0, [pc, #364]	; (8001618 <SSD1306_Init+0x180>)
 80014ac:	f001 fcc2 	bl	8002e34 <HAL_I2C_IsDeviceReady>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e0a9      	b.n	800160e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014ba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c0:	e002      	b.n	80014c8 <SSD1306_Init+0x30>
		p--;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f9      	bne.n	80014c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014ce:	22ae      	movs	r2, #174	; 0xae
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 fa82 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	; 0x78
 80014de:	f000 fa7d 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014e2:	2210      	movs	r2, #16
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	; 0x78
 80014e8:	f000 fa78 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014ec:	22b0      	movs	r2, #176	; 0xb0
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	; 0x78
 80014f2:	f000 fa73 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014f6:	22c8      	movs	r2, #200	; 0xc8
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fa6e 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 fa69 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800150a:	2210      	movs	r2, #16
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fa64 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 fa5f 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800151e:	2281      	movs	r2, #129	; 0x81
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 fa5a 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001528:	22ff      	movs	r2, #255	; 0xff
 800152a:	2100      	movs	r1, #0
 800152c:	2078      	movs	r0, #120	; 0x78
 800152e:	f000 fa55 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001532:	22a1      	movs	r2, #161	; 0xa1
 8001534:	2100      	movs	r1, #0
 8001536:	2078      	movs	r0, #120	; 0x78
 8001538:	f000 fa50 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800153c:	22a6      	movs	r2, #166	; 0xa6
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 fa4b 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001546:	22a8      	movs	r2, #168	; 0xa8
 8001548:	2100      	movs	r1, #0
 800154a:	2078      	movs	r0, #120	; 0x78
 800154c:	f000 fa46 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001550:	223f      	movs	r2, #63	; 0x3f
 8001552:	2100      	movs	r1, #0
 8001554:	2078      	movs	r0, #120	; 0x78
 8001556:	f000 fa41 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800155a:	22a4      	movs	r2, #164	; 0xa4
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fa3c 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001564:	22d3      	movs	r2, #211	; 0xd3
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fa37 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fa32 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001578:	22d5      	movs	r2, #213	; 0xd5
 800157a:	2100      	movs	r1, #0
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f000 fa2d 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001582:	22f0      	movs	r2, #240	; 0xf0
 8001584:	2100      	movs	r1, #0
 8001586:	2078      	movs	r0, #120	; 0x78
 8001588:	f000 fa28 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800158c:	22d9      	movs	r2, #217	; 0xd9
 800158e:	2100      	movs	r1, #0
 8001590:	2078      	movs	r0, #120	; 0x78
 8001592:	f000 fa23 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001596:	2222      	movs	r2, #34	; 0x22
 8001598:	2100      	movs	r1, #0
 800159a:	2078      	movs	r0, #120	; 0x78
 800159c:	f000 fa1e 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015a0:	22da      	movs	r2, #218	; 0xda
 80015a2:	2100      	movs	r1, #0
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 fa19 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015aa:	2212      	movs	r2, #18
 80015ac:	2100      	movs	r1, #0
 80015ae:	2078      	movs	r0, #120	; 0x78
 80015b0:	f000 fa14 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015b4:	22db      	movs	r2, #219	; 0xdb
 80015b6:	2100      	movs	r1, #0
 80015b8:	2078      	movs	r0, #120	; 0x78
 80015ba:	f000 fa0f 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015be:	2220      	movs	r2, #32
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fa0a 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015c8:	228d      	movs	r2, #141	; 0x8d
 80015ca:	2100      	movs	r1, #0
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 fa05 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015d2:	2214      	movs	r2, #20
 80015d4:	2100      	movs	r1, #0
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 fa00 	bl	80019dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015dc:	22af      	movs	r2, #175	; 0xaf
 80015de:	2100      	movs	r1, #0
 80015e0:	2078      	movs	r0, #120	; 0x78
 80015e2:	f000 f9fb 	bl	80019dc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015e6:	222e      	movs	r2, #46	; 0x2e
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 f9f6 	bl	80019dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f843 	bl	800167c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80015f6:	f000 f813 	bl	8001620 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <SSD1306_Init+0x184>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <SSD1306_Init+0x184>)
 8001602:	2200      	movs	r2, #0
 8001604:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <SSD1306_Init+0x184>)
 8001608:	2201      	movs	r2, #1
 800160a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000500 	.word	0x20000500
 800161c:	200004f8 	.word	0x200004f8

08001620 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e01d      	b.n	8001668 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	3b50      	subs	r3, #80	; 0x50
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	; 0x78
 8001638:	f000 f9d0 	bl	80019dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	; 0x78
 8001642:	f000 f9cb 	bl	80019dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001646:	2210      	movs	r2, #16
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f000 f9c6 	bl	80019dc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	01db      	lsls	r3, r3, #7
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <SSD1306_UpdateScreen+0x58>)
 8001656:	441a      	add	r2, r3
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f000 f957 	bl	8001910 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	3301      	adds	r3, #1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9de      	bls.n	800162c <SSD1306_UpdateScreen+0xc>
	}
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000f8 	.word	0x200000f8

0800167c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <SSD1306_Fill+0x14>
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <SSD1306_Fill+0x16>
 8001690:	23ff      	movs	r3, #255	; 0xff
 8001692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001696:	4619      	mov	r1, r3
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <SSD1306_Fill+0x2c>)
 800169a:	f003 fb03 	bl	8004ca4 <memset>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000f8 	.word	0x200000f8

080016ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
 80016b6:	460b      	mov	r3, r1
 80016b8:	80bb      	strh	r3, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	70fb      	strb	r3, [r7, #3]
	if (
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	2b7f      	cmp	r3, #127	; 0x7f
 80016c2:	d848      	bhi.n	8001756 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	2b3f      	cmp	r3, #63	; 0x3f
 80016c8:	d845      	bhi.n	8001756 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <SSD1306_DrawPixel+0xb8>)
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf0c      	ite	eq
 80016d8:	2301      	moveq	r3, #1
 80016da:	2300      	movne	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d11a      	bne.n	800171c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	b298      	uxth	r0, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	01db      	lsls	r3, r3, #7
 80016f2:	4413      	add	r3, r2
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	b25b      	sxtb	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b259      	sxtb	r1, r3
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	4603      	mov	r3, r0
 8001710:	01db      	lsls	r3, r3, #7
 8001712:	4413      	add	r3, r2
 8001714:	b2c9      	uxtb	r1, r1
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 8001718:	54d1      	strb	r1, [r2, r3]
 800171a:	e01d      	b.n	8001758 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800171c:	88fa      	ldrh	r2, [r7, #6]
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	b298      	uxth	r0, r3
 8001724:	4603      	mov	r3, r0
 8001726:	01db      	lsls	r3, r3, #7
 8001728:	4413      	add	r3, r2
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	b25a      	sxtb	r2, r3
 8001730:	88bb      	ldrh	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	b25b      	sxtb	r3, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	b25b      	sxtb	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	b259      	sxtb	r1, r3
 8001746:	88fa      	ldrh	r2, [r7, #6]
 8001748:	4603      	mov	r3, r0
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	4413      	add	r3, r2
 800174e:	b2c9      	uxtb	r1, r1
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SSD1306_DrawPixel+0xbc>)
 8001752:	54d1      	strb	r1, [r2, r3]
 8001754:	e000      	b.n	8001758 <SSD1306_DrawPixel+0xac>
		return;
 8001756:	bf00      	nop
	}
}
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200004f8 	.word	0x200004f8
 8001768:	200000f8 	.word	0x200000f8

0800176c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	80fb      	strh	r3, [r7, #6]
 8001778:	4613      	mov	r3, r2
 800177a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SSD1306_GotoXY+0x28>)
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <SSD1306_GotoXY+0x28>)
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	8053      	strh	r3, [r2, #2]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	200004f8 	.word	0x200004f8

08001798 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017a8:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <SSD1306_Putc+0xfc>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
	if (
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	dc07      	bgt.n	80017c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <SSD1306_Putc+0xfc>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017c4:	2b3f      	cmp	r3, #63	; 0x3f
 80017c6:	dd01      	ble.n	80017cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e05e      	b.n	800188a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e04b      	b.n	800186a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3b20      	subs	r3, #32
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	7849      	ldrb	r1, [r1, #1]
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	440b      	add	r3, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e030      	b.n	8001858 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d010      	beq.n	8001828 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <SSD1306_Putc+0xfc>)
 8001808:	881a      	ldrh	r2, [r3, #0]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b298      	uxth	r0, r3
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SSD1306_Putc+0xfc>)
 8001814:	885a      	ldrh	r2, [r3, #2]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	79ba      	ldrb	r2, [r7, #6]
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff ff43 	bl	80016ac <SSD1306_DrawPixel>
 8001826:	e014      	b.n	8001852 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <SSD1306_Putc+0xfc>)
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4413      	add	r3, r2
 8001832:	b298      	uxth	r0, r3
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <SSD1306_Putc+0xfc>)
 8001836:	885a      	ldrh	r2, [r3, #2]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b299      	uxth	r1, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f7ff ff2d 	bl	80016ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	3301      	adds	r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4293      	cmp	r3, r2
 8001862:	d3c8      	bcc.n	80017f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	461a      	mov	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4293      	cmp	r3, r2
 8001874:	d3ad      	bcc.n	80017d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <SSD1306_Putc+0xfc>)
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <SSD1306_Putc+0xfc>)
 8001886:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001888:	79fb      	ldrb	r3, [r7, #7]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200004f8 	.word	0x200004f8

08001898 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018a6:	e012      	b.n	80018ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff71 	bl	8001798 <SSD1306_Putc>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d002      	beq.n	80018c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	e008      	b.n	80018da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3301      	adds	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e8      	bne.n	80018a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	781b      	ldrb	r3, [r3, #0]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <ssd1306_I2C_Init+0x28>)
 80018ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ee:	e002      	b.n	80018f6 <ssd1306_I2C_Init+0x12>
		p--;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f9      	bne.n	80018f0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	0003d090 	.word	0x0003d090

08001910 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b0c7      	sub	sp, #284	; 0x11c
 8001914:	af02      	add	r7, sp, #8
 8001916:	4604      	mov	r4, r0
 8001918:	4608      	mov	r0, r1
 800191a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800191e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001922:	600a      	str	r2, [r1, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800192a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800192e:	4622      	mov	r2, r4
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001936:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800193a:	4602      	mov	r2, r0
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001942:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001946:	460a      	mov	r2, r1
 8001948:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800194a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001952:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001956:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001964:	e015      	b.n	8001992 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001966:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800196a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800196e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	441a      	add	r2, r3
 8001976:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800197a:	3301      	adds	r3, #1
 800197c:	7811      	ldrb	r1, [r2, #0]
 800197e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001982:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001986:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001988:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800198c:	3301      	adds	r3, #1
 800198e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001992:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001996:	b29b      	uxth	r3, r3
 8001998:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800199c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80019a0:	8812      	ldrh	r2, [r2, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d8df      	bhi.n	8001966 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019aa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b299      	uxth	r1, r3
 80019b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	200a      	movs	r0, #10
 80019c6:	9000      	str	r0, [sp, #0]
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <ssd1306_I2C_WriteMulti+0xc8>)
 80019ca:	f001 f935 	bl	8002c38 <HAL_I2C_Master_Transmit>
}
 80019ce:	bf00      	nop
 80019d0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	20000500 	.word	0x20000500

080019dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	460b      	mov	r3, r1
 80019e8:	71bb      	strb	r3, [r7, #6]
 80019ea:	4613      	mov	r3, r2
 80019ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019f2:	797b      	ldrb	r3, [r7, #5]
 80019f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	b299      	uxth	r1, r3
 80019fa:	f107 020c 	add.w	r2, r7, #12
 80019fe:	230a      	movs	r3, #10
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2302      	movs	r3, #2
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <ssd1306_I2C_Write+0x38>)
 8001a06:	f001 f917 	bl	8002c38 <HAL_I2C_Master_Transmit>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000500 	.word	0x20000500

08001a18 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1d39      	adds	r1, r7, #4
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff33 	bl	8001898 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a32:	f7ff fdf5 	bl	8001620 <SSD1306_UpdateScreen>
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_GPIO_Init+0xdc>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2103      	movs	r1, #3
 8001aca:	4815      	ldr	r0, [pc, #84]	; (8001b20 <MX_GPIO_Init+0xe0>)
 8001acc:	f000 ff56 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	4813      	ldr	r0, [pc, #76]	; (8001b24 <MX_GPIO_Init+0xe4>)
 8001ad6:	f000 ff51 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001ada:	2303      	movs	r3, #3
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <MX_GPIO_Init+0xe0>)
 8001af2:	f000 fdbf 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_GPIO_Init+0xe4>)
 8001b0e:	f000 fdb1 	bl	8002674 <HAL_GPIO_Init>

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400

08001b28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <MX_I2C1_Init+0x54>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_I2C1_Init+0x58>)
 8001b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b66:	f000 ff23 	bl	80029b0 <HAL_I2C_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b70:	f000 f8ce 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000500 	.word	0x20000500
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	00061a80 	.word	0x00061a80

08001b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_I2C_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12c      	bne.n	8001c00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc8:	2312      	movs	r3, #18
 8001bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480c      	ldr	r0, [pc, #48]	; (8001c10 <HAL_I2C_MspInit+0x8c>)
 8001be0:	f000 fd48 	bl	8002674 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f000 fb30 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f810 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f7ff ff0e 	bl	8001a40 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c24:	f000 f87a 	bl	8001d1c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c28:	f000 fa8c 	bl	8002144 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c2c:	f7ff ff7c 	bl	8001b28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fbb3 	bl	800139c <setup_DW1000RSTnIRQ>
SSD1306_Init();
 8001c36:	f7ff fc2f 	bl	8001498 <SSD1306_Init>
    dw_main();
 8001c3a:	f000 fa07 	bl	800204c <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <main+0x2a>

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	2230      	movs	r2, #48	; 0x30
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 f828 	bl	8004ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <SystemClock_Config+0xc8>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a26      	ldr	r2, [pc, #152]	; (8001d08 <SystemClock_Config+0xc8>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <SystemClock_Config+0xc8>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <SystemClock_Config+0xcc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <SystemClock_Config+0xcc>)
 8001c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <SystemClock_Config+0xcc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f001 fbed 	bl	80034a4 <HAL_RCC_OscConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd0:	f000 f81e 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2103      	movs	r1, #3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 fe4f 	bl	8003994 <HAL_RCC_ClockConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cfc:	f000 f808 	bl	8001d10 <Error_Handler>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3750      	adds	r7, #80	; 0x50
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <MX_SPI1_Init+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d68:	220a      	movs	r2, #10
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_SPI1_Init+0x64>)
 8001d6e:	f001 fff1 	bl	8003d54 <HAL_SPI_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d78:	f7ff ffca 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000554 	.word	0x20000554
 8001d84:	40013000 	.word	0x40013000

08001d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_SPI_MspInit+0x94>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d133      	bne.n	8001e12 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_SPI_MspInit+0x98>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_SPI_MspInit+0x98>)
 8001db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_SPI_MspInit+0x98>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_SPI_MspInit+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <HAL_SPI_MspInit+0x98>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_SPI_MspInit+0x98>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23e0      	movs	r3, #224	; 0xe0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <HAL_SPI_MspInit+0x9c>)
 8001dfe:	f000 fc39 	bl	8002674 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2023      	movs	r0, #35	; 0x23
 8001e08:	f000 fbcd 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e0c:	2023      	movs	r0, #35	; 0x23
 8001e0e:	f000 fbe6 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40013000 	.word	0x40013000
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020000 	.word	0x40020000

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 fa2c 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <SPI1_IRQHandler+0x10>)
 8001ed2:	f002 f905 	bl	80040e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000554 	.word	0x20000554

08001ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e00a      	b.n	8001f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ef2:	f3af 8000 	nop.w
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	60ba      	str	r2, [r7, #8]
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf0      	blt.n	8001ef2 <_read+0x12>
	}

return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e009      	b.n	8001f40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	60ba      	str	r2, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbf1      	blt.n	8001f2c <_write+0x12>
	}
	return len;
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_close>:

int _close(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return -1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_isatty>:

int _isatty(int file)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
	return 1;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f002 fe30 	bl	8004c50 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	200005ac 	.word	0x200005ac
 8002024:	20000608 	.word	0x20000608

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
//dwt
	ssd1306_write(buff, Font_7x10);
 8002050:	4834      	ldr	r0, [pc, #208]	; (8002124 <dw_main+0xd8>)
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <dw_main+0xdc>)
 8002054:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002058:	f7ff fcde 	bl	8001a18 <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 800205c:	f7ff f97c 	bl	8001358 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002060:	f7ff f9d6 	bl	8001410 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8002064:	2000      	movs	r0, #0
 8002066:	f7fe fa8d 	bl	8000584 <dwt_initialise>
 800206a:	4603      	mov	r3, r0
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d110      	bne.n	8002094 <dw_main+0x48>
    {
        printf("INIT FAILED");
 8002072:	482e      	ldr	r0, [pc, #184]	; (800212c <dw_main+0xe0>)
 8002074:	f002 fe1e 	bl	8004cb4 <iprintf>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8002078:	210a      	movs	r1, #10
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff fb76 	bl	800176c <SSD1306_GotoXY>
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff f9f3 	bl	800146c <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 8002086:	482a      	ldr	r0, [pc, #168]	; (8002130 <dw_main+0xe4>)
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <dw_main+0xdc>)
 800208a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800208e:	f7ff fcc3 	bl	8001a18 <ssd1306_write>
        while (1)
 8002092:	e7fe      	b.n	8002092 <dw_main+0x46>
        { };
    }
    port_set_dw1000_fastrate();
 8002094:	f7ff f9c8 	bl	8001428 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 8002098:	4826      	ldr	r0, [pc, #152]	; (8002134 <dw_main+0xe8>)
 800209a:	f7fe fbc9 	bl	8000830 <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
    	SSD1306_GotoXY(0, 10);
 800209e:	210a      	movs	r1, #10
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fb63 	bl	800176c <SSD1306_GotoXY>
    	ssd1306_write("Transmitted : ", Font_7x10);
 80020a6:	4824      	ldr	r0, [pc, #144]	; (8002138 <dw_main+0xec>)
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <dw_main+0xdc>)
 80020aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020ae:	f7ff fcb3 	bl	8001a18 <ssd1306_write>
        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80020b2:	2200      	movs	r2, #0
 80020b4:	4921      	ldr	r1, [pc, #132]	; (800213c <dw_main+0xf0>)
 80020b6:	200c      	movs	r0, #12
 80020b8:	f7fe fd24 	bl	8000b04 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	200c      	movs	r0, #12
 80020c2:	f7fe fd3d 	bl	8000b40 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe ffa6 	bl	8001018 <dwt_starttx>

        SSD1306_GotoXY(0,  30);
 80020cc:	211e      	movs	r1, #30
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff fb4c 	bl	800176c <SSD1306_GotoXY>
        ssd1306_write(tx_msg, Font_7x10);
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <dw_main+0xf0>)
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <dw_main+0xdc>)
 80020d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020dc:	f7ff fc9c 	bl	8001a18 <ssd1306_write>
        /* Poll DW1000 until TX frame sent event set. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it.*/
        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 80020e0:	bf00      	nop
 80020e2:	2100      	movs	r1, #0
 80020e4:	200f      	movs	r0, #15
 80020e6:	f7fe fdf6 	bl	8000cd6 <dwt_read32bitoffsetreg>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f6      	beq.n	80020e2 <dw_main+0x96>
        { };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	2100      	movs	r1, #0
 80020f8:	200f      	movs	r0, #15
 80020fa:	f7fe fe5f 	bl	8000dbc <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 80020fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002102:	f7ff f8ff 	bl	8001304 <Sleep>
        HAL_UART_Transmit(&huart2, tx_msg, sizeof(tx_msg), HAL_MAX_DELAY);
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	220c      	movs	r2, #12
 800210c:	490b      	ldr	r1, [pc, #44]	; (800213c <dw_main+0xf0>)
 800210e:	480c      	ldr	r0, [pc, #48]	; (8002140 <dw_main+0xf4>)
 8002110:	f002 fa29 	bl	8004566 <HAL_UART_Transmit>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <dw_main+0xf0>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <dw_main+0xf0>)
 800211e:	701a      	strb	r2, [r3, #0]
    	SSD1306_GotoXY(0, 10);
 8002120:	e7bd      	b.n	800209e <dw_main+0x52>
 8002122:	bf00      	nop
 8002124:	20000010 	.word	0x20000010
 8002128:	20000004 	.word	0x20000004
 800212c:	08005be8 	.word	0x08005be8
 8002130:	08005bf4 	.word	0x08005bf4
 8002134:	20000020 	.word	0x20000020
 8002138:	08005c04 	.word	0x08005c04
 800213c:	2000002c 	.word	0x2000002c
 8002140:	200005b0 	.word	0x200005b0

08002144 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <MX_USART2_UART_Init+0x50>)
 800214c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800217c:	f002 f9a6 	bl	80044cc <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002186:	f7ff fdc3 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200005b0 	.word	0x200005b0
 8002194:	40004400 	.word	0x40004400

08002198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_UART_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12b      	bne.n	8002212 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_UART_MspInit+0x88>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_UART_MspInit+0x88>)
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_UART_MspInit+0x88>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_UART_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_UART_MspInit+0x88>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_UART_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021f2:	230c      	movs	r3, #12
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002202:	2307      	movs	r3, #7
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_UART_MspInit+0x8c>)
 800220e:	f000 fa31 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40004400 	.word	0x40004400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000

08002228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002252:	f7ff fee9 	bl	8002028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002256:	f002 fd01 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225a:	f7ff fcdb 	bl	8001c14 <main>
  bx  lr    
 800225e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800226c:	080064f4 	.word	0x080064f4
  ldr r2, =_sbss
 8002270:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002274:	20000608 	.word	0x20000608

08002278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002280:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_Init+0x40>)
 8002286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_Init+0x40>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x40>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f973 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fdba 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f999 	bl	8002616 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f953 	bl	80025a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000000c 	.word	0x2000000c
 8002318:	2000003c 	.word	0x2000003c
 800231c:	20000038 	.word	0x20000038

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	2000003c 	.word	0x2000003c
 8002344:	200005f4 	.word	0x200005f4

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200005f4 	.word	0x200005f4

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000003c 	.word	0x2000003c

080023a8 <__NVIC_SetPriorityGrouping>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_DisableIRQ>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db12      	blt.n	8002480 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	490a      	ldr	r1, [pc, #40]	; (800248c <__NVIC_DisableIRQ+0x44>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	3320      	adds	r3, #32
 8002470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002474:	f3bf 8f4f 	dsb	sy
}
 8002478:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800247a:	f3bf 8f6f 	isb	sy
}
 800247e:	bf00      	nop
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	; (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f7ff ff8e 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff05 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff1a 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff8e 	bl	80024e4 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5d 	bl	8002490 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff0d 	bl	800240c <__NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff1d 	bl	8002448 <__NVIC_DisableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ff94 	bl	800254c <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d004      	beq.n	800264c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e00c      	b.n	8002666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2205      	movs	r2, #5
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e159      	b.n	8002944 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 8148 	bne.w	800293e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d005      	beq.n	80026c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d130      	bne.n	8002728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0201 	and.w	r2, r3, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b03      	cmp	r3, #3
 8002732:	d017      	beq.n	8002764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a2 	beq.w	800293e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <HAL_GPIO_Init+0x2e8>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a56      	ldr	r2, [pc, #344]	; (800295c <HAL_GPIO_Init+0x2e8>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b54      	ldr	r3, [pc, #336]	; (800295c <HAL_GPIO_Init+0x2e8>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_GPIO_Init+0x2ec>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a49      	ldr	r2, [pc, #292]	; (8002964 <HAL_GPIO_Init+0x2f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_GPIO_Init+0x202>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a48      	ldr	r2, [pc, #288]	; (8002968 <HAL_GPIO_Init+0x2f4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_GPIO_Init+0x1fe>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a47      	ldr	r2, [pc, #284]	; (800296c <HAL_GPIO_Init+0x2f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00d      	beq.n	800286e <HAL_GPIO_Init+0x1fa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a46      	ldr	r2, [pc, #280]	; (8002970 <HAL_GPIO_Init+0x2fc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <HAL_GPIO_Init+0x1f6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a45      	ldr	r2, [pc, #276]	; (8002974 <HAL_GPIO_Init+0x300>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_GPIO_Init+0x1f2>
 8002862:	2304      	movs	r3, #4
 8002864:	e008      	b.n	8002878 <HAL_GPIO_Init+0x204>
 8002866:	2307      	movs	r3, #7
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x204>
 800286a:	2303      	movs	r3, #3
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x204>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x204>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x204>
 8002876:	2300      	movs	r3, #0
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f002 0203 	and.w	r2, r2, #3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_GPIO_Init+0x2ec>)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <HAL_GPIO_Init+0x304>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <HAL_GPIO_Init+0x304>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <HAL_GPIO_Init+0x304>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a24      	ldr	r2, [pc, #144]	; (8002978 <HAL_GPIO_Init+0x304>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_GPIO_Init+0x304>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290e:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <HAL_GPIO_Init+0x304>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_GPIO_Init+0x304>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002938:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <HAL_GPIO_Init+0x304>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	f67f aea2 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40013800 	.word	0x40013800
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40013c00 	.word	0x40013c00

0800297c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
 8002988:	4613      	mov	r3, r2
 800298a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800298c:	787b      	ldrb	r3, [r7, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002998:	e003      	b.n	80029a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	041a      	lsls	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	619a      	str	r2, [r3, #24]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e12b      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff f8d4 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a14:	f001 f976 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8002a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a81      	ldr	r2, [pc, #516]	; (8002c24 <HAL_I2C_Init+0x274>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d807      	bhi.n	8002a34 <HAL_I2C_Init+0x84>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a80      	ldr	r2, [pc, #512]	; (8002c28 <HAL_I2C_Init+0x278>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e006      	b.n	8002a42 <HAL_I2C_Init+0x92>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a7d      	ldr	r2, [pc, #500]	; (8002c2c <HAL_I2C_Init+0x27c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e7      	b.n	8002c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a78      	ldr	r2, [pc, #480]	; (8002c30 <HAL_I2C_Init+0x280>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a6a      	ldr	r2, [pc, #424]	; (8002c24 <HAL_I2C_Init+0x274>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d802      	bhi.n	8002a84 <HAL_I2C_Init+0xd4>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	e009      	b.n	8002a98 <HAL_I2C_Init+0xe8>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <HAL_I2C_Init+0x284>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	495c      	ldr	r1, [pc, #368]	; (8002c24 <HAL_I2C_Init+0x274>)
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d819      	bhi.n	8002aec <HAL_I2C_Init+0x13c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e59      	subs	r1, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002acc:	400b      	ands	r3, r1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_I2C_Init+0x138>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e59      	subs	r1, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	e051      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e04f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_I2C_Init+0x168>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e012      	b.n	8002b3e <HAL_I2C_Init+0x18e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x196>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10e      	bne.n	8002b6c <HAL_I2C_Init+0x1bc>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Init+0x1dc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	000186a0 	.word	0x000186a0
 8002c28:	001e847f 	.word	0x001e847f
 8002c2c:	003d08ff 	.word	0x003d08ff
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff fb7c 	bl	8002348 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f040 80e0 	bne.w	8002e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	4970      	ldr	r1, [pc, #448]	; (8002e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fa92 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0d3      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x50>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0cc      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d007      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	; 0x21
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	893a      	ldrh	r2, [r7, #8]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a50      	ldr	r2, [pc, #320]	; (8002e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f9ca 	bl	8003090 <I2C_MasterRequestWrite>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e08d      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d1c:	e066      	b.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb0c 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11b      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fafc 	bl	80033c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01a      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d194      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000

08002e34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff fa80 	bl	8002348 <HAL_GetTick>
 8002e48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	f040 8111 	bne.w	800307e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2319      	movs	r3, #25
 8002e62:	2201      	movs	r2, #1
 8002e64:	4988      	ldr	r1, [pc, #544]	; (8003088 <HAL_I2C_IsDeviceReady+0x254>)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f994 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
 8002e74:	e104      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2C_IsDeviceReady+0x50>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0fd      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d007      	beq.n	8002eaa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2224      	movs	r2, #36	; 0x24
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a70      	ldr	r2, [pc, #448]	; (800308c <HAL_I2C_IsDeviceReady+0x258>)
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002edc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f952 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f04:	d103      	bne.n	8002f0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0b6      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f12:	897b      	ldrh	r3, [r7, #10]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f22:	f7ff fa11 	bl	8002348 <HAL_GetTick>
 8002f26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f56:	e025      	b.n	8002fa4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7ff f9f6 	bl	8002348 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <HAL_I2C_IsDeviceReady+0x13a>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	22a0      	movs	r2, #160	; 0xa0
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2ba0      	cmp	r3, #160	; 0xa0
 8002fae:	d005      	beq.n	8002fbc <HAL_I2C_IsDeviceReady+0x188>
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_I2C_IsDeviceReady+0x188>
 8002fb6:	7dbb      	ldrb	r3, [r7, #22]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0cd      	beq.n	8002f58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d129      	bne.n	8003026 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2319      	movs	r3, #25
 8002ffe:	2201      	movs	r2, #1
 8003000:	4921      	ldr	r1, [pc, #132]	; (8003088 <HAL_I2C_IsDeviceReady+0x254>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8c6 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e036      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e02c      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800303e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	490f      	ldr	r1, [pc, #60]	; (8003088 <HAL_I2C_IsDeviceReady+0x254>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f8a2 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e012      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	3301      	adds	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	f4ff af32 	bcc.w	8002ece <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
  }
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	00100002 	.word	0x00100002
 800308c:	ffff0000 	.word	0xffff0000

08003090 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d006      	beq.n	80030ba <I2C_MasterRequestWrite+0x2a>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d003      	beq.n	80030ba <I2C_MasterRequestWrite+0x2a>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030b8:	d108      	bne.n	80030cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e00b      	b.n	80030e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	2b12      	cmp	r3, #18
 80030d2:	d107      	bne.n	80030e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f84f 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310a:	d103      	bne.n	8003114 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e035      	b.n	8003184 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003120:	d108      	bne.n	8003134 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	e01b      	b.n	800316c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003134:	897b      	ldrh	r3, [r7, #10]
 8003136:	11db      	asrs	r3, r3, #7
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f063 030f 	orn	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <I2C_MasterRequestWrite+0xfc>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f875 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e010      	b.n	8003184 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <I2C_MasterRequestWrite+0x100>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f865 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	00010008 	.word	0x00010008
 8003190:	00010002 	.word	0x00010002

08003194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	e025      	b.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d021      	beq.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7ff f8cb 	bl	8002348 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e023      	b.n	800323a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10d      	bne.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	e00c      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d0b6      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003250:	e051      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d123      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e046      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d021      	beq.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7ff f849 	bl	8002348 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e020      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10c      	bne.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e00b      	b.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d18d      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334c:	e02d      	b.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f878 	bl	8003444 <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e02d      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d021      	beq.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe ffef 	bl	8002348 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d1ca      	bne.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ce:	e02d      	b.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f837 	bl	8003444 <I2C_IsAcknowledgeFailed>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e02d      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d021      	beq.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7fe ffae 	bl	8002348 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d1ca      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345a:	d11b      	bne.n	8003494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e267      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d075      	beq.n	80035ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c2:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d00c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4b85      	ldr	r3, [pc, #532]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d112      	bne.n	8003500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034da:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e6:	d10b      	bne.n	8003500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	4b7e      	ldr	r3, [pc, #504]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d05b      	beq.n	80035ac <HAL_RCC_OscConfig+0x108>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d157      	bne.n	80035ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e242      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x74>
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a75      	ldr	r2, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e01d      	b.n	8003554 <HAL_RCC_OscConfig+0xb0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x98>
 8003522:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6f      	ldr	r2, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a6c      	ldr	r2, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0xb0>
 800353c:	4b69      	ldr	r3, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a68      	ldr	r2, [pc, #416]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a65      	ldr	r2, [pc, #404]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fef4 	bl	8002348 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fef0 	bl	8002348 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e207      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0xc0>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fee0 	bl	8002348 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fedc 	bl	8002348 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1f3      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0xe8>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d063      	beq.n	8003682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11c      	bne.n	800360c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d2:	4b44      	ldr	r3, [pc, #272]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x152>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1c7      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4937      	ldr	r1, [pc, #220]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	e03a      	b.n	8003682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x244>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fe95 	bl	8002348 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe fe91 	bl	8002348 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1a8      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4925      	ldr	r1, [pc, #148]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
 8003654:	e015      	b.n	8003682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x244>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fe74 	bl	8002348 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003664:	f7fe fe70 	bl	8002348 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e187      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d036      	beq.n	80036fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_RCC_OscConfig+0x248>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fe54 	bl	8002348 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fe fe50 	bl	8002348 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e167      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_OscConfig+0x240>)
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x200>
 80036c2:	e01b      	b.n	80036fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_OscConfig+0x248>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fe3d 	bl	8002348 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	e00e      	b.n	80036f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe fe39 	bl	8002348 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d907      	bls.n	80036f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e150      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
 80036e4:	40023800 	.word	0x40023800
 80036e8:	42470000 	.word	0x42470000
 80036ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ea      	bne.n	80036d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8097 	beq.w	8003838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370e:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b7d      	ldr	r3, [pc, #500]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a7c      	ldr	r2, [pc, #496]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b77      	ldr	r3, [pc, #476]	; (8003918 <HAL_RCC_OscConfig+0x474>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b74      	ldr	r3, [pc, #464]	; (8003918 <HAL_RCC_OscConfig+0x474>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a73      	ldr	r2, [pc, #460]	; (8003918 <HAL_RCC_OscConfig+0x474>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fe fdf9 	bl	8002348 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7fe fdf5 	bl	8002348 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e10c      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	4b6a      	ldr	r3, [pc, #424]	; (8003918 <HAL_RCC_OscConfig+0x474>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d106      	bne.n	800378e <HAL_RCC_OscConfig+0x2ea>
 8003780:	4b64      	ldr	r3, [pc, #400]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a63      	ldr	r2, [pc, #396]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	e01c      	b.n	80037c8 <HAL_RCC_OscConfig+0x324>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b05      	cmp	r3, #5
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x30c>
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a5b      	ldr	r2, [pc, #364]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	e00b      	b.n	80037c8 <HAL_RCC_OscConfig+0x324>
 80037b0:	4b58      	ldr	r3, [pc, #352]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a57      	ldr	r2, [pc, #348]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	4b55      	ldr	r3, [pc, #340]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a54      	ldr	r2, [pc, #336]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f023 0304 	bic.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fe fdba 	bl	8002348 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7fe fdb6 	bl	8002348 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0cb      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0ee      	beq.n	80037d8 <HAL_RCC_OscConfig+0x334>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fc:	f7fe fda4 	bl	8002348 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003802:	e00a      	b.n	800381a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fe fda0 	bl	8002348 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0b5      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381a:	4b3e      	ldr	r3, [pc, #248]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ee      	bne.n	8003804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382c:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	4a38      	ldr	r2, [pc, #224]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a1 	beq.w	8003984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003842:	4b34      	ldr	r3, [pc, #208]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b08      	cmp	r3, #8
 800384c:	d05c      	beq.n	8003908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d141      	bne.n	80038da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCC_OscConfig+0x478>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385c:	f7fe fd74 	bl	8002348 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fd70 	bl	8002348 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e087      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	3b01      	subs	r3, #1
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	491b      	ldr	r1, [pc, #108]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x478>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b2:	f7fe fd49 	bl	8002348 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fe fd45 	bl	8002348 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e05c      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x416>
 80038d8:	e054      	b.n	8003984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_RCC_OscConfig+0x478>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fe fd32 	bl	8002348 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe fd2e 	bl	8002348 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e045      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_OscConfig+0x470>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x444>
 8003906:	e03d      	b.n	8003984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e038      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
 8003914:	40023800 	.word	0x40023800
 8003918:	40007000 	.word	0x40007000
 800391c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_RCC_OscConfig+0x4ec>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d028      	beq.n	8003980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d121      	bne.n	8003980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d11a      	bne.n	8003980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	4293      	cmp	r3, r2
 800395a:	d111      	bne.n	8003980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	3b01      	subs	r3, #1
 800396a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0cc      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b68      	ldr	r3, [pc, #416]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d90c      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a52      	ldr	r2, [pc, #328]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d044      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d119      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e067      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4934      	ldr	r1, [pc, #208]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a84:	f7fe fc60 	bl	8002348 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fe fc5c 	bl	8002348 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d20c      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f821 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490a      	ldr	r1, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fbc0 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08006434 	.word	0x08006434
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	20000038 	.word	0x20000038

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b090      	sub	sp, #64	; 0x40
 8003b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	2300      	movs	r3, #0
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b78:	4b59      	ldr	r3, [pc, #356]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d00d      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	f200 80a1 	bhi.w	8003ccc <HAL_RCC_GetSysClockFreq+0x16c>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b92:	e09b      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b98:	e09b      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b9e:	e098      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003baa:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bcc:	fb03 f201 	mul.w	r2, r3, r1
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	fb00 f303 	mul.w	r3, r0, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a43      	ldr	r2, [pc, #268]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bda:	fba0 1202 	umull	r1, r2, r0, r2
 8003bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be0:	460a      	mov	r2, r1
 8003be2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be6:	4413      	add	r3, r2
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	2200      	movs	r2, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	61fa      	str	r2, [r7, #28]
 8003bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bfa:	f7fc fb41 	bl	8000280 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4613      	mov	r3, r2
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c06:	e053      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	2200      	movs	r2, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	617a      	str	r2, [r7, #20]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c1a:	f04f 0b00 	mov.w	fp, #0
 8003c1e:	4652      	mov	r2, sl
 8003c20:	465b      	mov	r3, fp
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c30:	0150      	lsls	r0, r2, #5
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	ebb2 080a 	subs.w	r8, r2, sl
 8003c3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c52:	ebb2 0408 	subs.w	r4, r2, r8
 8003c56:	eb63 0509 	sbc.w	r5, r3, r9
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	00eb      	lsls	r3, r5, #3
 8003c64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c68:	00e2      	lsls	r2, r4, #3
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	eb14 030a 	adds.w	r3, r4, sl
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	eb45 030b 	adc.w	r3, r5, fp
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c86:	4629      	mov	r1, r5
 8003c88:	028b      	lsls	r3, r1, #10
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c90:	4621      	mov	r1, r4
 8003c92:	028a      	lsls	r2, r1, #10
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	60fa      	str	r2, [r7, #12]
 8003ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca4:	f7fc faec 	bl	8000280 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3740      	adds	r7, #64	; 0x40
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	017d7840 	.word	0x017d7840

08003cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4903      	ldr	r1, [pc, #12]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	08006444 	.word	0x08006444

08003d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d30:	f7ff ffdc 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0b5b      	lsrs	r3, r3, #13
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08006444 	.word	0x08006444

08003d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07b      	b.n	8003e5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d76:	d009      	beq.n	8003d8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	e005      	b.n	8003d8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd ffee 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0104 	and.w	r1, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f003 0210 	and.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b088      	sub	sp, #32
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_SPI_Transmit+0x22>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e126      	b.n	80040d6 <HAL_SPI_Transmit+0x270>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e90:	f7fe fa5a 	bl	8002348 <HAL_GetTick>
 8003e94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eaa:	e10b      	b.n	80040c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_SPI_Transmit+0x52>
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ebc:	e102      	b.n	80040c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	d10f      	bne.n	8003f26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d007      	beq.n	8003f44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d14b      	bne.n	8003fe6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Transmit+0xf6>
 8003f56:	8afb      	ldrh	r3, [r7, #22]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d13e      	bne.n	8003fda <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	881a      	ldrh	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	1c9a      	adds	r2, r3, #2
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f80:	e02b      	b.n	8003fda <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d112      	bne.n	8003fb6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fb4:	e011      	b.n	8003fda <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb6:	f7fe f9c7 	bl	8002348 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d803      	bhi.n	8003fce <HAL_SPI_Transmit+0x168>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit+0x16e>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fd8:	e074      	b.n	80040c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ce      	bne.n	8003f82 <HAL_SPI_Transmit+0x11c>
 8003fe4:	e04c      	b.n	8004080 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_SPI_Transmit+0x18e>
 8003fee:	8afb      	ldrh	r3, [r7, #22]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d140      	bne.n	8004076 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800401a:	e02c      	b.n	8004076 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d113      	bne.n	8004052 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004050:	e011      	b.n	8004076 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004052:	f7fe f979 	bl	8002348 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d803      	bhi.n	800406a <HAL_SPI_Transmit+0x204>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d102      	bne.n	8004070 <HAL_SPI_Transmit+0x20a>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004074:	e026      	b.n	80040c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1cd      	bne.n	800401c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f9df 	bl	8004448 <SPI_EndRxTxTransaction>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e000      	b.n	80040c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
    return;
 8004122:	e0d7      	b.n	80042d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_SPI_IRQHandler+0x66>
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	09db      	lsrs	r3, r3, #7
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	4798      	blx	r3
    return;
 8004144:	e0c6      	b.n	80042d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_SPI_IRQHandler+0x8c>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	099b      	lsrs	r3, r3, #6
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80b4 	beq.w	80042d4 <HAL_SPI_IRQHandler+0x1f4>
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80ad 	beq.w	80042d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d023      	beq.n	80041ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b03      	cmp	r3, #3
 8004190:	d011      	beq.n	80041b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f043 0204 	orr.w	r2, r3, #4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	e00b      	b.n	80041ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]
        return;
 80041cc:	e082      	b.n	80042d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0201 	orr.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00c      	beq.n	800422a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	f043 0208 	orr.w	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04f      	beq.n	80042d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004240:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <HAL_SPI_IRQHandler+0x17e>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d034      	beq.n	80042c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0203 	bic.w	r2, r2, #3
 800426c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d011      	beq.n	800429a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_SPI_IRQHandler+0x1fc>)
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe f9d3 	bl	800262e <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <HAL_SPI_IRQHandler+0x1fc>)
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe f9bd 	bl	800262e <HAL_DMA_Abort_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80042c6:	e003      	b.n	80042d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f809 	bl	80042e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80042ce:	e000      	b.n	80042d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80042d0:	bf00      	nop
    return;
 80042d2:	bf00      	nop
  }
}
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	08004311 	.word	0x08004311

080042e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004302:	b2db      	uxtb	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff ffd8 	bl	80042e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004348:	f7fd fffe 	bl	8002348 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4413      	add	r3, r2
 8004356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004358:	f7fd fff6 	bl	8002348 <HAL_GetTick>
 800435c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800435e:	4b39      	ldr	r3, [pc, #228]	; (8004444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	015b      	lsls	r3, r3, #5
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436e:	e054      	b.n	800441a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d050      	beq.n	800441a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004378:	f7fd ffe6 	bl	8002348 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	429a      	cmp	r2, r3
 8004386:	d902      	bls.n	800438e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d13d      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800439c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d111      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d004      	beq.n	80043bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d107      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d4:	d10f      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e017      	b.n	800443a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d19b      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c

08004448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <SPI_EndRxTxTransaction+0x7c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <SPI_EndRxTxTransaction+0x80>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	0d5b      	lsrs	r3, r3, #21
 8004460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004472:	d112      	bne.n	800449a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff ff5a 	bl	8004338 <SPI_WaitFlagStateUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e00f      	b.n	80044ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d0f2      	beq.n	800449a <SPI_EndRxTxTransaction+0x52>
 80044b4:	e000      	b.n	80044b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80044b6:	bf00      	nop
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	2000000c 	.word	0x2000000c
 80044c8:	165e9f81 	.word	0x165e9f81

080044cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e03f      	b.n	800455e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fe50 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2224      	movs	r2, #36	; 0x24
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800450e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f929 	bl	8004768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b08a      	sub	sp, #40	; 0x28
 800456a:	af02      	add	r7, sp, #8
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b20      	cmp	r3, #32
 8004584:	d17c      	bne.n	8004680 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_UART_Transmit+0x2c>
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e075      	b.n	8004682 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Transmit+0x3e>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e06e      	b.n	8004682 <HAL_UART_Transmit+0x11c>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2221      	movs	r2, #33	; 0x21
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ba:	f7fd fec5 	bl	8002348 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	88fa      	ldrh	r2, [r7, #6]
 80045ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d4:	d108      	bne.n	80045e8 <HAL_UART_Transmit+0x82>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d104      	bne.n	80045e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e003      	b.n	80045f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045f8:	e02a      	b.n	8004650 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f840 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e036      	b.n	8004682 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004628:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3302      	adds	r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e007      	b.n	8004642 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1cf      	bne.n	80045fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	2140      	movs	r1, #64	; 0x40
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f810 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e006      	b.n	8004682 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b090      	sub	sp, #64	; 0x40
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469a:	e050      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d04c      	beq.n	800473e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <UART_WaitOnFlagUntilTimeout+0x30>
 80046aa:	f7fd fe4d 	bl	8002348 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d241      	bcs.n	800473e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	330c      	adds	r3, #12
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046da:	637a      	str	r2, [r7, #52]	; 0x34
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e5      	bne.n	80046ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3314      	adds	r3, #20
 80046f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	613b      	str	r3, [r7, #16]
   return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	63bb      	str	r3, [r7, #56]	; 0x38
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800470e:	623a      	str	r2, [r7, #32]
 8004710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	69f9      	ldr	r1, [r7, #28]
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	61bb      	str	r3, [r7, #24]
   return(result);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e5      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e00f      	b.n	800475e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	429a      	cmp	r2, r3
 800475a:	d09f      	beq.n	800469c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3740      	adds	r7, #64	; 0x40
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b0c0      	sub	sp, #256	; 0x100
 800476e:	af00      	add	r7, sp, #0
 8004770:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	ea40 0301 	orr.w	r3, r0, r1
 8004790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	431a      	orrs	r2, r3
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047c0:	f021 010c 	bic.w	r1, r1, #12
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ce:	430b      	orrs	r3, r1
 80047d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	6999      	ldr	r1, [r3, #24]
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	ea40 0301 	orr.w	r3, r0, r1
 80047ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <UART_SetConfig+0x2cc>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d005      	beq.n	8004808 <UART_SetConfig+0xa0>
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <UART_SetConfig+0x2d0>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d104      	bne.n	8004812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7ff fa90 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 800480c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004810:	e003      	b.n	800481a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004812:	f7ff fa77 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8004816:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	f040 810c 	bne.w	8004a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004832:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	1891      	adds	r1, r2, r2
 8004840:	65b9      	str	r1, [r7, #88]	; 0x58
 8004842:	415b      	adcs	r3, r3
 8004844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800484a:	4621      	mov	r1, r4
 800484c:	eb12 0801 	adds.w	r8, r2, r1
 8004850:	4629      	mov	r1, r5
 8004852:	eb43 0901 	adc.w	r9, r3, r1
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	4623      	mov	r3, r4
 8004870:	eb18 0303 	adds.w	r3, r8, r3
 8004874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004878:	462b      	mov	r3, r5
 800487a:	eb49 0303 	adc.w	r3, r9, r3
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800488e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004896:	460b      	mov	r3, r1
 8004898:	18db      	adds	r3, r3, r3
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	4613      	mov	r3, r2
 800489e:	eb42 0303 	adc.w	r3, r2, r3
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048ac:	f7fb fce8 	bl	8000280 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <UART_SetConfig+0x2d4>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	011c      	lsls	r4, r3, #4
 80048be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048d8:	415b      	adcs	r3, r3
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048e0:	4641      	mov	r1, r8
 80048e2:	eb12 0a01 	adds.w	sl, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb43 0b01 	adc.w	fp, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004900:	4692      	mov	sl, r2
 8004902:	469b      	mov	fp, r3
 8004904:	4643      	mov	r3, r8
 8004906:	eb1a 0303 	adds.w	r3, sl, r3
 800490a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490e:	464b      	mov	r3, r9
 8004910:	eb4b 0303 	adc.w	r3, fp, r3
 8004914:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004924:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800492c:	460b      	mov	r3, r1
 800492e:	18db      	adds	r3, r3, r3
 8004930:	643b      	str	r3, [r7, #64]	; 0x40
 8004932:	4613      	mov	r3, r2
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
 800493a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800493e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004942:	f7fb fc9d 	bl	8000280 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4611      	mov	r1, r2
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <UART_SetConfig+0x2d4>)
 800494e:	fba3 2301 	umull	r2, r3, r3, r1
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2264      	movs	r2, #100	; 0x64
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	1acb      	subs	r3, r1, r3
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004964:	fba3 2302 	umull	r2, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004970:	441c      	add	r4, r3
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800497c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	63b9      	str	r1, [r7, #56]	; 0x38
 800498c:	415b      	adcs	r3, r3
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004994:	4641      	mov	r1, r8
 8004996:	1851      	adds	r1, r2, r1
 8004998:	6339      	str	r1, [r7, #48]	; 0x30
 800499a:	4649      	mov	r1, r9
 800499c:	414b      	adcs	r3, r1
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049ac:	4659      	mov	r1, fp
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b6:	4651      	mov	r1, sl
 80049b8:	00ca      	lsls	r2, r1, #3
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	4642      	mov	r2, r8
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c8:	464b      	mov	r3, r9
 80049ca:	460a      	mov	r2, r1
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049e8:	460b      	mov	r3, r1
 80049ea:	18db      	adds	r3, r3, r3
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ee:	4613      	mov	r3, r2
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049fe:	f7fb fc3f 	bl	8000280 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4422      	add	r2, r4
 8004a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a30:	e105      	b.n	8004c3e <UART_SetConfig+0x4d6>
 8004a32:	bf00      	nop
 8004a34:	40011000 	.word	0x40011000
 8004a38:	40011400 	.word	0x40011400
 8004a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a52:	4642      	mov	r2, r8
 8004a54:	464b      	mov	r3, r9
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	6239      	str	r1, [r7, #32]
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a62:	4641      	mov	r1, r8
 8004a64:	1854      	adds	r4, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb43 0501 	adc.w	r5, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	00eb      	lsls	r3, r5, #3
 8004a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7a:	00e2      	lsls	r2, r4, #3
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	4643      	mov	r3, r8
 8004a82:	18e3      	adds	r3, r4, r3
 8004a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a88:	464b      	mov	r3, r9
 8004a8a:	eb45 0303 	adc.w	r3, r5, r3
 8004a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aae:	4629      	mov	r1, r5
 8004ab0:	008b      	lsls	r3, r1, #2
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab8:	4621      	mov	r1, r4
 8004aba:	008a      	lsls	r2, r1, #2
 8004abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ac0:	f7fb fbde 	bl	8000280 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b60      	ldr	r3, [pc, #384]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011c      	lsls	r4, r3, #4
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	61b9      	str	r1, [r7, #24]
 8004aec:	415b      	adcs	r3, r3
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af4:	4641      	mov	r1, r8
 8004af6:	1851      	adds	r1, r2, r1
 8004af8:	6139      	str	r1, [r7, #16]
 8004afa:	4649      	mov	r1, r9
 8004afc:	414b      	adcs	r3, r1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	00cb      	lsls	r3, r1, #3
 8004b10:	4651      	mov	r1, sl
 8004b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b16:	4651      	mov	r1, sl
 8004b18:	00ca      	lsls	r2, r1, #3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4642      	mov	r2, r8
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b28:	464b      	mov	r3, r9
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	eb42 0303 	adc.w	r3, r2, r3
 8004b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	008b      	lsls	r3, r1, #2
 8004b50:	4641      	mov	r1, r8
 8004b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b56:	4641      	mov	r1, r8
 8004b58:	008a      	lsls	r2, r1, #2
 8004b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b5e:	f7fb fb8f 	bl	8000280 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	2164      	movs	r1, #100	; 0x64
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	3332      	adds	r3, #50	; 0x32
 8004b7a:	4a34      	ldr	r2, [pc, #208]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b86:	441c      	add	r4, r3
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b90:	677a      	str	r2, [r7, #116]	; 0x74
 8004b92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1851      	adds	r1, r2, r1
 8004baa:	6039      	str	r1, [r7, #0]
 8004bac:	4649      	mov	r1, r9
 8004bae:	414b      	adcs	r3, r1
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bbe:	4659      	mov	r1, fp
 8004bc0:	00cb      	lsls	r3, r1, #3
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc8:	4651      	mov	r1, sl
 8004bca:	00ca      	lsls	r2, r1, #3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	189b      	adds	r3, r3, r2
 8004bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd8:	464b      	mov	r3, r9
 8004bda:	460a      	mov	r2, r1
 8004bdc:	eb42 0303 	adc.w	r3, r2, r3
 8004be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	663b      	str	r3, [r7, #96]	; 0x60
 8004bec:	667a      	str	r2, [r7, #100]	; 0x64
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	4641      	mov	r1, r8
 8004c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c04:	4641      	mov	r1, r8
 8004c06:	008a      	lsls	r2, r1, #2
 8004c08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c0c:	f7fb fb38 	bl	8000280 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004c16:	fba3 1302 	umull	r1, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2164      	movs	r1, #100	; 0x64
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	3332      	adds	r3, #50	; 0x32
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4422      	add	r2, r4
 8004c3c:	609a      	str	r2, [r3, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c44:	46bd      	mov	sp, r7
 8004c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4a:	bf00      	nop
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <__errno>:
 8004c50:	4b01      	ldr	r3, [pc, #4]	; (8004c58 <__errno+0x8>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000040 	.word	0x20000040

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4d0d      	ldr	r5, [pc, #52]	; (8004c94 <__libc_init_array+0x38>)
 8004c60:	4c0d      	ldr	r4, [pc, #52]	; (8004c98 <__libc_init_array+0x3c>)
 8004c62:	1b64      	subs	r4, r4, r5
 8004c64:	10a4      	asrs	r4, r4, #2
 8004c66:	2600      	movs	r6, #0
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	4d0b      	ldr	r5, [pc, #44]	; (8004c9c <__libc_init_array+0x40>)
 8004c6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ca0 <__libc_init_array+0x44>)
 8004c70:	f000 ffae 	bl	8005bd0 <_init>
 8004c74:	1b64      	subs	r4, r4, r5
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	2600      	movs	r6, #0
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	080064ec 	.word	0x080064ec
 8004c98:	080064ec 	.word	0x080064ec
 8004c9c:	080064ec 	.word	0x080064ec
 8004ca0:	080064f0 	.word	0x080064f0

08004ca4 <memset>:
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d100      	bne.n	8004cae <memset+0xa>
 8004cac:	4770      	bx	lr
 8004cae:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb2:	e7f9      	b.n	8004ca8 <memset+0x4>

08004cb4 <iprintf>:
 8004cb4:	b40f      	push	{r0, r1, r2, r3}
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <iprintf+0x2c>)
 8004cb8:	b513      	push	{r0, r1, r4, lr}
 8004cba:	681c      	ldr	r4, [r3, #0]
 8004cbc:	b124      	cbz	r4, 8004cc8 <iprintf+0x14>
 8004cbe:	69a3      	ldr	r3, [r4, #24]
 8004cc0:	b913      	cbnz	r3, 8004cc8 <iprintf+0x14>
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f866 	bl	8004d94 <__sinit>
 8004cc8:	ab05      	add	r3, sp, #20
 8004cca:	9a04      	ldr	r2, [sp, #16]
 8004ccc:	68a1      	ldr	r1, [r4, #8]
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 f9bd 	bl	8005050 <_vfiprintf_r>
 8004cd6:	b002      	add	sp, #8
 8004cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cdc:	b004      	add	sp, #16
 8004cde:	4770      	bx	lr
 8004ce0:	20000040 	.word	0x20000040

08004ce4 <std>:
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
 8004cea:	e9c0 3300 	strd	r3, r3, [r0]
 8004cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cf2:	6083      	str	r3, [r0, #8]
 8004cf4:	8181      	strh	r1, [r0, #12]
 8004cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8004cf8:	81c2      	strh	r2, [r0, #14]
 8004cfa:	6183      	str	r3, [r0, #24]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	2208      	movs	r2, #8
 8004d00:	305c      	adds	r0, #92	; 0x5c
 8004d02:	f7ff ffcf 	bl	8004ca4 <memset>
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <std+0x38>)
 8004d08:	6263      	str	r3, [r4, #36]	; 0x24
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <std+0x3c>)
 8004d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <std+0x40>)
 8004d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <std+0x44>)
 8004d14:	6224      	str	r4, [r4, #32]
 8004d16:	6323      	str	r3, [r4, #48]	; 0x30
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	bf00      	nop
 8004d1c:	080055f9 	.word	0x080055f9
 8004d20:	0800561b 	.word	0x0800561b
 8004d24:	08005653 	.word	0x08005653
 8004d28:	08005677 	.word	0x08005677

08004d2c <_cleanup_r>:
 8004d2c:	4901      	ldr	r1, [pc, #4]	; (8004d34 <_cleanup_r+0x8>)
 8004d2e:	f000 b8af 	b.w	8004e90 <_fwalk_reent>
 8004d32:	bf00      	nop
 8004d34:	08005951 	.word	0x08005951

08004d38 <__sfmoreglue>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	2268      	movs	r2, #104	; 0x68
 8004d3c:	1e4d      	subs	r5, r1, #1
 8004d3e:	4355      	muls	r5, r2
 8004d40:	460e      	mov	r6, r1
 8004d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d46:	f000 f8e5 	bl	8004f14 <_malloc_r>
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	b140      	cbz	r0, 8004d60 <__sfmoreglue+0x28>
 8004d4e:	2100      	movs	r1, #0
 8004d50:	e9c0 1600 	strd	r1, r6, [r0]
 8004d54:	300c      	adds	r0, #12
 8004d56:	60a0      	str	r0, [r4, #8]
 8004d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d5c:	f7ff ffa2 	bl	8004ca4 <memset>
 8004d60:	4620      	mov	r0, r4
 8004d62:	bd70      	pop	{r4, r5, r6, pc}

08004d64 <__sfp_lock_acquire>:
 8004d64:	4801      	ldr	r0, [pc, #4]	; (8004d6c <__sfp_lock_acquire+0x8>)
 8004d66:	f000 b8b3 	b.w	8004ed0 <__retarget_lock_acquire_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	200005f9 	.word	0x200005f9

08004d70 <__sfp_lock_release>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__sfp_lock_release+0x8>)
 8004d72:	f000 b8ae 	b.w	8004ed2 <__retarget_lock_release_recursive>
 8004d76:	bf00      	nop
 8004d78:	200005f9 	.word	0x200005f9

08004d7c <__sinit_lock_acquire>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__sinit_lock_acquire+0x8>)
 8004d7e:	f000 b8a7 	b.w	8004ed0 <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	200005fa 	.word	0x200005fa

08004d88 <__sinit_lock_release>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sinit_lock_release+0x8>)
 8004d8a:	f000 b8a2 	b.w	8004ed2 <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	200005fa 	.word	0x200005fa

08004d94 <__sinit>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	f7ff fff0 	bl	8004d7c <__sinit_lock_acquire>
 8004d9c:	69a3      	ldr	r3, [r4, #24]
 8004d9e:	b11b      	cbz	r3, 8004da8 <__sinit+0x14>
 8004da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da4:	f7ff bff0 	b.w	8004d88 <__sinit_lock_release>
 8004da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dac:	6523      	str	r3, [r4, #80]	; 0x50
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <__sinit+0x68>)
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <__sinit+0x6c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	bf04      	itt	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	61a3      	streq	r3, [r4, #24]
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f000 f820 	bl	8004e04 <__sfp>
 8004dc4:	6060      	str	r0, [r4, #4]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 f81c 	bl	8004e04 <__sfp>
 8004dcc:	60a0      	str	r0, [r4, #8]
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f000 f818 	bl	8004e04 <__sfp>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	60e0      	str	r0, [r4, #12]
 8004dd8:	2104      	movs	r1, #4
 8004dda:	6860      	ldr	r0, [r4, #4]
 8004ddc:	f7ff ff82 	bl	8004ce4 <std>
 8004de0:	68a0      	ldr	r0, [r4, #8]
 8004de2:	2201      	movs	r2, #1
 8004de4:	2109      	movs	r1, #9
 8004de6:	f7ff ff7d 	bl	8004ce4 <std>
 8004dea:	68e0      	ldr	r0, [r4, #12]
 8004dec:	2202      	movs	r2, #2
 8004dee:	2112      	movs	r1, #18
 8004df0:	f7ff ff78 	bl	8004ce4 <std>
 8004df4:	2301      	movs	r3, #1
 8004df6:	61a3      	str	r3, [r4, #24]
 8004df8:	e7d2      	b.n	8004da0 <__sinit+0xc>
 8004dfa:	bf00      	nop
 8004dfc:	0800644c 	.word	0x0800644c
 8004e00:	08004d2d 	.word	0x08004d2d

08004e04 <__sfp>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	4607      	mov	r7, r0
 8004e08:	f7ff ffac 	bl	8004d64 <__sfp_lock_acquire>
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <__sfp+0x84>)
 8004e0e:	681e      	ldr	r6, [r3, #0]
 8004e10:	69b3      	ldr	r3, [r6, #24]
 8004e12:	b913      	cbnz	r3, 8004e1a <__sfp+0x16>
 8004e14:	4630      	mov	r0, r6
 8004e16:	f7ff ffbd 	bl	8004d94 <__sinit>
 8004e1a:	3648      	adds	r6, #72	; 0x48
 8004e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	d503      	bpl.n	8004e2c <__sfp+0x28>
 8004e24:	6833      	ldr	r3, [r6, #0]
 8004e26:	b30b      	cbz	r3, 8004e6c <__sfp+0x68>
 8004e28:	6836      	ldr	r6, [r6, #0]
 8004e2a:	e7f7      	b.n	8004e1c <__sfp+0x18>
 8004e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e30:	b9d5      	cbnz	r5, 8004e68 <__sfp+0x64>
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <__sfp+0x88>)
 8004e34:	60e3      	str	r3, [r4, #12]
 8004e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8004e3c:	f000 f847 	bl	8004ece <__retarget_lock_init_recursive>
 8004e40:	f7ff ff96 	bl	8004d70 <__sfp_lock_release>
 8004e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e4c:	6025      	str	r5, [r4, #0]
 8004e4e:	61a5      	str	r5, [r4, #24]
 8004e50:	2208      	movs	r2, #8
 8004e52:	4629      	mov	r1, r5
 8004e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e58:	f7ff ff24 	bl	8004ca4 <memset>
 8004e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e64:	4620      	mov	r0, r4
 8004e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e68:	3468      	adds	r4, #104	; 0x68
 8004e6a:	e7d9      	b.n	8004e20 <__sfp+0x1c>
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f7ff ff62 	bl	8004d38 <__sfmoreglue>
 8004e74:	4604      	mov	r4, r0
 8004e76:	6030      	str	r0, [r6, #0]
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d1d5      	bne.n	8004e28 <__sfp+0x24>
 8004e7c:	f7ff ff78 	bl	8004d70 <__sfp_lock_release>
 8004e80:	230c      	movs	r3, #12
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	e7ee      	b.n	8004e64 <__sfp+0x60>
 8004e86:	bf00      	nop
 8004e88:	0800644c 	.word	0x0800644c
 8004e8c:	ffff0001 	.word	0xffff0001

08004e90 <_fwalk_reent>:
 8004e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e94:	4606      	mov	r6, r0
 8004e96:	4688      	mov	r8, r1
 8004e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e9c:	2700      	movs	r7, #0
 8004e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea6:	d505      	bpl.n	8004eb4 <_fwalk_reent+0x24>
 8004ea8:	6824      	ldr	r4, [r4, #0]
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d1f7      	bne.n	8004e9e <_fwalk_reent+0xe>
 8004eae:	4638      	mov	r0, r7
 8004eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb4:	89ab      	ldrh	r3, [r5, #12]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d907      	bls.n	8004eca <_fwalk_reent+0x3a>
 8004eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	d003      	beq.n	8004eca <_fwalk_reent+0x3a>
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	47c0      	blx	r8
 8004ec8:	4307      	orrs	r7, r0
 8004eca:	3568      	adds	r5, #104	; 0x68
 8004ecc:	e7e9      	b.n	8004ea2 <_fwalk_reent+0x12>

08004ece <__retarget_lock_init_recursive>:
 8004ece:	4770      	bx	lr

08004ed0 <__retarget_lock_acquire_recursive>:
 8004ed0:	4770      	bx	lr

08004ed2 <__retarget_lock_release_recursive>:
 8004ed2:	4770      	bx	lr

08004ed4 <sbrk_aligned>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	4e0e      	ldr	r6, [pc, #56]	; (8004f10 <sbrk_aligned+0x3c>)
 8004ed8:	460c      	mov	r4, r1
 8004eda:	6831      	ldr	r1, [r6, #0]
 8004edc:	4605      	mov	r5, r0
 8004ede:	b911      	cbnz	r1, 8004ee6 <sbrk_aligned+0x12>
 8004ee0:	f000 fb7a 	bl	80055d8 <_sbrk_r>
 8004ee4:	6030      	str	r0, [r6, #0]
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 fb75 	bl	80055d8 <_sbrk_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d00a      	beq.n	8004f08 <sbrk_aligned+0x34>
 8004ef2:	1cc4      	adds	r4, r0, #3
 8004ef4:	f024 0403 	bic.w	r4, r4, #3
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d007      	beq.n	8004f0c <sbrk_aligned+0x38>
 8004efc:	1a21      	subs	r1, r4, r0
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fb6a 	bl	80055d8 <_sbrk_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d101      	bne.n	8004f0c <sbrk_aligned+0x38>
 8004f08:	f04f 34ff 	mov.w	r4, #4294967295
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	20000600 	.word	0x20000600

08004f14 <_malloc_r>:
 8004f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f18:	1ccd      	adds	r5, r1, #3
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	4607      	mov	r7, r0
 8004f2a:	db01      	blt.n	8004f30 <_malloc_r+0x1c>
 8004f2c:	42a9      	cmp	r1, r5
 8004f2e:	d905      	bls.n	8004f3c <_malloc_r+0x28>
 8004f30:	230c      	movs	r3, #12
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	2600      	movs	r6, #0
 8004f36:	4630      	mov	r0, r6
 8004f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f3c:	4e2e      	ldr	r6, [pc, #184]	; (8004ff8 <_malloc_r+0xe4>)
 8004f3e:	f000 fdbb 	bl	8005ab8 <__malloc_lock>
 8004f42:	6833      	ldr	r3, [r6, #0]
 8004f44:	461c      	mov	r4, r3
 8004f46:	bb34      	cbnz	r4, 8004f96 <_malloc_r+0x82>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f7ff ffc2 	bl	8004ed4 <sbrk_aligned>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	4604      	mov	r4, r0
 8004f54:	d14d      	bne.n	8004ff2 <_malloc_r+0xde>
 8004f56:	6834      	ldr	r4, [r6, #0]
 8004f58:	4626      	mov	r6, r4
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	d140      	bne.n	8004fe0 <_malloc_r+0xcc>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	4631      	mov	r1, r6
 8004f62:	4638      	mov	r0, r7
 8004f64:	eb04 0803 	add.w	r8, r4, r3
 8004f68:	f000 fb36 	bl	80055d8 <_sbrk_r>
 8004f6c:	4580      	cmp	r8, r0
 8004f6e:	d13a      	bne.n	8004fe6 <_malloc_r+0xd2>
 8004f70:	6821      	ldr	r1, [r4, #0]
 8004f72:	3503      	adds	r5, #3
 8004f74:	1a6d      	subs	r5, r5, r1
 8004f76:	f025 0503 	bic.w	r5, r5, #3
 8004f7a:	3508      	adds	r5, #8
 8004f7c:	2d0c      	cmp	r5, #12
 8004f7e:	bf38      	it	cc
 8004f80:	250c      	movcc	r5, #12
 8004f82:	4629      	mov	r1, r5
 8004f84:	4638      	mov	r0, r7
 8004f86:	f7ff ffa5 	bl	8004ed4 <sbrk_aligned>
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d02b      	beq.n	8004fe6 <_malloc_r+0xd2>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	442b      	add	r3, r5
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	e00e      	b.n	8004fb4 <_malloc_r+0xa0>
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	1b52      	subs	r2, r2, r5
 8004f9a:	d41e      	bmi.n	8004fda <_malloc_r+0xc6>
 8004f9c:	2a0b      	cmp	r2, #11
 8004f9e:	d916      	bls.n	8004fce <_malloc_r+0xba>
 8004fa0:	1961      	adds	r1, r4, r5
 8004fa2:	42a3      	cmp	r3, r4
 8004fa4:	6025      	str	r5, [r4, #0]
 8004fa6:	bf18      	it	ne
 8004fa8:	6059      	strne	r1, [r3, #4]
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	bf08      	it	eq
 8004fae:	6031      	streq	r1, [r6, #0]
 8004fb0:	5162      	str	r2, [r4, r5]
 8004fb2:	604b      	str	r3, [r1, #4]
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f104 060b 	add.w	r6, r4, #11
 8004fba:	f000 fd83 	bl	8005ac4 <__malloc_unlock>
 8004fbe:	f026 0607 	bic.w	r6, r6, #7
 8004fc2:	1d23      	adds	r3, r4, #4
 8004fc4:	1af2      	subs	r2, r6, r3
 8004fc6:	d0b6      	beq.n	8004f36 <_malloc_r+0x22>
 8004fc8:	1b9b      	subs	r3, r3, r6
 8004fca:	50a3      	str	r3, [r4, r2]
 8004fcc:	e7b3      	b.n	8004f36 <_malloc_r+0x22>
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	bf0c      	ite	eq
 8004fd4:	6032      	streq	r2, [r6, #0]
 8004fd6:	605a      	strne	r2, [r3, #4]
 8004fd8:	e7ec      	b.n	8004fb4 <_malloc_r+0xa0>
 8004fda:	4623      	mov	r3, r4
 8004fdc:	6864      	ldr	r4, [r4, #4]
 8004fde:	e7b2      	b.n	8004f46 <_malloc_r+0x32>
 8004fe0:	4634      	mov	r4, r6
 8004fe2:	6876      	ldr	r6, [r6, #4]
 8004fe4:	e7b9      	b.n	8004f5a <_malloc_r+0x46>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4638      	mov	r0, r7
 8004fec:	f000 fd6a 	bl	8005ac4 <__malloc_unlock>
 8004ff0:	e7a1      	b.n	8004f36 <_malloc_r+0x22>
 8004ff2:	6025      	str	r5, [r4, #0]
 8004ff4:	e7de      	b.n	8004fb4 <_malloc_r+0xa0>
 8004ff6:	bf00      	nop
 8004ff8:	200005fc 	.word	0x200005fc

08004ffc <__sfputc_r>:
 8004ffc:	6893      	ldr	r3, [r2, #8]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	b410      	push	{r4}
 8005004:	6093      	str	r3, [r2, #8]
 8005006:	da08      	bge.n	800501a <__sfputc_r+0x1e>
 8005008:	6994      	ldr	r4, [r2, #24]
 800500a:	42a3      	cmp	r3, r4
 800500c:	db01      	blt.n	8005012 <__sfputc_r+0x16>
 800500e:	290a      	cmp	r1, #10
 8005010:	d103      	bne.n	800501a <__sfputc_r+0x1e>
 8005012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005016:	f000 bb33 	b.w	8005680 <__swbuf_r>
 800501a:	6813      	ldr	r3, [r2, #0]
 800501c:	1c58      	adds	r0, r3, #1
 800501e:	6010      	str	r0, [r2, #0]
 8005020:	7019      	strb	r1, [r3, #0]
 8005022:	4608      	mov	r0, r1
 8005024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005028:	4770      	bx	lr

0800502a <__sfputs_r>:
 800502a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502c:	4606      	mov	r6, r0
 800502e:	460f      	mov	r7, r1
 8005030:	4614      	mov	r4, r2
 8005032:	18d5      	adds	r5, r2, r3
 8005034:	42ac      	cmp	r4, r5
 8005036:	d101      	bne.n	800503c <__sfputs_r+0x12>
 8005038:	2000      	movs	r0, #0
 800503a:	e007      	b.n	800504c <__sfputs_r+0x22>
 800503c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005040:	463a      	mov	r2, r7
 8005042:	4630      	mov	r0, r6
 8005044:	f7ff ffda 	bl	8004ffc <__sfputc_r>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d1f3      	bne.n	8005034 <__sfputs_r+0xa>
 800504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005050 <_vfiprintf_r>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	460d      	mov	r5, r1
 8005056:	b09d      	sub	sp, #116	; 0x74
 8005058:	4614      	mov	r4, r2
 800505a:	4698      	mov	r8, r3
 800505c:	4606      	mov	r6, r0
 800505e:	b118      	cbz	r0, 8005068 <_vfiprintf_r+0x18>
 8005060:	6983      	ldr	r3, [r0, #24]
 8005062:	b90b      	cbnz	r3, 8005068 <_vfiprintf_r+0x18>
 8005064:	f7ff fe96 	bl	8004d94 <__sinit>
 8005068:	4b89      	ldr	r3, [pc, #548]	; (8005290 <_vfiprintf_r+0x240>)
 800506a:	429d      	cmp	r5, r3
 800506c:	d11b      	bne.n	80050a6 <_vfiprintf_r+0x56>
 800506e:	6875      	ldr	r5, [r6, #4]
 8005070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005072:	07d9      	lsls	r1, r3, #31
 8005074:	d405      	bmi.n	8005082 <_vfiprintf_r+0x32>
 8005076:	89ab      	ldrh	r3, [r5, #12]
 8005078:	059a      	lsls	r2, r3, #22
 800507a:	d402      	bmi.n	8005082 <_vfiprintf_r+0x32>
 800507c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800507e:	f7ff ff27 	bl	8004ed0 <__retarget_lock_acquire_recursive>
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	d501      	bpl.n	800508c <_vfiprintf_r+0x3c>
 8005088:	692b      	ldr	r3, [r5, #16]
 800508a:	b9eb      	cbnz	r3, 80050c8 <_vfiprintf_r+0x78>
 800508c:	4629      	mov	r1, r5
 800508e:	4630      	mov	r0, r6
 8005090:	f000 fb5a 	bl	8005748 <__swsetup_r>
 8005094:	b1c0      	cbz	r0, 80050c8 <_vfiprintf_r+0x78>
 8005096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005098:	07dc      	lsls	r4, r3, #31
 800509a:	d50e      	bpl.n	80050ba <_vfiprintf_r+0x6a>
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	b01d      	add	sp, #116	; 0x74
 80050a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a6:	4b7b      	ldr	r3, [pc, #492]	; (8005294 <_vfiprintf_r+0x244>)
 80050a8:	429d      	cmp	r5, r3
 80050aa:	d101      	bne.n	80050b0 <_vfiprintf_r+0x60>
 80050ac:	68b5      	ldr	r5, [r6, #8]
 80050ae:	e7df      	b.n	8005070 <_vfiprintf_r+0x20>
 80050b0:	4b79      	ldr	r3, [pc, #484]	; (8005298 <_vfiprintf_r+0x248>)
 80050b2:	429d      	cmp	r5, r3
 80050b4:	bf08      	it	eq
 80050b6:	68f5      	ldreq	r5, [r6, #12]
 80050b8:	e7da      	b.n	8005070 <_vfiprintf_r+0x20>
 80050ba:	89ab      	ldrh	r3, [r5, #12]
 80050bc:	0598      	lsls	r0, r3, #22
 80050be:	d4ed      	bmi.n	800509c <_vfiprintf_r+0x4c>
 80050c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050c2:	f7ff ff06 	bl	8004ed2 <__retarget_lock_release_recursive>
 80050c6:	e7e9      	b.n	800509c <_vfiprintf_r+0x4c>
 80050c8:	2300      	movs	r3, #0
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	2320      	movs	r3, #32
 80050ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80050d6:	2330      	movs	r3, #48	; 0x30
 80050d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800529c <_vfiprintf_r+0x24c>
 80050dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050e0:	f04f 0901 	mov.w	r9, #1
 80050e4:	4623      	mov	r3, r4
 80050e6:	469a      	mov	sl, r3
 80050e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ec:	b10a      	cbz	r2, 80050f2 <_vfiprintf_r+0xa2>
 80050ee:	2a25      	cmp	r2, #37	; 0x25
 80050f0:	d1f9      	bne.n	80050e6 <_vfiprintf_r+0x96>
 80050f2:	ebba 0b04 	subs.w	fp, sl, r4
 80050f6:	d00b      	beq.n	8005110 <_vfiprintf_r+0xc0>
 80050f8:	465b      	mov	r3, fp
 80050fa:	4622      	mov	r2, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ff93 	bl	800502a <__sfputs_r>
 8005104:	3001      	adds	r0, #1
 8005106:	f000 80aa 	beq.w	800525e <_vfiprintf_r+0x20e>
 800510a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800510c:	445a      	add	r2, fp
 800510e:	9209      	str	r2, [sp, #36]	; 0x24
 8005110:	f89a 3000 	ldrb.w	r3, [sl]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80a2 	beq.w	800525e <_vfiprintf_r+0x20e>
 800511a:	2300      	movs	r3, #0
 800511c:	f04f 32ff 	mov.w	r2, #4294967295
 8005120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005124:	f10a 0a01 	add.w	sl, sl, #1
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	9307      	str	r3, [sp, #28]
 800512c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005130:	931a      	str	r3, [sp, #104]	; 0x68
 8005132:	4654      	mov	r4, sl
 8005134:	2205      	movs	r2, #5
 8005136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513a:	4858      	ldr	r0, [pc, #352]	; (800529c <_vfiprintf_r+0x24c>)
 800513c:	f7fb f850 	bl	80001e0 <memchr>
 8005140:	9a04      	ldr	r2, [sp, #16]
 8005142:	b9d8      	cbnz	r0, 800517c <_vfiprintf_r+0x12c>
 8005144:	06d1      	lsls	r1, r2, #27
 8005146:	bf44      	itt	mi
 8005148:	2320      	movmi	r3, #32
 800514a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800514e:	0713      	lsls	r3, r2, #28
 8005150:	bf44      	itt	mi
 8005152:	232b      	movmi	r3, #43	; 0x2b
 8005154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005158:	f89a 3000 	ldrb.w	r3, [sl]
 800515c:	2b2a      	cmp	r3, #42	; 0x2a
 800515e:	d015      	beq.n	800518c <_vfiprintf_r+0x13c>
 8005160:	9a07      	ldr	r2, [sp, #28]
 8005162:	4654      	mov	r4, sl
 8005164:	2000      	movs	r0, #0
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	4621      	mov	r1, r4
 800516c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005170:	3b30      	subs	r3, #48	; 0x30
 8005172:	2b09      	cmp	r3, #9
 8005174:	d94e      	bls.n	8005214 <_vfiprintf_r+0x1c4>
 8005176:	b1b0      	cbz	r0, 80051a6 <_vfiprintf_r+0x156>
 8005178:	9207      	str	r2, [sp, #28]
 800517a:	e014      	b.n	80051a6 <_vfiprintf_r+0x156>
 800517c:	eba0 0308 	sub.w	r3, r0, r8
 8005180:	fa09 f303 	lsl.w	r3, r9, r3
 8005184:	4313      	orrs	r3, r2
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	46a2      	mov	sl, r4
 800518a:	e7d2      	b.n	8005132 <_vfiprintf_r+0xe2>
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	1d19      	adds	r1, r3, #4
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	9103      	str	r1, [sp, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	bfbb      	ittet	lt
 8005198:	425b      	neglt	r3, r3
 800519a:	f042 0202 	orrlt.w	r2, r2, #2
 800519e:	9307      	strge	r3, [sp, #28]
 80051a0:	9307      	strlt	r3, [sp, #28]
 80051a2:	bfb8      	it	lt
 80051a4:	9204      	strlt	r2, [sp, #16]
 80051a6:	7823      	ldrb	r3, [r4, #0]
 80051a8:	2b2e      	cmp	r3, #46	; 0x2e
 80051aa:	d10c      	bne.n	80051c6 <_vfiprintf_r+0x176>
 80051ac:	7863      	ldrb	r3, [r4, #1]
 80051ae:	2b2a      	cmp	r3, #42	; 0x2a
 80051b0:	d135      	bne.n	800521e <_vfiprintf_r+0x1ce>
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	1d1a      	adds	r2, r3, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	9203      	str	r2, [sp, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfb8      	it	lt
 80051be:	f04f 33ff 	movlt.w	r3, #4294967295
 80051c2:	3402      	adds	r4, #2
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052ac <_vfiprintf_r+0x25c>
 80051ca:	7821      	ldrb	r1, [r4, #0]
 80051cc:	2203      	movs	r2, #3
 80051ce:	4650      	mov	r0, sl
 80051d0:	f7fb f806 	bl	80001e0 <memchr>
 80051d4:	b140      	cbz	r0, 80051e8 <_vfiprintf_r+0x198>
 80051d6:	2340      	movs	r3, #64	; 0x40
 80051d8:	eba0 000a 	sub.w	r0, r0, sl
 80051dc:	fa03 f000 	lsl.w	r0, r3, r0
 80051e0:	9b04      	ldr	r3, [sp, #16]
 80051e2:	4303      	orrs	r3, r0
 80051e4:	3401      	adds	r4, #1
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	482c      	ldr	r0, [pc, #176]	; (80052a0 <_vfiprintf_r+0x250>)
 80051ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051f2:	2206      	movs	r2, #6
 80051f4:	f7fa fff4 	bl	80001e0 <memchr>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d03f      	beq.n	800527c <_vfiprintf_r+0x22c>
 80051fc:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <_vfiprintf_r+0x254>)
 80051fe:	bb1b      	cbnz	r3, 8005248 <_vfiprintf_r+0x1f8>
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	3307      	adds	r3, #7
 8005204:	f023 0307 	bic.w	r3, r3, #7
 8005208:	3308      	adds	r3, #8
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520e:	443b      	add	r3, r7
 8005210:	9309      	str	r3, [sp, #36]	; 0x24
 8005212:	e767      	b.n	80050e4 <_vfiprintf_r+0x94>
 8005214:	fb0c 3202 	mla	r2, ip, r2, r3
 8005218:	460c      	mov	r4, r1
 800521a:	2001      	movs	r0, #1
 800521c:	e7a5      	b.n	800516a <_vfiprintf_r+0x11a>
 800521e:	2300      	movs	r3, #0
 8005220:	3401      	adds	r4, #1
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0c0a 	mov.w	ip, #10
 800522a:	4620      	mov	r0, r4
 800522c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005230:	3a30      	subs	r2, #48	; 0x30
 8005232:	2a09      	cmp	r2, #9
 8005234:	d903      	bls.n	800523e <_vfiprintf_r+0x1ee>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0c5      	beq.n	80051c6 <_vfiprintf_r+0x176>
 800523a:	9105      	str	r1, [sp, #20]
 800523c:	e7c3      	b.n	80051c6 <_vfiprintf_r+0x176>
 800523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005242:	4604      	mov	r4, r0
 8005244:	2301      	movs	r3, #1
 8005246:	e7f0      	b.n	800522a <_vfiprintf_r+0x1da>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <_vfiprintf_r+0x258>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4630      	mov	r0, r6
 8005254:	f3af 8000 	nop.w
 8005258:	4607      	mov	r7, r0
 800525a:	1c78      	adds	r0, r7, #1
 800525c:	d1d6      	bne.n	800520c <_vfiprintf_r+0x1bc>
 800525e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005260:	07d9      	lsls	r1, r3, #31
 8005262:	d405      	bmi.n	8005270 <_vfiprintf_r+0x220>
 8005264:	89ab      	ldrh	r3, [r5, #12]
 8005266:	059a      	lsls	r2, r3, #22
 8005268:	d402      	bmi.n	8005270 <_vfiprintf_r+0x220>
 800526a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800526c:	f7ff fe31 	bl	8004ed2 <__retarget_lock_release_recursive>
 8005270:	89ab      	ldrh	r3, [r5, #12]
 8005272:	065b      	lsls	r3, r3, #25
 8005274:	f53f af12 	bmi.w	800509c <_vfiprintf_r+0x4c>
 8005278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800527a:	e711      	b.n	80050a0 <_vfiprintf_r+0x50>
 800527c:	ab03      	add	r3, sp, #12
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	462a      	mov	r2, r5
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <_vfiprintf_r+0x258>)
 8005284:	a904      	add	r1, sp, #16
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f880 	bl	800538c <_printf_i>
 800528c:	e7e4      	b.n	8005258 <_vfiprintf_r+0x208>
 800528e:	bf00      	nop
 8005290:	08006470 	.word	0x08006470
 8005294:	08006490 	.word	0x08006490
 8005298:	08006450 	.word	0x08006450
 800529c:	080064b0 	.word	0x080064b0
 80052a0:	080064ba 	.word	0x080064ba
 80052a4:	00000000 	.word	0x00000000
 80052a8:	0800502b 	.word	0x0800502b
 80052ac:	080064b6 	.word	0x080064b6

080052b0 <_printf_common>:
 80052b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	4616      	mov	r6, r2
 80052b6:	4699      	mov	r9, r3
 80052b8:	688a      	ldr	r2, [r1, #8]
 80052ba:	690b      	ldr	r3, [r1, #16]
 80052bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bfb8      	it	lt
 80052c4:	4613      	movlt	r3, r2
 80052c6:	6033      	str	r3, [r6, #0]
 80052c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052cc:	4607      	mov	r7, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	b10a      	cbz	r2, 80052d6 <_printf_common+0x26>
 80052d2:	3301      	adds	r3, #1
 80052d4:	6033      	str	r3, [r6, #0]
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	0699      	lsls	r1, r3, #26
 80052da:	bf42      	ittt	mi
 80052dc:	6833      	ldrmi	r3, [r6, #0]
 80052de:	3302      	addmi	r3, #2
 80052e0:	6033      	strmi	r3, [r6, #0]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	f015 0506 	ands.w	r5, r5, #6
 80052e8:	d106      	bne.n	80052f8 <_printf_common+0x48>
 80052ea:	f104 0a19 	add.w	sl, r4, #25
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	6832      	ldr	r2, [r6, #0]
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	42ab      	cmp	r3, r5
 80052f6:	dc26      	bgt.n	8005346 <_printf_common+0x96>
 80052f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052fc:	1e13      	subs	r3, r2, #0
 80052fe:	6822      	ldr	r2, [r4, #0]
 8005300:	bf18      	it	ne
 8005302:	2301      	movne	r3, #1
 8005304:	0692      	lsls	r2, r2, #26
 8005306:	d42b      	bmi.n	8005360 <_printf_common+0xb0>
 8005308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800530c:	4649      	mov	r1, r9
 800530e:	4638      	mov	r0, r7
 8005310:	47c0      	blx	r8
 8005312:	3001      	adds	r0, #1
 8005314:	d01e      	beq.n	8005354 <_printf_common+0xa4>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	68e5      	ldr	r5, [r4, #12]
 800531a:	6832      	ldr	r2, [r6, #0]
 800531c:	f003 0306 	and.w	r3, r3, #6
 8005320:	2b04      	cmp	r3, #4
 8005322:	bf08      	it	eq
 8005324:	1aad      	subeq	r5, r5, r2
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	bf0c      	ite	eq
 800532c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005330:	2500      	movne	r5, #0
 8005332:	4293      	cmp	r3, r2
 8005334:	bfc4      	itt	gt
 8005336:	1a9b      	subgt	r3, r3, r2
 8005338:	18ed      	addgt	r5, r5, r3
 800533a:	2600      	movs	r6, #0
 800533c:	341a      	adds	r4, #26
 800533e:	42b5      	cmp	r5, r6
 8005340:	d11a      	bne.n	8005378 <_printf_common+0xc8>
 8005342:	2000      	movs	r0, #0
 8005344:	e008      	b.n	8005358 <_printf_common+0xa8>
 8005346:	2301      	movs	r3, #1
 8005348:	4652      	mov	r2, sl
 800534a:	4649      	mov	r1, r9
 800534c:	4638      	mov	r0, r7
 800534e:	47c0      	blx	r8
 8005350:	3001      	adds	r0, #1
 8005352:	d103      	bne.n	800535c <_printf_common+0xac>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	3501      	adds	r5, #1
 800535e:	e7c6      	b.n	80052ee <_printf_common+0x3e>
 8005360:	18e1      	adds	r1, r4, r3
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	2030      	movs	r0, #48	; 0x30
 8005366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800536a:	4422      	add	r2, r4
 800536c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005374:	3302      	adds	r3, #2
 8005376:	e7c7      	b.n	8005308 <_printf_common+0x58>
 8005378:	2301      	movs	r3, #1
 800537a:	4622      	mov	r2, r4
 800537c:	4649      	mov	r1, r9
 800537e:	4638      	mov	r0, r7
 8005380:	47c0      	blx	r8
 8005382:	3001      	adds	r0, #1
 8005384:	d0e6      	beq.n	8005354 <_printf_common+0xa4>
 8005386:	3601      	adds	r6, #1
 8005388:	e7d9      	b.n	800533e <_printf_common+0x8e>
	...

0800538c <_printf_i>:
 800538c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	7e0f      	ldrb	r7, [r1, #24]
 8005392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005394:	2f78      	cmp	r7, #120	; 0x78
 8005396:	4691      	mov	r9, r2
 8005398:	4680      	mov	r8, r0
 800539a:	460c      	mov	r4, r1
 800539c:	469a      	mov	sl, r3
 800539e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053a2:	d807      	bhi.n	80053b4 <_printf_i+0x28>
 80053a4:	2f62      	cmp	r7, #98	; 0x62
 80053a6:	d80a      	bhi.n	80053be <_printf_i+0x32>
 80053a8:	2f00      	cmp	r7, #0
 80053aa:	f000 80d8 	beq.w	800555e <_printf_i+0x1d2>
 80053ae:	2f58      	cmp	r7, #88	; 0x58
 80053b0:	f000 80a3 	beq.w	80054fa <_printf_i+0x16e>
 80053b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053bc:	e03a      	b.n	8005434 <_printf_i+0xa8>
 80053be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053c2:	2b15      	cmp	r3, #21
 80053c4:	d8f6      	bhi.n	80053b4 <_printf_i+0x28>
 80053c6:	a101      	add	r1, pc, #4	; (adr r1, 80053cc <_printf_i+0x40>)
 80053c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005439 	.word	0x08005439
 80053d4:	080053b5 	.word	0x080053b5
 80053d8:	080053b5 	.word	0x080053b5
 80053dc:	080053b5 	.word	0x080053b5
 80053e0:	080053b5 	.word	0x080053b5
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080053b5 	.word	0x080053b5
 80053ec:	080053b5 	.word	0x080053b5
 80053f0:	080053b5 	.word	0x080053b5
 80053f4:	080053b5 	.word	0x080053b5
 80053f8:	08005545 	.word	0x08005545
 80053fc:	08005469 	.word	0x08005469
 8005400:	08005527 	.word	0x08005527
 8005404:	080053b5 	.word	0x080053b5
 8005408:	080053b5 	.word	0x080053b5
 800540c:	08005567 	.word	0x08005567
 8005410:	080053b5 	.word	0x080053b5
 8005414:	08005469 	.word	0x08005469
 8005418:	080053b5 	.word	0x080053b5
 800541c:	080053b5 	.word	0x080053b5
 8005420:	0800552f 	.word	0x0800552f
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	602a      	str	r2, [r5, #0]
 800542c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005434:	2301      	movs	r3, #1
 8005436:	e0a3      	b.n	8005580 <_printf_i+0x1f4>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	6829      	ldr	r1, [r5, #0]
 800543c:	0606      	lsls	r6, r0, #24
 800543e:	f101 0304 	add.w	r3, r1, #4
 8005442:	d50a      	bpl.n	800545a <_printf_i+0xce>
 8005444:	680e      	ldr	r6, [r1, #0]
 8005446:	602b      	str	r3, [r5, #0]
 8005448:	2e00      	cmp	r6, #0
 800544a:	da03      	bge.n	8005454 <_printf_i+0xc8>
 800544c:	232d      	movs	r3, #45	; 0x2d
 800544e:	4276      	negs	r6, r6
 8005450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005454:	485e      	ldr	r0, [pc, #376]	; (80055d0 <_printf_i+0x244>)
 8005456:	230a      	movs	r3, #10
 8005458:	e019      	b.n	800548e <_printf_i+0x102>
 800545a:	680e      	ldr	r6, [r1, #0]
 800545c:	602b      	str	r3, [r5, #0]
 800545e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005462:	bf18      	it	ne
 8005464:	b236      	sxthne	r6, r6
 8005466:	e7ef      	b.n	8005448 <_printf_i+0xbc>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	1d19      	adds	r1, r3, #4
 800546e:	6029      	str	r1, [r5, #0]
 8005470:	0601      	lsls	r1, r0, #24
 8005472:	d501      	bpl.n	8005478 <_printf_i+0xec>
 8005474:	681e      	ldr	r6, [r3, #0]
 8005476:	e002      	b.n	800547e <_printf_i+0xf2>
 8005478:	0646      	lsls	r6, r0, #25
 800547a:	d5fb      	bpl.n	8005474 <_printf_i+0xe8>
 800547c:	881e      	ldrh	r6, [r3, #0]
 800547e:	4854      	ldr	r0, [pc, #336]	; (80055d0 <_printf_i+0x244>)
 8005480:	2f6f      	cmp	r7, #111	; 0x6f
 8005482:	bf0c      	ite	eq
 8005484:	2308      	moveq	r3, #8
 8005486:	230a      	movne	r3, #10
 8005488:	2100      	movs	r1, #0
 800548a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800548e:	6865      	ldr	r5, [r4, #4]
 8005490:	60a5      	str	r5, [r4, #8]
 8005492:	2d00      	cmp	r5, #0
 8005494:	bfa2      	ittt	ge
 8005496:	6821      	ldrge	r1, [r4, #0]
 8005498:	f021 0104 	bicge.w	r1, r1, #4
 800549c:	6021      	strge	r1, [r4, #0]
 800549e:	b90e      	cbnz	r6, 80054a4 <_printf_i+0x118>
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	d04d      	beq.n	8005540 <_printf_i+0x1b4>
 80054a4:	4615      	mov	r5, r2
 80054a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80054aa:	fb03 6711 	mls	r7, r3, r1, r6
 80054ae:	5dc7      	ldrb	r7, [r0, r7]
 80054b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054b4:	4637      	mov	r7, r6
 80054b6:	42bb      	cmp	r3, r7
 80054b8:	460e      	mov	r6, r1
 80054ba:	d9f4      	bls.n	80054a6 <_printf_i+0x11a>
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10b      	bne.n	80054d8 <_printf_i+0x14c>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	07de      	lsls	r6, r3, #31
 80054c4:	d508      	bpl.n	80054d8 <_printf_i+0x14c>
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	6861      	ldr	r1, [r4, #4]
 80054ca:	4299      	cmp	r1, r3
 80054cc:	bfde      	ittt	le
 80054ce:	2330      	movle	r3, #48	; 0x30
 80054d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054d8:	1b52      	subs	r2, r2, r5
 80054da:	6122      	str	r2, [r4, #16]
 80054dc:	f8cd a000 	str.w	sl, [sp]
 80054e0:	464b      	mov	r3, r9
 80054e2:	aa03      	add	r2, sp, #12
 80054e4:	4621      	mov	r1, r4
 80054e6:	4640      	mov	r0, r8
 80054e8:	f7ff fee2 	bl	80052b0 <_printf_common>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d14c      	bne.n	800558a <_printf_i+0x1fe>
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	b004      	add	sp, #16
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	4835      	ldr	r0, [pc, #212]	; (80055d0 <_printf_i+0x244>)
 80054fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005500:	6829      	ldr	r1, [r5, #0]
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f851 6b04 	ldr.w	r6, [r1], #4
 8005508:	6029      	str	r1, [r5, #0]
 800550a:	061d      	lsls	r5, r3, #24
 800550c:	d514      	bpl.n	8005538 <_printf_i+0x1ac>
 800550e:	07df      	lsls	r7, r3, #31
 8005510:	bf44      	itt	mi
 8005512:	f043 0320 	orrmi.w	r3, r3, #32
 8005516:	6023      	strmi	r3, [r4, #0]
 8005518:	b91e      	cbnz	r6, 8005522 <_printf_i+0x196>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f023 0320 	bic.w	r3, r3, #32
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	2310      	movs	r3, #16
 8005524:	e7b0      	b.n	8005488 <_printf_i+0xfc>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f043 0320 	orr.w	r3, r3, #32
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	2378      	movs	r3, #120	; 0x78
 8005530:	4828      	ldr	r0, [pc, #160]	; (80055d4 <_printf_i+0x248>)
 8005532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005536:	e7e3      	b.n	8005500 <_printf_i+0x174>
 8005538:	0659      	lsls	r1, r3, #25
 800553a:	bf48      	it	mi
 800553c:	b2b6      	uxthmi	r6, r6
 800553e:	e7e6      	b.n	800550e <_printf_i+0x182>
 8005540:	4615      	mov	r5, r2
 8005542:	e7bb      	b.n	80054bc <_printf_i+0x130>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	6826      	ldr	r6, [r4, #0]
 8005548:	6961      	ldr	r1, [r4, #20]
 800554a:	1d18      	adds	r0, r3, #4
 800554c:	6028      	str	r0, [r5, #0]
 800554e:	0635      	lsls	r5, r6, #24
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	d501      	bpl.n	8005558 <_printf_i+0x1cc>
 8005554:	6019      	str	r1, [r3, #0]
 8005556:	e002      	b.n	800555e <_printf_i+0x1d2>
 8005558:	0670      	lsls	r0, r6, #25
 800555a:	d5fb      	bpl.n	8005554 <_printf_i+0x1c8>
 800555c:	8019      	strh	r1, [r3, #0]
 800555e:	2300      	movs	r3, #0
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	4615      	mov	r5, r2
 8005564:	e7ba      	b.n	80054dc <_printf_i+0x150>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	1d1a      	adds	r2, r3, #4
 800556a:	602a      	str	r2, [r5, #0]
 800556c:	681d      	ldr	r5, [r3, #0]
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	2100      	movs	r1, #0
 8005572:	4628      	mov	r0, r5
 8005574:	f7fa fe34 	bl	80001e0 <memchr>
 8005578:	b108      	cbz	r0, 800557e <_printf_i+0x1f2>
 800557a:	1b40      	subs	r0, r0, r5
 800557c:	6060      	str	r0, [r4, #4]
 800557e:	6863      	ldr	r3, [r4, #4]
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	2300      	movs	r3, #0
 8005584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005588:	e7a8      	b.n	80054dc <_printf_i+0x150>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	462a      	mov	r2, r5
 800558e:	4649      	mov	r1, r9
 8005590:	4640      	mov	r0, r8
 8005592:	47d0      	blx	sl
 8005594:	3001      	adds	r0, #1
 8005596:	d0ab      	beq.n	80054f0 <_printf_i+0x164>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	079b      	lsls	r3, r3, #30
 800559c:	d413      	bmi.n	80055c6 <_printf_i+0x23a>
 800559e:	68e0      	ldr	r0, [r4, #12]
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	4298      	cmp	r0, r3
 80055a4:	bfb8      	it	lt
 80055a6:	4618      	movlt	r0, r3
 80055a8:	e7a4      	b.n	80054f4 <_printf_i+0x168>
 80055aa:	2301      	movs	r3, #1
 80055ac:	4632      	mov	r2, r6
 80055ae:	4649      	mov	r1, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	47d0      	blx	sl
 80055b4:	3001      	adds	r0, #1
 80055b6:	d09b      	beq.n	80054f0 <_printf_i+0x164>
 80055b8:	3501      	adds	r5, #1
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	9903      	ldr	r1, [sp, #12]
 80055be:	1a5b      	subs	r3, r3, r1
 80055c0:	42ab      	cmp	r3, r5
 80055c2:	dcf2      	bgt.n	80055aa <_printf_i+0x21e>
 80055c4:	e7eb      	b.n	800559e <_printf_i+0x212>
 80055c6:	2500      	movs	r5, #0
 80055c8:	f104 0619 	add.w	r6, r4, #25
 80055cc:	e7f5      	b.n	80055ba <_printf_i+0x22e>
 80055ce:	bf00      	nop
 80055d0:	080064c1 	.word	0x080064c1
 80055d4:	080064d2 	.word	0x080064d2

080055d8 <_sbrk_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d06      	ldr	r5, [pc, #24]	; (80055f4 <_sbrk_r+0x1c>)
 80055dc:	2300      	movs	r3, #0
 80055de:	4604      	mov	r4, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	f7fc fcea 	bl	8001fbc <_sbrk>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_sbrk_r+0x1a>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_sbrk_r+0x1a>
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	20000604 	.word	0x20000604

080055f8 <__sread>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	460c      	mov	r4, r1
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	f000 fab2 	bl	8005b68 <_read_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	bfab      	itete	ge
 8005608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800560a:	89a3      	ldrhlt	r3, [r4, #12]
 800560c:	181b      	addge	r3, r3, r0
 800560e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005612:	bfac      	ite	ge
 8005614:	6563      	strge	r3, [r4, #84]	; 0x54
 8005616:	81a3      	strhlt	r3, [r4, #12]
 8005618:	bd10      	pop	{r4, pc}

0800561a <__swrite>:
 800561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	461f      	mov	r7, r3
 8005620:	898b      	ldrh	r3, [r1, #12]
 8005622:	05db      	lsls	r3, r3, #23
 8005624:	4605      	mov	r5, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4616      	mov	r6, r2
 800562a:	d505      	bpl.n	8005638 <__swrite+0x1e>
 800562c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005630:	2302      	movs	r3, #2
 8005632:	2200      	movs	r2, #0
 8005634:	f000 f9c8 	bl	80059c8 <_lseek_r>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	4628      	mov	r0, r5
 800564a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	f000 b869 	b.w	8005724 <_write_r>

08005652 <__sseek>:
 8005652:	b510      	push	{r4, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565a:	f000 f9b5 	bl	80059c8 <_lseek_r>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	bf15      	itete	ne
 8005664:	6560      	strne	r0, [r4, #84]	; 0x54
 8005666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800566a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800566e:	81a3      	strheq	r3, [r4, #12]
 8005670:	bf18      	it	ne
 8005672:	81a3      	strhne	r3, [r4, #12]
 8005674:	bd10      	pop	{r4, pc}

08005676 <__sclose>:
 8005676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567a:	f000 b8d3 	b.w	8005824 <_close_r>
	...

08005680 <__swbuf_r>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	460e      	mov	r6, r1
 8005684:	4614      	mov	r4, r2
 8005686:	4605      	mov	r5, r0
 8005688:	b118      	cbz	r0, 8005692 <__swbuf_r+0x12>
 800568a:	6983      	ldr	r3, [r0, #24]
 800568c:	b90b      	cbnz	r3, 8005692 <__swbuf_r+0x12>
 800568e:	f7ff fb81 	bl	8004d94 <__sinit>
 8005692:	4b21      	ldr	r3, [pc, #132]	; (8005718 <__swbuf_r+0x98>)
 8005694:	429c      	cmp	r4, r3
 8005696:	d12b      	bne.n	80056f0 <__swbuf_r+0x70>
 8005698:	686c      	ldr	r4, [r5, #4]
 800569a:	69a3      	ldr	r3, [r4, #24]
 800569c:	60a3      	str	r3, [r4, #8]
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	071a      	lsls	r2, r3, #28
 80056a2:	d52f      	bpl.n	8005704 <__swbuf_r+0x84>
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	b36b      	cbz	r3, 8005704 <__swbuf_r+0x84>
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	6820      	ldr	r0, [r4, #0]
 80056ac:	1ac0      	subs	r0, r0, r3
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	b2f6      	uxtb	r6, r6
 80056b2:	4283      	cmp	r3, r0
 80056b4:	4637      	mov	r7, r6
 80056b6:	dc04      	bgt.n	80056c2 <__swbuf_r+0x42>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 f948 	bl	8005950 <_fflush_r>
 80056c0:	bb30      	cbnz	r0, 8005710 <__swbuf_r+0x90>
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	701e      	strb	r6, [r3, #0]
 80056d0:	6963      	ldr	r3, [r4, #20]
 80056d2:	3001      	adds	r0, #1
 80056d4:	4283      	cmp	r3, r0
 80056d6:	d004      	beq.n	80056e2 <__swbuf_r+0x62>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d506      	bpl.n	80056ec <__swbuf_r+0x6c>
 80056de:	2e0a      	cmp	r6, #10
 80056e0:	d104      	bne.n	80056ec <__swbuf_r+0x6c>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 f933 	bl	8005950 <_fflush_r>
 80056ea:	b988      	cbnz	r0, 8005710 <__swbuf_r+0x90>
 80056ec:	4638      	mov	r0, r7
 80056ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <__swbuf_r+0x9c>)
 80056f2:	429c      	cmp	r4, r3
 80056f4:	d101      	bne.n	80056fa <__swbuf_r+0x7a>
 80056f6:	68ac      	ldr	r4, [r5, #8]
 80056f8:	e7cf      	b.n	800569a <__swbuf_r+0x1a>
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <__swbuf_r+0xa0>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	bf08      	it	eq
 8005700:	68ec      	ldreq	r4, [r5, #12]
 8005702:	e7ca      	b.n	800569a <__swbuf_r+0x1a>
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f81e 	bl	8005748 <__swsetup_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	d0cb      	beq.n	80056a8 <__swbuf_r+0x28>
 8005710:	f04f 37ff 	mov.w	r7, #4294967295
 8005714:	e7ea      	b.n	80056ec <__swbuf_r+0x6c>
 8005716:	bf00      	nop
 8005718:	08006470 	.word	0x08006470
 800571c:	08006490 	.word	0x08006490
 8005720:	08006450 	.word	0x08006450

08005724 <_write_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	; (8005744 <_write_r+0x20>)
 8005728:	4604      	mov	r4, r0
 800572a:	4608      	mov	r0, r1
 800572c:	4611      	mov	r1, r2
 800572e:	2200      	movs	r2, #0
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	f7fc fbf1 	bl	8001f1a <_write>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_write_r+0x1e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_write_r+0x1e>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000604 	.word	0x20000604

08005748 <__swsetup_r>:
 8005748:	4b32      	ldr	r3, [pc, #200]	; (8005814 <__swsetup_r+0xcc>)
 800574a:	b570      	push	{r4, r5, r6, lr}
 800574c:	681d      	ldr	r5, [r3, #0]
 800574e:	4606      	mov	r6, r0
 8005750:	460c      	mov	r4, r1
 8005752:	b125      	cbz	r5, 800575e <__swsetup_r+0x16>
 8005754:	69ab      	ldr	r3, [r5, #24]
 8005756:	b913      	cbnz	r3, 800575e <__swsetup_r+0x16>
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fb1b 	bl	8004d94 <__sinit>
 800575e:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <__swsetup_r+0xd0>)
 8005760:	429c      	cmp	r4, r3
 8005762:	d10f      	bne.n	8005784 <__swsetup_r+0x3c>
 8005764:	686c      	ldr	r4, [r5, #4]
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800576c:	0719      	lsls	r1, r3, #28
 800576e:	d42c      	bmi.n	80057ca <__swsetup_r+0x82>
 8005770:	06dd      	lsls	r5, r3, #27
 8005772:	d411      	bmi.n	8005798 <__swsetup_r+0x50>
 8005774:	2309      	movs	r3, #9
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	e03e      	b.n	8005802 <__swsetup_r+0xba>
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <__swsetup_r+0xd4>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d101      	bne.n	800578e <__swsetup_r+0x46>
 800578a:	68ac      	ldr	r4, [r5, #8]
 800578c:	e7eb      	b.n	8005766 <__swsetup_r+0x1e>
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <__swsetup_r+0xd8>)
 8005790:	429c      	cmp	r4, r3
 8005792:	bf08      	it	eq
 8005794:	68ec      	ldreq	r4, [r5, #12]
 8005796:	e7e6      	b.n	8005766 <__swsetup_r+0x1e>
 8005798:	0758      	lsls	r0, r3, #29
 800579a:	d512      	bpl.n	80057c2 <__swsetup_r+0x7a>
 800579c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800579e:	b141      	cbz	r1, 80057b2 <__swsetup_r+0x6a>
 80057a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a4:	4299      	cmp	r1, r3
 80057a6:	d002      	beq.n	80057ae <__swsetup_r+0x66>
 80057a8:	4630      	mov	r0, r6
 80057aa:	f000 f991 	bl	8005ad0 <_free_r>
 80057ae:	2300      	movs	r3, #0
 80057b0:	6363      	str	r3, [r4, #52]	; 0x34
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	2300      	movs	r3, #0
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f043 0308 	orr.w	r3, r3, #8
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	6923      	ldr	r3, [r4, #16]
 80057cc:	b94b      	cbnz	r3, 80057e2 <__swsetup_r+0x9a>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d8:	d003      	beq.n	80057e2 <__swsetup_r+0x9a>
 80057da:	4621      	mov	r1, r4
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 f92b 	bl	8005a38 <__smakebuf_r>
 80057e2:	89a0      	ldrh	r0, [r4, #12]
 80057e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057e8:	f010 0301 	ands.w	r3, r0, #1
 80057ec:	d00a      	beq.n	8005804 <__swsetup_r+0xbc>
 80057ee:	2300      	movs	r3, #0
 80057f0:	60a3      	str	r3, [r4, #8]
 80057f2:	6963      	ldr	r3, [r4, #20]
 80057f4:	425b      	negs	r3, r3
 80057f6:	61a3      	str	r3, [r4, #24]
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	b943      	cbnz	r3, 800580e <__swsetup_r+0xc6>
 80057fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005800:	d1ba      	bne.n	8005778 <__swsetup_r+0x30>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	0781      	lsls	r1, r0, #30
 8005806:	bf58      	it	pl
 8005808:	6963      	ldrpl	r3, [r4, #20]
 800580a:	60a3      	str	r3, [r4, #8]
 800580c:	e7f4      	b.n	80057f8 <__swsetup_r+0xb0>
 800580e:	2000      	movs	r0, #0
 8005810:	e7f7      	b.n	8005802 <__swsetup_r+0xba>
 8005812:	bf00      	nop
 8005814:	20000040 	.word	0x20000040
 8005818:	08006470 	.word	0x08006470
 800581c:	08006490 	.word	0x08006490
 8005820:	08006450 	.word	0x08006450

08005824 <_close_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d06      	ldr	r5, [pc, #24]	; (8005840 <_close_r+0x1c>)
 8005828:	2300      	movs	r3, #0
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	f7fc fb8f 	bl	8001f52 <_close>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_close_r+0x1a>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_close_r+0x1a>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20000604 	.word	0x20000604

08005844 <__sflush_r>:
 8005844:	898a      	ldrh	r2, [r1, #12]
 8005846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	4605      	mov	r5, r0
 800584c:	0710      	lsls	r0, r2, #28
 800584e:	460c      	mov	r4, r1
 8005850:	d458      	bmi.n	8005904 <__sflush_r+0xc0>
 8005852:	684b      	ldr	r3, [r1, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dc05      	bgt.n	8005864 <__sflush_r+0x20>
 8005858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	dc02      	bgt.n	8005864 <__sflush_r+0x20>
 800585e:	2000      	movs	r0, #0
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005866:	2e00      	cmp	r6, #0
 8005868:	d0f9      	beq.n	800585e <__sflush_r+0x1a>
 800586a:	2300      	movs	r3, #0
 800586c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005870:	682f      	ldr	r7, [r5, #0]
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	d032      	beq.n	80058dc <__sflush_r+0x98>
 8005876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	075a      	lsls	r2, r3, #29
 800587c:	d505      	bpl.n	800588a <__sflush_r+0x46>
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005884:	b10b      	cbz	r3, 800588a <__sflush_r+0x46>
 8005886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005888:	1ac0      	subs	r0, r0, r3
 800588a:	2300      	movs	r3, #0
 800588c:	4602      	mov	r2, r0
 800588e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005890:	6a21      	ldr	r1, [r4, #32]
 8005892:	4628      	mov	r0, r5
 8005894:	47b0      	blx	r6
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	d106      	bne.n	80058aa <__sflush_r+0x66>
 800589c:	6829      	ldr	r1, [r5, #0]
 800589e:	291d      	cmp	r1, #29
 80058a0:	d82c      	bhi.n	80058fc <__sflush_r+0xb8>
 80058a2:	4a2a      	ldr	r2, [pc, #168]	; (800594c <__sflush_r+0x108>)
 80058a4:	40ca      	lsrs	r2, r1
 80058a6:	07d6      	lsls	r6, r2, #31
 80058a8:	d528      	bpl.n	80058fc <__sflush_r+0xb8>
 80058aa:	2200      	movs	r2, #0
 80058ac:	6062      	str	r2, [r4, #4]
 80058ae:	04d9      	lsls	r1, r3, #19
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	6022      	str	r2, [r4, #0]
 80058b4:	d504      	bpl.n	80058c0 <__sflush_r+0x7c>
 80058b6:	1c42      	adds	r2, r0, #1
 80058b8:	d101      	bne.n	80058be <__sflush_r+0x7a>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	b903      	cbnz	r3, 80058c0 <__sflush_r+0x7c>
 80058be:	6560      	str	r0, [r4, #84]	; 0x54
 80058c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c2:	602f      	str	r7, [r5, #0]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d0ca      	beq.n	800585e <__sflush_r+0x1a>
 80058c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <__sflush_r+0x92>
 80058d0:	4628      	mov	r0, r5
 80058d2:	f000 f8fd 	bl	8005ad0 <_free_r>
 80058d6:	2000      	movs	r0, #0
 80058d8:	6360      	str	r0, [r4, #52]	; 0x34
 80058da:	e7c1      	b.n	8005860 <__sflush_r+0x1c>
 80058dc:	6a21      	ldr	r1, [r4, #32]
 80058de:	2301      	movs	r3, #1
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b0      	blx	r6
 80058e4:	1c41      	adds	r1, r0, #1
 80058e6:	d1c7      	bne.n	8005878 <__sflush_r+0x34>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c4      	beq.n	8005878 <__sflush_r+0x34>
 80058ee:	2b1d      	cmp	r3, #29
 80058f0:	d001      	beq.n	80058f6 <__sflush_r+0xb2>
 80058f2:	2b16      	cmp	r3, #22
 80058f4:	d101      	bne.n	80058fa <__sflush_r+0xb6>
 80058f6:	602f      	str	r7, [r5, #0]
 80058f8:	e7b1      	b.n	800585e <__sflush_r+0x1a>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	e7ad      	b.n	8005860 <__sflush_r+0x1c>
 8005904:	690f      	ldr	r7, [r1, #16]
 8005906:	2f00      	cmp	r7, #0
 8005908:	d0a9      	beq.n	800585e <__sflush_r+0x1a>
 800590a:	0793      	lsls	r3, r2, #30
 800590c:	680e      	ldr	r6, [r1, #0]
 800590e:	bf08      	it	eq
 8005910:	694b      	ldreq	r3, [r1, #20]
 8005912:	600f      	str	r7, [r1, #0]
 8005914:	bf18      	it	ne
 8005916:	2300      	movne	r3, #0
 8005918:	eba6 0807 	sub.w	r8, r6, r7
 800591c:	608b      	str	r3, [r1, #8]
 800591e:	f1b8 0f00 	cmp.w	r8, #0
 8005922:	dd9c      	ble.n	800585e <__sflush_r+0x1a>
 8005924:	6a21      	ldr	r1, [r4, #32]
 8005926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005928:	4643      	mov	r3, r8
 800592a:	463a      	mov	r2, r7
 800592c:	4628      	mov	r0, r5
 800592e:	47b0      	blx	r6
 8005930:	2800      	cmp	r0, #0
 8005932:	dc06      	bgt.n	8005942 <__sflush_r+0xfe>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	e78e      	b.n	8005860 <__sflush_r+0x1c>
 8005942:	4407      	add	r7, r0
 8005944:	eba8 0800 	sub.w	r8, r8, r0
 8005948:	e7e9      	b.n	800591e <__sflush_r+0xda>
 800594a:	bf00      	nop
 800594c:	20400001 	.word	0x20400001

08005950 <_fflush_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	4605      	mov	r5, r0
 8005956:	460c      	mov	r4, r1
 8005958:	b913      	cbnz	r3, 8005960 <_fflush_r+0x10>
 800595a:	2500      	movs	r5, #0
 800595c:	4628      	mov	r0, r5
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	b118      	cbz	r0, 800596a <_fflush_r+0x1a>
 8005962:	6983      	ldr	r3, [r0, #24]
 8005964:	b90b      	cbnz	r3, 800596a <_fflush_r+0x1a>
 8005966:	f7ff fa15 	bl	8004d94 <__sinit>
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <_fflush_r+0x6c>)
 800596c:	429c      	cmp	r4, r3
 800596e:	d11b      	bne.n	80059a8 <_fflush_r+0x58>
 8005970:	686c      	ldr	r4, [r5, #4]
 8005972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0ef      	beq.n	800595a <_fflush_r+0xa>
 800597a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800597c:	07d0      	lsls	r0, r2, #31
 800597e:	d404      	bmi.n	800598a <_fflush_r+0x3a>
 8005980:	0599      	lsls	r1, r3, #22
 8005982:	d402      	bmi.n	800598a <_fflush_r+0x3a>
 8005984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005986:	f7ff faa3 	bl	8004ed0 <__retarget_lock_acquire_recursive>
 800598a:	4628      	mov	r0, r5
 800598c:	4621      	mov	r1, r4
 800598e:	f7ff ff59 	bl	8005844 <__sflush_r>
 8005992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005994:	07da      	lsls	r2, r3, #31
 8005996:	4605      	mov	r5, r0
 8005998:	d4e0      	bmi.n	800595c <_fflush_r+0xc>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	059b      	lsls	r3, r3, #22
 800599e:	d4dd      	bmi.n	800595c <_fflush_r+0xc>
 80059a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a2:	f7ff fa96 	bl	8004ed2 <__retarget_lock_release_recursive>
 80059a6:	e7d9      	b.n	800595c <_fflush_r+0xc>
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <_fflush_r+0x70>)
 80059aa:	429c      	cmp	r4, r3
 80059ac:	d101      	bne.n	80059b2 <_fflush_r+0x62>
 80059ae:	68ac      	ldr	r4, [r5, #8]
 80059b0:	e7df      	b.n	8005972 <_fflush_r+0x22>
 80059b2:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <_fflush_r+0x74>)
 80059b4:	429c      	cmp	r4, r3
 80059b6:	bf08      	it	eq
 80059b8:	68ec      	ldreq	r4, [r5, #12]
 80059ba:	e7da      	b.n	8005972 <_fflush_r+0x22>
 80059bc:	08006470 	.word	0x08006470
 80059c0:	08006490 	.word	0x08006490
 80059c4:	08006450 	.word	0x08006450

080059c8 <_lseek_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	; (80059e8 <_lseek_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fc fae2 	bl	8001fa0 <_lseek>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_lseek_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_lseek_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	20000604 	.word	0x20000604

080059ec <__swhatbuf_r>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	460e      	mov	r6, r1
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2900      	cmp	r1, #0
 80059f6:	b096      	sub	sp, #88	; 0x58
 80059f8:	4614      	mov	r4, r2
 80059fa:	461d      	mov	r5, r3
 80059fc:	da08      	bge.n	8005a10 <__swhatbuf_r+0x24>
 80059fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	602a      	str	r2, [r5, #0]
 8005a06:	061a      	lsls	r2, r3, #24
 8005a08:	d410      	bmi.n	8005a2c <__swhatbuf_r+0x40>
 8005a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a0e:	e00e      	b.n	8005a2e <__swhatbuf_r+0x42>
 8005a10:	466a      	mov	r2, sp
 8005a12:	f000 f8bb 	bl	8005b8c <_fstat_r>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	dbf1      	blt.n	80059fe <__swhatbuf_r+0x12>
 8005a1a:	9a01      	ldr	r2, [sp, #4]
 8005a1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a24:	425a      	negs	r2, r3
 8005a26:	415a      	adcs	r2, r3
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	e7ee      	b.n	8005a0a <__swhatbuf_r+0x1e>
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	2000      	movs	r0, #0
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	b016      	add	sp, #88	; 0x58
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a38 <__smakebuf_r>:
 8005a38:	898b      	ldrh	r3, [r1, #12]
 8005a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a3c:	079d      	lsls	r5, r3, #30
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	d507      	bpl.n	8005a54 <__smakebuf_r+0x1c>
 8005a44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	6163      	str	r3, [r4, #20]
 8005a50:	b002      	add	sp, #8
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	ab01      	add	r3, sp, #4
 8005a56:	466a      	mov	r2, sp
 8005a58:	f7ff ffc8 	bl	80059ec <__swhatbuf_r>
 8005a5c:	9900      	ldr	r1, [sp, #0]
 8005a5e:	4605      	mov	r5, r0
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff fa57 	bl	8004f14 <_malloc_r>
 8005a66:	b948      	cbnz	r0, 8005a7c <__smakebuf_r+0x44>
 8005a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6c:	059a      	lsls	r2, r3, #22
 8005a6e:	d4ef      	bmi.n	8005a50 <__smakebuf_r+0x18>
 8005a70:	f023 0303 	bic.w	r3, r3, #3
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e7e3      	b.n	8005a44 <__smakebuf_r+0xc>
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <__smakebuf_r+0x7c>)
 8005a7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	6020      	str	r0, [r4, #0]
 8005a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	6163      	str	r3, [r4, #20]
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	6120      	str	r0, [r4, #16]
 8005a92:	b15b      	cbz	r3, 8005aac <__smakebuf_r+0x74>
 8005a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 f889 	bl	8005bb0 <_isatty_r>
 8005a9e:	b128      	cbz	r0, 8005aac <__smakebuf_r+0x74>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	89a0      	ldrh	r0, [r4, #12]
 8005aae:	4305      	orrs	r5, r0
 8005ab0:	81a5      	strh	r5, [r4, #12]
 8005ab2:	e7cd      	b.n	8005a50 <__smakebuf_r+0x18>
 8005ab4:	08004d2d 	.word	0x08004d2d

08005ab8 <__malloc_lock>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__malloc_lock+0x8>)
 8005aba:	f7ff ba09 	b.w	8004ed0 <__retarget_lock_acquire_recursive>
 8005abe:	bf00      	nop
 8005ac0:	200005f8 	.word	0x200005f8

08005ac4 <__malloc_unlock>:
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <__malloc_unlock+0x8>)
 8005ac6:	f7ff ba04 	b.w	8004ed2 <__retarget_lock_release_recursive>
 8005aca:	bf00      	nop
 8005acc:	200005f8 	.word	0x200005f8

08005ad0 <_free_r>:
 8005ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ad2:	2900      	cmp	r1, #0
 8005ad4:	d044      	beq.n	8005b60 <_free_r+0x90>
 8005ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ada:	9001      	str	r0, [sp, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f1a1 0404 	sub.w	r4, r1, #4
 8005ae2:	bfb8      	it	lt
 8005ae4:	18e4      	addlt	r4, r4, r3
 8005ae6:	f7ff ffe7 	bl	8005ab8 <__malloc_lock>
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <_free_r+0x94>)
 8005aec:	9801      	ldr	r0, [sp, #4]
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	b933      	cbnz	r3, 8005b00 <_free_r+0x30>
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	6014      	str	r4, [r2, #0]
 8005af6:	b003      	add	sp, #12
 8005af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005afc:	f7ff bfe2 	b.w	8005ac4 <__malloc_unlock>
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d908      	bls.n	8005b16 <_free_r+0x46>
 8005b04:	6825      	ldr	r5, [r4, #0]
 8005b06:	1961      	adds	r1, r4, r5
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	bf01      	itttt	eq
 8005b0c:	6819      	ldreq	r1, [r3, #0]
 8005b0e:	685b      	ldreq	r3, [r3, #4]
 8005b10:	1949      	addeq	r1, r1, r5
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	e7ed      	b.n	8005af2 <_free_r+0x22>
 8005b16:	461a      	mov	r2, r3
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	b10b      	cbz	r3, 8005b20 <_free_r+0x50>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d9fa      	bls.n	8005b16 <_free_r+0x46>
 8005b20:	6811      	ldr	r1, [r2, #0]
 8005b22:	1855      	adds	r5, r2, r1
 8005b24:	42a5      	cmp	r5, r4
 8005b26:	d10b      	bne.n	8005b40 <_free_r+0x70>
 8005b28:	6824      	ldr	r4, [r4, #0]
 8005b2a:	4421      	add	r1, r4
 8005b2c:	1854      	adds	r4, r2, r1
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	6011      	str	r1, [r2, #0]
 8005b32:	d1e0      	bne.n	8005af6 <_free_r+0x26>
 8005b34:	681c      	ldr	r4, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	6053      	str	r3, [r2, #4]
 8005b3a:	4421      	add	r1, r4
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	e7da      	b.n	8005af6 <_free_r+0x26>
 8005b40:	d902      	bls.n	8005b48 <_free_r+0x78>
 8005b42:	230c      	movs	r3, #12
 8005b44:	6003      	str	r3, [r0, #0]
 8005b46:	e7d6      	b.n	8005af6 <_free_r+0x26>
 8005b48:	6825      	ldr	r5, [r4, #0]
 8005b4a:	1961      	adds	r1, r4, r5
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf04      	itt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	6063      	str	r3, [r4, #4]
 8005b56:	bf04      	itt	eq
 8005b58:	1949      	addeq	r1, r1, r5
 8005b5a:	6021      	streq	r1, [r4, #0]
 8005b5c:	6054      	str	r4, [r2, #4]
 8005b5e:	e7ca      	b.n	8005af6 <_free_r+0x26>
 8005b60:	b003      	add	sp, #12
 8005b62:	bd30      	pop	{r4, r5, pc}
 8005b64:	200005fc 	.word	0x200005fc

08005b68 <_read_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	; (8005b88 <_read_r+0x20>)
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	4608      	mov	r0, r1
 8005b70:	4611      	mov	r1, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f7fc f9b2 	bl	8001ee0 <_read>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_read_r+0x1e>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_read_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20000604 	.word	0x20000604

08005b8c <_fstat_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d07      	ldr	r5, [pc, #28]	; (8005bac <_fstat_r+0x20>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	f7fc f9e6 	bl	8001f6a <_fstat>
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	d102      	bne.n	8005ba8 <_fstat_r+0x1c>
 8005ba2:	682b      	ldr	r3, [r5, #0]
 8005ba4:	b103      	cbz	r3, 8005ba8 <_fstat_r+0x1c>
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	bd38      	pop	{r3, r4, r5, pc}
 8005baa:	bf00      	nop
 8005bac:	20000604 	.word	0x20000604

08005bb0 <_isatty_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d06      	ldr	r5, [pc, #24]	; (8005bcc <_isatty_r+0x1c>)
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	f7fc f9e5 	bl	8001f8a <_isatty>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_isatty_r+0x1a>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_isatty_r+0x1a>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20000604 	.word	0x20000604

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
